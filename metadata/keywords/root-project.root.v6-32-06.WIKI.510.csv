id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/root/html604/TMVA__MethodFisher.html:16978,Modifiability,Config,Configurable,16978,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); voidGetCov_BetweenClass(); voidGetCov_Full(); voidGetCov_WithinClass(); voidGetDiscrimPower(); voidGetFisherCoeff(); voidGetMean(); vir",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:17424,Modifiability,Config,Configurable,17424,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); voidGetCov_BetweenClass(); voidGetCov_Full(); voidGetCov_WithinClass(); voidGetDiscrimPower(); voidGetFisherCoeff(); voidGetMean(); vir",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:19132,Modifiability,variab,variables,19132,"her::EFisherMethodkMahalanobis; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TMatrixD*fBetwbetween-class matrix; TMatrixD*fCovfull covariance matrix; vector<Double_t>*fDiscrimPowdiscriminating power; Double_tfF0offset; vector<Double_t>*fFisherCoeffFisher coefficients; TMVA::MethodFisher::EFisherMethodfFisherMethodFisher or Mahalanobis; TMatrixD*fMeanMatx; Double_tfSumOfWeightsBsum-of-weights for background training events; Double_tfSumOfWeightsSsum-of-weights for signal training events; TStringfTheMethodFisher or Mahalanobis; TMatrixD*fWithwithin-class matrix. Class Charts. Inheritance; Inherited Members; Includes; Librarie",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:19321,Modifiability,variab,variable,19321,"her::EFisherMethodkMahalanobis; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TMatrixD*fBetwbetween-class matrix; TMatrixD*fCovfull covariance matrix; vector<Double_t>*fDiscrimPowdiscriminating power; Double_tfF0offset; vector<Double_t>*fFisherCoeffFisher coefficients; TMVA::MethodFisher::EFisherMethodfFisherMethodFisher or Mahalanobis; TMatrixD*fMeanMatx; Double_tfSumOfWeightsBsum-of-weights for background training events; Double_tfSumOfWeightsSsum-of-weights for signal training events; TStringfTheMethodFisher or Mahalanobis; TMatrixD*fWithwithin-class matrix. Class Charts. Inheritance; Inherited Members; Includes; Librarie",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:20267,Modifiability,Inherit,Inheritance,20267,"Nbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TMatrixD*fBetwbetween-class matrix; TMatrixD*fCovfull covariance matrix; vector<Double_t>*fDiscrimPowdiscriminating power; Double_tfF0offset; vector<Double_t>*fFisherCoeffFisher coefficients; TMVA::MethodFisher::EFisherMethodfFisherMethodFisher or Mahalanobis; TMatrixD*fMeanMatx; Double_tfSumOfWeightsBsum-of-weights for background training events; Double_tfSumOfWeightsSsum-of-weights for signal training events; TStringfTheMethodFisher or Mahalanobis; TMatrixD*fWithwithin-class matrix. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodFisher(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""Fisher"", TDirectory* theTargetDir = 0); standard constructor for the ""Fisher"". MethodFisher(TMVA::DataSetInfo& dsi, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. void Init( void ); default initialization called by all constructors. void DeclareOptions(). MethodFisher options:; format and syntax of option string: ""type""; where type is ""Fisher"" or ""Mahalanobis"". void ProcessOptions(); process user options. ~MethodFisher( void ); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); Fisher can only handle classification with 2 classes. void Train( void ); computation of Fisher coefficients by series of matrix operations. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns the Fisher value (no fix",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:20280,Modifiability,Inherit,Inherited,20280,"Nbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TMatrixD*fBetwbetween-class matrix; TMatrixD*fCovfull covariance matrix; vector<Double_t>*fDiscrimPowdiscriminating power; Double_tfF0offset; vector<Double_t>*fFisherCoeffFisher coefficients; TMVA::MethodFisher::EFisherMethodfFisherMethodFisher or Mahalanobis; TMatrixD*fMeanMatx; Double_tfSumOfWeightsBsum-of-weights for background training events; Double_tfSumOfWeightsSsum-of-weights for signal training events; TStringfTheMethodFisher or Mahalanobis; TMatrixD*fWithwithin-class matrix. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodFisher(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""Fisher"", TDirectory* theTargetDir = 0); standard constructor for the ""Fisher"". MethodFisher(TMVA::DataSetInfo& dsi, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. void Init( void ); default initialization called by all constructors. void DeclareOptions(). MethodFisher options:; format and syntax of option string: ""type""; where type is ""Fisher"" or ""Mahalanobis"". void ProcessOptions(); process user options. ~MethodFisher( void ); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); Fisher can only handle classification with 2 classes. void Train( void ); computation of Fisher coefficients by series of matrix operations. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns the Fisher value (no fix",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:21435,Modifiability,variab,variables,21435,"st TString& theOption = ""Fisher"", TDirectory* theTargetDir = 0); standard constructor for the ""Fisher"". MethodFisher(TMVA::DataSetInfo& dsi, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. void Init( void ); default initialization called by all constructors. void DeclareOptions(). MethodFisher options:; format and syntax of option string: ""type""; where type is ""Fisher"" or ""Mahalanobis"". void ProcessOptions(); process user options. ~MethodFisher( void ); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); Fisher can only handle classification with 2 classes. void Train( void ); computation of Fisher coefficients by series of matrix operations. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns the Fisher value (no fixed range). void InitMatrices( void ); initializaton method; creates global matrices and vectors. void GetMean( void ); compute mean values of variables in each sample, and the overall means. void GetCov_WithinClass( void ); the matrix of covariance 'within class' reflects the dispersion of the; events relative to the center of gravity of their own class. void GetCov_BetweenClass( void ); the matrix of covariance 'between class' reflects the dispersion of the; events of a class relative to the global center of gravity of all the class; hence the separation between classes. void GetCov_Full( void ); compute full covariance matrix from sum of within and between matrices. void GetFisherCoeff( void ); Fisher = Sum { [coeff]*[variables] }. let Xs be the array of the mean values of variables for signal evts; let Xb be the array of the mean values of variables for backgd evts; let InvWith be the inverse matrix of the 'within class' correlation matrix. then the array of Fisher coefficients is; [coeff] =sqrt(fNsig*fNbgd)/fNevt*transpose{Xs-Xb}*InvWith. void GetDiscrimPower( void ); computation of discrimination power indicator for each",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:22023,Modifiability,variab,variables,22023,"e type, UInt_t numberClasses, UInt_t numberTargets); Fisher can only handle classification with 2 classes. void Train( void ); computation of Fisher coefficients by series of matrix operations. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns the Fisher value (no fixed range). void InitMatrices( void ); initializaton method; creates global matrices and vectors. void GetMean( void ); compute mean values of variables in each sample, and the overall means. void GetCov_WithinClass( void ); the matrix of covariance 'within class' reflects the dispersion of the; events relative to the center of gravity of their own class. void GetCov_BetweenClass( void ); the matrix of covariance 'between class' reflects the dispersion of the; events of a class relative to the global center of gravity of all the class; hence the separation between classes. void GetCov_Full( void ); compute full covariance matrix from sum of within and between matrices. void GetFisherCoeff( void ); Fisher = Sum { [coeff]*[variables] }. let Xs be the array of the mean values of variables for signal evts; let Xb be the array of the mean values of variables for backgd evts; let InvWith be the inverse matrix of the 'within class' correlation matrix. then the array of Fisher coefficients is; [coeff] =sqrt(fNsig*fNbgd)/fNevt*transpose{Xs-Xb}*InvWith. void GetDiscrimPower( void ); computation of discrimination power indicator for each variable; small values of ""fWith"" indicates little compactness of sig & of backgd; big values of ""fBetw"" indicates large separation between sig & backgd. we want signal & backgd classes as compact and separated as possible; the discriminating power is then defined as the ration ""fBetw/fWith"". const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void PrintCoefficients( void ); display Fisher coefficients and discriminating power for each variable; check maximum length of variable name. void ReadWeightsFromStream(istream& i); read Fisher co",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:22079,Modifiability,variab,variables,22079," Fisher coefficients by series of matrix operations. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns the Fisher value (no fixed range). void InitMatrices( void ); initializaton method; creates global matrices and vectors. void GetMean( void ); compute mean values of variables in each sample, and the overall means. void GetCov_WithinClass( void ); the matrix of covariance 'within class' reflects the dispersion of the; events relative to the center of gravity of their own class. void GetCov_BetweenClass( void ); the matrix of covariance 'between class' reflects the dispersion of the; events of a class relative to the global center of gravity of all the class; hence the separation between classes. void GetCov_Full( void ); compute full covariance matrix from sum of within and between matrices. void GetFisherCoeff( void ); Fisher = Sum { [coeff]*[variables] }. let Xs be the array of the mean values of variables for signal evts; let Xb be the array of the mean values of variables for backgd evts; let InvWith be the inverse matrix of the 'within class' correlation matrix. then the array of Fisher coefficients is; [coeff] =sqrt(fNsig*fNbgd)/fNevt*transpose{Xs-Xb}*InvWith. void GetDiscrimPower( void ); computation of discrimination power indicator for each variable; small values of ""fWith"" indicates little compactness of sig & of backgd; big values of ""fBetw"" indicates large separation between sig & backgd. we want signal & backgd classes as compact and separated as possible; the discriminating power is then defined as the ration ""fBetw/fWith"". const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void PrintCoefficients( void ); display Fisher coefficients and discriminating power for each variable; check maximum length of variable name. void ReadWeightsFromStream(istream& i); read Fisher coefficients from weight file. void AddWeightsXMLTo(void* parent) const; create XML description of Fisher classifier. void ReadWeightsFromXML(",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:22148,Modifiability,variab,variables,22148," Fisher coefficients by series of matrix operations. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns the Fisher value (no fixed range). void InitMatrices( void ); initializaton method; creates global matrices and vectors. void GetMean( void ); compute mean values of variables in each sample, and the overall means. void GetCov_WithinClass( void ); the matrix of covariance 'within class' reflects the dispersion of the; events relative to the center of gravity of their own class. void GetCov_BetweenClass( void ); the matrix of covariance 'between class' reflects the dispersion of the; events of a class relative to the global center of gravity of all the class; hence the separation between classes. void GetCov_Full( void ); compute full covariance matrix from sum of within and between matrices. void GetFisherCoeff( void ); Fisher = Sum { [coeff]*[variables] }. let Xs be the array of the mean values of variables for signal evts; let Xb be the array of the mean values of variables for backgd evts; let InvWith be the inverse matrix of the 'within class' correlation matrix. then the array of Fisher coefficients is; [coeff] =sqrt(fNsig*fNbgd)/fNevt*transpose{Xs-Xb}*InvWith. void GetDiscrimPower( void ); computation of discrimination power indicator for each variable; small values of ""fWith"" indicates little compactness of sig & of backgd; big values of ""fBetw"" indicates large separation between sig & backgd. we want signal & backgd classes as compact and separated as possible; the discriminating power is then defined as the ration ""fBetw/fWith"". const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void PrintCoefficients( void ); display Fisher coefficients and discriminating power for each variable; check maximum length of variable name. void ReadWeightsFromStream(istream& i); read Fisher coefficients from weight file. void AddWeightsXMLTo(void* parent) const; create XML description of Fisher classifier. void ReadWeightsFromXML(",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:22437,Modifiability,variab,variable,22437,"verall means. void GetCov_WithinClass( void ); the matrix of covariance 'within class' reflects the dispersion of the; events relative to the center of gravity of their own class. void GetCov_BetweenClass( void ); the matrix of covariance 'between class' reflects the dispersion of the; events of a class relative to the global center of gravity of all the class; hence the separation between classes. void GetCov_Full( void ); compute full covariance matrix from sum of within and between matrices. void GetFisherCoeff( void ); Fisher = Sum { [coeff]*[variables] }. let Xs be the array of the mean values of variables for signal evts; let Xb be the array of the mean values of variables for backgd evts; let InvWith be the inverse matrix of the 'within class' correlation matrix. then the array of Fisher coefficients is; [coeff] =sqrt(fNsig*fNbgd)/fNevt*transpose{Xs-Xb}*InvWith. void GetDiscrimPower( void ); computation of discrimination power indicator for each variable; small values of ""fWith"" indicates little compactness of sig & of backgd; big values of ""fBetw"" indicates large separation between sig & backgd. we want signal & backgd classes as compact and separated as possible; the discriminating power is then defined as the ration ""fBetw/fWith"". const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void PrintCoefficients( void ); display Fisher coefficients and discriminating power for each variable; check maximum length of variable name. void ReadWeightsFromStream(istream& i); read Fisher coefficients from weight file. void AddWeightsXMLTo(void* parent) const; create XML description of Fisher classifier. void ReadWeightsFromXML(void* wghtnode); read Fisher coefficients from xml weight file. void MakeClassSpecific(ostream& , const TString& ) const; write Fisher-specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodFisher(",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:22795,Modifiability,variab,variables,22795,"a class relative to the global center of gravity of all the class; hence the separation between classes. void GetCov_Full( void ); compute full covariance matrix from sum of within and between matrices. void GetFisherCoeff( void ); Fisher = Sum { [coeff]*[variables] }. let Xs be the array of the mean values of variables for signal evts; let Xb be the array of the mean values of variables for backgd evts; let InvWith be the inverse matrix of the 'within class' correlation matrix. then the array of Fisher coefficients is; [coeff] =sqrt(fNsig*fNbgd)/fNevt*transpose{Xs-Xb}*InvWith. void GetDiscrimPower( void ); computation of discrimination power indicator for each variable; small values of ""fWith"" indicates little compactness of sig & of backgd; big values of ""fBetw"" indicates large separation between sig & backgd. we want signal & backgd classes as compact and separated as possible; the discriminating power is then defined as the ration ""fBetw/fWith"". const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void PrintCoefficients( void ); display Fisher coefficients and discriminating power for each variable; check maximum length of variable name. void ReadWeightsFromStream(istream& i); read Fisher coefficients from weight file. void AddWeightsXMLTo(void* parent) const; create XML description of Fisher classifier. void ReadWeightsFromXML(void* wghtnode); read Fisher coefficients from xml weight file. void MakeClassSpecific(ostream& , const TString& ) const; write Fisher-specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodFisher(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""Fisher"", TDirectory* theTargetDir = 0). EFisherMethod GetFisherMethod( void ); { return fFisherMethod; }. » Author: Andreas Hoecker, Xavier Prudent, Joerg Stelzer, Helge Voss, Kai Voss » Copyri",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:22900,Modifiability,variab,variable,22900," GetCov_Full( void ); compute full covariance matrix from sum of within and between matrices. void GetFisherCoeff( void ); Fisher = Sum { [coeff]*[variables] }. let Xs be the array of the mean values of variables for signal evts; let Xb be the array of the mean values of variables for backgd evts; let InvWith be the inverse matrix of the 'within class' correlation matrix. then the array of Fisher coefficients is; [coeff] =sqrt(fNsig*fNbgd)/fNevt*transpose{Xs-Xb}*InvWith. void GetDiscrimPower( void ); computation of discrimination power indicator for each variable; small values of ""fWith"" indicates little compactness of sig & of backgd; big values of ""fBetw"" indicates large separation between sig & backgd. we want signal & backgd classes as compact and separated as possible; the discriminating power is then defined as the ration ""fBetw/fWith"". const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void PrintCoefficients( void ); display Fisher coefficients and discriminating power for each variable; check maximum length of variable name. void ReadWeightsFromStream(istream& i); read Fisher coefficients from weight file. void AddWeightsXMLTo(void* parent) const; create XML description of Fisher classifier. void ReadWeightsFromXML(void* wghtnode); read Fisher coefficients from xml weight file. void MakeClassSpecific(ostream& , const TString& ) const; write Fisher-specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodFisher(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""Fisher"", TDirectory* theTargetDir = 0). EFisherMethod GetFisherMethod( void ); { return fFisherMethod; }. » Author: Andreas Hoecker, Xavier Prudent, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automa",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:22934,Modifiability,variab,variable,22934," GetCov_Full( void ); compute full covariance matrix from sum of within and between matrices. void GetFisherCoeff( void ); Fisher = Sum { [coeff]*[variables] }. let Xs be the array of the mean values of variables for signal evts; let Xb be the array of the mean values of variables for backgd evts; let InvWith be the inverse matrix of the 'within class' correlation matrix. then the array of Fisher coefficients is; [coeff] =sqrt(fNsig*fNbgd)/fNevt*transpose{Xs-Xb}*InvWith. void GetDiscrimPower( void ); computation of discrimination power indicator for each variable; small values of ""fWith"" indicates little compactness of sig & of backgd; big values of ""fBetw"" indicates large separation between sig & backgd. we want signal & backgd classes as compact and separated as possible; the discriminating power is then defined as the ration ""fBetw/fWith"". const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void PrintCoefficients( void ); display Fisher coefficients and discriminating power for each variable; check maximum length of variable name. void ReadWeightsFromStream(istream& i); read Fisher coefficients from weight file. void AddWeightsXMLTo(void* parent) const; create XML description of Fisher classifier. void ReadWeightsFromXML(void* wghtnode); read Fisher coefficients from xml weight file. void MakeClassSpecific(ostream& , const TString& ) const; write Fisher-specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodFisher(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""Fisher"", TDirectory* theTargetDir = 0). EFisherMethod GetFisherMethod( void ); { return fFisherMethod; }. » Author: Andreas Hoecker, Xavier Prudent, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automa",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:452,Performance,perform,performed,452,". TMVA::MethodFisher. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodFisher. class TMVA::MethodFisher: public TMVA::MethodBase. Fisher and Mahalanobis Discriminants (Linear Discriminant Analysis); ; In the method of Fisher discriminants event selection is performed; in a transformed variable space with zero linear correlations, by; distinguishing the mean values of the signal and background; distributions. The linear discriminant analysis determines an axis in the (correlated); hyperspace of the input variables; such that, when projecting the output classes (signal and background); upon this axis, they are pushed as far as possible away from each other,; while events of a same class are confined in a close vicinity.; The linearity property of this method is reflected in the metric with; which ""far apart"" and ""close vicinity"" are determined: the covariance; matrix of the discriminant variable space.; . The classification of the events in signal and background classes; relies on the following characteristics (only): overall sample means,; xi, for each input variable, i,; class-specific sample means, xS(B),i,; and total covariance matrix Tij. The covariance matrix; can be decomposed into the sum of a within- (Wij); and a between-class (Bij) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, Fi, are then given by . where in TMVA is set NS=NB, so that the factor; in front of the sum simplifies to ½.; The Fisher discriminant then reads. The offset F0 centers the sample mean of xFi; at zero. Instead of using the within-class matrix, the Mahalanobis variant; determines the Fisher coefficients as follows:. with resulting xMa th",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:12038,Performance,Optimiz,OptimizeTuningParameters,12038,"ase::MethodBaseDir() const; TMVA::MethodFisherMethodFisher(const TMVA::MethodFisher&); TMVA::MethodFisherMethodFisher(TMVA::DataSetInfo& dsi, const TString& theWeightFile, TDirectory* theTargetDir = __null); TMVA::MethodFisherMethodFisher(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""Fisher"", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodFisher&operator=(const TMVA::MethodFisher&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidPrintCoefficients(); virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& i); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandl",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:14435,Performance,tune,tuneParameters,14435,"::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::W",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:9614,Security,Hash,Hash,9614,"String&); const TMVA::Event*TMVA::MethodBase::GetTrainingEvent(Long64_t ievt) const; UInt_tTMVA::MethodBase::GetTrainingROOTVersionCode() const; TStringTMVA::MethodBase::GetTrainingROOTVersionString() const; UInt_tTMVA::MethodBase::GetTrainingTMVAVersionCode() const; TStringTMVA::MethodBase::GetTrainingTMVAVersionString() const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::Method",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:2110,Testability,test,test,2110,"es; relies on the following characteristics (only): overall sample means,; xi, for each input variable, i,; class-specific sample means, xS(B),i,; and total covariance matrix Tij. The covariance matrix; can be decomposed into the sum of a within- (Wij); and a between-class (Bij) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, Fi, are then given by . where in TMVA is set NS=NB, so that the factor; in front of the sum simplifies to ½.; The Fisher discriminant then reads. The offset F0 centers the sample mean of xFi; at zero. Instead of using the within-class matrix, the Mahalanobis variant; determines the Fisher coefficients as follows:. with resulting xMa that are very similar to the; xFi. ; TMVA provides two outputs for the ranking of the input variables:. Fisher test: the Fisher analysis aims at simultaneously maximising; the between-class separation, while minimising the within-class dispersion.; A useful measure of the discrimination power of a variable is hence given; by the diagonal quantity: Bii/Wii.; ; Discrimination power: the value of the Fisher coefficient is a; measure of the discriminating power of a variable. The discrimination power; of set of input variables can therefore be measured by the scalar; . The corresponding numbers are printed on standard output.; ; . Function Members (Methods); public:. virtual~MethodFisher(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidT",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:14237,Testability,test,testTime,14237,"t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCu",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:14774,Testability,Test,TestBit,14774,"idTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBa",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:14813,Testability,Test,TestBits,14813,"dBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:14869,Testability,Test,TestClassification,14869,"dBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:14921,Testability,Test,TestMulticlass,14921,"dBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:14969,Testability,Test,TestRegression,14969,"dBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:16631,Testability,Log,Log,16631,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); voidGetCov_BetweenClass(); voidGetCov_Full(); voidGetCov_WithinClass(); voidGetDiscrimPower(); voidGetFisherCoeff(); voidGetMean(); vir",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:17858,Testability,test,testing,17858," Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); voidGetCov_BetweenClass(); voidGetCov_Full(); voidGetCov_WithinClass(); voidGetDiscrimPower(); voidGetFisherCoeff(); voidGetMean(); virtual voidInit(); voidInitMatrices(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TMVA::MethodFisher::EFisherMethodkFisher; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TMVA::MethodFisher::EFisherMethodkMahalanobis; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumbe",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:1756,Usability,simpl,simplifies,1756," projecting the output classes (signal and background); upon this axis, they are pushed as far as possible away from each other,; while events of a same class are confined in a close vicinity.; The linearity property of this method is reflected in the metric with; which ""far apart"" and ""close vicinity"" are determined: the covariance; matrix of the discriminant variable space.; . The classification of the events in signal and background classes; relies on the following characteristics (only): overall sample means,; xi, for each input variable, i,; class-specific sample means, xS(B),i,; and total covariance matrix Tij. The covariance matrix; can be decomposed into the sum of a within- (Wij); and a between-class (Bij) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, Fi, are then given by . where in TMVA is set NS=NB, so that the factor; in front of the sum simplifies to ½.; The Fisher discriminant then reads. The offset F0 centers the sample mean of xFi; at zero. Instead of using the within-class matrix, the Mahalanobis variant; determines the Fisher coefficients as follows:. with resulting xMa that are very similar to the; xFi. ; TMVA provides two outputs for the ranking of the input variables:. Fisher test: the Fisher analysis aims at simultaneously maximising; the between-class separation, while minimising the within-class dispersion.; A useful measure of the discrimination power of a variable is hence given; by the diagonal quantity: Bii/Wii.; ; Discrimination power: the value of the Fisher coefficient is a; measure of the discriminating power of a variable. The discrimination power; of set of input variables can therefore be measured by the scalar; . The corresponding numbers are printed on standard output.; ; . Function Members (Methods); public:. virtual~MethodFisher(); voidTObject::AbstractMethod(const c",MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodFisher.html:3296,Usability,Clear,Clear,3296,,MatchSource.WIKI,root/html604/TMVA__MethodFisher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodFisher.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:2820,Availability,Error,Error,2820,"nst char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMV",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:2949,Availability,error,error,2949,"figurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:3033,Availability,error,error,3033,"igurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollec",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:19955,Integrability,message,message,19955,"eightFile, TDirectory* theTargetDir = __null); constructor from weight file. void Init( void ); default initialization called by all constructors. ~MethodHMatrix( void ); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); FDA can handle classification with 2 classes and regression with one regression-target. void DeclareOptions(); MethodHMatrix options: none (apart from those implemented in MethodBase). void ProcessOptions(); process user options. void Train( void ); computes H-matrices for signal and background samples. void ComputeCovariance(Bool_t , TMatrixD* ); compute covariance matrix. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns the H-matrix signal estimator. Double_t GetChi2(TMVA::Types::ESBType ); compute chi2-estimator for event according to type (signal/background). void AddWeightsXMLTo(void* parent) const; create XML description for HMatrix classification. void ReadWeightsFromXML(void* wghtnode); read weights from XML file. void ReadWeightsFromStream(istream& istr); read variable names and min/max; NOTE: the latter values are mandatory for the normalisation; in the reader application !!!. void MakeClassSpecific(ostream& , const TString& ) const; write Fisher-specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodHMatrix(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0). const Ranking* CreateRanking(); ranking of input variables. { return 0; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:509,Modifiability,variab,variables,509,". TMVA::MethodHMatrix. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodHMatrix. class TMVA::MethodHMatrix: public TMVA::MethodBase. /*; H-Matrix method, which is implemented as a simple comparison of; chi-squared estimators for signal and background, taking into; account the linear correlations between the input variables; This MVA approach is used by the DØ collaboration (FNAL) for the; purpose of electron identification (see, eg.,; hep-ex/9507007).; As it is implemented in TMVA, it is usually equivalent or worse than; the Fisher-Mahalanobis discriminant, and it has only been added for; the purpose of completeness.; Two χ2 estimators are computed for an event, each one; for signal and background, using the estimates for the means and; covariance matrices obtained from the training sample:. TMVA then uses as normalised analyser for event (i) the ratio:; (χS(i)2 − χB2(i)); (χS2(i) + χB2(i)).; */. Function Members (Methods); public:. virtual~MethodHMatrix(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::C",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:1231,Modifiability,Config,Configurable,1231," virtual~MethodHMatrix(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::C",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:1587,Modifiability,Config,Configurable,1587," virtual~MethodHMatrix(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::C",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:1917,Modifiability,Config,ConfigurableTMVA,1917," virtual~MethodHMatrix(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::C",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:1935,Modifiability,Config,Configurable,1935," virtual~MethodHMatrix(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::C",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:1949,Modifiability,Config,Configurable,1949," virtual~MethodHMatrix(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::C",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:2000,Modifiability,Config,ConfigurableTMVA,2000," virtual~MethodHMatrix(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::C",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:2018,Modifiability,Config,Configurable,2018," virtual~MethodHMatrix(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::C",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:2032,Modifiability,Config,Configurable,2032," virtual~MethodHMatrix(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::C",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:2057,Modifiability,Config,Configurable,2057," virtual~MethodHMatrix(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::C",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:3397,Modifiability,Config,Configurable,3397,"ase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollection(TMVA::Types::ETreeType type); virtual const char*TObject::GetIconName() const; const TString&TMVA::MethodBase::GetInputLabel(Int_t i) const; const TString&TMVA::MethodBase::GetInputTitle(Int_t i) const; const TString&TMVA::MethodBase::GetInputVar(Int_t i) const; const TString&TMVA::MethodBase::GetJobName() const; virtual Double_tTMVA::MethodBase::GetKSTrainingV",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:3458,Modifiability,Config,Configurable,3458,"tancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollection(TMVA::Types::ETreeType type); virtual const char*TObject::GetIconName() const; const TString&TMVA::MethodBase::GetInputLabel(Int_t i) const; const TString&TMVA::MethodBase::GetInputTitle(Int_t i) const; const TString&TMVA::MethodBase::GetInputVar(Int_t i) const; const TString&TMVA::MethodBase::GetJobName() const; virtual Double_tTMVA::MethodBase::GetKSTrainingVsTest(Char_t SorB, TString opt = ""X""); virtual Double_tTMVA::",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:5562,Modifiability,Config,Configurable,5562,"significance_value) const; Double_tTMVA::MethodBase::GetMean(Int_t ivar) const; const TString&TMVA::MethodBase::GetMethodName() const; TMVA::Types::EMVATMVA::MethodBase::GetMethodType() const; TStringTMVA::MethodBase::GetMethodTypeName() const; virtual vector<Float_t>TMVA::MethodBase::GetMulticlassEfficiency(vector<vector<Float_t> >& purity); virtual vector<Float_t>TMVA::MethodBase::GetMulticlassTrainingEfficiency(vector<vector<Float_t> >& purity); virtual const vector<Float_t>&TMVA::MethodBase::GetMulticlassValues(); virtual Double_tGetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); virtual const char*TMVA::MethodBase::GetName() const; UInt_tTMVA::MethodBase::GetNEvents() const; UInt_tTMVA::MethodBase::GetNTargets() const; UInt_tTMVA::MethodBase::GetNvar() const; UInt_tTMVA::MethodBase::GetNVariables() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; virtual Double_tTMVA::MethodBase::GetProba(const TMVA::Event* ev); virtual Double_tTMVA::MethodBase::GetProba(Double_t mvaVal, Double_t ap_sig); const TStringTMVA::MethodBase::GetProbaName() const; virtual Double_tTMVA::MethodBase::GetRarity(Double_t mvaVal, TMVA::Types::ESBType reftype = Types::kBackground) const; virtual voidTMVA::MethodBase::GetRegressionDeviation(UInt_t tgtNum, TMVA::Types::ETreeType type, Double_t& stddev, Double_t& stddev90Percent) const; virtual const vector<Float_t>&TMVA::MethodBase::GetRegressionValues(); const vector<Float_t>&TMVA::MethodBase::GetRegressionValues(const TMVA::Event*const ev); Double_tTMVA::MethodBase::GetRMS(Int_t ivar) const; virtual Double_tTMVA::MethodBase::GetROCIntegral(TH1D* histS, TH1D* histB) const; virtual Double_tTMVA::MethodBase::GetROCIntegral(TMVA::PDF* pdfS = 0, TMVA::PDF* pdfB = 0) const; virtual Double_tTMVA::MethodBase::GetSeparation(TH1*, TH1*) const; virtual Double_tTMVA::MethodBase::GetSeparation(",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:8338,Modifiability,Inherit,InheritsFrom,8338,"de() const; TStringTMVA::MethodBase::GetTrainingTMVAVersionString() const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TMVA::MethodBase&); TMVA::MethodBaseTMVA::MethodBase::MethodBase(TMVA::Types::EMVA methodType, TMVA::DataSetInfo& dsi, const TString& weightFile, TDirectory* theBaseDir = 0); TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TString",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:8404,Modifiability,Inherit,InheritsFrom,8404,") const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TMVA::MethodBase&); TMVA::MethodBaseTMVA::MethodBase::MethodBase(TMVA::Types::EMVA methodType, TMVA::DataSetInfo& dsi, const TString& weightFile, TDirectory* theBaseDir = 0); TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TString& jobName, TMVA::Types::EMVA methodType, const TString& methodTitl",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:10676,Modifiability,Config,Configurable,10676,"ring& theWeightFile, TDirectory* theTargetDir = __null); TMVA::MethodHMatrixMethodHMatrix(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodHMatrix&operator=(const TMVA::MethodHMatrix&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* fil",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:10857,Modifiability,Config,Configurable,10857,"ng& theOption = """", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodHMatrix&operator=(const TMVA::MethodHMatrix&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EA",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:10987,Modifiability,Config,Configurable,10987,"t char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodHMatrix&operator=(const TMVA::MethodHMatrix&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UIn",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:11049,Modifiability,Config,Configurable,11049,"ect::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodHMatrix&operator=(const TMVA::MethodHMatrix&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescripti",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:12024,Modifiability,Config,Configurable,12024,"& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInsp",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:12085,Modifiability,Config,Configurable,12085,"e); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStrea",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:12369,Modifiability,Config,Configurable,12369,"dReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::Method",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:12471,Modifiability,Config,Configurable,12471,"hodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, ",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:14144,Modifiability,Config,Configurable,14144,"dBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:14389,Modifiability,Config,Configurable,14389,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidComputeCovariance(Bool_t, TMatrixD*); virtual voidDeclareOptions(); Double_tGetChi2(TMVA::Types::ESBType); virtual voidInit(); virtual voidProcessOptions(). Data",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:14637,Modifiability,Config,Configurable,14637,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidComputeCovariance(Bool_t, TMatrixD*); virtual voidDeclareOptions(); Double_tGetChi2(TMVA::Types::ESBType); virtual voidInit(); virtual voidProcessOptions(). Data",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:15078,Modifiability,Config,Configurable,15078,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidComputeCovariance(Bool_t, TMatrixD*); virtual voidDeclareOptions(); Double_tGetChi2(TMVA::Types::ESBType); virtual voidInit(); virtual voidProcessOptions(). Data",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:15117,Modifiability,Config,Configurable,15117,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidComputeCovariance(Bool_t, TMatrixD*); virtual voidDeclareOptions(); Double_tGetChi2(TMVA::Types::ESBType); virtual voidInit(); virtual voidProcessOptions(). Data",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:15439,Modifiability,Config,Configurable,15439,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidComputeCovariance(Bool_t, TMatrixD*); virtual voidDeclareOptions(); Double_tGetChi2(TMVA::Types::ESBType); virtual voidInit(); virtual voidProcessOptions(). Data",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:15885,Modifiability,Config,Configurable,15885,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidComputeCovariance(Bool_t, TMatrixD*); virtual voidDeclareOptions(); Double_tGetChi2(TMVA::Types::ESBType); virtual voidInit(); virtual voidProcessOptions(). Data",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:17419,Modifiability,variab,variables,17419,"atusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TMatrixD*fInvHMatrixBinverse H-matrix (background); TMatrixD*fInvHMatrixSinverse H-matrix (signal); TVectorD*fVecMeanBvector of mean values (background); TVectorD*fVecMeanSvector of mean values (signal). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodHMatrix(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor for the H-Matrix method. MethodHMatrix(TMVA::DataSetInfo& theData, const TString& ",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:17608,Modifiability,variab,variable,17608,"atusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TMatrixD*fInvHMatrixBinverse H-matrix (background); TMatrixD*fInvHMatrixSinverse H-matrix (signal); TVectorD*fVecMeanBvector of mean values (background); TVectorD*fVecMeanSvector of mean values (signal). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodHMatrix(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor for the H-Matrix method. MethodHMatrix(TMVA::DataSetInfo& theData, const TString& ",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:18268,Modifiability,Inherit,Inheritance,18268,"tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TMatrixD*fInvHMatrixBinverse H-matrix (background); TMatrixD*fInvHMatrixSinverse H-matrix (signal); TVectorD*fVecMeanBvector of mean values (background); TVectorD*fVecMeanSvector of mean values (signal). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodHMatrix(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor for the H-Matrix method. MethodHMatrix(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. void Init( void ); default initialization called by all constructors. ~MethodHMatrix( void ); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); FDA can handle classification with 2 classes and regression with one regression-target. void DeclareOptions(); MethodHMatrix options: none (apart from those implemented in MethodBase). void ProcessOptions(); process user options. void Train( void ); computes H-matrices for signal and background samples. void ComputeCovariance(Bool_t , TMatrixD* ); compute covariance matrix. Double_t GetMvaValue(Doub",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:18281,Modifiability,Inherit,Inherited,18281,"tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TMatrixD*fInvHMatrixBinverse H-matrix (background); TMatrixD*fInvHMatrixSinverse H-matrix (signal); TVectorD*fVecMeanBvector of mean values (background); TVectorD*fVecMeanSvector of mean values (signal). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodHMatrix(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor for the H-Matrix method. MethodHMatrix(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. void Init( void ); default initialization called by all constructors. ~MethodHMatrix( void ); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); FDA can handle classification with 2 classes and regression with one regression-target. void DeclareOptions(); MethodHMatrix options: none (apart from those implemented in MethodBase). void ProcessOptions(); process user options. void Train( void ); computes H-matrices for signal and background samples. void ComputeCovariance(Bool_t , TMatrixD* ); compute covariance matrix. Double_t GetMvaValue(Doub",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:19696,Modifiability,variab,variable,19696,"eightFile, TDirectory* theTargetDir = __null); constructor from weight file. void Init( void ); default initialization called by all constructors. ~MethodHMatrix( void ); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); FDA can handle classification with 2 classes and regression with one regression-target. void DeclareOptions(); MethodHMatrix options: none (apart from those implemented in MethodBase). void ProcessOptions(); process user options. void Train( void ); computes H-matrices for signal and background samples. void ComputeCovariance(Bool_t , TMatrixD* ); compute covariance matrix. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns the H-matrix signal estimator. Double_t GetChi2(TMVA::Types::ESBType ); compute chi2-estimator for event according to type (signal/background). void AddWeightsXMLTo(void* parent) const; create XML description for HMatrix classification. void ReadWeightsFromXML(void* wghtnode); read weights from XML file. void ReadWeightsFromStream(istream& istr); read variable names and min/max; NOTE: the latter values are mandatory for the normalisation; in the reader application !!!. void MakeClassSpecific(ostream& , const TString& ) const; write Fisher-specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodHMatrix(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0). const Ranking* CreateRanking(); ranking of input variables. { return 0; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:20272,Modifiability,variab,variables,20272,"eightFile, TDirectory* theTargetDir = __null); constructor from weight file. void Init( void ); default initialization called by all constructors. ~MethodHMatrix( void ); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); FDA can handle classification with 2 classes and regression with one regression-target. void DeclareOptions(); MethodHMatrix options: none (apart from those implemented in MethodBase). void ProcessOptions(); process user options. void Train( void ); computes H-matrices for signal and background samples. void ComputeCovariance(Bool_t , TMatrixD* ); compute covariance matrix. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns the H-matrix signal estimator. Double_t GetChi2(TMVA::Types::ESBType ); compute chi2-estimator for event according to type (signal/background). void AddWeightsXMLTo(void* parent) const; create XML description for HMatrix classification. void ReadWeightsFromXML(void* wghtnode); read weights from XML file. void ReadWeightsFromStream(istream& istr); read variable names and min/max; NOTE: the latter values are mandatory for the normalisation; in the reader application !!!. void MakeClassSpecific(ostream& , const TString& ) const; write Fisher-specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodHMatrix(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0). const Ranking* CreateRanking(); ranking of input variables. { return 0; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:10521,Performance,Optimiz,OptimizeTuningParameters,10521,"BaseDir() const; TMVA::MethodHMatrixMethodHMatrix(const TMVA::MethodHMatrix&); TMVA::MethodHMatrixMethodHMatrix(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); TMVA::MethodHMatrixMethodHMatrix(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodHMatrix&operator=(const TMVA::MethodHMatrix&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::Transformatio",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:12896,Performance,tune,tuneParameters,12896,"::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::W",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:8086,Security,Hash,Hash,8086,"String&); const TMVA::Event*TMVA::MethodBase::GetTrainingEvent(Long64_t ievt) const; UInt_tTMVA::MethodBase::GetTrainingROOTVersionCode() const; TStringTMVA::MethodBase::GetTrainingROOTVersionString() const; UInt_tTMVA::MethodBase::GetTrainingTMVAVersionCode() const; TStringTMVA::MethodBase::GetTrainingTMVAVersionString() const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::Method",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:12698,Testability,test,testTime,12698,"t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCu",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:13235,Testability,Test,TestBit,13235,"idTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBa",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:13274,Testability,Test,TestBits,13274,"dBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:13330,Testability,Test,TestClassification,13330,"dBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:13382,Testability,Test,TestMulticlass,13382,"dBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:13430,Testability,Test,TestRegression,13430,"dBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:15092,Testability,Log,Log,15092,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidComputeCovariance(Bool_t, TMatrixD*); virtual voidDeclareOptions(); Double_tGetChi2(TMVA::Types::ESBType); virtual voidInit(); virtual voidProcessOptions(). Data",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:16248,Testability,test,testing,16248,"odBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidComputeCovariance(Bool_t, TMatrixD*); virtual voidDeclareOptions(); Double_tGetChi2(TMVA::Types::ESBType); virtual voidInit(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:374,Usability,simpl,simple,374,". TMVA::MethodHMatrix. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodHMatrix. class TMVA::MethodHMatrix: public TMVA::MethodBase. /*; H-Matrix method, which is implemented as a simple comparison of; chi-squared estimators for signal and background, taking into; account the linear correlations between the input variables; This MVA approach is used by the DØ collaboration (FNAL) for the; purpose of electron identification (see, eg.,; hep-ex/9507007).; As it is implemented in TMVA, it is usually equivalent or worse than; the Fisher-Mahalanobis discriminant, and it has only been added for; the purpose of completeness.; Two χ2 estimators are computed for an event, each one; for signal and background, using the estimates for the means and; covariance matrices obtained from the training sample:. TMVA then uses as normalised analyser for event (i) the ratio:; (χS(i)2 − χB2(i)); (χS2(i) + χB2(i)).; */. Function Members (Methods); public:. virtual~MethodHMatrix(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::C",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodHMatrix.html:1767,Usability,Clear,Clear,1767," virtual~MethodHMatrix(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::C",MatchSource.WIKI,root/html604/TMVA__MethodHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodHMatrix.html
https://root.cern/root/html604/TMVA__MethodInfo.html:1155,Availability,Error,Error,1155," virtual~MethodInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::G",MatchSource.WIKI,root/html604/TMVA__MethodInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodInfo.html
https://root.cern/root/html604/TMVA__MethodInfo.html:1284,Availability,error,error,1284," virtual~MethodInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::G",MatchSource.WIKI,root/html604/TMVA__MethodInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodInfo.html
https://root.cern/root/html604/TMVA__MethodInfo.html:1368,Availability,error,error,1368,"oidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(",MatchSource.WIKI,root/html604/TMVA__MethodInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodInfo.html
https://root.cern/root/html604/TMVA__MethodInfo.html:2292,Modifiability,Inherit,InheritsFrom,2292,"rtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodInfoMethodInfo(); TMVA::MethodInfoMethodInfo(const TMVA::MethodInfo&); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* v",MatchSource.WIKI,root/html604/TMVA__MethodInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodInfo.html
https://root.cern/root/html604/TMVA__MethodInfo.html:2358,Modifiability,Inherit,InheritsFrom,2358,"_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodInfoMethodInfo(); TMVA::MethodInfoMethodInfo(const TMVA::MethodInfo&); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operato",MatchSource.WIKI,root/html604/TMVA__MethodInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodInfo.html
https://root.cern/root/html604/TMVA__MethodInfo.html:6240,Modifiability,Inherit,Inheritance,6240,"sgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. TH1*bgd; TH1*bgdE; TCanvas*canvas; TH1*effpurS; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie; TLatex*line1; TLatex*line2; Double_tmaxSignificance; Double_tmaxSignificanceErr; TStringmethodName; TStringmethodTitle; TH1*origBgdE; TH1*origSigE; TH1*purS; TGaxis*rightAxis; TH1*sSig; TH1*sig; TH1*sigE. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~MethodInfo(). void SetResultHists(). MethodInfo(); {}. » Last changed: Tue Sep 8 17:45:58 2015 » Last generated: 2015-09-08 17:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MethodInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodInfo.html
https://root.cern/root/html604/TMVA__MethodInfo.html:6253,Modifiability,Inherit,Inherited,6253,"sgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. TH1*bgd; TH1*bgdE; TCanvas*canvas; TH1*effpurS; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie; TLatex*line1; TLatex*line2; Double_tmaxSignificance; Double_tmaxSignificanceErr; TStringmethodName; TStringmethodTitle; TH1*origBgdE; TH1*origSigE; TH1*purS; TGaxis*rightAxis; TH1*sSig; TH1*sig; TH1*sigE. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~MethodInfo(). void SetResultHists(). MethodInfo(); {}. » Last changed: Tue Sep 8 17:45:58 2015 » Last generated: 2015-09-08 17:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MethodInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodInfo.html
https://root.cern/root/html604/TMVA__MethodInfo.html:2182,Security,Hash,Hash,2182,"st char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodInfoMethodInfo(); TMVA::MethodInfoMethodInfo(const TMVA::MethodInfo&); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator d",MatchSource.WIKI,root/html604/TMVA__MethodInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodInfo.html
https://root.cern/root/html604/TMVA__MethodInfo.html:4633,Testability,Test,TestBit,4633,"st char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodInfo&operator=(const TMVA::MethodInfo&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetResultHists(); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__MethodInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodInfo.html
https://root.cern/root/html604/TMVA__MethodInfo.html:4672,Testability,Test,TestBits,4672,"st char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodInfo&operator=(const TMVA::MethodInfo&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetResultHists(); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__MethodInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodInfo.html
https://root.cern/root/html604/TMVA__MethodInfo.html:612,Usability,Clear,Clear,612," virtual~MethodInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::G",MatchSource.WIKI,root/html604/TMVA__MethodInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodInfo.html
https://root.cern/root/html604/TMVA__MethodKNN.html:2009,Availability,Error,Error,2009,"ect::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMV",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:2138,Availability,error,error,2138,"Object* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:2222,Availability,error,error,2222,"& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollec",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:19772,Availability,avail,available,19772,"tandard constructor. MethodKNN(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. ~MethodKNN(); destructor. void DeclareOptions(); MethodKNN options. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility. void ProcessOptions(); process the options specified by the user. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); FDA can handle classification with 2 classes and regression with one regression-target. void Init(); Initialization. void MakeKNN(); create kNN. void Train(); kNN training. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); Compute classifier response. const std::vector< Float_t >& GetRegressionValues(). Return vector of averages for target values of k-nearest neighbors.; Use own copy of the regression vector, I do not like using a pointer to vector. const TMVA::Ranking* CreateRanking(); no ranking available. void AddWeightsXMLTo(void* parent) const; write weights to XML. void ReadWeightsFromXML(void* wghtnode). void ReadWeightsFromStream(istream& istr); read the weights. void WriteWeightsToStream(TFile& rf) const; save weights to ROOT file. void ReadWeightsFromStream(TFile& rf); read weights from ROOT file. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". Double_t PolnKernel(Double_t value) const; polynomial kernel. Double_t GausKernel(const TMVA::kNN::Event& event_knn, const TMVA::kNN::Event& event, const vector<Double_t>& svec) const; Gaussian kernel. Double_t getKernelRadius(const TMVA::kNN::List& rlist) const. Get polynomial kernel radius. const std::vector<Double_t> getRMS(const TMVA::kNN::List& rlist, const TMVA::kNN::Event& event_knn) const. Get polynomial kern",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:20220,Integrability,message,message,20220,", UInt_t numberClasses, UInt_t numberTargets); FDA can handle classification with 2 classes and regression with one regression-target. void Init(); Initialization. void MakeKNN(); create kNN. void Train(); kNN training. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); Compute classifier response. const std::vector< Float_t >& GetRegressionValues(). Return vector of averages for target values of k-nearest neighbors.; Use own copy of the regression vector, I do not like using a pointer to vector. const TMVA::Ranking* CreateRanking(); no ranking available. void AddWeightsXMLTo(void* parent) const; write weights to XML. void ReadWeightsFromXML(void* wghtnode). void ReadWeightsFromStream(istream& istr); read the weights. void WriteWeightsToStream(TFile& rf) const; save weights to ROOT file. void ReadWeightsFromStream(TFile& rf); read weights from ROOT file. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". Double_t PolnKernel(Double_t value) const; polynomial kernel. Double_t GausKernel(const TMVA::kNN::Event& event_knn, const TMVA::kNN::Event& event, const vector<Double_t>& svec) const; Gaussian kernel. Double_t getKernelRadius(const TMVA::kNN::List& rlist) const. Get polynomial kernel radius. const std::vector<Double_t> getRMS(const TMVA::kNN::List& rlist, const TMVA::kNN::Event& event_knn) const. Get polynomial kernel radius. Double_t getLDAValue(const TMVA::kNN::List& rlist, const TMVA::kNN::Event& event_knn). MethodKNN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""KNN"", TDirectory* theTargetDir = __null). » Author: Rustem Ospanov » Copyright (c) 2007: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regardin",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:481,Modifiability,Config,Configurable,481," virtual~MethodKNN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidT",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:837,Modifiability,Config,Configurable,837," virtual~MethodKNN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidT",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:1167,Modifiability,Config,ConfigurableTMVA,1167," virtual~MethodKNN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidT",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:1185,Modifiability,Config,Configurable,1185," virtual~MethodKNN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidT",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:1199,Modifiability,Config,Configurable,1199," virtual~MethodKNN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidT",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:1250,Modifiability,Config,ConfigurableTMVA,1250," virtual~MethodKNN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidT",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:1268,Modifiability,Config,Configurable,1268," virtual~MethodKNN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidT",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:1282,Modifiability,Config,Configurable,1282," virtual~MethodKNN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidT",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:1307,Modifiability,Config,Configurable,1307," virtual~MethodKNN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidT",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:2586,Modifiability,Config,Configurable,2586,"ase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollection(TMVA::Types::ETreeType type); virtual const char*TObject::GetIconName() const; const TString&TMVA::MethodBase::GetInputLabel(Int_t i) const; const TString&TMVA::MethodBase::GetInputTitle(Int_t i) const; const TString&TMVA::MethodBase::GetInputVar(Int_t i) const; const TString&TMVA::MethodBase::GetJobName() const; virtual Double_tTMVA::MethodBase::GetKSTrainingV",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:2647,Modifiability,Config,Configurable,2647,"tancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollection(TMVA::Types::ETreeType type); virtual const char*TObject::GetIconName() const; const TString&TMVA::MethodBase::GetInputLabel(Int_t i) const; const TString&TMVA::MethodBase::GetInputTitle(Int_t i) const; const TString&TMVA::MethodBase::GetInputVar(Int_t i) const; const TString&TMVA::MethodBase::GetJobName() const; virtual Double_tTMVA::MethodBase::GetKSTrainingVsTest(Char_t SorB, TString opt = ""X""); virtual Double_tTMVA::",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:4751,Modifiability,Config,Configurable,4751,"significance_value) const; Double_tTMVA::MethodBase::GetMean(Int_t ivar) const; const TString&TMVA::MethodBase::GetMethodName() const; TMVA::Types::EMVATMVA::MethodBase::GetMethodType() const; TStringTMVA::MethodBase::GetMethodTypeName() const; virtual vector<Float_t>TMVA::MethodBase::GetMulticlassEfficiency(vector<vector<Float_t> >& purity); virtual vector<Float_t>TMVA::MethodBase::GetMulticlassTrainingEfficiency(vector<vector<Float_t> >& purity); virtual const vector<Float_t>&TMVA::MethodBase::GetMulticlassValues(); virtual Double_tGetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); virtual const char*TMVA::MethodBase::GetName() const; UInt_tTMVA::MethodBase::GetNEvents() const; UInt_tTMVA::MethodBase::GetNTargets() const; UInt_tTMVA::MethodBase::GetNvar() const; UInt_tTMVA::MethodBase::GetNVariables() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; virtual Double_tTMVA::MethodBase::GetProba(const TMVA::Event* ev); virtual Double_tTMVA::MethodBase::GetProba(Double_t mvaVal, Double_t ap_sig); const TStringTMVA::MethodBase::GetProbaName() const; virtual Double_tTMVA::MethodBase::GetRarity(Double_t mvaVal, TMVA::Types::ESBType reftype = Types::kBackground) const; virtual voidTMVA::MethodBase::GetRegressionDeviation(UInt_t tgtNum, TMVA::Types::ETreeType type, Double_t& stddev, Double_t& stddev90Percent) const; virtual const vector<Float_t>&GetRegressionValues(); Double_tTMVA::MethodBase::GetRMS(Int_t ivar) const; virtual Double_tTMVA::MethodBase::GetROCIntegral(TH1D* histS, TH1D* histB) const; virtual Double_tTMVA::MethodBase::GetROCIntegral(TMVA::PDF* pdfS = 0, TMVA::PDF* pdfB = 0) const; virtual Double_tTMVA::MethodBase::GetSeparation(TH1*, TH1*) const; virtual Double_tTMVA::MethodBase::GetSeparation(TMVA::PDF* pdfS = 0, TMVA::PDF* pdfB = 0) const; Double_tTMVA::MethodBase::GetSignalReferenceCut() const; D",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:7420,Modifiability,Inherit,InheritsFrom,7420,"de() const; TStringTMVA::MethodBase::GetTrainingTMVAVersionString() const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TMVA::MethodBase&); TMVA::MethodBaseTMVA::MethodBase::MethodBase(TMVA::Types::EMVA methodType, TMVA::DataSetInfo& dsi, const TString& weightFile, TDirectory* theBaseDir = 0); TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TString",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:7486,Modifiability,Inherit,InheritsFrom,7486,") const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TMVA::MethodBase&); TMVA::MethodBaseTMVA::MethodBase::MethodBase(TMVA::Types::EMVA methodType, TMVA::DataSetInfo& dsi, const TString& weightFile, TDirectory* theBaseDir = 0); TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TString& jobName, TMVA::Types::EMVA methodType, const TString& methodTitl",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:9730,Modifiability,Config,Configurable,9730,"onst TString& theWeightFile, TDirectory* theTargetDir = __null); TMVA::MethodKNNMethodKNN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""KNN"", TDirectory* theTargetDir = __null); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodKNN&operator=(const TMVA::MethodKNN&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& rf); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:9911,Modifiability,Config,Configurable,9911,"ng& theOption = ""KNN"", TDirectory* theTargetDir = __null); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodKNN&operator=(const TMVA::MethodKNN&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& rf); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMV",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:10041,Modifiability,Config,Configurable,10041,"od, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodKNN&operator=(const TMVA::MethodKNN&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& rf); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObj",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:10103,Modifiability,Config,Configurable,10103,"voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodKNN&operator=(const TMVA::MethodKNN&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& rf); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t se",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:11124,Modifiability,Config,Configurable,11124,"omXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& rf); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInsp",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:11185,Modifiability,Config,Configurable,11185," voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& rf); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStrea",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:11469,Modifiability,Config,Configurable,11469,"dReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::Method",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:11571,Modifiability,Config,Configurable,11571,"hodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, ",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:13244,Modifiability,Config,Configurable,13244,"MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const.",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:13532,Modifiability,Config,Configurable,13532,"figurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); Double_tGausKernel(const TMVA::kNN::Event& event_knn, const TMVA::kNN::Event& event, const v",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:13780,Modifiability,Config,Configurable,13780,"figurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); Double_tGausKernel(const TMVA::kNN::Event& event_knn, const TMVA::kNN::Event& event, const v",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:14221,Modifiability,Config,Configurable,14221,"figurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); Double_tGausKernel(const TMVA::kNN::Event& event_knn, const TMVA::kNN::Event& event, const v",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:14260,Modifiability,Config,Configurable,14260,"figurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); Double_tGausKernel(const TMVA::kNN::Event& event_knn, const TMVA::kNN::Event& event, const v",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:14582,Modifiability,Config,Configurable,14582,"figurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); Double_tGausKernel(const TMVA::kNN::Event& event_knn, const TMVA::kNN::Event& event, const v",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:15028,Modifiability,Config,Configurable,15028,"figurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); Double_tGausKernel(const TMVA::kNN::Event& event_knn, const TMVA::kNN::Event& event, const v",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:16949,Modifiability,variab,variables,16949,"atusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Int_tfBalanceDepthnumber of binary tree levels used for balancing tree; TMVA::kNN::EventVecfEvent! (untouched) events used for learning; TStringfKernel=""Gaus"",""Poln"" - kernel type for smoothing; TMVA::LDAfLDA! Experimental feature for local knn analysis; TMVA::kNN::ModulekNN*fModule! module where all work is done; Float_tfScaleFracfraction of events used to compute variable width; Float_tfSigmaFactscale factor for Gaussian sigma in Gaus. kernel; Double_tfSumOfWeightsBsum-of-weights for background training events; Double_tfSumOfWeightsSsum-of-weight",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:17138,Modifiability,variab,variable,17138,"atusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Int_tfBalanceDepthnumber of binary tree levels used for balancing tree; TMVA::kNN::EventVecfEvent! (untouched) events used for learning; TStringfKernel=""Gaus"",""Poln"" - kernel type for smoothing; TMVA::LDAfLDA! Experimental feature for local knn analysis; TMVA::kNN::ModulekNN*fModule! module where all work is done; Float_tfScaleFracfraction of events used to compute variable width; Float_tfSigmaFactscale factor for Gaussian sigma in Gaus. kernel; Double_tfSumOfWeightsBsum-of-weights for background training events; Double_tfSumOfWeightsSsum-of-weight",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:17948,Modifiability,variab,variable,17948,"> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Int_tfBalanceDepthnumber of binary tree levels used for balancing tree; TMVA::kNN::EventVecfEvent! (untouched) events used for learning; TStringfKernel=""Gaus"",""Poln"" - kernel type for smoothing; TMVA::LDAfLDA! Experimental feature for local knn analysis; TMVA::kNN::ModulekNN*fModule! module where all work is done; Float_tfScaleFracfraction of events used to compute variable width; Float_tfSigmaFactscale factor for Gaussian sigma in Gaus. kernel; Double_tfSumOfWeightsBsum-of-weights for background training events; Double_tfSumOfWeightsSsum-of-weights for signal training events; Int_tfTreeOptDepthnumber of binary tree levels used for optimization; Bool_tfTrimset equal number of signal and background events; Bool_tfUseKerneluse polynomial kernel weight function; Bool_tfUseLDAuse local linear discriminat analysis to compute MVA; Bool_tfUseWeightuse weights to count kNN; Int_tfnkNNnumber of k-nearest neighbors. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodKNN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""KNN"", TDirectory* theTargetDir = __null); standard constructor. MethodKNN(TMVA::DataSetInfo",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:18514,Modifiability,Inherit,Inheritance,18514,"lassindex of the Signal-class. private:. Int_tfBalanceDepthnumber of binary tree levels used for balancing tree; TMVA::kNN::EventVecfEvent! (untouched) events used for learning; TStringfKernel=""Gaus"",""Poln"" - kernel type for smoothing; TMVA::LDAfLDA! Experimental feature for local knn analysis; TMVA::kNN::ModulekNN*fModule! module where all work is done; Float_tfScaleFracfraction of events used to compute variable width; Float_tfSigmaFactscale factor for Gaussian sigma in Gaus. kernel; Double_tfSumOfWeightsBsum-of-weights for background training events; Double_tfSumOfWeightsSsum-of-weights for signal training events; Int_tfTreeOptDepthnumber of binary tree levels used for optimization; Bool_tfTrimset equal number of signal and background events; Bool_tfUseKerneluse polynomial kernel weight function; Bool_tfUseLDAuse local linear discriminat analysis to compute MVA; Bool_tfUseWeightuse weights to count kNN; Int_tfnkNNnumber of k-nearest neighbors. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodKNN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""KNN"", TDirectory* theTargetDir = __null); standard constructor. MethodKNN(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. ~MethodKNN(); destructor. void DeclareOptions(); MethodKNN options. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility. void ProcessOptions(); process the options specified by the user. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); FDA can handle classification with 2 classes and regression with one regression-target. void Init(); Initialization. void MakeKNN(); create kNN. void Train(); kNN training. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); Compute classifier response. const std::vector< ",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:18527,Modifiability,Inherit,Inherited,18527,"lassindex of the Signal-class. private:. Int_tfBalanceDepthnumber of binary tree levels used for balancing tree; TMVA::kNN::EventVecfEvent! (untouched) events used for learning; TStringfKernel=""Gaus"",""Poln"" - kernel type for smoothing; TMVA::LDAfLDA! Experimental feature for local knn analysis; TMVA::kNN::ModulekNN*fModule! module where all work is done; Float_tfScaleFracfraction of events used to compute variable width; Float_tfSigmaFactscale factor for Gaussian sigma in Gaus. kernel; Double_tfSumOfWeightsBsum-of-weights for background training events; Double_tfSumOfWeightsSsum-of-weights for signal training events; Int_tfTreeOptDepthnumber of binary tree levels used for optimization; Bool_tfTrimset equal number of signal and background events; Bool_tfUseKerneluse polynomial kernel weight function; Bool_tfUseLDAuse local linear discriminat analysis to compute MVA; Bool_tfUseWeightuse weights to count kNN; Int_tfnkNNnumber of k-nearest neighbors. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodKNN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""KNN"", TDirectory* theTargetDir = __null); standard constructor. MethodKNN(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. ~MethodKNN(); destructor. void DeclareOptions(); MethodKNN options. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility. void ProcessOptions(); process the options specified by the user. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); FDA can handle classification with 2 classes and regression with one regression-target. void Init(); Initialization. void MakeKNN(); create kNN. void Train(); kNN training. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); Compute classifier response. const std::vector< ",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:9575,Performance,Optimiz,OptimizeTuningParameters,9575,"ory*TMVA::MethodBase::MethodBaseDir() const; TMVA::MethodKNNMethodKNN(const TMVA::MethodKNN&); TMVA::MethodKNNMethodKNN(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); TMVA::MethodKNNMethodKNN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""KNN"", TDirectory* theTargetDir = __null); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodKNN&operator=(const TMVA::MethodKNN&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& rf); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::Re",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:11996,Performance,tune,tuneParameters,11996,"::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::W",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:18220,Performance,optimiz,optimization,18220,"VAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Int_tfBalanceDepthnumber of binary tree levels used for balancing tree; TMVA::kNN::EventVecfEvent! (untouched) events used for learning; TStringfKernel=""Gaus"",""Poln"" - kernel type for smoothing; TMVA::LDAfLDA! Experimental feature for local knn analysis; TMVA::kNN::ModulekNN*fModule! module where all work is done; Float_tfScaleFracfraction of events used to compute variable width; Float_tfSigmaFactscale factor for Gaussian sigma in Gaus. kernel; Double_tfSumOfWeightsBsum-of-weights for background training events; Double_tfSumOfWeightsSsum-of-weights for signal training events; Int_tfTreeOptDepthnumber of binary tree levels used for optimization; Bool_tfTrimset equal number of signal and background events; Bool_tfUseKerneluse polynomial kernel weight function; Bool_tfUseLDAuse local linear discriminat analysis to compute MVA; Bool_tfUseWeightuse weights to count kNN; Int_tfnkNNnumber of k-nearest neighbors. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodKNN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""KNN"", TDirectory* theTargetDir = __null); standard constructor. MethodKNN(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. ~MethodKNN(); destructor. void DeclareOptions(); MethodKNN options. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility. void ProcessOptions(); process the options specified by the user. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); FDA ca",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:7168,Security,Hash,Hash,7168,"String&); const TMVA::Event*TMVA::MethodBase::GetTrainingEvent(Long64_t ievt) const; UInt_tTMVA::MethodBase::GetTrainingROOTVersionCode() const; TStringTMVA::MethodBase::GetTrainingROOTVersionString() const; UInt_tTMVA::MethodBase::GetTrainingTMVAVersionCode() const; TStringTMVA::MethodBase::GetTrainingTMVAVersionString() const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::Method",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:11798,Testability,test,testTime,11798,"t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCu",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:12335,Testability,Test,TestBit,12335,"idTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBa",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:12374,Testability,Test,TestBits,12374,"irectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteW",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:12430,Testability,Test,TestClassification,12430,"MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const.",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:12482,Testability,Test,TestMulticlass,12482,"MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const.",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:12530,Testability,Test,TestRegression,12530,"MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const.",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:14235,Testability,Log,Log,14235,"figurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); Double_tGausKernel(const TMVA::kNN::Event& event_knn, const TMVA::kNN::Event& event, const v",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:15778,Testability,test,testing,15778,"rnel(const TMVA::kNN::Event& event_knn, const TMVA::kNN::Event& event, const vector<Double_t>& svec) const; Double_tgetKernelRadius(const TMVA::kNN::List& rlist) const; doublegetLDAValue(const TMVA::kNN::List& rlist, const TMVA::kNN::Event& event_knn); const vector<Double_t>getRMS(const TMVA::kNN::List& rlist, const TMVA::kNN::Event& event_knn) const; virtual voidInit(); voidMakeKNN(); Double_tPolnKernel(Double_t value) const; virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:1017,Usability,Clear,Clear,1017," virtual~MethodKNN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidT",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodKNN.html:17707,Usability,learn,learning,17707,"> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Int_tfBalanceDepthnumber of binary tree levels used for balancing tree; TMVA::kNN::EventVecfEvent! (untouched) events used for learning; TStringfKernel=""Gaus"",""Poln"" - kernel type for smoothing; TMVA::LDAfLDA! Experimental feature for local knn analysis; TMVA::kNN::ModulekNN*fModule! module where all work is done; Float_tfScaleFracfraction of events used to compute variable width; Float_tfSigmaFactscale factor for Gaussian sigma in Gaus. kernel; Double_tfSumOfWeightsBsum-of-weights for background training events; Double_tfSumOfWeightsSsum-of-weights for signal training events; Int_tfTreeOptDepthnumber of binary tree levels used for optimization; Bool_tfTrimset equal number of signal and background events; Bool_tfUseKerneluse polynomial kernel weight function; Bool_tfUseLDAuse local linear discriminat analysis to compute MVA; Bool_tfUseWeightuse weights to count kNN; Int_tfnkNNnumber of k-nearest neighbors. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodKNN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""KNN"", TDirectory* theTargetDir = __null); standard constructor. MethodKNN(TMVA::DataSetInfo",MatchSource.WIKI,root/html604/TMVA__MethodKNN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodKNN.html
https://root.cern/root/html604/TMVA__MethodLD.html:2053,Availability,Error,Error,2053," virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMV",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:2182,Availability,error,error,2182,"tion = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:2266,Availability,error,error,2266,"ble&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollec",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:19386,Integrability,message,message,19386,"with one regression-target. void Train( void ); compute fSumMatx. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); Returns the MVA classification output. const std::vector< Float_t >& GetRegressionValues(); Calculates the regression output. void InitMatrices( void ); Initializaton method; creates global matrices and vectors. void GetSum( void ); Calculates the matrix transposed(X)*W*X with W being the diagonal weight matrix; and X the coordinates values. void GetSumVal( void ); Calculates the vector transposed(X)*W*Y with Y being the target vector. void GetLDCoeff( void ); Calculates the coeffiecients used for classification/regression. void ReadWeightsFromStream(istream& i); read LD coefficients from weight file. void AddWeightsXMLTo(void* parent) const; create XML description for LD classification and regression; (for arbitrary number of output classes/targets). void ReadWeightsFromXML(void* wghtnode); read coefficients from xml weight file. void MakeClassSpecific(ostream& , const TString& ) const; write LD-specific classifier response. const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void DeclareOptions(); MethodLD options. void ProcessOptions(); this is the preparation for training. void PrintCoefficients( void ); Display the classification/regression coefficients for each variable. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodLD(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""LD"", TDirectory* theTargetDir = 0); constructor. » Author: Krzysztof Danielowski, Kamil Kraszewski, Maciej Kruk, Jan Therhaag » Copyright (c) 2008-2011: *; » Last changed: Tue Jun 2 16:17:09 2015 » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:434,Modifiability,Config,Configurable,434," virtual~MethodLD(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual v",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:790,Modifiability,Config,Configurable,790," virtual~MethodLD(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual v",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:1120,Modifiability,Config,ConfigurableTMVA,1120," virtual~MethodLD(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual v",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:1138,Modifiability,Config,Configurable,1138," virtual~MethodLD(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual v",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:1152,Modifiability,Config,Configurable,1152," virtual~MethodLD(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual v",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:1203,Modifiability,Config,ConfigurableTMVA,1203," virtual~MethodLD(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual v",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:1221,Modifiability,Config,Configurable,1221," virtual~MethodLD(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual v",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:1235,Modifiability,Config,Configurable,1235," virtual~MethodLD(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual v",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:1260,Modifiability,Config,Configurable,1260," virtual~MethodLD(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual v",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:2630,Modifiability,Config,Configurable,2630,"ase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollection(TMVA::Types::ETreeType type); virtual const char*TObject::GetIconName() const; const TString&TMVA::MethodBase::GetInputLabel(Int_t i) const; const TString&TMVA::MethodBase::GetInputTitle(Int_t i) const; const TString&TMVA::MethodBase::GetInputVar(Int_t i) const; const TString&TMVA::MethodBase::GetJobName() const; virtual Double_tTMVA::MethodBase::GetKSTrainingV",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:2691,Modifiability,Config,Configurable,2691,"tancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollection(TMVA::Types::ETreeType type); virtual const char*TObject::GetIconName() const; const TString&TMVA::MethodBase::GetInputLabel(Int_t i) const; const TString&TMVA::MethodBase::GetInputTitle(Int_t i) const; const TString&TMVA::MethodBase::GetInputVar(Int_t i) const; const TString&TMVA::MethodBase::GetJobName() const; virtual Double_tTMVA::MethodBase::GetKSTrainingVsTest(Char_t SorB, TString opt = ""X""); virtual Double_tTMVA::",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:4795,Modifiability,Config,Configurable,4795,"significance_value) const; Double_tTMVA::MethodBase::GetMean(Int_t ivar) const; const TString&TMVA::MethodBase::GetMethodName() const; TMVA::Types::EMVATMVA::MethodBase::GetMethodType() const; TStringTMVA::MethodBase::GetMethodTypeName() const; virtual vector<Float_t>TMVA::MethodBase::GetMulticlassEfficiency(vector<vector<Float_t> >& purity); virtual vector<Float_t>TMVA::MethodBase::GetMulticlassTrainingEfficiency(vector<vector<Float_t> >& purity); virtual const vector<Float_t>&TMVA::MethodBase::GetMulticlassValues(); virtual Double_tGetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); virtual const char*TMVA::MethodBase::GetName() const; UInt_tTMVA::MethodBase::GetNEvents() const; UInt_tTMVA::MethodBase::GetNTargets() const; UInt_tTMVA::MethodBase::GetNvar() const; UInt_tTMVA::MethodBase::GetNVariables() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; virtual Double_tTMVA::MethodBase::GetProba(const TMVA::Event* ev); virtual Double_tTMVA::MethodBase::GetProba(Double_t mvaVal, Double_t ap_sig); const TStringTMVA::MethodBase::GetProbaName() const; virtual Double_tTMVA::MethodBase::GetRarity(Double_t mvaVal, TMVA::Types::ESBType reftype = Types::kBackground) const; virtual voidTMVA::MethodBase::GetRegressionDeviation(UInt_t tgtNum, TMVA::Types::ETreeType type, Double_t& stddev, Double_t& stddev90Percent) const; virtual const vector<Float_t>&GetRegressionValues(); Double_tTMVA::MethodBase::GetRMS(Int_t ivar) const; virtual Double_tTMVA::MethodBase::GetROCIntegral(TH1D* histS, TH1D* histB) const; virtual Double_tTMVA::MethodBase::GetROCIntegral(TMVA::PDF* pdfS = 0, TMVA::PDF* pdfB = 0) const; virtual Double_tTMVA::MethodBase::GetSeparation(TH1*, TH1*) const; virtual Double_tTMVA::MethodBase::GetSeparation(TMVA::PDF* pdfS = 0, TMVA::PDF* pdfB = 0) const; Double_tTMVA::MethodBase::GetSignalReferenceCut() const; D",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:7464,Modifiability,Inherit,InheritsFrom,7464,"de() const; TStringTMVA::MethodBase::GetTrainingTMVAVersionString() const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TMVA::MethodBase&); TMVA::MethodBaseTMVA::MethodBase::MethodBase(TMVA::Types::EMVA methodType, TMVA::DataSetInfo& dsi, const TString& weightFile, TDirectory* theBaseDir = 0); TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TString",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:7530,Modifiability,Inherit,InheritsFrom,7530,") const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TMVA::MethodBase&); TMVA::MethodBaseTMVA::MethodBase::MethodBase(TMVA::Types::EMVA methodType, TMVA::DataSetInfo& dsi, const TString& weightFile, TDirectory* theBaseDir = 0); TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TString& jobName, TMVA::Types::EMVA methodType, const TString& methodTitl",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:9746,Modifiability,Config,Configurable,9746,"DataSetInfo& dsi, const TString& theWeightFile, TDirectory* theTargetDir = 0); TMVA::MethodLDMethodLD(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""LD"", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodLD&operator=(const TMVA::MethodLD&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; virtual voidProcessOptions(); voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& i); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObj",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:9927,Modifiability,Config,Configurable,9927,"st TString& theOption = ""LD"", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodLD&operator=(const TMVA::MethodLD&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; virtual voidProcessOptions(); voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& i); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetA",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:10087,Modifiability,Config,Configurable,10087,"nst char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodLD&operator=(const TMVA::MethodLD&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; virtual voidProcessOptions(); voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& i); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:10149,Modifiability,Config,Configurable,10149,"(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodLD&operator=(const TMVA::MethodLD&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; virtual voidProcessOptions(); voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& i); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:11121,Modifiability,Config,Configurable,11121,"eam& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& i); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInsp",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:11182,Modifiability,Config,Configurable,11182,"node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& i); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStrea",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:11466,Modifiability,Config,Configurable,11466,"dReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::Method",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:11568,Modifiability,Config,Configurable,11568,"hodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, ",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:13241,Modifiability,Config,Configurable,13241,"dBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:13486,Modifiability,Config,Configurable,13486,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidGetLDCoeff(); voidGetSum(); voidGetSumVal(); virtual voidInit(); voidInitMatrices(); voidPrintCoefficients(). Data Members; public:. Bool_tTMVA::MethodBase::fSet",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:13734,Modifiability,Config,Configurable,13734,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidGetLDCoeff(); voidGetSum(); voidGetSumVal(); virtual voidInit(); voidInitMatrices(); voidPrintCoefficients(). Data Members; public:. Bool_tTMVA::MethodBase::fSet",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:14175,Modifiability,Config,Configurable,14175,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidGetLDCoeff(); voidGetSum(); voidGetSumVal(); virtual voidInit(); voidInitMatrices(); voidPrintCoefficients(). Data Members; public:. Bool_tTMVA::MethodBase::fSet",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:14214,Modifiability,Config,Configurable,14214,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidGetLDCoeff(); voidGetSum(); voidGetSumVal(); virtual voidInit(); voidInitMatrices(); voidPrintCoefficients(). Data Members; public:. Bool_tTMVA::MethodBase::fSet",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:14536,Modifiability,Config,Configurable,14536,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidGetLDCoeff(); voidGetSum(); voidGetSumVal(); virtual voidInit(); voidInitMatrices(); voidPrintCoefficients(). Data Members; public:. Bool_tTMVA::MethodBase::fSet",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:14982,Modifiability,Config,Configurable,14982,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidGetLDCoeff(); voidGetSum(); voidGetSumVal(); virtual voidInit(); voidInitMatrices(); voidPrintCoefficients(). Data Members; public:. Bool_tTMVA::MethodBase::fSet",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:16469,Modifiability,variab,variables,16469,"atusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TMatrixD*fCoeffMatxMatrix of coefficients; vector<vector<Double_t>*>*fLDCoeffLD coefficients; Int_tfNRegOutsize of the output; TMatrixD*fSumMatxSum of coordinates product matrix; TMatrixD*fSumValMatxSum of values multiplied by coordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodLD(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""LD"", TDirectory* theTargetDir = 0); standard constructor for the LD. MethodLD(TMVA::DataSetInfo& dsi, const TS",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:16658,Modifiability,variab,variable,16658,"atusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TMatrixD*fCoeffMatxMatrix of coefficients; vector<vector<Double_t>*>*fLDCoeffLD coefficients; Int_tfNRegOutsize of the output; TMatrixD*fSumMatxSum of coordinates product matrix; TMatrixD*fSumValMatxSum of values multiplied by coordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodLD(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""LD"", TDirectory* theTargetDir = 0); standard constructor for the LD. MethodLD(TMVA::DataSetInfo& dsi, const TS",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:17354,Modifiability,Inherit,Inheritance,17354,"ndex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TMatrixD*fCoeffMatxMatrix of coefficients; vector<vector<Double_t>*>*fLDCoeffLD coefficients; Int_tfNRegOutsize of the output; TMatrixD*fSumMatxSum of coordinates product matrix; TMatrixD*fSumValMatxSum of values multiplied by coordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodLD(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""LD"", TDirectory* theTargetDir = 0); standard constructor for the LD. MethodLD(TMVA::DataSetInfo& dsi, const TString& theWeightFile, TDirectory* theTargetDir = 0); constructor from weight file. void Init( void ); default initialization called by all constructors. ~MethodLD( void ); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); LD can handle classification with 2 classes and regression with one regression-target. void Train( void ); compute fSumMatx. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); Returns the MVA classification output. const std::vector< Float_t >& GetRegressionValues(); Calculates the regression output. void InitMatrices( void ); Initializaton method; creates global matrices and vectors. void GetSum( void ); Calculates the mat",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:17367,Modifiability,Inherit,Inherited,17367,"ndex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TMatrixD*fCoeffMatxMatrix of coefficients; vector<vector<Double_t>*>*fLDCoeffLD coefficients; Int_tfNRegOutsize of the output; TMatrixD*fSumMatxSum of coordinates product matrix; TMatrixD*fSumValMatxSum of values multiplied by coordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodLD(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""LD"", TDirectory* theTargetDir = 0); standard constructor for the LD. MethodLD(TMVA::DataSetInfo& dsi, const TString& theWeightFile, TDirectory* theTargetDir = 0); constructor from weight file. void Init( void ); default initialization called by all constructors. ~MethodLD( void ); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); LD can handle classification with 2 classes and regression with one regression-target. void Train( void ); compute fSumMatx. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); Returns the MVA classification output. const std::vector< Float_t >& GetRegressionValues(); Calculates the regression output. void InitMatrices( void ); Initializaton method; creates global matrices and vectors. void GetSum( void ); Calculates the mat",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:19133,Modifiability,variab,variables,19133,"with one regression-target. void Train( void ); compute fSumMatx. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); Returns the MVA classification output. const std::vector< Float_t >& GetRegressionValues(); Calculates the regression output. void InitMatrices( void ); Initializaton method; creates global matrices and vectors. void GetSum( void ); Calculates the matrix transposed(X)*W*X with W being the diagonal weight matrix; and X the coordinates values. void GetSumVal( void ); Calculates the vector transposed(X)*W*Y with Y being the target vector. void GetLDCoeff( void ); Calculates the coeffiecients used for classification/regression. void ReadWeightsFromStream(istream& i); read LD coefficients from weight file. void AddWeightsXMLTo(void* parent) const; create XML description for LD classification and regression; (for arbitrary number of output classes/targets). void ReadWeightsFromXML(void* wghtnode); read coefficients from xml weight file. void MakeClassSpecific(ostream& , const TString& ) const; write LD-specific classifier response. const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void DeclareOptions(); MethodLD options. void ProcessOptions(); this is the preparation for training. void PrintCoefficients( void ); Display the classification/regression coefficients for each variable. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodLD(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""LD"", TDirectory* theTargetDir = 0); constructor. » Author: Krzysztof Danielowski, Kamil Kraszewski, Maciej Kruk, Jan Therhaag » Copyright (c) 2008-2011: *; » Last changed: Tue Jun 2 16:17:09 2015 » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:19338,Modifiability,variab,variable,19338,"with one regression-target. void Train( void ); compute fSumMatx. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); Returns the MVA classification output. const std::vector< Float_t >& GetRegressionValues(); Calculates the regression output. void InitMatrices( void ); Initializaton method; creates global matrices and vectors. void GetSum( void ); Calculates the matrix transposed(X)*W*X with W being the diagonal weight matrix; and X the coordinates values. void GetSumVal( void ); Calculates the vector transposed(X)*W*Y with Y being the target vector. void GetLDCoeff( void ); Calculates the coeffiecients used for classification/regression. void ReadWeightsFromStream(istream& i); read LD coefficients from weight file. void AddWeightsXMLTo(void* parent) const; create XML description for LD classification and regression; (for arbitrary number of output classes/targets). void ReadWeightsFromXML(void* wghtnode); read coefficients from xml weight file. void MakeClassSpecific(ostream& , const TString& ) const; write LD-specific classifier response. const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void DeclareOptions(); MethodLD options. void ProcessOptions(); this is the preparation for training. void PrintCoefficients( void ); Display the classification/regression coefficients for each variable. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodLD(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""LD"", TDirectory* theTargetDir = 0); constructor. » Author: Krzysztof Danielowski, Kamil Kraszewski, Maciej Kruk, Jan Therhaag » Copyright (c) 2008-2011: *; » Last changed: Tue Jun 2 16:17:09 2015 » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:9591,Performance,Optimiz,OptimizeTuningParameters,9591,"ry* theBaseDir = 0); TDirectory*TMVA::MethodBase::MethodBaseDir() const; TMVA::MethodLDMethodLD(const TMVA::MethodLD&); TMVA::MethodLDMethodLD(TMVA::DataSetInfo& dsi, const TString& theWeightFile, TDirectory* theTargetDir = 0); TMVA::MethodLDMethodLD(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""LD"", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodLD&operator=(const TMVA::MethodLD&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; virtual voidProcessOptions(); voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& i); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformation",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:11993,Performance,tune,tuneParameters,11993,"::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::W",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:7212,Security,Hash,Hash,7212,"String&); const TMVA::Event*TMVA::MethodBase::GetTrainingEvent(Long64_t ievt) const; UInt_tTMVA::MethodBase::GetTrainingROOTVersionCode() const; TStringTMVA::MethodBase::GetTrainingROOTVersionString() const; UInt_tTMVA::MethodBase::GetTrainingTMVAVersionCode() const; TStringTMVA::MethodBase::GetTrainingTMVAVersionString() const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::Method",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:11795,Testability,test,testTime,11795,"t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCu",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:12332,Testability,Test,TestBit,12332,"idTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBa",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:12371,Testability,Test,TestBits,12371,"dBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:12427,Testability,Test,TestClassification,12427,"dBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:12479,Testability,Test,TestMulticlass,12479,"dBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:12527,Testability,Test,TestRegression,12527,"dBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:14189,Testability,Log,Log,14189,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidGetLDCoeff(); voidGetSum(); voidGetSumVal(); virtual voidInit(); voidInitMatrices(); voidPrintCoefficients(). Data Members; public:. Bool_tTMVA::MethodBase::fSet",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:15298,Testability,test,testing,15298,"ase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidGetLDCoeff(); voidGetSum(); voidGetSumVal(); virtual voidInit(); voidInitMatrices(); voidPrintCoefficients(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLD.html:970,Usability,Clear,Clear,970," virtual~MethodLD(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual v",MatchSource.WIKI,root/html604/TMVA__MethodLD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLD.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:2578,Availability,recover,recovered,2578,"od; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. . Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; C is the matrix C′ that multiplied with itself; yields C: C=C′C′. We compute the; square-root matrix (SQM) by means of diagonalising (D) the; covariance matrix: . and the linear transformation of the linearly correlated into the; uncorrelated variables space is then given by multiplying the measured; variable tuple by the inverse of the SQM. Note that these transformations; are performed for both signal and background separately, since the; correlation pattern is not the same in the two samples.; ; The above diagonalisation is complete for linearly correlated,; Gaussian distributed variables only. In real-world examples this; is not often the case, so that only little additional information; may be recovered by the diagonalisation procedure. In these cases,; non-linear methods must be applied.; . Function Members (Methods); public:. virtual~MethodLikelihood(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TSt",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:4336,Availability,Error,Error,4336,"ect::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMV",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:4465,Availability,error,error,4465,"Object* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:4549,Availability,error,error,4549,"& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollec",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:20522,Energy Efficiency,Adapt,Adaptive,20522,"istograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Int_tfAverageEvtPerBinaverage events per bin; used to calculate fNbins; Int_t*fAverageEvtPerBinVarBaverage events per bin; used to calculate fNbins; Int_t*fAverageEvtPerBinVarSaverage events per bin; used to calculate fNbins; TStringfBorderMethodStringthe method to take care about ""border"" effects (string); TMVA::PDF*fDefaultPDFLikpdf that contains default definitions; Int_tfDropVariablefor ranking test; Double_tfEpsilonminimum number of likelihood (to avoid zero); vector<TH1*>*fHistBgdbackground PDFs (histograms); vector<TH1*>*fHistBgd_smoothbackground PDFs (smoothed histograms); vector<TH1*>*fHistSigsignal PDFs (histograms); vector<TH1*>*fHistSig_smoothsignal PDFs (smoothed histograms); TString*fInterpolateStringwhich interpolation method used for reference histograms (individual for each variable); Float_tfKDEfineFactorfine tuning factor for Adaptive KDE; TStringfKDEiterStringNumber of iterations (string); TStringfKDEtypeStringKernel type to use for KDE (string); Int_tfNsmoothnumber of smooth passes; Int_t*fNsmoothVarBnumber of smooth passes; Int_t*fNsmoothVarSnumber of smooth passes; vector<TMVA::PDF*>*fPDFBgdlist of PDFs (background); vector<TMVA::PDF*>*fPDFSiglist of PDFs (signal); Bool_tfTransformLikelihoodOutputlikelihood output is sigmoid-transformed. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodLikelihood(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodLikelihood(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* ",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:23283,Energy Efficiency,monitor,monitoring,23283,"ect boundaries. Since in Likelihood classification; the transformations are applied using both classes, also the corresponding boundaries; need to take this into account. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns the likelihood estimator for signal; fill a new Likelihood branch into the testTree. Double_t TransformLikelihoodOutput(Double_t ps, Double_t pb) const; returns transformed or non-transformed output. void WriteOptionsToStream(ostream& o, const TString& prefix) const; write options to stream. void AddWeightsXMLTo(void* parent) const; write weights to XML. const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void WriteWeightsToStream(TFile& rf) const; write reference PDFs to ROOT file. void ReadWeightsFromXML(void* wghtnode); read weights from XML. void ReadWeightsFromStream(istream& istr); read weight info from file; nothing to do for this method. void ReadWeightsFromStream(TFile& istr); read reference PDF from ROOT file. void WriteMonitoringHistosToFile( void ); write histograms and PDFs to file for monitoring purposes. void MakeClassSpecificHeader(ostream& , const TString& = """") const; write specific header of the classifier (mostly include files). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodLikelihood(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Peter Speckmayer, Eckhard von Toerne, Jan Therhaag » Copyright (c) 2005-2011: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:23568,Integrability,message,message,23568,"ect boundaries. Since in Likelihood classification; the transformations are applied using both classes, also the corresponding boundaries; need to take this into account. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns the likelihood estimator for signal; fill a new Likelihood branch into the testTree. Double_t TransformLikelihoodOutput(Double_t ps, Double_t pb) const; returns transformed or non-transformed output. void WriteOptionsToStream(ostream& o, const TString& prefix) const; write options to stream. void AddWeightsXMLTo(void* parent) const; write weights to XML. const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void WriteWeightsToStream(TFile& rf) const; write reference PDFs to ROOT file. void ReadWeightsFromXML(void* wghtnode); read weights from XML. void ReadWeightsFromStream(istream& istr); read weight info from file; nothing to do for this method. void ReadWeightsFromStream(TFile& istr); read reference PDF from ROOT file. void WriteMonitoringHistosToFile( void ); write histograms and PDFs to file for monitoring purposes. void MakeClassSpecificHeader(ostream& , const TString& = """") const; write specific header of the classifier (mostly include files). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodLikelihood(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Peter Speckmayer, Eckhard von Toerne, Jan Therhaag » Copyright (c) 2005-2011: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:537,Modifiability,variab,variables,537,". TMVA::MethodLikelihood. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodLikelihood. class TMVA::MethodLikelihood: public TMVA::MethodBase. Likelihood analysis (""non-parametric approach""); ; Also implemented is a ""diagonalized likelihood approach"",; which improves over the uncorrelated likelihood ansatz by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix; ; The method of maximum likelihood is the most straightforward, and; certainly among the most elegant multivariate analyser approaches.; We define the likelihood ratio, RL, for event; i, by:. Here the signal and background likelihoods, LS,; LB, are products of the corresponding probability; densities, pS, pB, of the; Nvar discriminating variables used in the MVA: . and accordingly for LB.; In practise, TMVA uses polynomial splines to estimate the probability; density functions (PDF) obtained from the distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed; by. to avoid the occurrence of heavy peaks at RL=0,1.; Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. . Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; C is the matrix C′ that multiplied with itself; yields C: C=C′C′. We compute the; square-root matrix (SQM) by means of diagonalisin",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:958,Modifiability,variab,variables,958,". TMVA::MethodLikelihood. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodLikelihood. class TMVA::MethodLikelihood: public TMVA::MethodBase. Likelihood analysis (""non-parametric approach""); ; Also implemented is a ""diagonalized likelihood approach"",; which improves over the uncorrelated likelihood ansatz by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix; ; The method of maximum likelihood is the most straightforward, and; certainly among the most elegant multivariate analyser approaches.; We define the likelihood ratio, RL, for event; i, by:. Here the signal and background likelihoods, LS,; LB, are products of the corresponding probability; densities, pS, pB, of the; Nvar discriminating variables used in the MVA: . and accordingly for LB.; In practise, TMVA uses polynomial splines to estimate the probability; density functions (PDF) obtained from the distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed; by. to avoid the occurrence of heavy peaks at RL=0,1.; Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. . Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; C is the matrix C′ that multiplied with itself; yields C: C=C′C′. We compute the; square-root matrix (SQM) by means of diagonalisin",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:1156,Modifiability,variab,variables,1156,"rch. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodLikelihood. class TMVA::MethodLikelihood: public TMVA::MethodBase. Likelihood analysis (""non-parametric approach""); ; Also implemented is a ""diagonalized likelihood approach"",; which improves over the uncorrelated likelihood ansatz by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix; ; The method of maximum likelihood is the most straightforward, and; certainly among the most elegant multivariate analyser approaches.; We define the likelihood ratio, RL, for event; i, by:. Here the signal and background likelihoods, LS,; LB, are products of the corresponding probability; densities, pS, pB, of the; Nvar discriminating variables used in the MVA: . and accordingly for LB.; In practise, TMVA uses polynomial splines to estimate the probability; density functions (PDF) obtained from the distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed; by. to avoid the occurrence of heavy peaks at RL=0,1.; Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. . Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; C is the matrix C′ that multiplied with itself; yields C: C=C′C′. We compute the; square-root matrix (SQM) by means of diagonalising (D) the; covariance matrix: . and the linear transformation of the linearly correlate",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:1426,Modifiability,variab,variables,1426,"plemented is a ""diagonalized likelihood approach"",; which improves over the uncorrelated likelihood ansatz by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix; ; The method of maximum likelihood is the most straightforward, and; certainly among the most elegant multivariate analyser approaches.; We define the likelihood ratio, RL, for event; i, by:. Here the signal and background likelihoods, LS,; LB, are products of the corresponding probability; densities, pS, pB, of the; Nvar discriminating variables used in the MVA: . and accordingly for LB.; In practise, TMVA uses polynomial splines to estimate the probability; density functions (PDF) obtained from the distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed; by. to avoid the occurrence of heavy peaks at RL=0,1.; Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. . Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; C is the matrix C′ that multiplied with itself; yields C: C=C′C′. We compute the; square-root matrix (SQM) by means of diagonalising (D) the; covariance matrix: . and the linear transformation of the linearly correlated into the; uncorrelated variables space is then given by multiplying the measured; variable tuple by the inverse of the SQM. Note that these transformations; are performed for both signal and background separately, since the; correlation pattern is not the same in the two samples.; ; The above diagonalis",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:2113,Modifiability,variab,variables,2113,"he distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed; by. to avoid the occurrence of heavy peaks at RL=0,1.; Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. . Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; C is the matrix C′ that multiplied with itself; yields C: C=C′C′. We compute the; square-root matrix (SQM) by means of diagonalising (D) the; covariance matrix: . and the linear transformation of the linearly correlated into the; uncorrelated variables space is then given by multiplying the measured; variable tuple by the inverse of the SQM. Note that these transformations; are performed for both signal and background separately, since the; correlation pattern is not the same in the two samples.; ; The above diagonalisation is complete for linearly correlated,; Gaussian distributed variables only. In real-world examples this; is not often the case, so that only little additional information; may be recovered by the diagonalisation procedure. In these cases,; non-linear methods must be applied.; . Function Members (Methods); public:. virtual~MethodLikelihood(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voi",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:2172,Modifiability,variab,variable,2172,"he distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed; by. to avoid the occurrence of heavy peaks at RL=0,1.; Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. . Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; C is the matrix C′ that multiplied with itself; yields C: C=C′C′. We compute the; square-root matrix (SQM) by means of diagonalising (D) the; covariance matrix: . and the linear transformation of the linearly correlated into the; uncorrelated variables space is then given by multiplying the measured; variable tuple by the inverse of the SQM. Note that these transformations; are performed for both signal and background separately, since the; correlation pattern is not the same in the two samples.; ; The above diagonalisation is complete for linearly correlated,; Gaussian distributed variables only. In real-world examples this; is not often the case, so that only little additional information; may be recovered by the diagonalisation procedure. In these cases,; non-linear methods must be applied.; . Function Members (Methods); public:. virtual~MethodLikelihood(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voi",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:2459,Modifiability,variab,variables,2459,"ant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. . Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; C is the matrix C′ that multiplied with itself; yields C: C=C′C′. We compute the; square-root matrix (SQM) by means of diagonalising (D) the; covariance matrix: . and the linear transformation of the linearly correlated into the; uncorrelated variables space is then given by multiplying the measured; variable tuple by the inverse of the SQM. Note that these transformations; are performed for both signal and background separately, since the; correlation pattern is not the same in the two samples.; ; The above diagonalisation is complete for linearly correlated,; Gaussian distributed variables only. In real-world examples this; is not often the case, so that only little additional information; may be recovered by the diagonalisation procedure. In these cases,; non-linear methods must be applied.; . Function Members (Methods); public:. virtual~MethodLikelihood(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """"",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:2808,Modifiability,Config,Configurable,2808,,MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:3164,Modifiability,Config,Configurable,3164,,MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:3494,Modifiability,Config,ConfigurableTMVA,3494,,MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:3512,Modifiability,Config,Configurable,3512,,MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:3526,Modifiability,Config,Configurable,3526,,MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:3577,Modifiability,Config,ConfigurableTMVA,3577,,MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:3595,Modifiability,Config,Configurable,3595,,MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:3609,Modifiability,Config,Configurable,3609,,MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:3634,Modifiability,Config,Configurable,3634,,MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:4913,Modifiability,Config,Configurable,4913,"ase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollection(TMVA::Types::ETreeType type); virtual const char*TObject::GetIconName() const; const TString&TMVA::MethodBase::GetInputLabel(Int_t i) const; const TString&TMVA::MethodBase::GetInputTitle(Int_t i) const; const TString&TMVA::MethodBase::GetInputVar(Int_t i) const; const TString&TMVA::MethodBase::GetJobName() const; virtual Double_tTMVA::MethodBase::GetKSTrainingV",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:4974,Modifiability,Config,Configurable,4974,"tancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollection(TMVA::Types::ETreeType type); virtual const char*TObject::GetIconName() const; const TString&TMVA::MethodBase::GetInputLabel(Int_t i) const; const TString&TMVA::MethodBase::GetInputTitle(Int_t i) const; const TString&TMVA::MethodBase::GetInputVar(Int_t i) const; const TString&TMVA::MethodBase::GetJobName() const; virtual Double_tTMVA::MethodBase::GetKSTrainingVsTest(Char_t SorB, TString opt = ""X""); virtual Double_tTMVA::",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:7078,Modifiability,Config,Configurable,7078,"significance_value) const; Double_tTMVA::MethodBase::GetMean(Int_t ivar) const; const TString&TMVA::MethodBase::GetMethodName() const; TMVA::Types::EMVATMVA::MethodBase::GetMethodType() const; TStringTMVA::MethodBase::GetMethodTypeName() const; virtual vector<Float_t>TMVA::MethodBase::GetMulticlassEfficiency(vector<vector<Float_t> >& purity); virtual vector<Float_t>TMVA::MethodBase::GetMulticlassTrainingEfficiency(vector<vector<Float_t> >& purity); virtual const vector<Float_t>&TMVA::MethodBase::GetMulticlassValues(); virtual Double_tGetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); virtual const char*TMVA::MethodBase::GetName() const; UInt_tTMVA::MethodBase::GetNEvents() const; UInt_tTMVA::MethodBase::GetNTargets() const; UInt_tTMVA::MethodBase::GetNvar() const; UInt_tTMVA::MethodBase::GetNVariables() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; virtual Double_tTMVA::MethodBase::GetProba(const TMVA::Event* ev); virtual Double_tTMVA::MethodBase::GetProba(Double_t mvaVal, Double_t ap_sig); const TStringTMVA::MethodBase::GetProbaName() const; virtual Double_tTMVA::MethodBase::GetRarity(Double_t mvaVal, TMVA::Types::ESBType reftype = Types::kBackground) const; virtual voidTMVA::MethodBase::GetRegressionDeviation(UInt_t tgtNum, TMVA::Types::ETreeType type, Double_t& stddev, Double_t& stddev90Percent) const; virtual const vector<Float_t>&TMVA::MethodBase::GetRegressionValues(); const vector<Float_t>&TMVA::MethodBase::GetRegressionValues(const TMVA::Event*const ev); Double_tTMVA::MethodBase::GetRMS(Int_t ivar) const; virtual Double_tTMVA::MethodBase::GetROCIntegral(TH1D* histS, TH1D* histB) const; virtual Double_tTMVA::MethodBase::GetROCIntegral(TMVA::PDF* pdfS = 0, TMVA::PDF* pdfB = 0) const; virtual Double_tTMVA::MethodBase::GetSeparation(TH1*, TH1*) const; virtual Double_tTMVA::MethodBase::GetSeparation(",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:9854,Modifiability,Inherit,InheritsFrom,9854,"de() const; TStringTMVA::MethodBase::GetTrainingTMVAVersionString() const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TMVA::MethodBase&); TMVA::MethodBaseTMVA::MethodBase::MethodBase(TMVA::Types::EMVA methodType, TMVA::DataSetInfo& dsi, const TString& weightFile, TDirectory* theBaseDir = 0); TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TString",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:9920,Modifiability,Inherit,InheritsFrom,9920,") const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TMVA::MethodBase&); TMVA::MethodBaseTMVA::MethodBase::MethodBase(TMVA::Types::EMVA methodType, TMVA::DataSetInfo& dsi, const TString& weightFile, TDirectory* theBaseDir = 0); TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TString& jobName, TMVA::Types::EMVA methodType, const TString& methodTitl",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:12219,Modifiability,Config,Configurable,12219,"ghtFile, TDirectory* theTargetDir = __null); TMVA::MethodLikelihoodMethodLikelihood(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodLikelihood&operator=(const TMVA::MethodLikelihood&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:12400,Modifiability,Config,Configurable,12400,"eOption = """", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodLikelihood&operator=(const TMVA::MethodLikelihood&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidT",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:12530,Modifiability,Config,Configurable,12530,"* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodLikelihood&operator=(const TMVA::MethodLikelihood&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTO",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:12592,Modifiability,Config,Configurable,12592,"perator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodLikelihood&operator=(const TMVA::MethodLikelihood&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t ",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:13615,Modifiability,Config,Configurable,13615,"XML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInsp",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:13676,Modifiability,Config,Configurable,13676,"oidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStrea",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:13960,Modifiability,Config,Configurable,13960,"dReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::Method",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:14062,Modifiability,Config,Configurable,14062,"hodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, ",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:16036,Modifiability,Config,Configurable,16036,"iteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const. protected:. virtual voidDeclareCompatibilityOptions(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidMakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); virtual voidInit(); virtual voidProcessOptions(); Double_tTransformLikelihoodOutput(Double_t ps, Double_t pb) const. Data ",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:16284,Modifiability,Config,Configurable,16284,"iteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const. protected:. virtual voidDeclareCompatibilityOptions(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidMakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); virtual voidInit(); virtual voidProcessOptions(); Double_tTransformLikelihoodOutput(Double_t ps, Double_t pb) const. Data ",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:16725,Modifiability,Config,Configurable,16725,"iteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const. protected:. virtual voidDeclareCompatibilityOptions(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidMakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); virtual voidInit(); virtual voidProcessOptions(); Double_tTransformLikelihoodOutput(Double_t ps, Double_t pb) const. Data ",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:16764,Modifiability,Config,Configurable,16764,"iteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const. protected:. virtual voidDeclareCompatibilityOptions(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidMakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); virtual voidInit(); virtual voidProcessOptions(); Double_tTransformLikelihoodOutput(Double_t ps, Double_t pb) const. Data ",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:17068,Modifiability,Config,Configurable,17068,"iteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const. protected:. virtual voidDeclareCompatibilityOptions(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidMakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); virtual voidInit(); virtual voidProcessOptions(); Double_tTransformLikelihoodOutput(Double_t ps, Double_t pb) const. Data ",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:17514,Modifiability,Config,Configurable,17514,"iteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const. protected:. virtual voidDeclareCompatibilityOptions(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidMakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); virtual voidInit(); virtual voidProcessOptions(); Double_tTransformLikelihoodOutput(Double_t ps, Double_t pb) const. Data ",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:19034,Modifiability,variab,variables,19034,"atusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Int_tfAverageEvtPerBinaverage events per bin; used to calculate fNbins; Int_t*fAverageEvtPerBinVarBaverage events per bin; used to calculate fNbins; Int_t*fAverageEvtPerBinVarSaverage events per bin; used to calculate fNbins; TStringfBorderMethodStringthe method to take care about ""border"" effects (string); TMVA::PDF*fDefaultPDFLikpdf that contains default definitions; Int_tfDropVariablefor ranking test; Double_tfEpsilonminimum number of likelihood (to avoid zero); vector<TH1*>*fHistBgdbackground PDFs (histograms); vector<TH1*>*fHistBgd_smoothbackg",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:19223,Modifiability,variab,variable,19223,"atusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Int_tfAverageEvtPerBinaverage events per bin; used to calculate fNbins; Int_t*fAverageEvtPerBinVarBaverage events per bin; used to calculate fNbins; Int_t*fAverageEvtPerBinVarSaverage events per bin; used to calculate fNbins; TStringfBorderMethodStringthe method to take care about ""border"" effects (string); TMVA::PDF*fDefaultPDFLikpdf that contains default definitions; Int_tfDropVariablefor ranking test; Double_tfEpsilonminimum number of likelihood (to avoid zero); vector<TH1*>*fHistBgdbackground PDFs (histograms); vector<TH1*>*fHistBgd_smoothbackg",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:20467,Modifiability,variab,variable,20467,"istograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Int_tfAverageEvtPerBinaverage events per bin; used to calculate fNbins; Int_t*fAverageEvtPerBinVarBaverage events per bin; used to calculate fNbins; Int_t*fAverageEvtPerBinVarSaverage events per bin; used to calculate fNbins; TStringfBorderMethodStringthe method to take care about ""border"" effects (string); TMVA::PDF*fDefaultPDFLikpdf that contains default definitions; Int_tfDropVariablefor ranking test; Double_tfEpsilonminimum number of likelihood (to avoid zero); vector<TH1*>*fHistBgdbackground PDFs (histograms); vector<TH1*>*fHistBgd_smoothbackground PDFs (smoothed histograms); vector<TH1*>*fHistSigsignal PDFs (histograms); vector<TH1*>*fHistSig_smoothsignal PDFs (smoothed histograms); TString*fInterpolateStringwhich interpolation method used for reference histograms (individual for each variable); Float_tfKDEfineFactorfine tuning factor for Adaptive KDE; TStringfKDEiterStringNumber of iterations (string); TStringfKDEtypeStringKernel type to use for KDE (string); Int_tfNsmoothnumber of smooth passes; Int_t*fNsmoothVarBnumber of smooth passes; Int_t*fNsmoothVarSnumber of smooth passes; vector<TMVA::PDF*>*fPDFBgdlist of PDFs (background); vector<TMVA::PDF*>*fPDFSiglist of PDFs (signal); Bool_tfTransformLikelihoodOutputlikelihood output is sigmoid-transformed. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodLikelihood(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodLikelihood(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* ",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:20522,Modifiability,Adapt,Adaptive,20522,"istograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Int_tfAverageEvtPerBinaverage events per bin; used to calculate fNbins; Int_t*fAverageEvtPerBinVarBaverage events per bin; used to calculate fNbins; Int_t*fAverageEvtPerBinVarSaverage events per bin; used to calculate fNbins; TStringfBorderMethodStringthe method to take care about ""border"" effects (string); TMVA::PDF*fDefaultPDFLikpdf that contains default definitions; Int_tfDropVariablefor ranking test; Double_tfEpsilonminimum number of likelihood (to avoid zero); vector<TH1*>*fHistBgdbackground PDFs (histograms); vector<TH1*>*fHistBgd_smoothbackground PDFs (smoothed histograms); vector<TH1*>*fHistSigsignal PDFs (histograms); vector<TH1*>*fHistSig_smoothsignal PDFs (smoothed histograms); TString*fInterpolateStringwhich interpolation method used for reference histograms (individual for each variable); Float_tfKDEfineFactorfine tuning factor for Adaptive KDE; TStringfKDEiterStringNumber of iterations (string); TStringfKDEtypeStringKernel type to use for KDE (string); Int_tfNsmoothnumber of smooth passes; Int_t*fNsmoothVarBnumber of smooth passes; Int_t*fNsmoothVarSnumber of smooth passes; vector<TMVA::PDF*>*fPDFBgdlist of PDFs (background); vector<TMVA::PDF*>*fPDFSiglist of PDFs (signal); Bool_tfTransformLikelihoodOutputlikelihood output is sigmoid-transformed. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodLikelihood(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodLikelihood(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* ",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:20960,Modifiability,Inherit,Inheritance,20960,"DefaultPDFLikpdf that contains default definitions; Int_tfDropVariablefor ranking test; Double_tfEpsilonminimum number of likelihood (to avoid zero); vector<TH1*>*fHistBgdbackground PDFs (histograms); vector<TH1*>*fHistBgd_smoothbackground PDFs (smoothed histograms); vector<TH1*>*fHistSigsignal PDFs (histograms); vector<TH1*>*fHistSig_smoothsignal PDFs (smoothed histograms); TString*fInterpolateStringwhich interpolation method used for reference histograms (individual for each variable); Float_tfKDEfineFactorfine tuning factor for Adaptive KDE; TStringfKDEiterStringNumber of iterations (string); TStringfKDEtypeStringKernel type to use for KDE (string); Int_tfNsmoothnumber of smooth passes; Int_t*fNsmoothVarBnumber of smooth passes; Int_t*fNsmoothVarSnumber of smooth passes; vector<TMVA::PDF*>*fPDFBgdlist of PDFs (background); vector<TMVA::PDF*>*fPDFSiglist of PDFs (signal); Bool_tfTransformLikelihoodOutputlikelihood output is sigmoid-transformed. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodLikelihood(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodLikelihood(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); construct likelihood references from file. ~MethodLikelihood( void ); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); FDA can handle classification with 2 classes. void Init( void ); default initialisation called by all constructors. void DeclareOptions(); define the options (their key words) that can be set in the option string; TransformOutput <bool> transform (often strongly peaked) likelihood output through sigmoid inversion. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility. void ProcessOptions(). void Train( void ); cre",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:20973,Modifiability,Inherit,Inherited,20973,"DefaultPDFLikpdf that contains default definitions; Int_tfDropVariablefor ranking test; Double_tfEpsilonminimum number of likelihood (to avoid zero); vector<TH1*>*fHistBgdbackground PDFs (histograms); vector<TH1*>*fHistBgd_smoothbackground PDFs (smoothed histograms); vector<TH1*>*fHistSigsignal PDFs (histograms); vector<TH1*>*fHistSig_smoothsignal PDFs (smoothed histograms); TString*fInterpolateStringwhich interpolation method used for reference histograms (individual for each variable); Float_tfKDEfineFactorfine tuning factor for Adaptive KDE; TStringfKDEiterStringNumber of iterations (string); TStringfKDEtypeStringKernel type to use for KDE (string); Int_tfNsmoothnumber of smooth passes; Int_t*fNsmoothVarBnumber of smooth passes; Int_t*fNsmoothVarSnumber of smooth passes; vector<TMVA::PDF*>*fPDFBgdlist of PDFs (background); vector<TMVA::PDF*>*fPDFSiglist of PDFs (signal); Bool_tfTransformLikelihoodOutputlikelihood output is sigmoid-transformed. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodLikelihood(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodLikelihood(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); construct likelihood references from file. ~MethodLikelihood( void ); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); FDA can handle classification with 2 classes. void Init( void ); default initialisation called by all constructors. void DeclareOptions(); define the options (their key words) that can be set in the option string; TransformOutput <bool> transform (often strongly peaked) likelihood output through sigmoid inversion. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility. void ProcessOptions(). void Train( void ); cre",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:22871,Modifiability,variab,variables,22871,"patibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility. void ProcessOptions(). void Train( void ); create reference distributions (PDFs) from signal and background events:; fill histograms and smooth them; if decorrelation is required, compute; corresponding square-root matrices; the reference histograms require the correct boundaries. Since in Likelihood classification; the transformations are applied using both classes, also the corresponding boundaries; need to take this into account. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns the likelihood estimator for signal; fill a new Likelihood branch into the testTree. Double_t TransformLikelihoodOutput(Double_t ps, Double_t pb) const; returns transformed or non-transformed output. void WriteOptionsToStream(ostream& o, const TString& prefix) const; write options to stream. void AddWeightsXMLTo(void* parent) const; write weights to XML. const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void WriteWeightsToStream(TFile& rf) const; write reference PDFs to ROOT file. void ReadWeightsFromXML(void* wghtnode); read weights from XML. void ReadWeightsFromStream(istream& istr); read weight info from file; nothing to do for this method. void ReadWeightsFromStream(TFile& istr); read reference PDF from ROOT file. void WriteMonitoringHistosToFile( void ); write histograms and PDFs to file for monitoring purposes. void MakeClassSpecificHeader(ostream& , const TString& = """") const; write specific header of the classifier (mostly include files). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodLikelihood(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0). » Aut",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:2251,Performance,perform,performed,2251,"Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. . Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; C is the matrix C′ that multiplied with itself; yields C: C=C′C′. We compute the; square-root matrix (SQM) by means of diagonalising (D) the; covariance matrix: . and the linear transformation of the linearly correlated into the; uncorrelated variables space is then given by multiplying the measured; variable tuple by the inverse of the SQM. Note that these transformations; are performed for both signal and background separately, since the; correlation pattern is not the same in the two samples.; ; The above diagonalisation is complete for linearly correlated,; Gaussian distributed variables only. In real-world examples this; is not often the case, so that only little additional information; may be recovered by the diagonalisation procedure. In these cases,; non-linear methods must be applied.; . Function Members (Methods); public:. virtual~MethodLikelihood(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const ch",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:12064,Performance,Optimiz,OptimizeTuningParameters,12064,"odLikelihoodMethodLikelihood(const TMVA::MethodLikelihood&); TMVA::MethodLikelihoodMethodLikelihood(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); TMVA::MethodLikelihoodMethodLikelihood(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodLikelihood&operator=(const TMVA::MethodLikelihood&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:14487,Performance,tune,tuneParameters,14487,"::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::W",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:1243,Safety,avoid,avoid,1243,"ethodLikelihood. class TMVA::MethodLikelihood: public TMVA::MethodBase. Likelihood analysis (""non-parametric approach""); ; Also implemented is a ""diagonalized likelihood approach"",; which improves over the uncorrelated likelihood ansatz by; transforming linearly the input variables into a diagonal space,; using the square-root of the covariance matrix; ; The method of maximum likelihood is the most straightforward, and; certainly among the most elegant multivariate analyser approaches.; We define the likelihood ratio, RL, for event; i, by:. Here the signal and background likelihoods, LS,; LB, are products of the corresponding probability; densities, pS, pB, of the; Nvar discriminating variables used in the MVA: . and accordingly for LB.; In practise, TMVA uses polynomial splines to estimate the probability; density functions (PDF) obtained from the distributions of the; training variables. Note that in TMVA the output of the likelihood ratio is transformed; by. to avoid the occurrence of heavy peaks at RL=0,1.; Decorrelated (or ""diagonalized"") Likelihood. The biggest drawback of the Likelihood approach is that it assumes; that the discriminant variables are uncorrelated. If it were the case,; it can be proven that the discrimination obtained by the above likelihood; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. . Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; C is the matrix C′ that multiplied with itself; yields C: C=C′C′. We compute the; square-root matrix (SQM) by means of diagonalising (D) the; covariance matrix: . and the linear transformation of the linearly correlated into the; uncorrelated variables space is then given by multiplying the measured; variable tuple by the inverse of the SQM. Note that these transformations; are performed for",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:2578,Safety,recover,recovered,2578,"od; ratio is optimal, ie, no other method can beat it. However, in most; practical applications of MVAs correlations are present. . Linear correlations, measured from the training sample, can be taken; into account in a straightforward manner through the square-root; of the covariance matrix. The square-root of a matrix; C is the matrix C′ that multiplied with itself; yields C: C=C′C′. We compute the; square-root matrix (SQM) by means of diagonalising (D) the; covariance matrix: . and the linear transformation of the linearly correlated into the; uncorrelated variables space is then given by multiplying the measured; variable tuple by the inverse of the SQM. Note that these transformations; are performed for both signal and background separately, since the; correlation pattern is not the same in the two samples.; ; The above diagonalisation is complete for linearly correlated,; Gaussian distributed variables only. In real-world examples this; is not often the case, so that only little additional information; may be recovered by the diagonalisation procedure. In these cases,; non-linear methods must be applied.; . Function Members (Methods); public:. virtual~MethodLikelihood(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TSt",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:20122,Safety,avoid,avoid,20122,"istograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Int_tfAverageEvtPerBinaverage events per bin; used to calculate fNbins; Int_t*fAverageEvtPerBinVarBaverage events per bin; used to calculate fNbins; Int_t*fAverageEvtPerBinVarSaverage events per bin; used to calculate fNbins; TStringfBorderMethodStringthe method to take care about ""border"" effects (string); TMVA::PDF*fDefaultPDFLikpdf that contains default definitions; Int_tfDropVariablefor ranking test; Double_tfEpsilonminimum number of likelihood (to avoid zero); vector<TH1*>*fHistBgdbackground PDFs (histograms); vector<TH1*>*fHistBgd_smoothbackground PDFs (smoothed histograms); vector<TH1*>*fHistSigsignal PDFs (histograms); vector<TH1*>*fHistSig_smoothsignal PDFs (smoothed histograms); TString*fInterpolateStringwhich interpolation method used for reference histograms (individual for each variable); Float_tfKDEfineFactorfine tuning factor for Adaptive KDE; TStringfKDEiterStringNumber of iterations (string); TStringfKDEtypeStringKernel type to use for KDE (string); Int_tfNsmoothnumber of smooth passes; Int_t*fNsmoothVarBnumber of smooth passes; Int_t*fNsmoothVarSnumber of smooth passes; vector<TMVA::PDF*>*fPDFBgdlist of PDFs (background); vector<TMVA::PDF*>*fPDFSiglist of PDFs (signal); Bool_tfTransformLikelihoodOutputlikelihood output is sigmoid-transformed. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodLikelihood(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodLikelihood(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* ",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:9602,Security,Hash,Hash,9602,"String&); const TMVA::Event*TMVA::MethodBase::GetTrainingEvent(Long64_t ievt) const; UInt_tTMVA::MethodBase::GetTrainingROOTVersionCode() const; TStringTMVA::MethodBase::GetTrainingROOTVersionString() const; UInt_tTMVA::MethodBase::GetTrainingTMVAVersionCode() const; TStringTMVA::MethodBase::GetTrainingTMVAVersionString() const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::Method",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:14289,Testability,test,testTime,14289,"t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCu",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:14826,Testability,Test,TestBit,14826,"idTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidWriteMonitoringHistosToFile() const; virtual voidWriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; ",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:14865,Testability,Test,TestBits,14865,"irectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidWriteMonitoringHistosToFile() const; virtual voidWriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) cons",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:14921,Testability,Test,TestClassification,14921,"ectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidWriteMonitoringHistosToFile() const; virtual voidWriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const.",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:14973,Testability,Test,TestMulticlass,14973,"ectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidWriteMonitoringHistosToFile() const; virtual voidWriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const.",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:15021,Testability,Test,TestRegression,15021,"ectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidWriteMonitoringHistosToFile() const; virtual voidWriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const.",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:16739,Testability,Log,Log,16739,"iteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const. protected:. virtual voidDeclareCompatibilityOptions(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidMakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); virtual voidInit(); virtual voidProcessOptions(); Double_tTransformLikelihoodOutput(Double_t ps, Double_t pb) const. Data ",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:17863,Testability,test,testing,17863,"voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); virtual voidInit(); virtual voidProcessOptions(); Double_tTransformLikelihoodOutput(Double_t ps, Double_t pb) const. Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:20067,Testability,test,test,20067,"istograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Int_tfAverageEvtPerBinaverage events per bin; used to calculate fNbins; Int_t*fAverageEvtPerBinVarBaverage events per bin; used to calculate fNbins; Int_t*fAverageEvtPerBinVarSaverage events per bin; used to calculate fNbins; TStringfBorderMethodStringthe method to take care about ""border"" effects (string); TMVA::PDF*fDefaultPDFLikpdf that contains default definitions; Int_tfDropVariablefor ranking test; Double_tfEpsilonminimum number of likelihood (to avoid zero); vector<TH1*>*fHistBgdbackground PDFs (histograms); vector<TH1*>*fHistBgd_smoothbackground PDFs (smoothed histograms); vector<TH1*>*fHistSigsignal PDFs (histograms); vector<TH1*>*fHistSig_smoothsignal PDFs (smoothed histograms); TString*fInterpolateStringwhich interpolation method used for reference histograms (individual for each variable); Float_tfKDEfineFactorfine tuning factor for Adaptive KDE; TStringfKDEiterStringNumber of iterations (string); TStringfKDEtypeStringKernel type to use for KDE (string); Int_tfNsmoothnumber of smooth passes; Int_t*fNsmoothVarBnumber of smooth passes; Int_t*fNsmoothVarSnumber of smooth passes; vector<TMVA::PDF*>*fPDFBgdlist of PDFs (background); vector<TMVA::PDF*>*fPDFSiglist of PDFs (signal); Bool_tfTransformLikelihoodOutputlikelihood output is sigmoid-transformed. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodLikelihood(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodLikelihood(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* ",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:22525,Testability,test,testTree,22525,"sType type, UInt_t numberClasses, UInt_t numberTargets); FDA can handle classification with 2 classes. void Init( void ); default initialisation called by all constructors. void DeclareOptions(); define the options (their key words) that can be set in the option string; TransformOutput <bool> transform (often strongly peaked) likelihood output through sigmoid inversion. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility. void ProcessOptions(). void Train( void ); create reference distributions (PDFs) from signal and background events:; fill histograms and smooth them; if decorrelation is required, compute; corresponding square-root matrices; the reference histograms require the correct boundaries. Since in Likelihood classification; the transformations are applied using both classes, also the corresponding boundaries; need to take this into account. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns the likelihood estimator for signal; fill a new Likelihood branch into the testTree. Double_t TransformLikelihoodOutput(Double_t ps, Double_t pb) const; returns transformed or non-transformed output. void WriteOptionsToStream(ostream& o, const TString& prefix) const; write options to stream. void AddWeightsXMLTo(void* parent) const; write weights to XML. const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void WriteWeightsToStream(TFile& rf) const; write reference PDFs to ROOT file. void ReadWeightsFromXML(void* wghtnode); read weights from XML. void ReadWeightsFromStream(istream& istr); read weight info from file; nothing to do for this method. void ReadWeightsFromStream(TFile& istr); read reference PDF from ROOT file. void WriteMonitoringHistosToFile( void ); write histograms and PDFs to file for monitoring purposes. void MakeClassSpecificHeader(ostream& , const TString& = """") const; write specific header of the classifier (mostly include files). void MakeClassSpeci",MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodLikelihood.html:3344,Usability,Clear,Clear,3344,,MatchSource.WIKI,root/html604/TMVA__MethodLikelihood.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodLikelihood.html
https://root.cern/root/html604/TMVA__MethodMLP.html:2438,Availability,Error,Error,2438,"able(const TMVA::Configurable&); TMVA::ConvergenceTestTMVA::ConvergenceTest::ConvergenceTest(); TMVA::ConvergenceTestTMVA::ConvergenceTest::ConvergenceTest(const TMVA::ConvergenceTest&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*TMVA::MethodANNBase::CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; Bool_tTMVA::MethodANNBase::Debug() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>& parameters); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; Float_tTMVA::ConvergenceTest::GetCurrentValue(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:2632,Availability,error,error,2632," voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*TMVA::MethodANNBase::CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; Bool_tTMVA::MethodANNBase::Debug() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>& parameters); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; Float_tTMVA::ConvergenceTest::GetCurrentValue(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:2716,Availability,error,error,2716,"NNBase::CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; Bool_tTMVA::MethodANNBase::Debug() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>& parameters); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; Float_tTMVA::ConvergenceTest::GetCurrentValue(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vect",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:26076,Availability,avail,available,26076,"zjh; Float_tfWeightRangesuppress outliers for the estimator calculation; static const Bool_tfgPRINT_BATCHdebug flags; static const Int_tfgPRINT_ESTIMATOR_INCdebug flags; static const Bool_tfgPRINT_SEQdebug flags. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor. MethodMLP(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = 0); constructor from a weight file. ~MethodMLP(); destructor; nothing to be done. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); MLP can handle classification with 2 classes and regression with one regression-target. void Init(); default initializations. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; TrainingMethod <string> Training method; available values are: BP Back-Propagation <default>; GA Genetic Algorithm (takes a LONG time). LearningRate <float> NN learning rate parameter; DecayRate <float> Decay rate for learning parameter; TestRate <int> Test for overtraining performed at each #th epochs. BPMode <string> Back-propagation learning mode; available values are: sequential <default>; batch. BatchSize <int> Batch size: number of events/batch, only set if in Batch Mode,; -1 for BatchSize=number_of_events. void ProcessOptions(); process user options. void InitializeLearningRates(); initialize learning rates of synapses, used only by backpropagation. Double_t CalculateEstimator(TMVA::Types::ETreeType treeType = Types::kTraining, Int_t iEpoch = -1); calculate the estimator that training is attempting to minimize. void Train(Int_t nEpochs). void BFGSMinimize(Int_t nEpochs); train network with BFGS algorithm. void SetGammaDelta(TMatrixD& Gamma, TMatrixD& Delta, vector<Double_t>& Buffer). void ",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:26388,Availability,avail,available,26388," TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor. MethodMLP(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = 0); constructor from a weight file. ~MethodMLP(); destructor; nothing to be done. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); MLP can handle classification with 2 classes and regression with one regression-target. void Init(); default initializations. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; TrainingMethod <string> Training method; available values are: BP Back-Propagation <default>; GA Genetic Algorithm (takes a LONG time). LearningRate <float> NN learning rate parameter; DecayRate <float> Decay rate for learning parameter; TestRate <int> Test for overtraining performed at each #th epochs. BPMode <string> Back-propagation learning mode; available values are: sequential <default>; batch. BatchSize <int> Batch size: number of events/batch, only set if in Batch Mode,; -1 for BatchSize=number_of_events. void ProcessOptions(); process user options. void InitializeLearningRates(); initialize learning rates of synapses, used only by backpropagation. Double_t CalculateEstimator(TMVA::Types::ETreeType treeType = Types::kTraining, Int_t iEpoch = -1); calculate the estimator that training is attempting to minimize. void Train(Int_t nEpochs). void BFGSMinimize(Int_t nEpochs); train network with BFGS algorithm. void SetGammaDelta(TMatrixD& Gamma, TMatrixD& Delta, vector<Double_t>& Buffer). void ComputeDEDw(). void SimulateEvent(const TMVA::Event* ev). void SteepestDir(TMatrixD& Dir). Bool_t GetHessian(TMatrixD& Hessian, TMatrixD& Gamma, TMatrixD& Delta). void SetDir(TMatrixD& Hessian, TMatrixD& Dir). Double_t DerivDir(TMatrixD& Dir). Bool_t LineSearch(TMatrixD& Dir, vector<Double_t>& Buffer, Double_t* dError = 0). void SetDirWeight",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:29294,Availability,error,error,29294,"esiredOutput(const TMVA::Event* ev); get the desired output of this event. void UpdateNetwork(Double_t desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void UpdateNetwork(const vector<Float_t>& desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void CalculateNeuronDeltas(); have each neuron calculate its delta by backpropagation. void GeneticMinimize(); create genetics class similar to GeneticCut; give it vector of parameter ranges (parameters = weights); link fitness function of this class to ComputeEstimator; instantiate GA (see MethodCuts); run it; then this should exist for GA, Minuit and random sampling. Double_t EstimatorFunction(vector<Double_t>& parameters); interface to the estimate. Double_t ComputeEstimator(vector<Double_t>& parameters); this function is called by GeneticANN for GA optimization. void UpdateSynapses(); update synapse error fields and adjust the weights (if in sequential mode). void AdjustSynapseWeights(); just adjust the synapse weights (should be called in batch mode). void UpdatePriors(). void UpdateRegulators(). void GetApproxInvHessian(TMatrixD& InvHessian, bool regulate = true). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructors. void Train(); { Train(NumCycles()); }. bool HasInverseHessian(); { return fCalculateErrors; }. » Author: Krzysztof Danielowski, Andreas Hoecker, Matt Jachowski, Kamil Kraszewski, Maciej Kruk, Peter Speckmayer, Joerg Stelzer, Eckhard von Toerne, Jan Therhaag, J",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:28384,Deployability,Update,UpdateNetwork,28384,"Origin, TMatrixD& Dir, Double_t alpha). Double_t GetError(). Double_t GetMSEErr(const TMVA::Event* ev, UInt_t index = 0). Double_t GetCEErr(const TMVA::Event* ev, UInt_t index = 0). void BackPropagationMinimize(Int_t nEpochs); minimize estimator / train network with backpropagation algorithm. void TrainOneEpoch(); train network over a single epoch/cyle of events. void Shuffle(Int_t* index, Int_t n); Input:; index: the array to shuffle; n: the size of the array; Output:; index: the shuffled indexes; This method is used for sequential training. void DecaySynapseWeights(Bool_t lateEpoch); decay synapse weights; in last 10 epochs, lower learning rate even more to find a good minimum. void TrainOneEventFast(Int_t ievt, Float_t*& branchVar, Int_t& type); fast per-event training. void TrainOneEvent(Int_t ievt); train network over a single event; this uses the new event model. Double_t GetDesiredOutput(const TMVA::Event* ev); get the desired output of this event. void UpdateNetwork(Double_t desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void UpdateNetwork(const vector<Float_t>& desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void CalculateNeuronDeltas(); have each neuron calculate its delta by backpropagation. void GeneticMinimize(); create genetics class similar to GeneticCut; give it vector of parameter ranges (parameters = weights); link fitness function of this class to ComputeEstimator; instantiate GA (see MethodCuts); run it; then this should exist for GA, Minuit and random sampling. Double_t EstimatorFunction(vector<Double_t>& parameters); interface to the estimate. Double_t ComputeEstimator(vector<Double_t>& parameters); this function is called by GeneticANN for GA optimization. void UpdateSynapses(); update synapse error fields and adjust the weights (if in sequential mode). void AdjustSynapseWeights(); just adjust the synapse we",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:28444,Deployability,update,update,28444,"MSEErr(const TMVA::Event* ev, UInt_t index = 0). Double_t GetCEErr(const TMVA::Event* ev, UInt_t index = 0). void BackPropagationMinimize(Int_t nEpochs); minimize estimator / train network with backpropagation algorithm. void TrainOneEpoch(); train network over a single epoch/cyle of events. void Shuffle(Int_t* index, Int_t n); Input:; index: the array to shuffle; n: the size of the array; Output:; index: the shuffled indexes; This method is used for sequential training. void DecaySynapseWeights(Bool_t lateEpoch); decay synapse weights; in last 10 epochs, lower learning rate even more to find a good minimum. void TrainOneEventFast(Int_t ievt, Float_t*& branchVar, Int_t& type); fast per-event training. void TrainOneEvent(Int_t ievt); train network over a single event; this uses the new event model. Double_t GetDesiredOutput(const TMVA::Event* ev); get the desired output of this event. void UpdateNetwork(Double_t desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void UpdateNetwork(const vector<Float_t>& desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void CalculateNeuronDeltas(); have each neuron calculate its delta by backpropagation. void GeneticMinimize(); create genetics class similar to GeneticCut; give it vector of parameter ranges (parameters = weights); link fitness function of this class to ComputeEstimator; instantiate GA (see MethodCuts); run it; then this should exist for GA, Minuit and random sampling. Double_t EstimatorFunction(vector<Double_t>& parameters); interface to the estimate. Double_t ComputeEstimator(vector<Double_t>& parameters); this function is called by GeneticANN for GA optimization. void UpdateSynapses(); update synapse error fields and adjust the weights (if in sequential mode). void AdjustSynapseWeights(); just adjust the synapse weights (should be called in batch mode). void UpdatePriors(). void Update",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:28529,Deployability,Update,UpdateNetwork,28529,"Event* ev, UInt_t index = 0). void BackPropagationMinimize(Int_t nEpochs); minimize estimator / train network with backpropagation algorithm. void TrainOneEpoch(); train network over a single epoch/cyle of events. void Shuffle(Int_t* index, Int_t n); Input:; index: the array to shuffle; n: the size of the array; Output:; index: the shuffled indexes; This method is used for sequential training. void DecaySynapseWeights(Bool_t lateEpoch); decay synapse weights; in last 10 epochs, lower learning rate even more to find a good minimum. void TrainOneEventFast(Int_t ievt, Float_t*& branchVar, Int_t& type); fast per-event training. void TrainOneEvent(Int_t ievt); train network over a single event; this uses the new event model. Double_t GetDesiredOutput(const TMVA::Event* ev); get the desired output of this event. void UpdateNetwork(Double_t desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void UpdateNetwork(const vector<Float_t>& desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void CalculateNeuronDeltas(); have each neuron calculate its delta by backpropagation. void GeneticMinimize(); create genetics class similar to GeneticCut; give it vector of parameter ranges (parameters = weights); link fitness function of this class to ComputeEstimator; instantiate GA (see MethodCuts); run it; then this should exist for GA, Minuit and random sampling. Double_t EstimatorFunction(vector<Double_t>& parameters); interface to the estimate. Double_t ComputeEstimator(vector<Double_t>& parameters); this function is called by GeneticANN for GA optimization. void UpdateSynapses(); update synapse error fields and adjust the weights (if in sequential mode). void AdjustSynapseWeights(); just adjust the synapse weights (should be called in batch mode). void UpdatePriors(). void UpdateRegulators(). void GetApproxInvHessian(TMatrixD& InvHessian, bool regulate = tru",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:28603,Deployability,update,update,28603,"ize estimator / train network with backpropagation algorithm. void TrainOneEpoch(); train network over a single epoch/cyle of events. void Shuffle(Int_t* index, Int_t n); Input:; index: the array to shuffle; n: the size of the array; Output:; index: the shuffled indexes; This method is used for sequential training. void DecaySynapseWeights(Bool_t lateEpoch); decay synapse weights; in last 10 epochs, lower learning rate even more to find a good minimum. void TrainOneEventFast(Int_t ievt, Float_t*& branchVar, Int_t& type); fast per-event training. void TrainOneEvent(Int_t ievt); train network over a single event; this uses the new event model. Double_t GetDesiredOutput(const TMVA::Event* ev); get the desired output of this event. void UpdateNetwork(Double_t desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void UpdateNetwork(const vector<Float_t>& desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void CalculateNeuronDeltas(); have each neuron calculate its delta by backpropagation. void GeneticMinimize(); create genetics class similar to GeneticCut; give it vector of parameter ranges (parameters = weights); link fitness function of this class to ComputeEstimator; instantiate GA (see MethodCuts); run it; then this should exist for GA, Minuit and random sampling. Double_t EstimatorFunction(vector<Double_t>& parameters); interface to the estimate. Double_t ComputeEstimator(vector<Double_t>& parameters); this function is called by GeneticANN for GA optimization. void UpdateSynapses(); update synapse error fields and adjust the weights (if in sequential mode). void AdjustSynapseWeights(); just adjust the synapse weights (should be called in batch mode). void UpdatePriors(). void UpdateRegulators(). void GetApproxInvHessian(TMatrixD& InvHessian, bool regulate = true). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0). void MakeC",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:29261,Deployability,Update,UpdateSynapses,29261,"esiredOutput(const TMVA::Event* ev); get the desired output of this event. void UpdateNetwork(Double_t desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void UpdateNetwork(const vector<Float_t>& desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void CalculateNeuronDeltas(); have each neuron calculate its delta by backpropagation. void GeneticMinimize(); create genetics class similar to GeneticCut; give it vector of parameter ranges (parameters = weights); link fitness function of this class to ComputeEstimator; instantiate GA (see MethodCuts); run it; then this should exist for GA, Minuit and random sampling. Double_t EstimatorFunction(vector<Double_t>& parameters); interface to the estimate. Double_t ComputeEstimator(vector<Double_t>& parameters); this function is called by GeneticANN for GA optimization. void UpdateSynapses(); update synapse error fields and adjust the weights (if in sequential mode). void AdjustSynapseWeights(); just adjust the synapse weights (should be called in batch mode). void UpdatePriors(). void UpdateRegulators(). void GetApproxInvHessian(TMatrixD& InvHessian, bool regulate = true). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructors. void Train(); { Train(NumCycles()); }. bool HasInverseHessian(); { return fCalculateErrors; }. » Author: Krzysztof Danielowski, Andreas Hoecker, Matt Jachowski, Kamil Kraszewski, Maciej Kruk, Peter Speckmayer, Joerg Stelzer, Eckhard von Toerne, Jan Therhaag, J",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:29279,Deployability,update,update,29279,"esiredOutput(const TMVA::Event* ev); get the desired output of this event. void UpdateNetwork(Double_t desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void UpdateNetwork(const vector<Float_t>& desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void CalculateNeuronDeltas(); have each neuron calculate its delta by backpropagation. void GeneticMinimize(); create genetics class similar to GeneticCut; give it vector of parameter ranges (parameters = weights); link fitness function of this class to ComputeEstimator; instantiate GA (see MethodCuts); run it; then this should exist for GA, Minuit and random sampling. Double_t EstimatorFunction(vector<Double_t>& parameters); interface to the estimate. Double_t ComputeEstimator(vector<Double_t>& parameters); this function is called by GeneticANN for GA optimization. void UpdateSynapses(); update synapse error fields and adjust the weights (if in sequential mode). void AdjustSynapseWeights(); just adjust the synapse weights (should be called in batch mode). void UpdatePriors(). void UpdateRegulators(). void GetApproxInvHessian(TMatrixD& InvHessian, bool regulate = true). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructors. void Train(); { Train(NumCycles()); }. bool HasInverseHessian(); { return fCalculateErrors; }. » Author: Krzysztof Danielowski, Andreas Hoecker, Matt Jachowski, Kamil Kraszewski, Maciej Kruk, Peter Speckmayer, Joerg Stelzer, Eckhard von Toerne, Jan Therhaag, J",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:29455,Deployability,Update,UpdatePriors,29455,"ork based on how closely; the output matched the desired output. void UpdateNetwork(const vector<Float_t>& desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void CalculateNeuronDeltas(); have each neuron calculate its delta by backpropagation. void GeneticMinimize(); create genetics class similar to GeneticCut; give it vector of parameter ranges (parameters = weights); link fitness function of this class to ComputeEstimator; instantiate GA (see MethodCuts); run it; then this should exist for GA, Minuit and random sampling. Double_t EstimatorFunction(vector<Double_t>& parameters); interface to the estimate. Double_t ComputeEstimator(vector<Double_t>& parameters); this function is called by GeneticANN for GA optimization. void UpdateSynapses(); update synapse error fields and adjust the weights (if in sequential mode). void AdjustSynapseWeights(); just adjust the synapse weights (should be called in batch mode). void UpdatePriors(). void UpdateRegulators(). void GetApproxInvHessian(TMatrixD& InvHessian, bool regulate = true). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructors. void Train(); { Train(NumCycles()); }. bool HasInverseHessian(); { return fCalculateErrors; }. » Author: Krzysztof Danielowski, Andreas Hoecker, Matt Jachowski, Kamil Kraszewski, Maciej Kruk, Peter Speckmayer, Joerg Stelzer, Eckhard von Toerne, Jan Therhaag, Jiahang Zhong » Copyright (c) 2005-2011: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. F",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:29476,Deployability,Update,UpdateRegulators,29476,"y; the output matched the desired output. void UpdateNetwork(const vector<Float_t>& desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void CalculateNeuronDeltas(); have each neuron calculate its delta by backpropagation. void GeneticMinimize(); create genetics class similar to GeneticCut; give it vector of parameter ranges (parameters = weights); link fitness function of this class to ComputeEstimator; instantiate GA (see MethodCuts); run it; then this should exist for GA, Minuit and random sampling. Double_t EstimatorFunction(vector<Double_t>& parameters); interface to the estimate. Double_t ComputeEstimator(vector<Double_t>& parameters); this function is called by GeneticANN for GA optimization. void UpdateSynapses(); update synapse error fields and adjust the weights (if in sequential mode). void AdjustSynapseWeights(); just adjust the synapse weights (should be called in batch mode). void UpdatePriors(). void UpdateRegulators(). void GetApproxInvHessian(TMatrixD& InvHessian, bool regulate = true). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructors. void Train(); { Train(NumCycles()); }. bool HasInverseHessian(); { return fCalculateErrors; }. » Author: Krzysztof Danielowski, Andreas Hoecker, Matt Jachowski, Kamil Kraszewski, Maciej Kruk, Peter Speckmayer, Joerg Stelzer, Eckhard von Toerne, Jan Therhaag, Jiahang Zhong » Copyright (c) 2005-2011: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggesti",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:21092,Energy Efficiency,monitor,monitoring,21092,,MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:21182,Energy Efficiency,monitor,monitoring,21182,,MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:21268,Energy Efficiency,monitor,monitoring,21268,,MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:23963,Energy Efficiency,monitor,monitoring,23963,"fUseRegulatorzjh; TRandom3*TMVA::MethodANNBase::frgenrandom number generator for various uses. private:. TMVA::MethodMLP::EBPTrainingModefBPModebackprop learning mode (sequential or batch); Int_tfBatchSizebatch size, only matters if in batch learning mode; TStringfBpModeSbackprop learning mode option string (sequential or batch); boolfCalculateErrorscompute inverse hessian matrix at the end of the training; Double_tfDecayRatedecay rate for above learning rate; vector<pair<Float_t,Float_t> >*fDeviationsFromTargetsdeviation from the targets, event weight; Bool_tfEpochMoncreate and fill epoch-wise monitoring histograms (makes outputfile big!); Double_tfGA_SC_factorGA settings: SC_factor; Int_tfGA_SC_rateGA settings: SC_rate; Int_tfGA_SC_stepsGA settings: SC_steps; Int_tfGA_nstepsGA settings: number of steps; Int_tfGA_preCalcGA settings: number of pre-calc steps; Double_tfLastAlphaline search variable; Double_tfLearnRatelearning rate for synapse weight adjustments; Double_tfPriorzjh; vector<Double_t>fPriorDevzjh; Int_tfResetStepreset time (how often we clear hessian matrix); Float_tfSamplingEpochfraction of epochs where sampling is used; Float_tfSamplingFractionfraction of events which is sampled for training; Bool_tfSamplingTestingThe testing sample is sampled; Bool_tfSamplingTrainingThe training sample is sampled; Float_tfSamplingWeightchanging factor for event weights when sampling is turned on; Double_tfTauline search variable; Int_tfTestRatetest for overtraining performed at each #th epochs; TStringfTrainMethodStraining method option param; TMVA::MethodMLP::ETrainingMethodfTrainingMethodmethod of training, BP or GA; Int_tfUpdateLimitzjh; boolfUseRegulatorzjh; Float_tfWeightRangesuppress outliers for the estimator calculation; static const Bool_tfgPRINT_BATCHdebug flags; static const Int_tfgPRINT_ESTIMATOR_INCdebug flags; static const Bool_tfgPRINT_SEQdebug flags. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(co",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:17143,Integrability,message,message,17143,"idTMVA::MethodANNBase::ForceNetworkInputs(const TMVA::Event* ev, Int_t ignoreIndex = -1); virtual voidGetHelpMessage() const; TMVA::TNeuron*TMVA::MethodANNBase::GetInputNeuron(Int_t index); const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; Double_tTMVA::MethodANNBase::GetNetworkOutput(); const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; TMVA::TNeuron*TMVA::MethodANNBase::GetOutputNeuron(Int_t index = 0); const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); Int_tTMVA::MethodANNBase::NumCycles(); vector<Int_t>*TMVA::MethodANNBase::ParseLayoutString(TString layerSpec); voidTMVA::MethodANNBase::PrintMessage(TString message, Bool_t force = kFALSE) const; voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::MethodANNBase::WaitForKeyboard(); voidTMVA::Configurable::WriteOptionsReferenceToFile().",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:22679,Integrability,depend,depending,22679,"ple; TH1F*TMVA::MethodANNBase::fEstimatorHistTrainmonitors convergence of training sample; TStringTMVA::MethodANNBase::fEstimatorS; TMVA::TActivation*TMVA::MethodANNBase::fIdentityactivation for input and output layers; Float_tTMVA::ConvergenceTest::fImprovement; TMVA::TNeuronInput*TMVA::MethodANNBase::fInputCalculatorinput calculator for all neurons; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; TMatrixDTMVA::MethodANNBase::fInvHessianzjh; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; Int_tTMVA::MethodANNBase::fNcyclesnumber of epochs to train; TObjArray*TMVA::MethodANNBase::fNetworkTObjArray of TObjArrays representing network; TStringTMVA::MethodANNBase::fNeuronInputTypename of neuron input calculator class; TStringTMVA::MethodANNBase::fNeuronTypename of neuron activation function class; TMVA::TActivation*TMVA::MethodANNBase::fOutputactivation function to be used for output layers, depending on estimator; Int_tTMVA::MethodANNBase::fRandomSeedrandom seed for initial synapse weights; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; vector<Int_t>TMVA::MethodANNBase::fRegulatorIdxindex to different priors from every synapses; vector<Double_t>TMVA::MethodANNBase::fRegulatorsthe priors as regulator; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class; Int_tTMVA::ConvergenceTest::fSteps; TObjArray*TMVA::MethodANNBase::fSynapsesarray of pointers to synapses, no structural data; boolTMVA::MethodANNBase::fUseRegulatorzjh; TRandom3*TMVA::MethodANNBase::frgenrandom number generator for various uses.",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:29113,Integrability,interface,interface,29113,". void TrainOneEventFast(Int_t ievt, Float_t*& branchVar, Int_t& type); fast per-event training. void TrainOneEvent(Int_t ievt); train network over a single event; this uses the new event model. Double_t GetDesiredOutput(const TMVA::Event* ev); get the desired output of this event. void UpdateNetwork(Double_t desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void UpdateNetwork(const vector<Float_t>& desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void CalculateNeuronDeltas(); have each neuron calculate its delta by backpropagation. void GeneticMinimize(); create genetics class similar to GeneticCut; give it vector of parameter ranges (parameters = weights); link fitness function of this class to ComputeEstimator; instantiate GA (see MethodCuts); run it; then this should exist for GA, Minuit and random sampling. Double_t EstimatorFunction(vector<Double_t>& parameters); interface to the estimate. Double_t ComputeEstimator(vector<Double_t>& parameters); this function is called by GeneticANN for GA optimization. void UpdateSynapses(); update synapse error fields and adjust the weights (if in sequential mode). void AdjustSynapseWeights(); just adjust the synapse weights (should be called in batch mode). void UpdatePriors(). void UpdateRegulators(). void GetApproxInvHessian(TMatrixD& InvHessian, bool regulate = true). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructors. void Train(); { Train(NumCycles()); }. bool HasInver",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:29763,Integrability,message,message,29763,"red, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void CalculateNeuronDeltas(); have each neuron calculate its delta by backpropagation. void GeneticMinimize(); create genetics class similar to GeneticCut; give it vector of parameter ranges (parameters = weights); link fitness function of this class to ComputeEstimator; instantiate GA (see MethodCuts); run it; then this should exist for GA, Minuit and random sampling. Double_t EstimatorFunction(vector<Double_t>& parameters); interface to the estimate. Double_t ComputeEstimator(vector<Double_t>& parameters); this function is called by GeneticANN for GA optimization. void UpdateSynapses(); update synapse error fields and adjust the weights (if in sequential mode). void AdjustSynapseWeights(); just adjust the synapse weights (should be called in batch mode). void UpdatePriors(). void UpdateRegulators(). void GetApproxInvHessian(TMatrixD& InvHessian, bool regulate = true). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructors. void Train(); { Train(NumCycles()); }. bool HasInverseHessian(); { return fCalculateErrors; }. » Author: Krzysztof Danielowski, Andreas Hoecker, Matt Jachowski, Kamil Kraszewski, Maciej Kruk, Peter Speckmayer, Joerg Stelzer, Eckhard von Toerne, Jan Therhaag, Jiahang Zhong » Copyright (c) 2005-2011: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:555,Modifiability,Config,Configurable,555," virtual~MethodMLP(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidTMVA::MethodANNBase::AddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Double_tComputeEstimator(vector<Double_t>& parameters); TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); TMVA::ConvergenceTestTMVA::ConvergenceTest::ConvergenceTest(); TMVA::ConvergenceTestTMVA::ConvergenceTest::ConvergenceTest(const TMVA::ConvergenceTest&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*TMVA::MethodANNBase::CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; Bool_tTMVA::MethodANNBase::Debug() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:932,Modifiability,Config,Configurable,932," virtual~MethodMLP(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidTMVA::MethodANNBase::AddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Double_tComputeEstimator(vector<Double_t>& parameters); TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); TMVA::ConvergenceTestTMVA::ConvergenceTest::ConvergenceTest(); TMVA::ConvergenceTestTMVA::ConvergenceTest::ConvergenceTest(const TMVA::ConvergenceTest&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*TMVA::MethodANNBase::CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; Bool_tTMVA::MethodANNBase::Debug() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:1318,Modifiability,Config,ConfigurableTMVA,1318," virtual~MethodMLP(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidTMVA::MethodANNBase::AddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Double_tComputeEstimator(vector<Double_t>& parameters); TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); TMVA::ConvergenceTestTMVA::ConvergenceTest::ConvergenceTest(); TMVA::ConvergenceTestTMVA::ConvergenceTest::ConvergenceTest(const TMVA::ConvergenceTest&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*TMVA::MethodANNBase::CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; Bool_tTMVA::MethodANNBase::Debug() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:1336,Modifiability,Config,Configurable,1336," virtual~MethodMLP(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidTMVA::MethodANNBase::AddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Double_tComputeEstimator(vector<Double_t>& parameters); TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); TMVA::ConvergenceTestTMVA::ConvergenceTest::ConvergenceTest(); TMVA::ConvergenceTestTMVA::ConvergenceTest::ConvergenceTest(const TMVA::ConvergenceTest&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*TMVA::MethodANNBase::CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; Bool_tTMVA::MethodANNBase::Debug() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:1350,Modifiability,Config,Configurable,1350," virtual~MethodMLP(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidTMVA::MethodANNBase::AddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Double_tComputeEstimator(vector<Double_t>& parameters); TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); TMVA::ConvergenceTestTMVA::ConvergenceTest::ConvergenceTest(); TMVA::ConvergenceTestTMVA::ConvergenceTest::ConvergenceTest(const TMVA::ConvergenceTest&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*TMVA::MethodANNBase::CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; Bool_tTMVA::MethodANNBase::Debug() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:1401,Modifiability,Config,ConfigurableTMVA,1401," virtual~MethodMLP(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidTMVA::MethodANNBase::AddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Double_tComputeEstimator(vector<Double_t>& parameters); TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); TMVA::ConvergenceTestTMVA::ConvergenceTest::ConvergenceTest(); TMVA::ConvergenceTestTMVA::ConvergenceTest::ConvergenceTest(const TMVA::ConvergenceTest&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*TMVA::MethodANNBase::CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; Bool_tTMVA::MethodANNBase::Debug() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:1419,Modifiability,Config,Configurable,1419," virtual~MethodMLP(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidTMVA::MethodANNBase::AddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Double_tComputeEstimator(vector<Double_t>& parameters); TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); TMVA::ConvergenceTestTMVA::ConvergenceTest::ConvergenceTest(); TMVA::ConvergenceTestTMVA::ConvergenceTest::ConvergenceTest(const TMVA::ConvergenceTest&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*TMVA::MethodANNBase::CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; Bool_tTMVA::MethodANNBase::Debug() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:1433,Modifiability,Config,Configurable,1433," virtual~MethodMLP(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidTMVA::MethodANNBase::AddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Double_tComputeEstimator(vector<Double_t>& parameters); TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); TMVA::ConvergenceTestTMVA::ConvergenceTest::ConvergenceTest(); TMVA::ConvergenceTestTMVA::ConvergenceTest::ConvergenceTest(const TMVA::ConvergenceTest&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*TMVA::MethodANNBase::CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; Bool_tTMVA::MethodANNBase::Debug() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:1458,Modifiability,Config,Configurable,1458," virtual~MethodMLP(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidTMVA::MethodANNBase::AddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Double_tComputeEstimator(vector<Double_t>& parameters); TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); TMVA::ConvergenceTestTMVA::ConvergenceTest::ConvergenceTest(); TMVA::ConvergenceTestTMVA::ConvergenceTest::ConvergenceTest(const TMVA::ConvergenceTest&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*TMVA::MethodANNBase::CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; Bool_tTMVA::MethodANNBase::Debug() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:3080,Modifiability,Config,Configurable,3080,"etoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>& parameters); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; Float_tTMVA::ConvergenceTest::GetCurrentValue(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollection(TMVA::Types::ETreeType type); virtual const char*TObject::GetIconName() const; const TString&TMVA::MethodBase::GetInputLabel(Int_t i) const; const TString&TMVA::MethodBase::GetInputTitle(Int_t i) const; const TString&TMVA::MethodBase::GetInputVar(Int_t i) const; const TString&TMVA::MethodBase::GetJobName() const;",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:3141,Modifiability,Config,Configurable,3141,"ulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>& parameters); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; Float_tTMVA::ConvergenceTest::GetCurrentValue(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollection(TMVA::Types::ETreeType type); virtual const char*TObject::GetIconName() const; const TString&TMVA::MethodBase::GetInputLabel(Int_t i) const; const TString&TMVA::MethodBase::GetInputTitle(Int_t i) const; const TString&TMVA::MethodBase::GetInputVar(Int_t i) const; const TString&TMVA::MethodBase::GetJobName() const; virtual Double_tTMVA::MethodBase::GetKSTrainingVsTest(Char_t",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:5297,Modifiability,Config,Configurable,5297,"nificance_value) const; Double_tTMVA::MethodBase::GetMean(Int_t ivar) const; const TString&TMVA::MethodBase::GetMethodName() const; TMVA::Types::EMVATMVA::MethodBase::GetMethodType() const; TStringTMVA::MethodBase::GetMethodTypeName() const; virtual vector<Float_t>TMVA::MethodBase::GetMulticlassEfficiency(vector<vector<Float_t> >& purity); virtual vector<Float_t>TMVA::MethodBase::GetMulticlassTrainingEfficiency(vector<vector<Float_t> >& purity); virtual const vector<Float_t>&TMVA::MethodANNBase::GetMulticlassValues(); virtual Double_tGetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); virtual const char*TMVA::MethodBase::GetName() const; UInt_tTMVA::MethodBase::GetNEvents() const; UInt_tTMVA::MethodBase::GetNTargets() const; UInt_tTMVA::MethodBase::GetNvar() const; UInt_tTMVA::MethodBase::GetNVariables() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; virtual Double_tTMVA::MethodBase::GetProba(const TMVA::Event* ev); virtual Double_tTMVA::MethodBase::GetProba(Double_t mvaVal, Double_t ap_sig); const TStringTMVA::MethodBase::GetProbaName() const; virtual Double_tTMVA::MethodBase::GetRarity(Double_t mvaVal, TMVA::Types::ESBType reftype = Types::kBackground) const; virtual voidTMVA::MethodBase::GetRegressionDeviation(UInt_t tgtNum, TMVA::Types::ETreeType type, Double_t& stddev, Double_t& stddev90Percent) const; virtual const vector<Float_t>&TMVA::MethodANNBase::GetRegressionValues(); Double_tTMVA::MethodBase::GetRMS(Int_t ivar) const; virtual Double_tTMVA::MethodBase::GetROCIntegral(TH1D* histS, TH1D* histB) const; virtual Double_tTMVA::MethodBase::GetROCIntegral(TMVA::PDF* pdfS = 0, TMVA::PDF* pdfB = 0) const; virtual Double_tTMVA::MethodBase::GetSeparation(TH1*, TH1*) const; virtual Double_tTMVA::MethodBase::GetSeparation(TMVA::PDF* pdfS = 0, TMVA::PDF* pdfB = 0) const; Double_tTMVA::MethodBase::GetSignalRe",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:8234,Modifiability,Inherit,InheritsFrom,8234,"ransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); Bool_tTMVA::ConvergenceTest::HasConverged(Bool_t withinConvergenceBand = kFALSE); virtual ULong_tTObject::Hash() const; boolHasInverseHessian(); Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(const TMVA::IFitterTarget&); TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::MethodANNBase::InitANNBase(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodANNBaseTMVA::MethodANNBase::MethodANNBase(const TMVA::MethodANNBase&); TMVA::MethodANNBaseTMVA::MethodANNBase::MethodANNBase(TMVA::Types::EMVA methodType, TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTarg",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:8300,Modifiability,Inherit,InheritsFrom,8300,"ol_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); Bool_tTMVA::ConvergenceTest::HasConverged(Bool_t withinConvergenceBand = kFALSE); virtual ULong_tTObject::Hash() const; boolHasInverseHessian(); Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(const TMVA::IFitterTarget&); TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::MethodANNBase::InitANNBase(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodANNBaseTMVA::MethodANNBase::MethodANNBase(const TMVA::MethodANNBase&); TMVA::MethodANNBaseTMVA::MethodANNBase::MethodANNBase(TMVA::Types::EMVA methodType, TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir); TMVA::MethodANNBaseTMVA::MethodANNBase::MethodANNBase(cons",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:11035,Modifiability,Config,Configurable,11035,"etInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = 0); TMVA::MethodMLPMethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodMLP&operator=(const TMVA::MethodMLP&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; virtual voidTMVA::MethodANNBase::PrintNetwork() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); Float_tTMVA::ConvergenceTest::Progress(); virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidTMVA::MethodANNBase::ReadWeightsFromStream(istream& istr); virtual voidTMVA::MethodANNBase::ReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::M",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:11271,Modifiability,Config,Configurable,11271,"0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodMLP&operator=(const TMVA::MethodMLP&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; virtual voidTMVA::MethodANNBase::PrintNetwork() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); Float_tTMVA::ConvergenceTest::Progress(); virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidTMVA::MethodANNBase::ReadWeightsFromStream(istream& istr); virtual voidTMVA::MethodANNBase::ReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); voidTMVA::ConvergenceTest::ResetConvergenceCounter(); virtual voidTObje",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:11512,Modifiability,Config,Configurable,11512,":operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodMLP&operator=(const TMVA::MethodMLP&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; virtual voidTMVA::MethodANNBase::PrintNetwork() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); Float_tTMVA::ConvergenceTest::Progress(); virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidTMVA::MethodANNBase::ReadWeightsFromStream(istream& istr); virtual voidTMVA::MethodANNBase::ReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); voidTMVA::ConvergenceTest::ResetConvergenceCounter(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTMVA::MethodANNBase::SetActivation(TMVA::TActivation* activation); virtual voidTMVA::Method",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:11574,Modifiability,Config,Configurable,11574,"void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodMLP&operator=(const TMVA::MethodMLP&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; virtual voidTMVA::MethodANNBase::PrintNetwork() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); Float_tTMVA::ConvergenceTest::Progress(); virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidTMVA::MethodANNBase::ReadWeightsFromStream(istream& istr); virtual voidTMVA::MethodANNBase::ReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); voidTMVA::ConvergenceTest::ResetConvergenceCounter(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTMVA::MethodANNBase::SetActivation(TMVA::TActivation* activation); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTM",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:12716,Modifiability,Config,Configurable,12716,"dTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidTMVA::MethodANNBase::ReadWeightsFromStream(istream& istr); virtual voidTMVA::MethodANNBase::ReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); voidTMVA::ConvergenceTest::ResetConvergenceCounter(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTMVA::MethodANNBase::SetActivation(TMVA::TActivation* activation); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); voidTMVA::ConvergenceTest::SetConvergenceParameters(Int_t steps, Double_t improvement); voidTMVA::ConvergenceTest::SetCurrentValue(Float_t value); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); voidTMVA::MethodANNBase::SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetT",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:12777,Modifiability,Config,Configurable,12777,"MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidTMVA::MethodANNBase::ReadWeightsFromStream(istream& istr); virtual voidTMVA::MethodANNBase::ReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); voidTMVA::ConvergenceTest::ResetConvergenceCounter(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTMVA::MethodANNBase::SetActivation(TMVA::TActivation* activation); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); voidTMVA::ConvergenceTest::SetConvergenceParameters(Int_t steps, Double_t improvement); voidTMVA::ConvergenceTest::SetCurrentValue(Float_t value); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); voidTMVA::MethodANNBase::SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::S",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:13208,Modifiability,Config,Configurable,13208,"A::ConvergenceTest::ResetConvergenceCounter(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTMVA::MethodANNBase::SetActivation(TMVA::TActivation* activation); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); voidTMVA::ConvergenceTest::SetConvergenceParameters(Int_t steps, Double_t improvement); voidTMVA::ConvergenceTest::SetCurrentValue(Float_t value); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); voidTMVA::MethodANNBase::SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; Float_tTMVA::ConvergenceTest::SpeedControl(UInt_t ofSteps); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTO",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:13398,Modifiability,Config,Configurable,13398,"on_t* option = """"); voidTMVA::MethodANNBase::SetActivation(TMVA::TActivation* activation); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); voidTMVA::ConvergenceTest::SetConvergenceParameters(Int_t steps, Double_t improvement); voidTMVA::ConvergenceTest::SetCurrentValue(Float_t value); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); voidTMVA::MethodANNBase::SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; Float_tTMVA::ConvergenceTest::SpeedControl(UInt_t ofSteps); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:15134,Modifiability,Config,Configurable,15134,"MVA::MethodANNBase::SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; Float_tTMVA::ConvergenceTest::SpeedControl(UInt_t ofSteps); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodANNBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:15618,Modifiability,Config,Configurable,15618,,MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:16193,Modifiability,Config,Configurable,16193,,MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:16634,Modifiability,Config,Configurable,16634,"oseOptions(Bool_t b = kTRUE); voidTMVA::MethodANNBase::ForceNetworkCalculations(); voidTMVA::MethodANNBase::ForceNetworkInputs(const TMVA::Event* ev, Int_t ignoreIndex = -1); virtual voidGetHelpMessage() const; TMVA::TNeuron*TMVA::MethodANNBase::GetInputNeuron(Int_t index); const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; Double_tTMVA::MethodANNBase::GetNetworkOutput(); const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; TMVA::TNeuron*TMVA::MethodANNBase::GetOutputNeuron(Int_t index = 0); const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); Int_tTMVA::MethodANNBase::NumCycles(); vector<Int_t>*TMVA::MethodANNBase::ParseLayoutString(TString layerSpec); voidTMVA::MethodANNBase::PrintMessage(TString message, Bool_t force = kFALSE) const; voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Met",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:16673,Modifiability,Config,Configurable,16673,":MethodANNBase::ForceNetworkCalculations(); voidTMVA::MethodANNBase::ForceNetworkInputs(const TMVA::Event* ev, Int_t ignoreIndex = -1); virtual voidGetHelpMessage() const; TMVA::TNeuron*TMVA::MethodANNBase::GetInputNeuron(Int_t index); const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; Double_tTMVA::MethodANNBase::GetNetworkOutput(); const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; TMVA::TNeuron*TMVA::MethodANNBase::GetOutputNeuron(Int_t index = 0); const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); Int_tTMVA::MethodANNBase::NumCycles(); vector<Int_t>*TMVA::MethodANNBase::ParseLayoutString(TString layerSpec); voidTMVA::MethodANNBase::PrintMessage(TString message, Bool_t force = kFALSE) const; voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::MethodANNBase::WaitForKeyboard(); voidTMVA",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:17085,Modifiability,layerS,layerSpec,17085,"idTMVA::MethodANNBase::ForceNetworkInputs(const TMVA::Event* ev, Int_t ignoreIndex = -1); virtual voidGetHelpMessage() const; TMVA::TNeuron*TMVA::MethodANNBase::GetInputNeuron(Int_t index); const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; Double_tTMVA::MethodANNBase::GetNetworkOutput(); const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; TMVA::TNeuron*TMVA::MethodANNBase::GetOutputNeuron(Int_t index = 0); const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); Int_tTMVA::MethodANNBase::NumCycles(); vector<Int_t>*TMVA::MethodANNBase::ParseLayoutString(TString layerSpec); voidTMVA::MethodANNBase::PrintMessage(TString message, Bool_t force = kFALSE) const; voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::MethodANNBase::WaitForKeyboard(); voidTMVA::Configurable::WriteOptionsReferenceToFile().",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:17192,Modifiability,Config,Configurable,17192,"idTMVA::MethodANNBase::ForceNetworkInputs(const TMVA::Event* ev, Int_t ignoreIndex = -1); virtual voidGetHelpMessage() const; TMVA::TNeuron*TMVA::MethodANNBase::GetInputNeuron(Int_t index); const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; Double_tTMVA::MethodANNBase::GetNetworkOutput(); const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; TMVA::TNeuron*TMVA::MethodANNBase::GetOutputNeuron(Int_t index = 0); const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); Int_tTMVA::MethodANNBase::NumCycles(); vector<Int_t>*TMVA::MethodANNBase::ParseLayoutString(TString layerSpec); voidTMVA::MethodANNBase::PrintMessage(TString message, Bool_t force = kFALSE) const; voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::MethodANNBase::WaitForKeyboard(); voidTMVA::Configurable::WriteOptionsReferenceToFile().",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:17682,Modifiability,Config,Configurable,17682,"idTMVA::MethodANNBase::ForceNetworkInputs(const TMVA::Event* ev, Int_t ignoreIndex = -1); virtual voidGetHelpMessage() const; TMVA::TNeuron*TMVA::MethodANNBase::GetInputNeuron(Int_t index); const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; Double_tTMVA::MethodANNBase::GetNetworkOutput(); const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; TMVA::TNeuron*TMVA::MethodANNBase::GetOutputNeuron(Int_t index = 0); const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); Int_tTMVA::MethodANNBase::NumCycles(); vector<Int_t>*TMVA::MethodANNBase::ParseLayoutString(TString layerSpec); voidTMVA::MethodANNBase::PrintMessage(TString message, Bool_t force = kFALSE) const; voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::MethodANNBase::WaitForKeyboard(); voidTMVA::Configurable::WriteOptionsReferenceToFile().",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:20797,Modifiability,layers,layers,20797,,MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:21666,Modifiability,layers,layers,21666,,MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:21868,Modifiability,variab,variables,21868," : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; Float_tTMVA::ConvergenceTest::fCurrentValue; vector<TH1*>TMVA::MethodANNBase::fEpochMonHistBepoch monitoring hitograms for background; vector<TH1*>TMVA::MethodANNBase::fEpochMonHistSepoch monitoring hitograms for signal; vector<TH1*>TMVA::MethodANNBase::fEpochMonHistWepoch monitoring hitograms for weights; TMVA::MethodANNBase::EEstimatorTMVA::MethodANNBase::fEstimator; TH1F*TMVA::MethodANNBase::fEstimatorHistTestmonitors convergence of independent test sample; TH1F*TMVA::MethodANNBase::fEstimatorHistTrainmonitors convergence of training sample; TStringTMVA::MethodANNBase::fEstimatorS; TMVA::TActivation*TMVA::MethodANNBase::fIdentityactivation for input and output layers; Float_tTMVA::ConvergenceTest::fImprovement; TMVA::TNeuronInput*TMVA::MethodANNBase::fInputCalculatorinput calculator for all neurons; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; TMatrixDTMVA::MethodANNBase::fInvHessianzjh; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; Int_tTMVA::MethodANNBase::fNcyclesnumber of epochs to train; TObjArray*TMVA::MethodANNBase::fNetworkTObjArray of TObjArrays representing network; TStringTMVA::MethodANNBase::fNeuronInputTypename of neuron input calculator class; TStringTMVA::MethodANNBase::fNeuronTypename of neuron activation function class; TMVA::TActivation*TMVA::MethodANNBase::fOutputactivation function to be used for output layers, depending on estimator; Int_tTMVA::MethodANNBase::fRandomSeedrandom seed for initial synapse weights; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classi",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:22102,Modifiability,variab,variable,22102,"ograms for background; vector<TH1*>TMVA::MethodANNBase::fEpochMonHistSepoch monitoring hitograms for signal; vector<TH1*>TMVA::MethodANNBase::fEpochMonHistWepoch monitoring hitograms for weights; TMVA::MethodANNBase::EEstimatorTMVA::MethodANNBase::fEstimator; TH1F*TMVA::MethodANNBase::fEstimatorHistTestmonitors convergence of independent test sample; TH1F*TMVA::MethodANNBase::fEstimatorHistTrainmonitors convergence of training sample; TStringTMVA::MethodANNBase::fEstimatorS; TMVA::TActivation*TMVA::MethodANNBase::fIdentityactivation for input and output layers; Float_tTMVA::ConvergenceTest::fImprovement; TMVA::TNeuronInput*TMVA::MethodANNBase::fInputCalculatorinput calculator for all neurons; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; TMatrixDTMVA::MethodANNBase::fInvHessianzjh; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; Int_tTMVA::MethodANNBase::fNcyclesnumber of epochs to train; TObjArray*TMVA::MethodANNBase::fNetworkTObjArray of TObjArrays representing network; TStringTMVA::MethodANNBase::fNeuronInputTypename of neuron input calculator class; TStringTMVA::MethodANNBase::fNeuronTypename of neuron activation function class; TMVA::TActivation*TMVA::MethodANNBase::fOutputactivation function to be used for output layers, depending on estimator; Int_tTMVA::MethodANNBase::fRandomSeedrandom seed for initial synapse weights; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; vector<Int_t>TMVA::MethodANNBase::fRegulatorIdxindex to different priors from every synapses; vector<Double_t>TMVA::MethodANNBas",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:22671,Modifiability,layers,layers,22671,"ple; TH1F*TMVA::MethodANNBase::fEstimatorHistTrainmonitors convergence of training sample; TStringTMVA::MethodANNBase::fEstimatorS; TMVA::TActivation*TMVA::MethodANNBase::fIdentityactivation for input and output layers; Float_tTMVA::ConvergenceTest::fImprovement; TMVA::TNeuronInput*TMVA::MethodANNBase::fInputCalculatorinput calculator for all neurons; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; TMatrixDTMVA::MethodANNBase::fInvHessianzjh; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; Int_tTMVA::MethodANNBase::fNcyclesnumber of epochs to train; TObjArray*TMVA::MethodANNBase::fNetworkTObjArray of TObjArrays representing network; TStringTMVA::MethodANNBase::fNeuronInputTypename of neuron input calculator class; TStringTMVA::MethodANNBase::fNeuronTypename of neuron activation function class; TMVA::TActivation*TMVA::MethodANNBase::fOutputactivation function to be used for output layers, depending on estimator; Int_tTMVA::MethodANNBase::fRandomSeedrandom seed for initial synapse weights; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; vector<Int_t>TMVA::MethodANNBase::fRegulatorIdxindex to different priors from every synapses; vector<Double_t>TMVA::MethodANNBase::fRegulatorsthe priors as regulator; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class; Int_tTMVA::ConvergenceTest::fSteps; TObjArray*TMVA::MethodANNBase::fSynapsesarray of pointers to synapses, no structural data; boolTMVA::MethodANNBase::fUseRegulatorzjh; TRandom3*TMVA::MethodANNBase::frgenrandom number generator for various uses.",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:24263,Modifiability,variab,variable,24263,"fUseRegulatorzjh; TRandom3*TMVA::MethodANNBase::frgenrandom number generator for various uses. private:. TMVA::MethodMLP::EBPTrainingModefBPModebackprop learning mode (sequential or batch); Int_tfBatchSizebatch size, only matters if in batch learning mode; TStringfBpModeSbackprop learning mode option string (sequential or batch); boolfCalculateErrorscompute inverse hessian matrix at the end of the training; Double_tfDecayRatedecay rate for above learning rate; vector<pair<Float_t,Float_t> >*fDeviationsFromTargetsdeviation from the targets, event weight; Bool_tfEpochMoncreate and fill epoch-wise monitoring histograms (makes outputfile big!); Double_tfGA_SC_factorGA settings: SC_factor; Int_tfGA_SC_rateGA settings: SC_rate; Int_tfGA_SC_stepsGA settings: SC_steps; Int_tfGA_nstepsGA settings: number of steps; Int_tfGA_preCalcGA settings: number of pre-calc steps; Double_tfLastAlphaline search variable; Double_tfLearnRatelearning rate for synapse weight adjustments; Double_tfPriorzjh; vector<Double_t>fPriorDevzjh; Int_tfResetStepreset time (how often we clear hessian matrix); Float_tfSamplingEpochfraction of epochs where sampling is used; Float_tfSamplingFractionfraction of events which is sampled for training; Bool_tfSamplingTestingThe testing sample is sampled; Bool_tfSamplingTrainingThe training sample is sampled; Float_tfSamplingWeightchanging factor for event weights when sampling is turned on; Double_tfTauline search variable; Int_tfTestRatetest for overtraining performed at each #th epochs; TStringfTrainMethodStraining method option param; TMVA::MethodMLP::ETrainingMethodfTrainingMethodmethod of training, BP or GA; Int_tfUpdateLimitzjh; boolfUseRegulatorzjh; Float_tfWeightRangesuppress outliers for the estimator calculation; static const Bool_tfgPRINT_BATCHdebug flags; static const Int_tfgPRINT_ESTIMATOR_INCdebug flags; static const Bool_tfgPRINT_SEQdebug flags. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(co",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:24803,Modifiability,variab,variable,24803,"fUseRegulatorzjh; TRandom3*TMVA::MethodANNBase::frgenrandom number generator for various uses. private:. TMVA::MethodMLP::EBPTrainingModefBPModebackprop learning mode (sequential or batch); Int_tfBatchSizebatch size, only matters if in batch learning mode; TStringfBpModeSbackprop learning mode option string (sequential or batch); boolfCalculateErrorscompute inverse hessian matrix at the end of the training; Double_tfDecayRatedecay rate for above learning rate; vector<pair<Float_t,Float_t> >*fDeviationsFromTargetsdeviation from the targets, event weight; Bool_tfEpochMoncreate and fill epoch-wise monitoring histograms (makes outputfile big!); Double_tfGA_SC_factorGA settings: SC_factor; Int_tfGA_SC_rateGA settings: SC_rate; Int_tfGA_SC_stepsGA settings: SC_steps; Int_tfGA_nstepsGA settings: number of steps; Int_tfGA_preCalcGA settings: number of pre-calc steps; Double_tfLastAlphaline search variable; Double_tfLearnRatelearning rate for synapse weight adjustments; Double_tfPriorzjh; vector<Double_t>fPriorDevzjh; Int_tfResetStepreset time (how often we clear hessian matrix); Float_tfSamplingEpochfraction of epochs where sampling is used; Float_tfSamplingFractionfraction of events which is sampled for training; Bool_tfSamplingTestingThe testing sample is sampled; Bool_tfSamplingTrainingThe training sample is sampled; Float_tfSamplingWeightchanging factor for event weights when sampling is turned on; Double_tfTauline search variable; Int_tfTestRatetest for overtraining performed at each #th epochs; TStringfTrainMethodStraining method option param; TMVA::MethodMLP::ETrainingMethodfTrainingMethodmethod of training, BP or GA; Int_tfUpdateLimitzjh; boolfUseRegulatorzjh; Float_tfWeightRangesuppress outliers for the estimator calculation; static const Bool_tfgPRINT_BATCHdebug flags; static const Int_tfgPRINT_ESTIMATOR_INCdebug flags; static const Bool_tfgPRINT_SEQdebug flags. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(co",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:25272,Modifiability,Inherit,Inheritance,25272,"ng rate for synapse weight adjustments; Double_tfPriorzjh; vector<Double_t>fPriorDevzjh; Int_tfResetStepreset time (how often we clear hessian matrix); Float_tfSamplingEpochfraction of epochs where sampling is used; Float_tfSamplingFractionfraction of events which is sampled for training; Bool_tfSamplingTestingThe testing sample is sampled; Bool_tfSamplingTrainingThe training sample is sampled; Float_tfSamplingWeightchanging factor for event weights when sampling is turned on; Double_tfTauline search variable; Int_tfTestRatetest for overtraining performed at each #th epochs; TStringfTrainMethodStraining method option param; TMVA::MethodMLP::ETrainingMethodfTrainingMethodmethod of training, BP or GA; Int_tfUpdateLimitzjh; boolfUseRegulatorzjh; Float_tfWeightRangesuppress outliers for the estimator calculation; static const Bool_tfgPRINT_BATCHdebug flags; static const Int_tfgPRINT_ESTIMATOR_INCdebug flags; static const Bool_tfgPRINT_SEQdebug flags. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor. MethodMLP(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = 0); constructor from a weight file. ~MethodMLP(); destructor; nothing to be done. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); MLP can handle classification with 2 classes and regression with one regression-target. void Init(); default initializations. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; TrainingMethod <string> Training method; available values are: BP Back-Propagation <default>; GA Genetic Algorithm (takes a LONG time). LearningRate <float> NN learning rate parameter; DecayRate <float> Decay rate for learning parameter; TestRate <int> Test for o",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:25285,Modifiability,Inherit,Inherited,25285,"ng rate for synapse weight adjustments; Double_tfPriorzjh; vector<Double_t>fPriorDevzjh; Int_tfResetStepreset time (how often we clear hessian matrix); Float_tfSamplingEpochfraction of epochs where sampling is used; Float_tfSamplingFractionfraction of events which is sampled for training; Bool_tfSamplingTestingThe testing sample is sampled; Bool_tfSamplingTrainingThe training sample is sampled; Float_tfSamplingWeightchanging factor for event weights when sampling is turned on; Double_tfTauline search variable; Int_tfTestRatetest for overtraining performed at each #th epochs; TStringfTrainMethodStraining method option param; TMVA::MethodMLP::ETrainingMethodfTrainingMethodmethod of training, BP or GA; Int_tfUpdateLimitzjh; boolfUseRegulatorzjh; Float_tfWeightRangesuppress outliers for the estimator calculation; static const Bool_tfgPRINT_BATCHdebug flags; static const Int_tfgPRINT_ESTIMATOR_INCdebug flags; static const Bool_tfgPRINT_SEQdebug flags. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor. MethodMLP(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = 0); constructor from a weight file. ~MethodMLP(); destructor; nothing to be done. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); MLP can handle classification with 2 classes and regression with one regression-target. void Init(); default initializations. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; TrainingMethod <string> Training method; available values are: BP Back-Propagation <default>; GA Genetic Algorithm (takes a LONG time). LearningRate <float> NN learning rate parameter; DecayRate <float> Decay rate for learning parameter; TestRate <int> Test for o",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:10880,Performance,Optimiz,OptimizeTuningParameters,10880,"eDir = 0); TDirectory*TMVA::MethodBase::MethodBaseDir() const; TMVA::MethodMLPMethodMLP(const TMVA::MethodMLP&); TMVA::MethodMLPMethodMLP(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = 0); TMVA::MethodMLPMethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodMLP&operator=(const TMVA::MethodMLP&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; virtual voidTMVA::MethodANNBase::PrintNetwork() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); Float_tTMVA::ConvergenceTest::Progress(); virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidTMVA::MethodANNBase::ReadWeightsFromStream",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:13823,Performance,tune,tuneParameters,13823,":ConvergenceTest::SetConvergenceParameters(Int_t steps, Double_t improvement); voidTMVA::ConvergenceTest::SetCurrentValue(Float_t value); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); voidTMVA::MethodANNBase::SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; Float_tTMVA::ConvergenceTest::SpeedControl(UInt_t ofSteps); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, I",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:24849,Performance,perform,performed,24849,"fUseRegulatorzjh; TRandom3*TMVA::MethodANNBase::frgenrandom number generator for various uses. private:. TMVA::MethodMLP::EBPTrainingModefBPModebackprop learning mode (sequential or batch); Int_tfBatchSizebatch size, only matters if in batch learning mode; TStringfBpModeSbackprop learning mode option string (sequential or batch); boolfCalculateErrorscompute inverse hessian matrix at the end of the training; Double_tfDecayRatedecay rate for above learning rate; vector<pair<Float_t,Float_t> >*fDeviationsFromTargetsdeviation from the targets, event weight; Bool_tfEpochMoncreate and fill epoch-wise monitoring histograms (makes outputfile big!); Double_tfGA_SC_factorGA settings: SC_factor; Int_tfGA_SC_rateGA settings: SC_rate; Int_tfGA_SC_stepsGA settings: SC_steps; Int_tfGA_nstepsGA settings: number of steps; Int_tfGA_preCalcGA settings: number of pre-calc steps; Double_tfLastAlphaline search variable; Double_tfLearnRatelearning rate for synapse weight adjustments; Double_tfPriorzjh; vector<Double_t>fPriorDevzjh; Int_tfResetStepreset time (how often we clear hessian matrix); Float_tfSamplingEpochfraction of epochs where sampling is used; Float_tfSamplingFractionfraction of events which is sampled for training; Bool_tfSamplingTestingThe testing sample is sampled; Bool_tfSamplingTrainingThe training sample is sampled; Float_tfSamplingWeightchanging factor for event weights when sampling is turned on; Double_tfTauline search variable; Int_tfTestRatetest for overtraining performed at each #th epochs; TStringfTrainMethodStraining method option param; TMVA::MethodMLP::ETrainingMethodfTrainingMethodmethod of training, BP or GA; Int_tfUpdateLimitzjh; boolfUseRegulatorzjh; Float_tfWeightRangesuppress outliers for the estimator calculation; static const Bool_tfgPRINT_BATCHdebug flags; static const Int_tfgPRINT_ESTIMATOR_INCdebug flags; static const Bool_tfgPRINT_SEQdebug flags. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(co",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:26310,Performance,perform,performed,26310,"gs. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor. MethodMLP(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = 0); constructor from a weight file. ~MethodMLP(); destructor; nothing to be done. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); MLP can handle classification with 2 classes and regression with one regression-target. void Init(); default initializations. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; TrainingMethod <string> Training method; available values are: BP Back-Propagation <default>; GA Genetic Algorithm (takes a LONG time). LearningRate <float> NN learning rate parameter; DecayRate <float> Decay rate for learning parameter; TestRate <int> Test for overtraining performed at each #th epochs. BPMode <string> Back-propagation learning mode; available values are: sequential <default>; batch. BatchSize <int> Batch size: number of events/batch, only set if in Batch Mode,; -1 for BatchSize=number_of_events. void ProcessOptions(); process user options. void InitializeLearningRates(); initialize learning rates of synapses, used only by backpropagation. Double_t CalculateEstimator(TMVA::Types::ETreeType treeType = Types::kTraining, Int_t iEpoch = -1); calculate the estimator that training is attempting to minimize. void Train(Int_t nEpochs). void BFGSMinimize(Int_t nEpochs); train network with BFGS algorithm. void SetGammaDelta(TMatrixD& Gamma, TMatrixD& Delta, vector<Double_t>& Buffer). void ComputeDEDw(). void SimulateEvent(const TMVA::Event* ev). void SteepestDir(TMatrixD& Dir). Bool_t GetHessian(TMatrixD& Hessian, TMatrixD& Gamma, TMatrixD& Delta). void SetDir(TMatrixD& Hessian, TMatrixD& Dir).",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:29242,Performance,optimiz,optimization,29242," TrainOneEvent(Int_t ievt); train network over a single event; this uses the new event model. Double_t GetDesiredOutput(const TMVA::Event* ev); get the desired output of this event. void UpdateNetwork(Double_t desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void UpdateNetwork(const vector<Float_t>& desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void CalculateNeuronDeltas(); have each neuron calculate its delta by backpropagation. void GeneticMinimize(); create genetics class similar to GeneticCut; give it vector of parameter ranges (parameters = weights); link fitness function of this class to ComputeEstimator; instantiate GA (see MethodCuts); run it; then this should exist for GA, Minuit and random sampling. Double_t EstimatorFunction(vector<Double_t>& parameters); interface to the estimate. Double_t ComputeEstimator(vector<Double_t>& parameters); this function is called by GeneticANN for GA optimization. void UpdateSynapses(); update synapse error fields and adjust the weights (if in sequential mode). void AdjustSynapseWeights(); just adjust the synapse weights (should be called in batch mode). void UpdatePriors(). void UpdateRegulators(). void GetApproxInvHessian(TMatrixD& InvHessian, bool regulate = true). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructors. void Train(); { Train(NumCycles()); }. bool HasInverseHessian(); { return fCalculateErrors; }. » Author: Krzysztof Danielowski, Andreas Hoecker, Matt Ja",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:7817,Security,Hash,Hash,7817,"t; UInt_tTMVA::MethodBase::GetTrainingROOTVersionCode() const; TStringTMVA::MethodBase::GetTrainingROOTVersionString() const; UInt_tTMVA::MethodBase::GetTrainingTMVAVersionCode() const; TStringTMVA::MethodBase::GetTrainingTMVAVersionString() const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); Bool_tTMVA::ConvergenceTest::HasConverged(Bool_t withinConvergenceBand = kFALSE); virtual ULong_tTObject::Hash() const; boolHasInverseHessian(); Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(const TMVA::IFitterTarget&); TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::MethodANNBase::InitANNBase(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObjec",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:13625,Testability,test,testTime,13625,"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); voidTMVA::ConvergenceTest::SetConvergenceParameters(Int_t steps, Double_t improvement); voidTMVA::ConvergenceTest::SetCurrentValue(Float_t value); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); voidTMVA::MethodANNBase::SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; Float_tTMVA::ConvergenceTest::SpeedControl(UInt_t ofSteps); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voi",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:14222,Testability,Test,TestBit,14222,"sgType(TMVA::EMsgType t); voidTMVA::MethodANNBase::SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; Float_tTMVA::ConvergenceTest::SpeedControl(UInt_t ofSteps); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodANNBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::Metho",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:14261,Testability,Test,TestBits,14261,"MVA::MethodANNBase::SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; Float_tTMVA::ConvergenceTest::SpeedControl(UInt_t ofSteps); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodANNBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:14317,Testability,Test,TestClassification,14317,"MVA::MethodANNBase::SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; Float_tTMVA::ConvergenceTest::SpeedControl(UInt_t ofSteps); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodANNBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:14369,Testability,Test,TestMulticlass,14369,"MVA::MethodANNBase::SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; Float_tTMVA::ConvergenceTest::SpeedControl(UInt_t ofSteps); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodANNBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:14417,Testability,Test,TestRegression,14417,"MVA::MethodANNBase::SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; Float_tTMVA::ConvergenceTest::SpeedControl(UInt_t ofSteps); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodANNBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:16648,Testability,Log,Log,16648,"(Bool_t b = kTRUE); voidTMVA::MethodANNBase::ForceNetworkCalculations(); voidTMVA::MethodANNBase::ForceNetworkInputs(const TMVA::Event* ev, Int_t ignoreIndex = -1); virtual voidGetHelpMessage() const; TMVA::TNeuron*TMVA::MethodANNBase::GetInputNeuron(Int_t index); const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; Double_tTMVA::MethodANNBase::GetNetworkOutput(); const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; TMVA::TNeuron*TMVA::MethodANNBase::GetOutputNeuron(Int_t index = 0); const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); Int_tTMVA::MethodANNBase::NumCycles(); vector<Int_t>*TMVA::MethodANNBase::ParseLayoutString(TString layerSpec); voidTMVA::MethodANNBase::PrintMessage(TString message, Bool_t force = kFALSE) const; voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::MethodANNBas",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:19421,Testability,test,testing,19421,"); voidTrainOneEventFast(Int_t ievt, Float_t*& branchVar, Int_t& type); voidUpdateNetwork(Double_t desired, Double_t eventWeight = 1.); voidUpdateNetwork(const vector<Float_t>& desired, Double_t eventWeight = 1.); voidUpdatePriors(); voidUpdateRegulators(); voidUpdateSynapses(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one; static TMVA::MethodMLP::ETrainingMethodkBFGS; static TMVA::MethodMLP::ETrainingMethodkBP; static TMVA::MethodMLP::EBPTrainingModekBatch; static TObject::(anonymous)TObject::kBitMask; static TMVA::MethodANNBase::EEstimatorTMVA::MethodANNBase::kCE; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TMVA::MethodMLP::ETrainingMethodkGA; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TMVA::MethodANNBase::EEstimatorTMVA::MethodANNBase::kMSE; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TMVA::MethodMLP::EBPTrainingModekSequential; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::TActivation*TMVA::MethodANNBase::fActivationactivation function to be used for hidden layers; TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; ",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:21446,Testability,test,test,21446,,MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:24613,Testability,test,testing,24613,"fUseRegulatorzjh; TRandom3*TMVA::MethodANNBase::frgenrandom number generator for various uses. private:. TMVA::MethodMLP::EBPTrainingModefBPModebackprop learning mode (sequential or batch); Int_tfBatchSizebatch size, only matters if in batch learning mode; TStringfBpModeSbackprop learning mode option string (sequential or batch); boolfCalculateErrorscompute inverse hessian matrix at the end of the training; Double_tfDecayRatedecay rate for above learning rate; vector<pair<Float_t,Float_t> >*fDeviationsFromTargetsdeviation from the targets, event weight; Bool_tfEpochMoncreate and fill epoch-wise monitoring histograms (makes outputfile big!); Double_tfGA_SC_factorGA settings: SC_factor; Int_tfGA_SC_rateGA settings: SC_rate; Int_tfGA_SC_stepsGA settings: SC_steps; Int_tfGA_nstepsGA settings: number of steps; Int_tfGA_preCalcGA settings: number of pre-calc steps; Double_tfLastAlphaline search variable; Double_tfLearnRatelearning rate for synapse weight adjustments; Double_tfPriorzjh; vector<Double_t>fPriorDevzjh; Int_tfResetStepreset time (how often we clear hessian matrix); Float_tfSamplingEpochfraction of epochs where sampling is used; Float_tfSamplingFractionfraction of events which is sampled for training; Bool_tfSamplingTestingThe testing sample is sampled; Bool_tfSamplingTrainingThe training sample is sampled; Float_tfSamplingWeightchanging factor for event weights when sampling is turned on; Double_tfTauline search variable; Int_tfTestRatetest for overtraining performed at each #th epochs; TStringfTrainMethodStraining method option param; TMVA::MethodMLP::ETrainingMethodfTrainingMethodmethod of training, BP or GA; Int_tfUpdateLimitzjh; boolfUseRegulatorzjh; Float_tfWeightRangesuppress outliers for the estimator calculation; static const Bool_tfgPRINT_BATCHdebug flags; static const Int_tfgPRINT_ESTIMATOR_INCdebug flags; static const Bool_tfgPRINT_SEQdebug flags. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(co",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:26273,Testability,Test,TestRate,26273,"gs. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor. MethodMLP(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = 0); constructor from a weight file. ~MethodMLP(); destructor; nothing to be done. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); MLP can handle classification with 2 classes and regression with one regression-target. void Init(); default initializations. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; TrainingMethod <string> Training method; available values are: BP Back-Propagation <default>; GA Genetic Algorithm (takes a LONG time). LearningRate <float> NN learning rate parameter; DecayRate <float> Decay rate for learning parameter; TestRate <int> Test for overtraining performed at each #th epochs. BPMode <string> Back-propagation learning mode; available values are: sequential <default>; batch. BatchSize <int> Batch size: number of events/batch, only set if in Batch Mode,; -1 for BatchSize=number_of_events. void ProcessOptions(); process user options. void InitializeLearningRates(); initialize learning rates of synapses, used only by backpropagation. Double_t CalculateEstimator(TMVA::Types::ETreeType treeType = Types::kTraining, Int_t iEpoch = -1); calculate the estimator that training is attempting to minimize. void Train(Int_t nEpochs). void BFGSMinimize(Int_t nEpochs); train network with BFGS algorithm. void SetGammaDelta(TMatrixD& Gamma, TMatrixD& Delta, vector<Double_t>& Buffer). void ComputeDEDw(). void SimulateEvent(const TMVA::Event* ev). void SteepestDir(TMatrixD& Dir). Bool_t GetHessian(TMatrixD& Hessian, TMatrixD& Gamma, TMatrixD& Delta). void SetDir(TMatrixD& Hessian, TMatrixD& Dir).",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:26288,Testability,Test,Test,26288,"gs. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor. MethodMLP(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = 0); constructor from a weight file. ~MethodMLP(); destructor; nothing to be done. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); MLP can handle classification with 2 classes and regression with one regression-target. void Init(); default initializations. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; TrainingMethod <string> Training method; available values are: BP Back-Propagation <default>; GA Genetic Algorithm (takes a LONG time). LearningRate <float> NN learning rate parameter; DecayRate <float> Decay rate for learning parameter; TestRate <int> Test for overtraining performed at each #th epochs. BPMode <string> Back-propagation learning mode; available values are: sequential <default>; batch. BatchSize <int> Batch size: number of events/batch, only set if in Batch Mode,; -1 for BatchSize=number_of_events. void ProcessOptions(); process user options. void InitializeLearningRates(); initialize learning rates of synapses, used only by backpropagation. Double_t CalculateEstimator(TMVA::Types::ETreeType treeType = Types::kTraining, Int_t iEpoch = -1); calculate the estimator that training is attempting to minimize. void Train(Int_t nEpochs). void BFGSMinimize(Int_t nEpochs); train network with BFGS algorithm. void SetGammaDelta(TMatrixD& Gamma, TMatrixD& Delta, vector<Double_t>& Buffer). void ComputeDEDw(). void SimulateEvent(const TMVA::Event* ev). void SteepestDir(TMatrixD& Dir). Bool_t GetHessian(TMatrixD& Hessian, TMatrixD& Gamma, TMatrixD& Delta). void SetDir(TMatrixD& Hessian, TMatrixD& Dir).",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:1112,Usability,Clear,Clear,1112," virtual~MethodMLP(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidTMVA::MethodANNBase::AddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Double_tComputeEstimator(vector<Double_t>& parameters); TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); TMVA::ConvergenceTestTMVA::ConvergenceTest::ConvergenceTest(); TMVA::ConvergenceTestTMVA::ConvergenceTest::ConvergenceTest(const TMVA::ConvergenceTest&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*TMVA::MethodANNBase::CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; Bool_tTMVA::MethodANNBase::Debug() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:23514,Usability,learn,learning,23514,"fUseRegulatorzjh; TRandom3*TMVA::MethodANNBase::frgenrandom number generator for various uses. private:. TMVA::MethodMLP::EBPTrainingModefBPModebackprop learning mode (sequential or batch); Int_tfBatchSizebatch size, only matters if in batch learning mode; TStringfBpModeSbackprop learning mode option string (sequential or batch); boolfCalculateErrorscompute inverse hessian matrix at the end of the training; Double_tfDecayRatedecay rate for above learning rate; vector<pair<Float_t,Float_t> >*fDeviationsFromTargetsdeviation from the targets, event weight; Bool_tfEpochMoncreate and fill epoch-wise monitoring histograms (makes outputfile big!); Double_tfGA_SC_factorGA settings: SC_factor; Int_tfGA_SC_rateGA settings: SC_rate; Int_tfGA_SC_stepsGA settings: SC_steps; Int_tfGA_nstepsGA settings: number of steps; Int_tfGA_preCalcGA settings: number of pre-calc steps; Double_tfLastAlphaline search variable; Double_tfLearnRatelearning rate for synapse weight adjustments; Double_tfPriorzjh; vector<Double_t>fPriorDevzjh; Int_tfResetStepreset time (how often we clear hessian matrix); Float_tfSamplingEpochfraction of epochs where sampling is used; Float_tfSamplingFractionfraction of events which is sampled for training; Bool_tfSamplingTestingThe testing sample is sampled; Bool_tfSamplingTrainingThe training sample is sampled; Float_tfSamplingWeightchanging factor for event weights when sampling is turned on; Double_tfTauline search variable; Int_tfTestRatetest for overtraining performed at each #th epochs; TStringfTrainMethodStraining method option param; TMVA::MethodMLP::ETrainingMethodfTrainingMethodmethod of training, BP or GA; Int_tfUpdateLimitzjh; boolfUseRegulatorzjh; Float_tfWeightRangesuppress outliers for the estimator calculation; static const Bool_tfgPRINT_BATCHdebug flags; static const Int_tfgPRINT_ESTIMATOR_INCdebug flags; static const Bool_tfgPRINT_SEQdebug flags. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(co",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:23603,Usability,learn,learning,23603,"fUseRegulatorzjh; TRandom3*TMVA::MethodANNBase::frgenrandom number generator for various uses. private:. TMVA::MethodMLP::EBPTrainingModefBPModebackprop learning mode (sequential or batch); Int_tfBatchSizebatch size, only matters if in batch learning mode; TStringfBpModeSbackprop learning mode option string (sequential or batch); boolfCalculateErrorscompute inverse hessian matrix at the end of the training; Double_tfDecayRatedecay rate for above learning rate; vector<pair<Float_t,Float_t> >*fDeviationsFromTargetsdeviation from the targets, event weight; Bool_tfEpochMoncreate and fill epoch-wise monitoring histograms (makes outputfile big!); Double_tfGA_SC_factorGA settings: SC_factor; Int_tfGA_SC_rateGA settings: SC_rate; Int_tfGA_SC_stepsGA settings: SC_steps; Int_tfGA_nstepsGA settings: number of steps; Int_tfGA_preCalcGA settings: number of pre-calc steps; Double_tfLastAlphaline search variable; Double_tfLearnRatelearning rate for synapse weight adjustments; Double_tfPriorzjh; vector<Double_t>fPriorDevzjh; Int_tfResetStepreset time (how often we clear hessian matrix); Float_tfSamplingEpochfraction of epochs where sampling is used; Float_tfSamplingFractionfraction of events which is sampled for training; Bool_tfSamplingTestingThe testing sample is sampled; Bool_tfSamplingTrainingThe training sample is sampled; Float_tfSamplingWeightchanging factor for event weights when sampling is turned on; Double_tfTauline search variable; Int_tfTestRatetest for overtraining performed at each #th epochs; TStringfTrainMethodStraining method option param; TMVA::MethodMLP::ETrainingMethodfTrainingMethodmethod of training, BP or GA; Int_tfUpdateLimitzjh; boolfUseRegulatorzjh; Float_tfWeightRangesuppress outliers for the estimator calculation; static const Bool_tfgPRINT_BATCHdebug flags; static const Int_tfgPRINT_ESTIMATOR_INCdebug flags; static const Bool_tfgPRINT_SEQdebug flags. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(co",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:23642,Usability,learn,learning,23642,"fUseRegulatorzjh; TRandom3*TMVA::MethodANNBase::frgenrandom number generator for various uses. private:. TMVA::MethodMLP::EBPTrainingModefBPModebackprop learning mode (sequential or batch); Int_tfBatchSizebatch size, only matters if in batch learning mode; TStringfBpModeSbackprop learning mode option string (sequential or batch); boolfCalculateErrorscompute inverse hessian matrix at the end of the training; Double_tfDecayRatedecay rate for above learning rate; vector<pair<Float_t,Float_t> >*fDeviationsFromTargetsdeviation from the targets, event weight; Bool_tfEpochMoncreate and fill epoch-wise monitoring histograms (makes outputfile big!); Double_tfGA_SC_factorGA settings: SC_factor; Int_tfGA_SC_rateGA settings: SC_rate; Int_tfGA_SC_stepsGA settings: SC_steps; Int_tfGA_nstepsGA settings: number of steps; Int_tfGA_preCalcGA settings: number of pre-calc steps; Double_tfLastAlphaline search variable; Double_tfLearnRatelearning rate for synapse weight adjustments; Double_tfPriorzjh; vector<Double_t>fPriorDevzjh; Int_tfResetStepreset time (how often we clear hessian matrix); Float_tfSamplingEpochfraction of epochs where sampling is used; Float_tfSamplingFractionfraction of events which is sampled for training; Bool_tfSamplingTestingThe testing sample is sampled; Bool_tfSamplingTrainingThe training sample is sampled; Float_tfSamplingWeightchanging factor for event weights when sampling is turned on; Double_tfTauline search variable; Int_tfTestRatetest for overtraining performed at each #th epochs; TStringfTrainMethodStraining method option param; TMVA::MethodMLP::ETrainingMethodfTrainingMethodmethod of training, BP or GA; Int_tfUpdateLimitzjh; boolfUseRegulatorzjh; Float_tfWeightRangesuppress outliers for the estimator calculation; static const Bool_tfgPRINT_BATCHdebug flags; static const Int_tfgPRINT_ESTIMATOR_INCdebug flags; static const Bool_tfgPRINT_SEQdebug flags. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(co",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:23811,Usability,learn,learning,23811,"fUseRegulatorzjh; TRandom3*TMVA::MethodANNBase::frgenrandom number generator for various uses. private:. TMVA::MethodMLP::EBPTrainingModefBPModebackprop learning mode (sequential or batch); Int_tfBatchSizebatch size, only matters if in batch learning mode; TStringfBpModeSbackprop learning mode option string (sequential or batch); boolfCalculateErrorscompute inverse hessian matrix at the end of the training; Double_tfDecayRatedecay rate for above learning rate; vector<pair<Float_t,Float_t> >*fDeviationsFromTargetsdeviation from the targets, event weight; Bool_tfEpochMoncreate and fill epoch-wise monitoring histograms (makes outputfile big!); Double_tfGA_SC_factorGA settings: SC_factor; Int_tfGA_SC_rateGA settings: SC_rate; Int_tfGA_SC_stepsGA settings: SC_steps; Int_tfGA_nstepsGA settings: number of steps; Int_tfGA_preCalcGA settings: number of pre-calc steps; Double_tfLastAlphaline search variable; Double_tfLearnRatelearning rate for synapse weight adjustments; Double_tfPriorzjh; vector<Double_t>fPriorDevzjh; Int_tfResetStepreset time (how often we clear hessian matrix); Float_tfSamplingEpochfraction of epochs where sampling is used; Float_tfSamplingFractionfraction of events which is sampled for training; Bool_tfSamplingTestingThe testing sample is sampled; Bool_tfSamplingTrainingThe training sample is sampled; Float_tfSamplingWeightchanging factor for event weights when sampling is turned on; Double_tfTauline search variable; Int_tfTestRatetest for overtraining performed at each #th epochs; TStringfTrainMethodStraining method option param; TMVA::MethodMLP::ETrainingMethodfTrainingMethodmethod of training, BP or GA; Int_tfUpdateLimitzjh; boolfUseRegulatorzjh; Float_tfWeightRangesuppress outliers for the estimator calculation; static const Bool_tfgPRINT_BATCHdebug flags; static const Int_tfgPRINT_ESTIMATOR_INCdebug flags; static const Bool_tfgPRINT_SEQdebug flags. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(co",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:24426,Usability,clear,clear,24426,"fUseRegulatorzjh; TRandom3*TMVA::MethodANNBase::frgenrandom number generator for various uses. private:. TMVA::MethodMLP::EBPTrainingModefBPModebackprop learning mode (sequential or batch); Int_tfBatchSizebatch size, only matters if in batch learning mode; TStringfBpModeSbackprop learning mode option string (sequential or batch); boolfCalculateErrorscompute inverse hessian matrix at the end of the training; Double_tfDecayRatedecay rate for above learning rate; vector<pair<Float_t,Float_t> >*fDeviationsFromTargetsdeviation from the targets, event weight; Bool_tfEpochMoncreate and fill epoch-wise monitoring histograms (makes outputfile big!); Double_tfGA_SC_factorGA settings: SC_factor; Int_tfGA_SC_rateGA settings: SC_rate; Int_tfGA_SC_stepsGA settings: SC_steps; Int_tfGA_nstepsGA settings: number of steps; Int_tfGA_preCalcGA settings: number of pre-calc steps; Double_tfLastAlphaline search variable; Double_tfLearnRatelearning rate for synapse weight adjustments; Double_tfPriorzjh; vector<Double_t>fPriorDevzjh; Int_tfResetStepreset time (how often we clear hessian matrix); Float_tfSamplingEpochfraction of epochs where sampling is used; Float_tfSamplingFractionfraction of events which is sampled for training; Bool_tfSamplingTestingThe testing sample is sampled; Bool_tfSamplingTrainingThe training sample is sampled; Float_tfSamplingWeightchanging factor for event weights when sampling is turned on; Double_tfTauline search variable; Int_tfTestRatetest for overtraining performed at each #th epochs; TStringfTrainMethodStraining method option param; TMVA::MethodMLP::ETrainingMethodfTrainingMethodmethod of training, BP or GA; Int_tfUpdateLimitzjh; boolfUseRegulatorzjh; Float_tfWeightRangesuppress outliers for the estimator calculation; static const Bool_tfgPRINT_BATCHdebug flags; static const Int_tfgPRINT_ESTIMATOR_INCdebug flags; static const Bool_tfgPRINT_SEQdebug flags. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(co",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:26171,Usability,Learn,LearningRate,26171,"gs. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor. MethodMLP(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = 0); constructor from a weight file. ~MethodMLP(); destructor; nothing to be done. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); MLP can handle classification with 2 classes and regression with one regression-target. void Init(); default initializations. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; TrainingMethod <string> Training method; available values are: BP Back-Propagation <default>; GA Genetic Algorithm (takes a LONG time). LearningRate <float> NN learning rate parameter; DecayRate <float> Decay rate for learning parameter; TestRate <int> Test for overtraining performed at each #th epochs. BPMode <string> Back-propagation learning mode; available values are: sequential <default>; batch. BatchSize <int> Batch size: number of events/batch, only set if in Batch Mode,; -1 for BatchSize=number_of_events. void ProcessOptions(); process user options. void InitializeLearningRates(); initialize learning rates of synapses, used only by backpropagation. Double_t CalculateEstimator(TMVA::Types::ETreeType treeType = Types::kTraining, Int_t iEpoch = -1); calculate the estimator that training is attempting to minimize. void Train(Int_t nEpochs). void BFGSMinimize(Int_t nEpochs); train network with BFGS algorithm. void SetGammaDelta(TMatrixD& Gamma, TMatrixD& Delta, vector<Double_t>& Buffer). void ComputeDEDw(). void SimulateEvent(const TMVA::Event* ev). void SteepestDir(TMatrixD& Dir). Bool_t GetHessian(TMatrixD& Hessian, TMatrixD& Gamma, TMatrixD& Delta). void SetDir(TMatrixD& Hessian, TMatrixD& Dir).",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:26195,Usability,learn,learning,26195,"gs. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor. MethodMLP(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = 0); constructor from a weight file. ~MethodMLP(); destructor; nothing to be done. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); MLP can handle classification with 2 classes and regression with one regression-target. void Init(); default initializations. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; TrainingMethod <string> Training method; available values are: BP Back-Propagation <default>; GA Genetic Algorithm (takes a LONG time). LearningRate <float> NN learning rate parameter; DecayRate <float> Decay rate for learning parameter; TestRate <int> Test for overtraining performed at each #th epochs. BPMode <string> Back-propagation learning mode; available values are: sequential <default>; batch. BatchSize <int> Batch size: number of events/batch, only set if in Batch Mode,; -1 for BatchSize=number_of_events. void ProcessOptions(); process user options. void InitializeLearningRates(); initialize learning rates of synapses, used only by backpropagation. Double_t CalculateEstimator(TMVA::Types::ETreeType treeType = Types::kTraining, Int_t iEpoch = -1); calculate the estimator that training is attempting to minimize. void Train(Int_t nEpochs). void BFGSMinimize(Int_t nEpochs); train network with BFGS algorithm. void SetGammaDelta(TMatrixD& Gamma, TMatrixD& Delta, vector<Double_t>& Buffer). void ComputeDEDw(). void SimulateEvent(const TMVA::Event* ev). void SteepestDir(TMatrixD& Dir). Bool_t GetHessian(TMatrixD& Hessian, TMatrixD& Gamma, TMatrixD& Delta). void SetDir(TMatrixD& Hessian, TMatrixD& Dir).",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:26253,Usability,learn,learning,26253,"gs. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor. MethodMLP(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = 0); constructor from a weight file. ~MethodMLP(); destructor; nothing to be done. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); MLP can handle classification with 2 classes and regression with one regression-target. void Init(); default initializations. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; TrainingMethod <string> Training method; available values are: BP Back-Propagation <default>; GA Genetic Algorithm (takes a LONG time). LearningRate <float> NN learning rate parameter; DecayRate <float> Decay rate for learning parameter; TestRate <int> Test for overtraining performed at each #th epochs. BPMode <string> Back-propagation learning mode; available values are: sequential <default>; batch. BatchSize <int> Batch size: number of events/batch, only set if in Batch Mode,; -1 for BatchSize=number_of_events. void ProcessOptions(); process user options. void InitializeLearningRates(); initialize learning rates of synapses, used only by backpropagation. Double_t CalculateEstimator(TMVA::Types::ETreeType treeType = Types::kTraining, Int_t iEpoch = -1); calculate the estimator that training is attempting to minimize. void Train(Int_t nEpochs). void BFGSMinimize(Int_t nEpochs); train network with BFGS algorithm. void SetGammaDelta(TMatrixD& Gamma, TMatrixD& Delta, vector<Double_t>& Buffer). void ComputeDEDw(). void SimulateEvent(const TMVA::Event* ev). void SteepestDir(TMatrixD& Dir). Bool_t GetHessian(TMatrixD& Hessian, TMatrixD& Gamma, TMatrixD& Delta). void SetDir(TMatrixD& Hessian, TMatrixD& Dir).",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:26373,Usability,learn,learning,26373," TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor. MethodMLP(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = 0); constructor from a weight file. ~MethodMLP(); destructor; nothing to be done. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); MLP can handle classification with 2 classes and regression with one regression-target. void Init(); default initializations. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; TrainingMethod <string> Training method; available values are: BP Back-Propagation <default>; GA Genetic Algorithm (takes a LONG time). LearningRate <float> NN learning rate parameter; DecayRate <float> Decay rate for learning parameter; TestRate <int> Test for overtraining performed at each #th epochs. BPMode <string> Back-propagation learning mode; available values are: sequential <default>; batch. BatchSize <int> Batch size: number of events/batch, only set if in Batch Mode,; -1 for BatchSize=number_of_events. void ProcessOptions(); process user options. void InitializeLearningRates(); initialize learning rates of synapses, used only by backpropagation. Double_t CalculateEstimator(TMVA::Types::ETreeType treeType = Types::kTraining, Int_t iEpoch = -1); calculate the estimator that training is attempting to minimize. void Train(Int_t nEpochs). void BFGSMinimize(Int_t nEpochs); train network with BFGS algorithm. void SetGammaDelta(TMatrixD& Gamma, TMatrixD& Delta, vector<Double_t>& Buffer). void ComputeDEDw(). void SimulateEvent(const TMVA::Event* ev). void SteepestDir(TMatrixD& Dir). Bool_t GetHessian(TMatrixD& Hessian, TMatrixD& Gamma, TMatrixD& Delta). void SetDir(TMatrixD& Hessian, TMatrixD& Dir). Double_t DerivDir(TMatrixD& Dir). Bool_t LineSearch(TMatrixD& Dir, vector<Double_t>& Buffer, Double_t* dError = 0). void SetDirWeight",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:26642,Usability,learn,learning,26642," ~MethodMLP(); destructor; nothing to be done. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); MLP can handle classification with 2 classes and regression with one regression-target. void Init(); default initializations. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; TrainingMethod <string> Training method; available values are: BP Back-Propagation <default>; GA Genetic Algorithm (takes a LONG time). LearningRate <float> NN learning rate parameter; DecayRate <float> Decay rate for learning parameter; TestRate <int> Test for overtraining performed at each #th epochs. BPMode <string> Back-propagation learning mode; available values are: sequential <default>; batch. BatchSize <int> Batch size: number of events/batch, only set if in Batch Mode,; -1 for BatchSize=number_of_events. void ProcessOptions(); process user options. void InitializeLearningRates(); initialize learning rates of synapses, used only by backpropagation. Double_t CalculateEstimator(TMVA::Types::ETreeType treeType = Types::kTraining, Int_t iEpoch = -1); calculate the estimator that training is attempting to minimize. void Train(Int_t nEpochs). void BFGSMinimize(Int_t nEpochs); train network with BFGS algorithm. void SetGammaDelta(TMatrixD& Gamma, TMatrixD& Delta, vector<Double_t>& Buffer). void ComputeDEDw(). void SimulateEvent(const TMVA::Event* ev). void SteepestDir(TMatrixD& Dir). Bool_t GetHessian(TMatrixD& Hessian, TMatrixD& Gamma, TMatrixD& Delta). void SetDir(TMatrixD& Hessian, TMatrixD& Dir). Double_t DerivDir(TMatrixD& Dir). Bool_t LineSearch(TMatrixD& Dir, vector<Double_t>& Buffer, Double_t* dError = 0). void SetDirWeights(vector<Double_t>& Origin, TMatrixD& Dir, Double_t alpha). Double_t GetError(). Double_t GetMSEErr(const TMVA::Event* ev, UInt_t index = 0). Double_t GetCEErr(const TMVA::Event* ev, UInt_t index = 0). void BackPropagationMinimize(Int_t nEpochs); minimize esti",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodMLP.html:28050,Usability,learn,learning,28050,"_t>& Buffer). void ComputeDEDw(). void SimulateEvent(const TMVA::Event* ev). void SteepestDir(TMatrixD& Dir). Bool_t GetHessian(TMatrixD& Hessian, TMatrixD& Gamma, TMatrixD& Delta). void SetDir(TMatrixD& Hessian, TMatrixD& Dir). Double_t DerivDir(TMatrixD& Dir). Bool_t LineSearch(TMatrixD& Dir, vector<Double_t>& Buffer, Double_t* dError = 0). void SetDirWeights(vector<Double_t>& Origin, TMatrixD& Dir, Double_t alpha). Double_t GetError(). Double_t GetMSEErr(const TMVA::Event* ev, UInt_t index = 0). Double_t GetCEErr(const TMVA::Event* ev, UInt_t index = 0). void BackPropagationMinimize(Int_t nEpochs); minimize estimator / train network with backpropagation algorithm. void TrainOneEpoch(); train network over a single epoch/cyle of events. void Shuffle(Int_t* index, Int_t n); Input:; index: the array to shuffle; n: the size of the array; Output:; index: the shuffled indexes; This method is used for sequential training. void DecaySynapseWeights(Bool_t lateEpoch); decay synapse weights; in last 10 epochs, lower learning rate even more to find a good minimum. void TrainOneEventFast(Int_t ievt, Float_t*& branchVar, Int_t& type); fast per-event training. void TrainOneEvent(Int_t ievt); train network over a single event; this uses the new event model. Double_t GetDesiredOutput(const TMVA::Event* ev); get the desired output of this event. void UpdateNetwork(Double_t desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void UpdateNetwork(const vector<Float_t>& desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void CalculateNeuronDeltas(); have each neuron calculate its delta by backpropagation. void GeneticMinimize(); create genetics class similar to GeneticCut; give it vector of parameter ranges (parameters = weights); link fitness function of this class to ComputeEstimator; instantiate GA (see MethodCuts); run it; then this should exist for GA, ",MatchSource.WIKI,root/html604/TMVA__MethodMLP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodMLP.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:2800,Availability,Error,Error,2800,"ect::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMV",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:2929,Availability,error,error,2929,"Object* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:3013,Availability,error,error,3013,"& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollec",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:19193,Availability,error,error,19193,"d-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Bool_tfCompresscompress foam output file; Bool_tfCutNminKeep for bw compatibility: Grabbing cell with maximal RMS to split next (TFoam default); TStringfDTLogicuse DT algorithm to split cells; TMVA::EDTSeparationfDTSeparationenum which specifies the separation to use for the DT logic; Float_tfDiscrErrCutcut on discrimant error; Int_tfEvPerBinMaximum events (equiv.) per bin in buid-up (1000); Bool_tfFillFoamWithOrigWeightsfill the foam with boost weights; vector<TMVA::PDEFoam*>fFoamgrown PDEFoams; Float_tfFracFraction used for calc of Xmin, Xmax; TMVA::MethodPDEFoam::EKernelfKernelKernel for GetMvaValue(); TMVA::PDEFoamKernelBase*fKernelEstimatorKernel estimator; TStringfKernelStrKernel for GetMvaValue() (option string); UInt_tfMaxDepthmaximum depth of cell tree; Bool_tfMultiTargetRegressiondo regression on multible targets; UInt_tfNminminimal number of events in cell necessary to split cell""; Bool_tfPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; Bool_tfSigBgSeparatedSeparate Sig and Bg, or not; TMVA::ETargetSelectionfTargetSelectionmethod of selecting the target (only mulit target regr.); TStringfTargetSelectionStrmethod of select",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:23334,Availability,error,error,23334,"getRegression(); Training one (mono target regression) foam, whose cells contain; the average 0th target. The dimension of the foam = number of; non-targets (= number of variables). void TrainMultiTargetRegression(); Training one (multi target regression) foam, whose cells contain; the average event density. The dimension of the foam = number; of non-targets + number of targets. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); Return Mva-Value. In case of 'fSigBgSeparated==false' (one unifiend PDEFoam was; trained) the function returns the content of the cell, which; corresponds to the current TMVA::Event, i.e. D =; N_sig/(N_bg+N_sig). In case of 'fSigBgSeparated==true' (two separate PDEFoams were; trained) the function returns. D = Density_sig/(Density_sig+Density_bg). where 'Density_sig' is the content of the cell in the signal; PDEFoam (fFoam[0]) and 'Density_bg' is the content of the cell; in the background PDEFoam (fFoam[1]). In both cases the error on the discriminant is stored in 'err'; and 'errUpper'. (Of course err and errUpper must be non-zero; and point to valid address to make this work.). Double_t CalculateMVAError(); Calculate the error on the Mva value. If fSigBgSeparated == true the error is calculated from the; number of events in the signal and background PDEFoam cells. If fSigBgSeparated == false, the error is taken directly from; the PDEFoam cell. const std::vector<Float_t>& GetMulticlassValues(); Get the multiclass MVA response for the PDEFoam classifier. The; returned MVA values are normalized, i.e. their sum equals 1. const TMVA::Ranking* CreateRanking(); Compute ranking of input variables from the number of cuts made; in each PDEFoam dimension. The PDEFoam dimension (the variable); for which the most cuts were done is ranked highest. void GetNCuts(TMVA::PDEFoamCell* cell, vector<UInt_t>& nCuts); Fill in 'nCuts' the number of cuts made in every foam dimension,; starting at the root cell 'cell'. Parameters:. - cell - root cell t",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:23534,Availability,error,error,23534,"f variables). void TrainMultiTargetRegression(); Training one (multi target regression) foam, whose cells contain; the average event density. The dimension of the foam = number; of non-targets + number of targets. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); Return Mva-Value. In case of 'fSigBgSeparated==false' (one unifiend PDEFoam was; trained) the function returns the content of the cell, which; corresponds to the current TMVA::Event, i.e. D =; N_sig/(N_bg+N_sig). In case of 'fSigBgSeparated==true' (two separate PDEFoams were; trained) the function returns. D = Density_sig/(Density_sig+Density_bg). where 'Density_sig' is the content of the cell in the signal; PDEFoam (fFoam[0]) and 'Density_bg' is the content of the cell; in the background PDEFoam (fFoam[1]). In both cases the error on the discriminant is stored in 'err'; and 'errUpper'. (Of course err and errUpper must be non-zero; and point to valid address to make this work.). Double_t CalculateMVAError(); Calculate the error on the Mva value. If fSigBgSeparated == true the error is calculated from the; number of events in the signal and background PDEFoam cells. If fSigBgSeparated == false, the error is taken directly from; the PDEFoam cell. const std::vector<Float_t>& GetMulticlassValues(); Get the multiclass MVA response for the PDEFoam classifier. The; returned MVA values are normalized, i.e. their sum equals 1. const TMVA::Ranking* CreateRanking(); Compute ranking of input variables from the number of cuts made; in each PDEFoam dimension. The PDEFoam dimension (the variable); for which the most cuts were done is ranked highest. void GetNCuts(TMVA::PDEFoamCell* cell, vector<UInt_t>& nCuts); Fill in 'nCuts' the number of cuts made in every foam dimension,; starting at the root cell 'cell'. Parameters:. - cell - root cell to start the counting from. - nCuts - the number of cuts are saved in this vector. void SetXminXmax(TMVA::PDEFoam* ); Set Xmin, Xmax for every dimension in the given pde",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:23589,Availability,error,error,23589,"hose cells contain; the average event density. The dimension of the foam = number; of non-targets + number of targets. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); Return Mva-Value. In case of 'fSigBgSeparated==false' (one unifiend PDEFoam was; trained) the function returns the content of the cell, which; corresponds to the current TMVA::Event, i.e. D =; N_sig/(N_bg+N_sig). In case of 'fSigBgSeparated==true' (two separate PDEFoams were; trained) the function returns. D = Density_sig/(Density_sig+Density_bg). where 'Density_sig' is the content of the cell in the signal; PDEFoam (fFoam[0]) and 'Density_bg' is the content of the cell; in the background PDEFoam (fFoam[1]). In both cases the error on the discriminant is stored in 'err'; and 'errUpper'. (Of course err and errUpper must be non-zero; and point to valid address to make this work.). Double_t CalculateMVAError(); Calculate the error on the Mva value. If fSigBgSeparated == true the error is calculated from the; number of events in the signal and background PDEFoam cells. If fSigBgSeparated == false, the error is taken directly from; the PDEFoam cell. const std::vector<Float_t>& GetMulticlassValues(); Get the multiclass MVA response for the PDEFoam classifier. The; returned MVA values are normalized, i.e. their sum equals 1. const TMVA::Ranking* CreateRanking(); Compute ranking of input variables from the number of cuts made; in each PDEFoam dimension. The PDEFoam dimension (the variable); for which the most cuts were done is ranked highest. void GetNCuts(TMVA::PDEFoamCell* cell, vector<UInt_t>& nCuts); Fill in 'nCuts' the number of cuts made in every foam dimension,; starting at the root cell 'cell'. Parameters:. - cell - root cell to start the counting from. - nCuts - the number of cuts are saved in this vector. void SetXminXmax(TMVA::PDEFoam* ); Set Xmin, Xmax for every dimension in the given pdefoam object. TMVA::PDEFoam* InitFoam(TString , TMVA::EFoamType , UInt_t cls = 0); Create a new ",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:23713,Availability,error,error,23713,"umber of targets. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); Return Mva-Value. In case of 'fSigBgSeparated==false' (one unifiend PDEFoam was; trained) the function returns the content of the cell, which; corresponds to the current TMVA::Event, i.e. D =; N_sig/(N_bg+N_sig). In case of 'fSigBgSeparated==true' (two separate PDEFoams were; trained) the function returns. D = Density_sig/(Density_sig+Density_bg). where 'Density_sig' is the content of the cell in the signal; PDEFoam (fFoam[0]) and 'Density_bg' is the content of the cell; in the background PDEFoam (fFoam[1]). In both cases the error on the discriminant is stored in 'err'; and 'errUpper'. (Of course err and errUpper must be non-zero; and point to valid address to make this work.). Double_t CalculateMVAError(); Calculate the error on the Mva value. If fSigBgSeparated == true the error is calculated from the; number of events in the signal and background PDEFoam cells. If fSigBgSeparated == false, the error is taken directly from; the PDEFoam cell. const std::vector<Float_t>& GetMulticlassValues(); Get the multiclass MVA response for the PDEFoam classifier. The; returned MVA values are normalized, i.e. their sum equals 1. const TMVA::Ranking* CreateRanking(); Compute ranking of input variables from the number of cuts made; in each PDEFoam dimension. The PDEFoam dimension (the variable); for which the most cuts were done is ranked highest. void GetNCuts(TMVA::PDEFoamCell* cell, vector<UInt_t>& nCuts); Fill in 'nCuts' the number of cuts made in every foam dimension,; starting at the root cell 'cell'. Parameters:. - cell - root cell to start the counting from. - nCuts - the number of cuts are saved in this vector. void SetXminXmax(TMVA::PDEFoam* ); Set Xmin, Xmax for every dimension in the given pdefoam object. TMVA::PDEFoam* InitFoam(TString , TMVA::EFoamType , UInt_t cls = 0); Create a new PDEFoam, set the PDEFoam options (nCells, nBin,; Xmin, Xmax, etc.) and initialize the PDEFoam by calli",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:1080,Deployability,integrat,integration,1080,"Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodPDEFoam. class TMVA::MethodPDEFoam: public TMVA::MethodBase. MethodPDEFoam. The PDEFoam method is an extension of the PDERS method, which; divides the multi-dimensional phase space in a finite number of; hyper-rectangles (cells) of constant event density. This ""foam"" of; cells is filled with averaged probability-density information; sampled from a training event sample. For a given number of cells, the binning algorithm adjusts the size; and position of the cells inside the multidimensional phase space; based on a binary-split algorithm, minimizing the variance of the; event density in the cell.; The binned event density information of the final foam is stored in; binary trees, allowing for a fast and memory-efficient; classification of events. The implementation of PDEFoam is based on the Monte-Carlo; integration package TFoam included in the analysis package ROOT. Function Members (Methods); public:. virtual~MethodPDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configura",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:984,Energy Efficiency,efficient,efficient,984,". TMVA::MethodPDEFoam. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodPDEFoam. class TMVA::MethodPDEFoam: public TMVA::MethodBase. MethodPDEFoam. The PDEFoam method is an extension of the PDERS method, which; divides the multi-dimensional phase space in a finite number of; hyper-rectangles (cells) of constant event density. This ""foam"" of; cells is filled with averaged probability-density information; sampled from a training event sample. For a given number of cells, the binning algorithm adjusts the size; and position of the cells inside the multidimensional phase space; based on a binary-split algorithm, minimizing the variance of the; event density in the cell.; The binned event density information of the final foam is stored in; binary trees, allowing for a fast and memory-efficient; classification of events. The implementation of PDEFoam is based on the Monte-Carlo; integration package TFoam included in the analysis package ROOT. Function Members (Methods); public:. virtual~MethodPDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurabl",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:1080,Integrability,integrat,integration,1080,"Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodPDEFoam. class TMVA::MethodPDEFoam: public TMVA::MethodBase. MethodPDEFoam. The PDEFoam method is an extension of the PDERS method, which; divides the multi-dimensional phase space in a finite number of; hyper-rectangles (cells) of constant event density. This ""foam"" of; cells is filled with averaged probability-density information; sampled from a training event sample. For a given number of cells, the binning algorithm adjusts the size; and position of the cells inside the multidimensional phase space; based on a binary-split algorithm, minimizing the variance of the; event density in the cell.; The binned event density information of the final foam is stored in; binary trees, allowing for a fast and memory-efficient; classification of events. The implementation of PDEFoam is based on the Monte-Carlo; integration package TFoam included in the analysis package ROOT. Function Members (Methods); public:. virtual~MethodPDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configura",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:21630,Integrability,depend,depending,21630,"m(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""PDEFoam"", TDirectory* theTargetDir = 0); init PDEFoam objects. MethodPDEFoam(TMVA::DataSetInfo& dsi, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDEFoam can handle classification with multiple classes and regression; with one or more regression-targets. void Init( void ); default initialization called by all constructors. void DeclareOptions(). Declare MethodPDEFoam options. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility. void ProcessOptions(); process user options. ~MethodPDEFoam( void ); destructor. void CalcXminXmax(); Determine foam range [fXmin, fXmax] for all dimensions, such; that a fraction of 'fFrac' events lie outside the foam. void Train( void ); Train PDE-Foam depending on the set options. void TrainSeparatedClassification(); Creation of 2 separated foams: one for signal events, one for; backgound events. At the end the foam cells of fFoam[0] will; contain the average number of signal events and fFoam[1] will; contain the average number of background events. void TrainUnifiedClassification(); Create only one unified foam (fFoam[0]) whose cells contain the; average discriminator (N_sig)/(N_sig + N_bg). void TrainMultiClassification(); Create one unified foam (see TrainUnifiedClassification()) for; each class, where the cells of foam i (fFoam[i]) contain the; average fraction of events of class i, i.e. D = number events of class i / total number of events. void TrainMonoTargetRegression(); Training one (mono target regression) foam, whose cells contain; the average 0th target. The dimension of the foam = number of; non-targets (= number of variables). void TrainMultiTargetRegression(); Training one (multi target regression) foam, whose cell",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:25163,Integrability,depend,depends,25163,"s were done is ranked highest. void GetNCuts(TMVA::PDEFoamCell* cell, vector<UInt_t>& nCuts); Fill in 'nCuts' the number of cuts made in every foam dimension,; starting at the root cell 'cell'. Parameters:. - cell - root cell to start the counting from. - nCuts - the number of cuts are saved in this vector. void SetXminXmax(TMVA::PDEFoam* ); Set Xmin, Xmax for every dimension in the given pdefoam object. TMVA::PDEFoam* InitFoam(TString , TMVA::EFoamType , UInt_t cls = 0); Create a new PDEFoam, set the PDEFoam options (nCells, nBin,; Xmin, Xmax, etc.) and initialize the PDEFoam by calling; pdefoam->Initialize(). Parameters:. - foamcaption - name of PDEFoam object. - ft - type of PDEFoam; Candidates are:; - kSeparate - creates TMVA::PDEFoamEvent; - kDiscr - creates TMVA::PDEFoamDiscriminant; - kMonoTarget - creates TMVA::PDEFoamTarget; - kMultiTarget - creates TMVA::MultiTarget; - kMultiClass - creates TMVA::PDEFoamDiscriminant. If 'fDTSeparation != kFoam' then a TMVA::PDEFoamDecisionTree; is created (the separation type depends on fDTSeparation). - cls - marked event class (optional, default value = 0). const std::vector<Float_t>& GetRegressionValues(); Return regression values for both multi- and mono-target regression. TMVA::PDEFoamKernelBase* CreatePDEFoamKernel(); create a pdefoam kernel estimator, depending on the current; value of fKernel. void DeleteFoams(); Deletes all trained foams. void Reset(); reset MethodPDEFoam:; - delete all PDEFoams; - delete the kernel estimator. void PrintCoefficients( void ); {}. void AddWeightsXMLTo(void* parent) const; create XML output of PDEFoam method variables. void WriteFoamsToFile() const; Write PDEFoams to file. void ReadWeightsFromStream(istream& i); read options and internal parameters. void ReadWeightsFromXML(void* wghtnode); read PDEFoam variables from xml weight file. TMVA::PDEFoam* ReadClonedFoamFromFile(TFile* , const TString& ); Reads a foam with name 'foamname' from file, and returns a clone; of the foam. The given",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:25451,Integrability,depend,depending,25451,"ector. void SetXminXmax(TMVA::PDEFoam* ); Set Xmin, Xmax for every dimension in the given pdefoam object. TMVA::PDEFoam* InitFoam(TString , TMVA::EFoamType , UInt_t cls = 0); Create a new PDEFoam, set the PDEFoam options (nCells, nBin,; Xmin, Xmax, etc.) and initialize the PDEFoam by calling; pdefoam->Initialize(). Parameters:. - foamcaption - name of PDEFoam object. - ft - type of PDEFoam; Candidates are:; - kSeparate - creates TMVA::PDEFoamEvent; - kDiscr - creates TMVA::PDEFoamDiscriminant; - kMonoTarget - creates TMVA::PDEFoamTarget; - kMultiTarget - creates TMVA::MultiTarget; - kMultiClass - creates TMVA::PDEFoamDiscriminant. If 'fDTSeparation != kFoam' then a TMVA::PDEFoamDecisionTree; is created (the separation type depends on fDTSeparation). - cls - marked event class (optional, default value = 0). const std::vector<Float_t>& GetRegressionValues(); Return regression values for both multi- and mono-target regression. TMVA::PDEFoamKernelBase* CreatePDEFoamKernel(); create a pdefoam kernel estimator, depending on the current; value of fKernel. void DeleteFoams(); Deletes all trained foams. void Reset(); reset MethodPDEFoam:; - delete all PDEFoams; - delete the kernel estimator. void PrintCoefficients( void ); {}. void AddWeightsXMLTo(void* parent) const; create XML output of PDEFoam method variables. void WriteFoamsToFile() const; Write PDEFoams to file. void ReadWeightsFromStream(istream& i); read options and internal parameters. void ReadWeightsFromXML(void* wghtnode); read PDEFoam variables from xml weight file. TMVA::PDEFoam* ReadClonedFoamFromFile(TFile* , const TString& ); Reads a foam with name 'foamname' from file, and returns a clone; of the foam. The given ROOT file must be open. (The ROOT file; will not be closed in this function.). Parameters:. - file - an open ROOT file. - foamname - name of foam to load from the file. Returns:. If a foam with name 'foamname' exists in the file, then it is; read from the file, cloned and returned. If a foam with nam",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:26954,Integrability,message,message,26954,"ables. void WriteFoamsToFile() const; Write PDEFoams to file. void ReadWeightsFromStream(istream& i); read options and internal parameters. void ReadWeightsFromXML(void* wghtnode); read PDEFoam variables from xml weight file. TMVA::PDEFoam* ReadClonedFoamFromFile(TFile* , const TString& ); Reads a foam with name 'foamname' from file, and returns a clone; of the foam. The given ROOT file must be open. (The ROOT file; will not be closed in this function.). Parameters:. - file - an open ROOT file. - foamname - name of foam to load from the file. Returns:. If a foam with name 'foamname' exists in the file, then it is; read from the file, cloned and returned. If a foam with name; 'foamname' does not exist in the file or the clone operation; does not succeed, then NULL is returned. void ReadFoamsFromFile(); read foams from file. TMVA::ETargetSelection UIntToTargetSelection(UInt_t its); convert UInt_t to ETargetSelection (used for reading weight files). void FillVariableNamesToFoam() const; store the variable names in all foams. void MakeClassSpecific(ostream& , const TString& ) const; write PDEFoam-specific classifier response; NOT IMPLEMENTED YET!. void GetHelpMessage() const; provide help message. MethodPDEFoam(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""PDEFoam"", TDirectory* theTargetDir = 0). EKernel GetKernel( void ); helper functions to convert enum types to UInt_t and back. { return fKernel; }. UInt_t KernelToUInt(TMVA::MethodPDEFoam::EKernel ker) const; { return UInt_t(ker); }. EKernel UIntToKernel(UInt_t iker). UInt_t TargetSelectionToUInt(TMVA::ETargetSelection ts) const; { return UInt_t(ts); }. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:1272,Modifiability,Config,Configurable,1272," virtual~MethodPDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurabl",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:1628,Modifiability,Config,Configurable,1628," virtual~MethodPDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurabl",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:1958,Modifiability,Config,ConfigurableTMVA,1958," virtual~MethodPDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurabl",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:1976,Modifiability,Config,Configurable,1976," virtual~MethodPDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurabl",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:1990,Modifiability,Config,Configurable,1990," virtual~MethodPDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurabl",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:2041,Modifiability,Config,ConfigurableTMVA,2041," virtual~MethodPDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurabl",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:2059,Modifiability,Config,Configurable,2059," virtual~MethodPDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurabl",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:2073,Modifiability,Config,Configurable,2073," virtual~MethodPDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurabl",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:2098,Modifiability,Config,Configurable,2098," virtual~MethodPDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurabl",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:3377,Modifiability,Config,Configurable,3377,"ase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollection(TMVA::Types::ETreeType type); virtual const char*TObject::GetIconName() const; const TString&TMVA::MethodBase::GetInputLabel(Int_t i) const; const TString&TMVA::MethodBase::GetInputTitle(Int_t i) const; const TString&TMVA::MethodBase::GetInputVar(Int_t i) const; const TString&TMVA::MethodBase::GetJobName() const; TMVA::MethodPDEFoam::EKernelGetKernel(); virtual",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:3438,Modifiability,Config,Configurable,3438,"tancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollection(TMVA::Types::ETreeType type); virtual const char*TObject::GetIconName() const; const TString&TMVA::MethodBase::GetInputLabel(Int_t i) const; const TString&TMVA::MethodBase::GetInputTitle(Int_t i) const; const TString&TMVA::MethodBase::GetInputVar(Int_t i) const; const TString&TMVA::MethodBase::GetJobName() const; TMVA::MethodPDEFoam::EKernelGetKernel(); virtual Double_tTMVA::MethodBase::GetKSTrainingVsTest(Char_t SorB, T",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:5627,Modifiability,Config,Configurable,5627,"hodBase::GetMean(Int_t ivar) const; const TString&TMVA::MethodBase::GetMethodName() const; TMVA::Types::EMVATMVA::MethodBase::GetMethodType() const; TStringTMVA::MethodBase::GetMethodTypeName() const; virtual vector<Float_t>TMVA::MethodBase::GetMulticlassEfficiency(vector<vector<Float_t> >& purity); virtual vector<Float_t>TMVA::MethodBase::GetMulticlassTrainingEfficiency(vector<vector<Float_t> >& purity); virtual const vector<Float_t>&GetMulticlassValues(); virtual Double_tGetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); virtual const char*TMVA::MethodBase::GetName() const; voidGetNCuts(TMVA::PDEFoamCell* cell, vector<UInt_t>& nCuts); UInt_tTMVA::MethodBase::GetNEvents() const; UInt_tTMVA::MethodBase::GetNTargets() const; UInt_tTMVA::MethodBase::GetNvar() const; UInt_tTMVA::MethodBase::GetNVariables() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; virtual Double_tTMVA::MethodBase::GetProba(const TMVA::Event* ev); virtual Double_tTMVA::MethodBase::GetProba(Double_t mvaVal, Double_t ap_sig); const TStringTMVA::MethodBase::GetProbaName() const; virtual Double_tTMVA::MethodBase::GetRarity(Double_t mvaVal, TMVA::Types::ESBType reftype = Types::kBackground) const; virtual voidTMVA::MethodBase::GetRegressionDeviation(UInt_t tgtNum, TMVA::Types::ETreeType type, Double_t& stddev, Double_t& stddev90Percent) const; virtual const vector<Float_t>&GetRegressionValues(); Double_tTMVA::MethodBase::GetRMS(Int_t ivar) const; virtual Double_tTMVA::MethodBase::GetROCIntegral(TH1D* histS, TH1D* histB) const; virtual Double_tTMVA::MethodBase::GetROCIntegral(TMVA::PDF* pdfS = 0, TMVA::PDF* pdfB = 0) const; virtual Double_tTMVA::MethodBase::GetSeparation(TH1*, TH1*) const; virtual Double_tTMVA::MethodBase::GetSeparation(TMVA::PDF* pdfS = 0, TMVA::PDF* pdfB = 0) const; Double_tTMVA::MethodBase::GetSignalReferenceCut() const; D",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:8296,Modifiability,Inherit,InheritsFrom,8296,"de() const; TStringTMVA::MethodBase::GetTrainingTMVAVersionString() const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; UInt_tKernelToUInt(TMVA::MethodPDEFoam::EKernel ker) const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TMVA::MethodBase&); TMVA::MethodBaseTMVA::MethodBase::MethodBase(TMVA::Types::EMVA methodType, TMVA::DataSetInfo& dsi, const TString& weightFile, TDirectory* theBaseDir = 0)",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:8362,Modifiability,Inherit,InheritsFrom,8362,") const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; UInt_tKernelToUInt(TMVA::MethodPDEFoam::EKernel ker) const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TMVA::MethodBase&); TMVA::MethodBaseTMVA::MethodBase::MethodBase(TMVA::Types::EMVA methodType, TMVA::DataSetInfo& dsi, const TString& weightFile, TDirectory* theBaseDir = 0); TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TString& jobN",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:10693,Modifiability,Config,Configurable,10693,"g& theWeightFile, TDirectory* theTargetDir = __null); TMVA::MethodPDEFoamMethodPDEFoam(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""PDEFoam"", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodPDEFoam&operator=(const TMVA::MethodPDEFoam&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); TMVA::PDEFoam*ReadClonedFoamFromFile(TFile*, const TString&); voidReadFoamsFromFile(); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& i); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidReset(); voidTObjec",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:10874,Modifiability,Config,Configurable,10874,"Option = ""PDEFoam"", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodPDEFoam&operator=(const TMVA::MethodPDEFoam&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); TMVA::PDEFoam*ReadClonedFoamFromFile(TFile*, const TString&); voidReadFoamsFromFile(); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& i); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = ",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:11091,Modifiability,Config,Configurable,11091,"* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodPDEFoam&operator=(const TMVA::MethodPDEFoam&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); TMVA::PDEFoam*ReadClonedFoamFromFile(TFile*, const TString&); voidReadFoamsFromFile(); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& i); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); v",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:11153,Modifiability,Config,Configurable,11153,"dTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodPDEFoam&operator=(const TMVA::MethodPDEFoam&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); TMVA::PDEFoam*ReadClonedFoamFromFile(TFile*, const TString&); voidReadFoamsFromFile(); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& i); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); vo",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:12107,Modifiability,Config,Configurable,12107,"onsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& i); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInsp",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:12168,Modifiability,Config,Configurable,12168,"ionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& i); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStrea",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:12452,Modifiability,Config,Configurable,12452,"m& i); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; UInt_tTargetSelectionToUInt(TMVA::ETargetSelection ts) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTM",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:12554,Modifiability,Config,Configurable,12554,"bj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; UInt_tTargetSelectionToUInt(TMVA::ETargetSelection ts) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:14600,Modifiability,Config,Configurable,14600,"tOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; UInt_tTargetSelectionToUInt(TMVA::ETargetSelection ts) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); voidTrainMonoTargetRegression(); voidTrainMultiClassification(); voidTrainMultiTargetRegression(); voidTrainSeparatedClassification(); voidTrainUnifiedClassification(); TMVA::MethodPDEFoam::EKernelUIntToKernel(UInt_t iker); TMVA::ETargetSelectionUIntToTargetSelection(UInt_t its); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); voidWriteFoamsToFile() const; virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:14960,Modifiability,Config,Configurable,14960,":MethodBase::WriteStateToFile() const. protected:. Double_tCalculateMVAError(); voidCalcXminXmax(); TMVA::PDEFoamKernelBase*CreatePDEFoamKernel(); voidDeleteFoams(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); voidFillVariableNamesToFoam() const; virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; TMVA::PDEFoam*InitFoam(TString, TMVA::EFoamType, UInt_t cls = 0); Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidSetXminXmax(TMVA::PDEFoam*); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:15245,Modifiability,Config,Configurable,15245,":MethodBase::WriteStateToFile() const. protected:. Double_tCalculateMVAError(); voidCalcXminXmax(); TMVA::PDEFoamKernelBase*CreatePDEFoamKernel(); voidDeleteFoams(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); voidFillVariableNamesToFoam() const; virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; TMVA::PDEFoam*InitFoam(TString, TMVA::EFoamType, UInt_t cls = 0); Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidSetXminXmax(TMVA::PDEFoam*); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:15752,Modifiability,Config,Configurable,15752,":MethodBase::WriteStateToFile() const. protected:. Double_tCalculateMVAError(); voidCalcXminXmax(); TMVA::PDEFoamKernelBase*CreatePDEFoamKernel(); voidDeleteFoams(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); voidFillVariableNamesToFoam() const; virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; TMVA::PDEFoam*InitFoam(TString, TMVA::EFoamType, UInt_t cls = 0); Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidSetXminXmax(TMVA::PDEFoam*); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:15791,Modifiability,Config,Configurable,15791,":MethodBase::WriteStateToFile() const. protected:. Double_tCalculateMVAError(); voidCalcXminXmax(); TMVA::PDEFoamKernelBase*CreatePDEFoamKernel(); voidDeleteFoams(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); voidFillVariableNamesToFoam() const; virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; TMVA::PDEFoam*InitFoam(TString, TMVA::EFoamType, UInt_t cls = 0); Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidSetXminXmax(TMVA::PDEFoam*); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:16113,Modifiability,Config,Configurable,16113,":MethodBase::WriteStateToFile() const. protected:. Double_tCalculateMVAError(); voidCalcXminXmax(); TMVA::PDEFoamKernelBase*CreatePDEFoamKernel(); voidDeleteFoams(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); voidFillVariableNamesToFoam() const; virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; TMVA::PDEFoam*InitFoam(TString, TMVA::EFoamType, UInt_t cls = 0); Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidSetXminXmax(TMVA::PDEFoam*); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:16592,Modifiability,Config,Configurable,16592,":MethodBase::WriteStateToFile() const. protected:. Double_tCalculateMVAError(); voidCalcXminXmax(); TMVA::PDEFoamKernelBase*CreatePDEFoamKernel(); voidDeleteFoams(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); voidFillVariableNamesToFoam() const; virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; TMVA::PDEFoam*InitFoam(TString, TMVA::EFoamType, UInt_t cls = 0); Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidSetXminXmax(TMVA::PDEFoam*); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:18239,Modifiability,variab,variables,18239,"ject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TMVA::MethodPDEFoam::EKernelkNone; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Bool_tfCompresscompress foam output file; Bool_tfCutNminKeep for bw compatibility: Grabbing cell with maximal RMS to split next (TFoam default); TStringfDTLogicuse DT algorithm to split cells; TMVA::EDTSeparationfDTSeparationenum which specifies the separation to use for the DT logic; Float_tfDiscrErrCutcut on discrimant error; Int_tfEvPerBinMaximum events (equiv.) per bin in buid-up (1000); Bool_tfFillFoamWithOrigWeightsfill the foam with boost weights; vector<TMVA::PDEFoam*>fFoamgrown PDEFoams; Float_tfFracFraction used for calc of Xmin, Xmax; TM",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:18428,Modifiability,variab,variable,18428,"ject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TMVA::MethodPDEFoam::EKernelkNone; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Bool_tfCompresscompress foam output file; Bool_tfCutNminKeep for bw compatibility: Grabbing cell with maximal RMS to split next (TFoam default); TStringfDTLogicuse DT algorithm to split cells; TMVA::EDTSeparationfDTSeparationenum which specifies the separation to use for the DT logic; Float_tfDiscrErrCutcut on discrimant error; Int_tfEvPerBinMaximum events (equiv.) per bin in buid-up (1000); Bool_tfFillFoamWithOrigWeightsfill the foam with boost weights; vector<TMVA::PDEFoam*>fFoamgrown PDEFoams; Float_tfFracFraction used for calc of Xmin, Xmax; TM",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:20537,Modifiability,Inherit,Inheritance,20537,"el for GetMvaValue() (option string); UInt_tfMaxDepthmaximum depth of cell tree; Bool_tfMultiTargetRegressiondo regression on multible targets; UInt_tfNminminimal number of events in cell necessary to split cell""; Bool_tfPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; Bool_tfSigBgSeparatedSeparate Sig and Bg, or not; TMVA::ETargetSelectionfTargetSelectionmethod of selecting the target (only mulit target regr.); TStringfTargetSelectionStrmethod of selecting the target (only mulit target regr.); Bool_tfUseYesNoCellreturn -1 or 1 for bg or signal like event; Float_tfVolFracvolume fraction (used for density calculation during buildup); vector<Float_t>fXmaxrange for histograms and foams; vector<Float_t>fXminrange for histograms and foams; Int_tfnActiveCellsNumber of active cells; Int_tfnBinNumber of bins in build-up (100); Int_tfnCellsNumber of Cells (1000); Int_tfnSamplNumber of MC events per cell in build-up (1000). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodPDEFoam(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""PDEFoam"", TDirectory* theTargetDir = 0); init PDEFoam objects. MethodPDEFoam(TMVA::DataSetInfo& dsi, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDEFoam can handle classification with multiple classes and regression; with one or more regression-targets. void Init( void ); default initialization called by all constructors. void DeclareOptions(). Declare MethodPDEFoam options. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility. void ProcessOptions(); process user options. ~MethodPDEFoam( void ); destructor. void CalcXminXmax(); Determine foam range [fXmin, fXmax] for all dimensions, such; that a fraction of 'fFra",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:20550,Modifiability,Inherit,Inherited,20550,"el for GetMvaValue() (option string); UInt_tfMaxDepthmaximum depth of cell tree; Bool_tfMultiTargetRegressiondo regression on multible targets; UInt_tfNminminimal number of events in cell necessary to split cell""; Bool_tfPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; Bool_tfSigBgSeparatedSeparate Sig and Bg, or not; TMVA::ETargetSelectionfTargetSelectionmethod of selecting the target (only mulit target regr.); TStringfTargetSelectionStrmethod of selecting the target (only mulit target regr.); Bool_tfUseYesNoCellreturn -1 or 1 for bg or signal like event; Float_tfVolFracvolume fraction (used for density calculation during buildup); vector<Float_t>fXmaxrange for histograms and foams; vector<Float_t>fXminrange for histograms and foams; Int_tfnActiveCellsNumber of active cells; Int_tfnBinNumber of bins in build-up (100); Int_tfnCellsNumber of Cells (1000); Int_tfnSamplNumber of MC events per cell in build-up (1000). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodPDEFoam(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""PDEFoam"", TDirectory* theTargetDir = 0); init PDEFoam objects. MethodPDEFoam(TMVA::DataSetInfo& dsi, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDEFoam can handle classification with multiple classes and regression; with one or more regression-targets. void Init( void ); default initialization called by all constructors. void DeclareOptions(). Declare MethodPDEFoam options. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility. void ProcessOptions(); process user options. ~MethodPDEFoam( void ); destructor. void CalcXminXmax(); Determine foam range [fXmin, fXmax] for all dimensions, such; that a fraction of 'fFra",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:22525,Modifiability,variab,variables,22525,"[fXmin, fXmax] for all dimensions, such; that a fraction of 'fFrac' events lie outside the foam. void Train( void ); Train PDE-Foam depending on the set options. void TrainSeparatedClassification(); Creation of 2 separated foams: one for signal events, one for; backgound events. At the end the foam cells of fFoam[0] will; contain the average number of signal events and fFoam[1] will; contain the average number of background events. void TrainUnifiedClassification(); Create only one unified foam (fFoam[0]) whose cells contain the; average discriminator (N_sig)/(N_sig + N_bg). void TrainMultiClassification(); Create one unified foam (see TrainUnifiedClassification()) for; each class, where the cells of foam i (fFoam[i]) contain the; average fraction of events of class i, i.e. D = number events of class i / total number of events. void TrainMonoTargetRegression(); Training one (mono target regression) foam, whose cells contain; the average 0th target. The dimension of the foam = number of; non-targets (= number of variables). void TrainMultiTargetRegression(); Training one (multi target regression) foam, whose cells contain; the average event density. The dimension of the foam = number; of non-targets + number of targets. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); Return Mva-Value. In case of 'fSigBgSeparated==false' (one unifiend PDEFoam was; trained) the function returns the content of the cell, which; corresponds to the current TMVA::Event, i.e. D =; N_sig/(N_bg+N_sig). In case of 'fSigBgSeparated==true' (two separate PDEFoams were; trained) the function returns. D = Density_sig/(Density_sig+Density_bg). where 'Density_sig' is the content of the cell in the signal; PDEFoam (fFoam[0]) and 'Density_bg' is the content of the cell; in the background PDEFoam (fFoam[1]). In both cases the error on the discriminant is stored in 'err'; and 'errUpper'. (Of course err and errUpper must be non-zero; and point to valid address to make this work.). Double_t",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:24001,Modifiability,variab,variables,24001,"N_bg+N_sig). In case of 'fSigBgSeparated==true' (two separate PDEFoams were; trained) the function returns. D = Density_sig/(Density_sig+Density_bg). where 'Density_sig' is the content of the cell in the signal; PDEFoam (fFoam[0]) and 'Density_bg' is the content of the cell; in the background PDEFoam (fFoam[1]). In both cases the error on the discriminant is stored in 'err'; and 'errUpper'. (Of course err and errUpper must be non-zero; and point to valid address to make this work.). Double_t CalculateMVAError(); Calculate the error on the Mva value. If fSigBgSeparated == true the error is calculated from the; number of events in the signal and background PDEFoam cells. If fSigBgSeparated == false, the error is taken directly from; the PDEFoam cell. const std::vector<Float_t>& GetMulticlassValues(); Get the multiclass MVA response for the PDEFoam classifier. The; returned MVA values are normalized, i.e. their sum equals 1. const TMVA::Ranking* CreateRanking(); Compute ranking of input variables from the number of cuts made; in each PDEFoam dimension. The PDEFoam dimension (the variable); for which the most cuts were done is ranked highest. void GetNCuts(TMVA::PDEFoamCell* cell, vector<UInt_t>& nCuts); Fill in 'nCuts' the number of cuts made in every foam dimension,; starting at the root cell 'cell'. Parameters:. - cell - root cell to start the counting from. - nCuts - the number of cuts are saved in this vector. void SetXminXmax(TMVA::PDEFoam* ); Set Xmin, Xmax for every dimension in the given pdefoam object. TMVA::PDEFoam* InitFoam(TString , TMVA::EFoamType , UInt_t cls = 0); Create a new PDEFoam, set the PDEFoam options (nCells, nBin,; Xmin, Xmax, etc.) and initialize the PDEFoam by calling; pdefoam->Initialize(). Parameters:. - foamcaption - name of PDEFoam object. - ft - type of PDEFoam; Candidates are:; - kSeparate - creates TMVA::PDEFoamEvent; - kDiscr - creates TMVA::PDEFoamDiscriminant; - kMonoTarget - creates TMVA::PDEFoamTarget; - kMultiTarget - creates TMV",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:24095,Modifiability,variab,variable,24095,"= Density_sig/(Density_sig+Density_bg). where 'Density_sig' is the content of the cell in the signal; PDEFoam (fFoam[0]) and 'Density_bg' is the content of the cell; in the background PDEFoam (fFoam[1]). In both cases the error on the discriminant is stored in 'err'; and 'errUpper'. (Of course err and errUpper must be non-zero; and point to valid address to make this work.). Double_t CalculateMVAError(); Calculate the error on the Mva value. If fSigBgSeparated == true the error is calculated from the; number of events in the signal and background PDEFoam cells. If fSigBgSeparated == false, the error is taken directly from; the PDEFoam cell. const std::vector<Float_t>& GetMulticlassValues(); Get the multiclass MVA response for the PDEFoam classifier. The; returned MVA values are normalized, i.e. their sum equals 1. const TMVA::Ranking* CreateRanking(); Compute ranking of input variables from the number of cuts made; in each PDEFoam dimension. The PDEFoam dimension (the variable); for which the most cuts were done is ranked highest. void GetNCuts(TMVA::PDEFoamCell* cell, vector<UInt_t>& nCuts); Fill in 'nCuts' the number of cuts made in every foam dimension,; starting at the root cell 'cell'. Parameters:. - cell - root cell to start the counting from. - nCuts - the number of cuts are saved in this vector. void SetXminXmax(TMVA::PDEFoam* ); Set Xmin, Xmax for every dimension in the given pdefoam object. TMVA::PDEFoam* InitFoam(TString , TMVA::EFoamType , UInt_t cls = 0); Create a new PDEFoam, set the PDEFoam options (nCells, nBin,; Xmin, Xmax, etc.) and initialize the PDEFoam by calling; pdefoam->Initialize(). Parameters:. - foamcaption - name of PDEFoam object. - ft - type of PDEFoam; Candidates are:; - kSeparate - creates TMVA::PDEFoamEvent; - kDiscr - creates TMVA::PDEFoamDiscriminant; - kMonoTarget - creates TMVA::PDEFoamTarget; - kMultiTarget - creates TMVA::MultiTarget; - kMultiClass - creates TMVA::PDEFoamDiscriminant. If 'fDTSeparation != kFoam' then a TMVA::PDE",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:25746,Modifiability,variab,variables,25746," by calling; pdefoam->Initialize(). Parameters:. - foamcaption - name of PDEFoam object. - ft - type of PDEFoam; Candidates are:; - kSeparate - creates TMVA::PDEFoamEvent; - kDiscr - creates TMVA::PDEFoamDiscriminant; - kMonoTarget - creates TMVA::PDEFoamTarget; - kMultiTarget - creates TMVA::MultiTarget; - kMultiClass - creates TMVA::PDEFoamDiscriminant. If 'fDTSeparation != kFoam' then a TMVA::PDEFoamDecisionTree; is created (the separation type depends on fDTSeparation). - cls - marked event class (optional, default value = 0). const std::vector<Float_t>& GetRegressionValues(); Return regression values for both multi- and mono-target regression. TMVA::PDEFoamKernelBase* CreatePDEFoamKernel(); create a pdefoam kernel estimator, depending on the current; value of fKernel. void DeleteFoams(); Deletes all trained foams. void Reset(); reset MethodPDEFoam:; - delete all PDEFoams; - delete the kernel estimator. void PrintCoefficients( void ); {}. void AddWeightsXMLTo(void* parent) const; create XML output of PDEFoam method variables. void WriteFoamsToFile() const; Write PDEFoams to file. void ReadWeightsFromStream(istream& i); read options and internal parameters. void ReadWeightsFromXML(void* wghtnode); read PDEFoam variables from xml weight file. TMVA::PDEFoam* ReadClonedFoamFromFile(TFile* , const TString& ); Reads a foam with name 'foamname' from file, and returns a clone; of the foam. The given ROOT file must be open. (The ROOT file; will not be closed in this function.). Parameters:. - file - an open ROOT file. - foamname - name of foam to load from the file. Returns:. If a foam with name 'foamname' exists in the file, then it is; read from the file, cloned and returned. If a foam with name; 'foamname' does not exist in the file or the clone operation; does not succeed, then NULL is returned. void ReadFoamsFromFile(); read foams from file. TMVA::ETargetSelection UIntToTargetSelection(UInt_t its); convert UInt_t to ETargetSelection (used for reading weight files). v",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:25944,Modifiability,variab,variables,25944,"MonoTarget - creates TMVA::PDEFoamTarget; - kMultiTarget - creates TMVA::MultiTarget; - kMultiClass - creates TMVA::PDEFoamDiscriminant. If 'fDTSeparation != kFoam' then a TMVA::PDEFoamDecisionTree; is created (the separation type depends on fDTSeparation). - cls - marked event class (optional, default value = 0). const std::vector<Float_t>& GetRegressionValues(); Return regression values for both multi- and mono-target regression. TMVA::PDEFoamKernelBase* CreatePDEFoamKernel(); create a pdefoam kernel estimator, depending on the current; value of fKernel. void DeleteFoams(); Deletes all trained foams. void Reset(); reset MethodPDEFoam:; - delete all PDEFoams; - delete the kernel estimator. void PrintCoefficients( void ); {}. void AddWeightsXMLTo(void* parent) const; create XML output of PDEFoam method variables. void WriteFoamsToFile() const; Write PDEFoams to file. void ReadWeightsFromStream(istream& i); read options and internal parameters. void ReadWeightsFromXML(void* wghtnode); read PDEFoam variables from xml weight file. TMVA::PDEFoam* ReadClonedFoamFromFile(TFile* , const TString& ); Reads a foam with name 'foamname' from file, and returns a clone; of the foam. The given ROOT file must be open. (The ROOT file; will not be closed in this function.). Parameters:. - file - an open ROOT file. - foamname - name of foam to load from the file. Returns:. If a foam with name 'foamname' exists in the file, then it is; read from the file, cloned and returned. If a foam with name; 'foamname' does not exist in the file or the clone operation; does not succeed, then NULL is returned. void ReadFoamsFromFile(); read foams from file. TMVA::ETargetSelection UIntToTargetSelection(UInt_t its); convert UInt_t to ETargetSelection (used for reading weight files). void FillVariableNamesToFoam() const; store the variable names in all foams. void MakeClassSpecific(ostream& , const TString& ) const; write PDEFoam-specific classifier response; NOT IMPLEMENTED YET!. void GetHelpMessage(",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:26759,Modifiability,variab,variable,26759,"riables. void WriteFoamsToFile() const; Write PDEFoams to file. void ReadWeightsFromStream(istream& i); read options and internal parameters. void ReadWeightsFromXML(void* wghtnode); read PDEFoam variables from xml weight file. TMVA::PDEFoam* ReadClonedFoamFromFile(TFile* , const TString& ); Reads a foam with name 'foamname' from file, and returns a clone; of the foam. The given ROOT file must be open. (The ROOT file; will not be closed in this function.). Parameters:. - file - an open ROOT file. - foamname - name of foam to load from the file. Returns:. If a foam with name 'foamname' exists in the file, then it is; read from the file, cloned and returned. If a foam with name; 'foamname' does not exist in the file or the clone operation; does not succeed, then NULL is returned. void ReadFoamsFromFile(); read foams from file. TMVA::ETargetSelection UIntToTargetSelection(UInt_t its); convert UInt_t to ETargetSelection (used for reading weight files). void FillVariableNamesToFoam() const; store the variable names in all foams. void MakeClassSpecific(ostream& , const TString& ) const; write PDEFoam-specific classifier response; NOT IMPLEMENTED YET!. void GetHelpMessage() const; provide help message. MethodPDEFoam(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""PDEFoam"", TDirectory* theTargetDir = 0). EKernel GetKernel( void ); helper functions to convert enum types to UInt_t and back. { return fKernel; }. UInt_t KernelToUInt(TMVA::MethodPDEFoam::EKernel ker) const; { return UInt_t(ker); }. EKernel UIntToKernel(UInt_t iker). UInt_t TargetSelectionToUInt(TMVA::ETargetSelection ts) const; { return UInt_t(ts); }. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support.",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:10538,Performance,Optimiz,OptimizeTuningParameters,10538,"dBaseDir() const; TMVA::MethodPDEFoamMethodPDEFoam(const TMVA::MethodPDEFoam&); TMVA::MethodPDEFoamMethodPDEFoam(TMVA::DataSetInfo& dsi, const TString& theWeightFile, TDirectory* theTargetDir = __null); TMVA::MethodPDEFoamMethodPDEFoam(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""PDEFoam"", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodPDEFoam&operator=(const TMVA::MethodPDEFoam&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); TMVA::PDEFoam*ReadClonedFoamFromFile(TFile*, const TString&); voidReadFoamsFromFile(); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& i); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(T",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:12979,Performance,tune,tuneParameters,12979,"::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; UInt_tTargetSelectionToUInt(TMVA::ETargetSelection ts) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); voidTrainMonoTargetRegression(); voidTrainMultiClassification(); voidTrainMultiTargetRegression(); voidTrainSeparatedClassification(); voidTrainUnifiedClassification",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:26279,Performance,load,load,26279,">& GetRegressionValues(); Return regression values for both multi- and mono-target regression. TMVA::PDEFoamKernelBase* CreatePDEFoamKernel(); create a pdefoam kernel estimator, depending on the current; value of fKernel. void DeleteFoams(); Deletes all trained foams. void Reset(); reset MethodPDEFoam:; - delete all PDEFoams; - delete the kernel estimator. void PrintCoefficients( void ); {}. void AddWeightsXMLTo(void* parent) const; create XML output of PDEFoam method variables. void WriteFoamsToFile() const; Write PDEFoams to file. void ReadWeightsFromStream(istream& i); read options and internal parameters. void ReadWeightsFromXML(void* wghtnode); read PDEFoam variables from xml weight file. TMVA::PDEFoam* ReadClonedFoamFromFile(TFile* , const TString& ); Reads a foam with name 'foamname' from file, and returns a clone; of the foam. The given ROOT file must be open. (The ROOT file; will not be closed in this function.). Parameters:. - file - an open ROOT file. - foamname - name of foam to load from the file. Returns:. If a foam with name 'foamname' exists in the file, then it is; read from the file, cloned and returned. If a foam with name; 'foamname' does not exist in the file or the clone operation; does not succeed, then NULL is returned. void ReadFoamsFromFile(); read foams from file. TMVA::ETargetSelection UIntToTargetSelection(UInt_t its); convert UInt_t to ETargetSelection (used for reading weight files). void FillVariableNamesToFoam() const; store the variable names in all foams. void MakeClassSpecific(ostream& , const TString& ) const; write PDEFoam-specific classifier response; NOT IMPLEMENTED YET!. void GetHelpMessage() const; provide help message. MethodPDEFoam(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = ""PDEFoam"", TDirectory* theTargetDir = 0). EKernel GetKernel( void ); helper functions to convert enum types to UInt_t and back. { return fKernel; }. UInt_t KernelToUInt(TMVA::MethodPDEFoam::EKer",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:8044,Security,Hash,Hash,8044,"String&); const TMVA::Event*TMVA::MethodBase::GetTrainingEvent(Long64_t ievt) const; UInt_tTMVA::MethodBase::GetTrainingROOTVersionCode() const; TStringTMVA::MethodBase::GetTrainingROOTVersionString() const; UInt_tTMVA::MethodBase::GetTrainingTMVAVersionCode() const; TStringTMVA::MethodBase::GetTrainingTMVAVersionString() const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; UInt_tKernelToUInt(TMVA::MethodPDEFoam::EKernel ker) const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNo",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:12781,Testability,test,testTime,12781,"t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; UInt_tTargetSelectionToUInt(TMVA::ETargetSelection ts) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); v",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:13380,Testability,Test,TestBit,13380,"oidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; UInt_tTargetSelectionToUInt(TMVA::ETargetSelection ts) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); voidTrainMonoTargetRegression(); voidTrainMultiClassification(); voidTrainMultiTargetRegression(); voidTrainSeparatedClassification(); voidTrainUnifiedClassification(); TMVA::MethodPDEFoam::EKernelUIntToKernel(UInt_t iker); TMVA::ETargetSelectionUIntToTargetSelection(UInt_t its); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t buf",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:13419,Testability,Test,TestBits,13419,"ctory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; UInt_tTargetSelectionToUInt(TMVA::ETargetSelection ts) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); voidTrainMonoTargetRegression(); voidTrainMultiClassification(); voidTrainMultiTargetRegression(); voidTrainSeparatedClassification(); voidTrainUnifiedClassification(); TMVA::MethodPDEFoam::EKernelUIntToKernel(UInt_t iker); TMVA::ETargetSelectionUIntToTargetSelection(UInt_t its); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::Metho",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:13475,Testability,Test,TestClassification,13475,"MsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; UInt_tTargetSelectionToUInt(TMVA::ETargetSelection ts) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); voidTrainMonoTargetRegression(); voidTrainMultiClassification(); voidTrainMultiTargetRegression(); voidTrainSeparatedClassification(); voidTrainUnifiedClassification(); TMVA::MethodPDEFoam::EKernelUIntToKernel(UInt_t iker); TMVA::ETargetSelectionUIntToTargetSelection(UInt_t its); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType tre",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:13527,Testability,Test,TestMulticlass,13527,"_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; UInt_tTargetSelectionToUInt(TMVA::ETargetSelection ts) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); voidTrainMonoTargetRegression(); voidTrainMultiClassification(); voidTrainMultiTargetRegression(); voidTrainSeparatedClassification(); voidTrainUnifiedClassification(); TMVA::MethodPDEFoam::EKernelUIntToKernel(UInt_t iker); TMVA::ETargetSelectionUIntToTargetSelection(UInt_t its); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); voidWriteFoamsToFile() const; virtual void",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:13575,Testability,Test,TestRegression,13575,"st TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; UInt_tTargetSelectionToUInt(TMVA::ETargetSelection ts) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); voidTrainMonoTargetRegression(); voidTrainMultiClassification(); voidTrainMultiTargetRegression(); voidTrainSeparatedClassification(); voidTrainUnifiedClassification(); TMVA::MethodPDEFoam::EKernelUIntToKernel(UInt_t iker); TMVA::ETargetSelectionUIntToTargetSelection(UInt_t its); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); voidWriteFoamsToFile() const; virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() ",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:15766,Testability,Log,Log,15766,":MethodBase::WriteStateToFile() const. protected:. Double_tCalculateMVAError(); voidCalcXminXmax(); TMVA::PDEFoamKernelBase*CreatePDEFoamKernel(); voidDeleteFoams(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); voidFillVariableNamesToFoam() const; virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; TMVA::PDEFoam*InitFoam(TString, TMVA::EFoamType, UInt_t cls = 0); Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidSetXminXmax(TMVA::PDEFoam*); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:16942,Testability,test,testing,16942,", const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidInit(); voidPrintCoefficients(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TMVA::MethodPDEFoam::EKernelkGaus; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TMVA::MethodPDEFoam::EKernelkLinN; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TMVA::MethodPDEFoam::EKernelkNone; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase:",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:19149,Testability,log,logic,19149,"d-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Bool_tfCompresscompress foam output file; Bool_tfCutNminKeep for bw compatibility: Grabbing cell with maximal RMS to split next (TFoam default); TStringfDTLogicuse DT algorithm to split cells; TMVA::EDTSeparationfDTSeparationenum which specifies the separation to use for the DT logic; Float_tfDiscrErrCutcut on discrimant error; Int_tfEvPerBinMaximum events (equiv.) per bin in buid-up (1000); Bool_tfFillFoamWithOrigWeightsfill the foam with boost weights; vector<TMVA::PDEFoam*>fFoamgrown PDEFoams; Float_tfFracFraction used for calc of Xmin, Xmax; TMVA::MethodPDEFoam::EKernelfKernelKernel for GetMvaValue(); TMVA::PDEFoamKernelBase*fKernelEstimatorKernel estimator; TStringfKernelStrKernel for GetMvaValue() (option string); UInt_tfMaxDepthmaximum depth of cell tree; Bool_tfMultiTargetRegressiondo regression on multible targets; UInt_tfNminminimal number of events in cell necessary to split cell""; Bool_tfPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; Bool_tfSigBgSeparatedSeparate Sig and Bg, or not; TMVA::ETargetSelectionfTargetSelectionmethod of selecting the target (only mulit target regr.); TStringfTargetSelectionStrmethod of select",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDEFoam.html:1808,Usability,Clear,Clear,1808," virtual~MethodPDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurabl",MatchSource.WIKI,root/html604/TMVA__MethodPDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDEFoam.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:3480,Availability,Error,Error,3480,"n_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMV",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:3609,Availability,error,error,3609,"st; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:3693,Availability,error,error,3693,"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollec",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:23040,Availability,avail,available,23040,"PDERS::EVolumeRangeModekUnscaled; static TMVA::MethodPDERS::EVolumeRangeModekUnsupported; static TMVA::MethodPDERS::EVolumeRangeModekkNN. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodPDERS(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor for the PDERS method. MethodPDERS(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); construct MethodPDERS through from file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDERS can handle classification with 2 classes and regression with one or more regression-targets. void Init( void ); default initialisation routine called by all constructors. ~MethodPDERS( void ); destructor. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; VolumeRangeMode <string> Method to determine volume range; available values are: MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function; available values are: Box <default>; Sphere; Teepee; Gauss; Sinc3; Sinc5; Sinc7; Sinc9; Sinc11; Lanczos2; Lanczos3; Lanczos5; Lanczos8; Trim. DeltaFrac <float> Ratio of #EventsMin/#EventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options specified by the user. void Train( void ); this is a dummy training: the preparation work to do is the construction; of the binary tree as a pointer chain. It is easier to directly save the; tra",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:23163,Availability,avail,available,23163,"mentation; MethodPDERS(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor for the PDERS method. MethodPDERS(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); construct MethodPDERS through from file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDERS can handle classification with 2 classes and regression with one or more regression-targets. void Init( void ); default initialisation routine called by all constructors. ~MethodPDERS( void ); destructor. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; VolumeRangeMode <string> Method to determine volume range; available values are: MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function; available values are: Box <default>; Sphere; Teepee; Gauss; Sinc3; Sinc5; Sinc7; Sinc9; Sinc11; Lanczos2; Lanczos3; Lanczos5; Lanczos8; Trim. DeltaFrac <float> Ratio of #EventsMin/#EventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options specified by the user. void Train( void ); this is a dummy training: the preparation work to do is the construction; of the binary tree as a pointer chain. It is easier to directly save the; trainingTree in the weight file, and to rebuild the binary tree in the; test phase from scratch. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); init the size of a volume element using a defined fraction o",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:26032,Availability,error,error,26032,"ySearchTreeNode*>& , TMVA::Volume& ); normalization factors so we can work with radius 1 hyperspheres. void RKernelEstimate(const TMVA::Event& , vector<const TMVA::BinarySearchTreeNode*>& , TMVA::Volume& , vector<Float_t>* pdfSum); normalization factors so we can work with radius 1 hyperspheres. Double_t ApplyKernelFunction(Double_t normalized_distance); from the normalized euclidean distance calculate the distance; for a certain kernel. Double_t KernelNormalization(Double_t pdf); Calculating the normalization factor only once (might need a reset at some point.; Can the method be restarted with different params?). Double_t GetNormalizedDistance(const TMVA::Event& base_event, const TMVA::BinarySearchTreeNode& sample_event, Double_t* dim_normalization); We use Euclidian metric here. Might not be best or most efficient. Double_t NormSinc(Double_t x); NormSinc. Double_t LanczosFilter(Int_t level, Double_t x); Lanczos Filter. Float_t GetError(Float_t countS, Float_t countB, Float_t sumW2S, Float_t sumW2B) const; statistical error estimate for RS estimator. void AddWeightsXMLTo(void* parent) const; write weights to xml file. void ReadWeightsFromXML(void* wghtnode). void ReadWeightsFromStream(istream& istr); read weight info from file. void WriteWeightsToStream(TFile& rf) const; write training sample (TTree) to file. void ReadWeightsFromStream(TFile& istr); read training sample from file. TMVA::MethodPDERS* ThisPDERS( void ); static pointer to this object. void UpdateThis( void ); update static this pointer. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodPDERS(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0). BinarySearchTree* GetBinaryTree( void ); accessors. { return fBinaryTree; }. cons",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:26476,Deployability,Update,UpdateThis,26476,"he normalization factor only once (might need a reset at some point.; Can the method be restarted with different params?). Double_t GetNormalizedDistance(const TMVA::Event& base_event, const TMVA::BinarySearchTreeNode& sample_event, Double_t* dim_normalization); We use Euclidian metric here. Might not be best or most efficient. Double_t NormSinc(Double_t x); NormSinc. Double_t LanczosFilter(Int_t level, Double_t x); Lanczos Filter. Float_t GetError(Float_t countS, Float_t countB, Float_t sumW2S, Float_t sumW2B) const; statistical error estimate for RS estimator. void AddWeightsXMLTo(void* parent) const; write weights to xml file. void ReadWeightsFromXML(void* wghtnode). void ReadWeightsFromStream(istream& istr); read weight info from file. void WriteWeightsToStream(TFile& rf) const; write training sample (TTree) to file. void ReadWeightsFromStream(TFile& istr); read training sample from file. TMVA::MethodPDERS* ThisPDERS( void ); static pointer to this object. void UpdateThis( void ); update static this pointer. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodPDERS(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0). BinarySearchTree* GetBinaryTree( void ); accessors. { return fBinaryTree; }. const Ranking* CreateRanking(); ranking of input variables. { return 0; }. MethodPDERS*& GetMethodPDERSThreadLocal(); This is a workaround for OSx where static thread_local data members are; not supported. The C++ solution would indeed be the following:. {TTHREAD_TLS(MethodPDERS*) fgThisPDERS(nullptr); return fgThisPDERS;}. » Author: Andreas Hoecker, Yair Mahalalel, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This p",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:26496,Deployability,update,update,26496,"he normalization factor only once (might need a reset at some point.; Can the method be restarted with different params?). Double_t GetNormalizedDistance(const TMVA::Event& base_event, const TMVA::BinarySearchTreeNode& sample_event, Double_t* dim_normalization); We use Euclidian metric here. Might not be best or most efficient. Double_t NormSinc(Double_t x); NormSinc. Double_t LanczosFilter(Int_t level, Double_t x); Lanczos Filter. Float_t GetError(Float_t countS, Float_t countB, Float_t sumW2S, Float_t sumW2B) const; statistical error estimate for RS estimator. void AddWeightsXMLTo(void* parent) const; write weights to xml file. void ReadWeightsFromXML(void* wghtnode). void ReadWeightsFromStream(istream& istr); read weight info from file. void WriteWeightsToStream(TFile& rf) const; write training sample (TTree) to file. void ReadWeightsFromStream(TFile& istr); read training sample from file. TMVA::MethodPDERS* ThisPDERS( void ); static pointer to this object. void UpdateThis( void ); update static this pointer. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodPDERS(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0). BinarySearchTree* GetBinaryTree( void ); accessors. { return fBinaryTree; }. const Ranking* CreateRanking(); ranking of input variables. { return 0; }. MethodPDERS*& GetMethodPDERSThreadLocal(); This is a workaround for OSx where static thread_local data members are; not supported. The C++ solution would indeed be the following:. {TTHREAD_TLS(MethodPDERS*) fgThisPDERS(nullptr); return fgThisPDERS;}. » Author: Andreas Hoecker, Yair Mahalalel, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This p",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:1143,Energy Efficiency,reduce,reduce,1143,"r viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodPDERS. class TMVA::MethodPDERS: public TMVA::MethodBase. /*; This is a generalization of the above Likelihood methods to Nvar; dimensions, where Nvar is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. ; A very simple probability density estimator (PDE) has been suggested; in hep-ex/0211019. The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A search; method based on binary-trees is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional: . MinMax:; the volume is defined in each dimension with respect; to the full variable range found in the training sample. ; RMS:; the volume is defined in each dimensions with respect; to the RMS estimated from the training sample. ; Adaptive:; a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; . Function Members (Methods); public:. virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) cons",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:1476,Energy Efficiency,Adapt,Adaptive,1476,"ignal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. ; A very simple probability density estimator (PDE) has been suggested; in hep-ex/0211019. The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A search; method based on binary-trees is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional: . MinMax:; the volume is defined in each dimension with respect; to the full variable range found in the training sample. ; RMS:; the volume is defined in each dimensions with respect; to the RMS estimated from the training sample. ; Adaptive:; a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; . Function Members (Methods); public:. virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const ch",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:1766,Energy Efficiency,adapt,adaptive,1766,"ity density estimator (PDE) has been suggested; in hep-ex/0211019. The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A search; method based on binary-trees is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional: . MinMax:; the volume is defined in each dimension with respect; to the full variable range found in the training sample. ; RMS:; the volume is defined in each dimensions with respect; to the RMS estimated from the training sample. ; Adaptive:; a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; . Function Members (Methods); public:. virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtua",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:20150,Energy Efficiency,adapt,adaptive,20150,,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:20207,Energy Efficiency,adapt,adaptive,20207,,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:20289,Energy Efficiency,adapt,adaptive,20289,,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:20504,Energy Efficiency,adapt,adapt,20504,,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:20608,Energy Efficiency,adapt,adaptive,20608,,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:20671,Energy Efficiency,adapt,adaptive,20671,,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:23090,Energy Efficiency,Adapt,Adaptive,23090,"PDERS::EVolumeRangeModekUnscaled; static TMVA::MethodPDERS::EVolumeRangeModekUnsupported; static TMVA::MethodPDERS::EVolumeRangeModekkNN. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodPDERS(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor for the PDERS method. MethodPDERS(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); construct MethodPDERS through from file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDERS can handle classification with 2 classes and regression with one or more regression-targets. void Init( void ); default initialisation routine called by all constructors. ~MethodPDERS( void ); destructor. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; VolumeRangeMode <string> Method to determine volume range; available values are: MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function; available values are: Box <default>; Sphere; Teepee; Gauss; Sinc3; Sinc5; Sinc7; Sinc9; Sinc11; Lanczos2; Lanczos3; Lanczos5; Lanczos8; Trim. DeltaFrac <float> Ratio of #EventsMin/#EventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options specified by the user. void Train( void ); this is a dummy training: the preparation work to do is the construction; of the binary tree as a pointer chain. It is easier to directly save the; tra",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:23433,Energy Efficiency,adapt,adaptive,23433,"thodPDERS through from file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDERS can handle classification with 2 classes and regression with one or more regression-targets. void Init( void ); default initialisation routine called by all constructors. ~MethodPDERS( void ); destructor. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; VolumeRangeMode <string> Method to determine volume range; available values are: MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function; available values are: Box <default>; Sphere; Teepee; Gauss; Sinc3; Sinc5; Sinc7; Sinc9; Sinc11; Lanczos2; Lanczos3; Lanczos5; Lanczos8; Trim. DeltaFrac <float> Ratio of #EventsMin/#EventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options specified by the user. void Train( void ); this is a dummy training: the preparation work to do is the construction; of the binary tree as a pointer chain. It is easier to directly save the; trainingTree in the weight file, and to rebuild the binary tree in the; test phase from scratch. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); init the size of a volume element using a defined fraction of the; volume containing the entire events. const std::vector< Float_t >& GetRegressionValues(). void CalcAverages(); compute also average RMS values required for adaptive Gaussian. void CreateBinarySearchTree(TMVA::Types::ETreeType type); create binary search trees for signal and background. void SetVolumeElement( voi",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:23502,Energy Efficiency,adapt,adaptive,23502,"thodPDERS through from file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDERS can handle classification with 2 classes and regression with one or more regression-targets. void Init( void ); default initialisation routine called by all constructors. ~MethodPDERS( void ); destructor. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; VolumeRangeMode <string> Method to determine volume range; available values are: MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function; available values are: Box <default>; Sphere; Teepee; Gauss; Sinc3; Sinc5; Sinc7; Sinc9; Sinc11; Lanczos2; Lanczos3; Lanczos5; Lanczos8; Trim. DeltaFrac <float> Ratio of #EventsMin/#EventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options specified by the user. void Train( void ); this is a dummy training: the preparation work to do is the construction; of the binary tree as a pointer chain. It is easier to directly save the; trainingTree in the weight file, and to rebuild the binary tree in the; test phase from scratch. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); init the size of a volume element using a defined fraction of the; volume containing the entire events. const std::vector< Float_t >& GetRegressionValues(). void CalcAverages(); compute also average RMS values required for adaptive Gaussian. void CreateBinarySearchTree(TMVA::Types::ETreeType type); create binary search trees for signal and background. void SetVolumeElement( voi",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:23579,Energy Efficiency,adapt,adaptive,23579,"thodPDERS through from file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDERS can handle classification with 2 classes and regression with one or more regression-targets. void Init( void ); default initialisation routine called by all constructors. ~MethodPDERS( void ); destructor. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; VolumeRangeMode <string> Method to determine volume range; available values are: MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function; available values are: Box <default>; Sphere; Teepee; Gauss; Sinc3; Sinc5; Sinc7; Sinc9; Sinc11; Lanczos2; Lanczos3; Lanczos5; Lanczos8; Trim. DeltaFrac <float> Ratio of #EventsMin/#EventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options specified by the user. void Train( void ); this is a dummy training: the preparation work to do is the construction; of the binary tree as a pointer chain. It is easier to directly save the; trainingTree in the weight file, and to rebuild the binary tree in the; test phase from scratch. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); init the size of a volume element using a defined fraction of the; volume containing the entire events. const std::vector< Float_t >& GetRegressionValues(). void CalcAverages(); compute also average RMS values required for adaptive Gaussian. void CreateBinarySearchTree(TMVA::Types::ETreeType type); create binary search trees for signal and background. void SetVolumeElement( voi",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:23641,Energy Efficiency,adapt,adaptive,23641,"thodPDERS through from file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDERS can handle classification with 2 classes and regression with one or more regression-targets. void Init( void ); default initialisation routine called by all constructors. ~MethodPDERS( void ); destructor. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; VolumeRangeMode <string> Method to determine volume range; available values are: MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function; available values are: Box <default>; Sphere; Teepee; Gauss; Sinc3; Sinc5; Sinc7; Sinc9; Sinc11; Lanczos2; Lanczos3; Lanczos5; Lanczos8; Trim. DeltaFrac <float> Ratio of #EventsMin/#EventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options specified by the user. void Train( void ); this is a dummy training: the preparation work to do is the construction; of the binary tree as a pointer chain. It is easier to directly save the; trainingTree in the weight file, and to rebuild the binary tree in the; test phase from scratch. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); init the size of a volume element using a defined fraction of the; volume containing the entire events. const std::vector< Float_t >& GetRegressionValues(). void CalcAverages(); compute also average RMS values required for adaptive Gaussian. void CreateBinarySearchTree(TMVA::Types::ETreeType type); create binary search trees for signal and background. void SetVolumeElement( voi",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:24370,Energy Efficiency,adapt,adaptive,24370,"ventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options specified by the user. void Train( void ); this is a dummy training: the preparation work to do is the construction; of the binary tree as a pointer chain. It is easier to directly save the; trainingTree in the weight file, and to rebuild the binary tree in the; test phase from scratch. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); init the size of a volume element using a defined fraction of the; volume containing the entire events. const std::vector< Float_t >& GetRegressionValues(). void CalcAverages(); compute also average RMS values required for adaptive Gaussian. void CreateBinarySearchTree(TMVA::Types::ETreeType type); create binary search trees for signal and background. void SetVolumeElement( void ); defines volume dimensions. Double_t IGetVolumeContentForRoot(Double_t ); Interface to RootFinder. Double_t GetVolumeContentForRoot(Double_t ); count number of events in rescaled volume. void GetSample(const TMVA::Event& e, vector<const TMVA::BinarySearchTreeNode*>& events, TMVA::Volume* volume). Double_t CRScalc(const TMVA::Event& ). void RRScalc(const TMVA::Event& , vector<Float_t>* count). Double_t CKernelEstimate(const TMVA::Event& , vector<const TMVA::BinarySearchTreeNode*>& , TMVA::Volume& ); normalization factors so we can work with radius 1 hyperspheres. void RKernelEstimate(const TMVA::Event& , vector<const TMVA::BinarySearchTreeNode*>& , TMVA::Volume& , vector<Float_t>* pdfSum); normalization factors so we can work with radius 1 hyperspheres. Double_t ApplyKernelFunction(Double_t normalized_dis",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:25815,Energy Efficiency,efficient,efficient,25815,"TMVA::Volume* volume). Double_t CRScalc(const TMVA::Event& ). void RRScalc(const TMVA::Event& , vector<Float_t>* count). Double_t CKernelEstimate(const TMVA::Event& , vector<const TMVA::BinarySearchTreeNode*>& , TMVA::Volume& ); normalization factors so we can work with radius 1 hyperspheres. void RKernelEstimate(const TMVA::Event& , vector<const TMVA::BinarySearchTreeNode*>& , TMVA::Volume& , vector<Float_t>* pdfSum); normalization factors so we can work with radius 1 hyperspheres. Double_t ApplyKernelFunction(Double_t normalized_distance); from the normalized euclidean distance calculate the distance; for a certain kernel. Double_t KernelNormalization(Double_t pdf); Calculating the normalization factor only once (might need a reset at some point.; Can the method be restarted with different params?). Double_t GetNormalizedDistance(const TMVA::Event& base_event, const TMVA::BinarySearchTreeNode& sample_event, Double_t* dim_normalization); We use Euclidian metric here. Might not be best or most efficient. Double_t NormSinc(Double_t x); NormSinc. Double_t LanczosFilter(Int_t level, Double_t x); Lanczos Filter. Float_t GetError(Float_t countS, Float_t countB, Float_t sumW2S, Float_t sumW2B) const; statistical error estimate for RS estimator. void AddWeightsXMLTo(void* parent) const; write weights to xml file. void ReadWeightsFromXML(void* wghtnode). void ReadWeightsFromStream(istream& istr); read weight info from file. void WriteWeightsToStream(TFile& rf) const; write training sample (TTree) to file. void ReadWeightsFromStream(TFile& istr); read training sample from file. TMVA::MethodPDERS* ThisPDERS( void ); static pointer to this object. void UpdateThis( void ); update static this pointer. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodPDERS(const TString& jobName, con",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:22798,Integrability,rout,routine,22798,"EKernelEstimatorkSinc9; static TMVA::MethodPDERS::EKernelEstimatorkSphere; static TMVA::MethodPDERS::EKernelEstimatorkTeepee; static TMVA::MethodPDERS::EKernelEstimatorkTrim; static TMVA::MethodPDERS::EVolumeRangeModekUnscaled; static TMVA::MethodPDERS::EVolumeRangeModekUnsupported; static TMVA::MethodPDERS::EVolumeRangeModekkNN. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodPDERS(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor for the PDERS method. MethodPDERS(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); construct MethodPDERS through from file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDERS can handle classification with 2 classes and regression with one or more regression-targets. void Init( void ); default initialisation routine called by all constructors. ~MethodPDERS( void ); destructor. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; VolumeRangeMode <string> Method to determine volume range; available values are: MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function; available values are: Box <default>; Sphere; Teepee; Gauss; Sinc3; Sinc5; Sinc7; Sinc9; Sinc11; Lanczos2; Lanczos3; Lanczos5; Lanczos8; Trim. DeltaFrac <float> Ratio of #EventsMin/#EventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options ",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:24605,Integrability,Interface,Interface,24605,"e range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options specified by the user. void Train( void ); this is a dummy training: the preparation work to do is the construction; of the binary tree as a pointer chain. It is easier to directly save the; trainingTree in the weight file, and to rebuild the binary tree in the; test phase from scratch. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); init the size of a volume element using a defined fraction of the; volume containing the entire events. const std::vector< Float_t >& GetRegressionValues(). void CalcAverages(); compute also average RMS values required for adaptive Gaussian. void CreateBinarySearchTree(TMVA::Types::ETreeType type); create binary search trees for signal and background. void SetVolumeElement( void ); defines volume dimensions. Double_t IGetVolumeContentForRoot(Double_t ); Interface to RootFinder. Double_t GetVolumeContentForRoot(Double_t ); count number of events in rescaled volume. void GetSample(const TMVA::Event& e, vector<const TMVA::BinarySearchTreeNode*>& events, TMVA::Volume* volume). Double_t CRScalc(const TMVA::Event& ). void RRScalc(const TMVA::Event& , vector<Float_t>* count). Double_t CKernelEstimate(const TMVA::Event& , vector<const TMVA::BinarySearchTreeNode*>& , TMVA::Volume& ); normalization factors so we can work with radius 1 hyperspheres. void RKernelEstimate(const TMVA::Event& , vector<const TMVA::BinarySearchTreeNode*>& , TMVA::Volume& , vector<Float_t>* pdfSum); normalization factors so we can work with radius 1 hyperspheres. Double_t ApplyKernelFunction(Double_t normalized_distance); from the normalized euclidean distance calculate the distance; for a certain kernel. Double_t KernelNormalization(Double_t pdf); Calculating the normalization factor only once (might need a reset at some point.; Can the method be restarted ",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:26656,Integrability,message,message,26656,"stance(const TMVA::Event& base_event, const TMVA::BinarySearchTreeNode& sample_event, Double_t* dim_normalization); We use Euclidian metric here. Might not be best or most efficient. Double_t NormSinc(Double_t x); NormSinc. Double_t LanczosFilter(Int_t level, Double_t x); Lanczos Filter. Float_t GetError(Float_t countS, Float_t countB, Float_t sumW2S, Float_t sumW2B) const; statistical error estimate for RS estimator. void AddWeightsXMLTo(void* parent) const; write weights to xml file. void ReadWeightsFromXML(void* wghtnode). void ReadWeightsFromStream(istream& istr); read weight info from file. void WriteWeightsToStream(TFile& rf) const; write training sample (TTree) to file. void ReadWeightsFromStream(TFile& istr); read training sample from file. TMVA::MethodPDERS* ThisPDERS( void ); static pointer to this object. void UpdateThis( void ); update static this pointer. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodPDERS(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0). BinarySearchTree* GetBinaryTree( void ); accessors. { return fBinaryTree; }. const Ranking* CreateRanking(); ranking of input variables. { return 0; }. MethodPDERS*& GetMethodPDERSThreadLocal(); This is a workaround for OSx where static thread_local data members are; not supported. The C++ solution would indeed be the following:. {TTHREAD_TLS(MethodPDERS*) fgThisPDERS(nullptr); return fgThisPDERS;}. » Author: Andreas Hoecker, Yair Mahalalel, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT suppor",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:437,Modifiability,variab,variables,437,". TMVA::MethodPDERS. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodPDERS. class TMVA::MethodPDERS: public TMVA::MethodBase. /*; This is a generalization of the above Likelihood methods to Nvar; dimensions, where Nvar is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. ; A very simple probability density estimator (PDE) has been suggested; in hep-ex/0211019. The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A search; method based on binary-trees is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional: . MinMax:; the volume is defined in each dimension with respect; to the full variable range found in the training sample. ; RMS:; the volume is defined in each dimensions with respect; to the RMS estimated from the training sample. ; Adaptive:; a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; . Function Members (Methods); public:. virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::Meth",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:1319,Modifiability,variab,variable,1319,"TMVA::MethodBase. /*; This is a generalization of the above Likelihood methods to Nvar; dimensions, where Nvar is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. ; A very simple probability density estimator (PDE) has been suggested; in hep-ex/0211019. The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A search; method based on binary-trees is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional: . MinMax:; the volume is defined in each dimension with respect; to the full variable range found in the training sample. ; RMS:; the volume is defined in each dimensions with respect; to the RMS estimated from the training sample. ; Adaptive:; a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; . Function Members (Methods); public:. virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurabl",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:1476,Modifiability,Adapt,Adaptive,1476,"ignal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. ; A very simple probability density estimator (PDE) has been suggested; in hep-ex/0211019. The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A search; method based on binary-trees is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional: . MinMax:; the volume is defined in each dimension with respect; to the full variable range found in the training sample. ; RMS:; the volume is defined in each dimensions with respect; to the RMS estimated from the training sample. ; Adaptive:; a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; . Function Members (Methods); public:. virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const ch",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:1766,Modifiability,adapt,adaptive,1766,"ity density estimator (PDE) has been suggested; in hep-ex/0211019. The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A search; method based on binary-trees is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional: . MinMax:; the volume is defined in each dimension with respect; to the full variable range found in the training sample. ; RMS:; the volume is defined in each dimensions with respect; to the RMS estimated from the training sample. ; Adaptive:; a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; . Function Members (Methods); public:. virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtua",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:1936,Modifiability,Config,Configurable,1936, virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::Meth,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:2292,Modifiability,Config,Configurable,2292, virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::Meth,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:2622,Modifiability,Config,ConfigurableTMVA,2622, virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::Meth,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:2640,Modifiability,Config,Configurable,2640, virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::Meth,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:2654,Modifiability,Config,Configurable,2654, virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::Meth,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:2705,Modifiability,Config,ConfigurableTMVA,2705, virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::Meth,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:2723,Modifiability,Config,Configurable,2723, virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::Meth,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:2737,Modifiability,Config,Configurable,2737, virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::Meth,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:2762,Modifiability,Config,Configurable,2762, virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::Meth,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:4057,Modifiability,Config,Configurable,4057,"ase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollection(TMVA::Types::ETreeType type); virtual const char*TObject::GetIconName() const; const TString&TMVA::MethodBase::GetInputLabel(Int_t i) const; const TString&TMVA::MethodBase::GetInputTitle(Int_t i) const; const TString&TMVA::MethodBase::GetInputVar(Int_t i) const; const TString&TMVA::MethodBase::GetJobName() const; virtual Double_tTMVA::MethodBase::GetKSTrainingV",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:4118,Modifiability,Config,Configurable,4118,"tancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollection(TMVA::Types::ETreeType type); virtual const char*TObject::GetIconName() const; const TString&TMVA::MethodBase::GetInputLabel(Int_t i) const; const TString&TMVA::MethodBase::GetInputTitle(Int_t i) const; const TString&TMVA::MethodBase::GetInputVar(Int_t i) const; const TString&TMVA::MethodBase::GetJobName() const; virtual Double_tTMVA::MethodBase::GetKSTrainingVsTest(Char_t SorB, TString opt = ""X""); virtual Double_tTMVA::",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:6222,Modifiability,Config,Configurable,6222,"significance_value) const; Double_tTMVA::MethodBase::GetMean(Int_t ivar) const; const TString&TMVA::MethodBase::GetMethodName() const; TMVA::Types::EMVATMVA::MethodBase::GetMethodType() const; TStringTMVA::MethodBase::GetMethodTypeName() const; virtual vector<Float_t>TMVA::MethodBase::GetMulticlassEfficiency(vector<vector<Float_t> >& purity); virtual vector<Float_t>TMVA::MethodBase::GetMulticlassTrainingEfficiency(vector<vector<Float_t> >& purity); virtual const vector<Float_t>&TMVA::MethodBase::GetMulticlassValues(); virtual Double_tGetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); virtual const char*TMVA::MethodBase::GetName() const; UInt_tTMVA::MethodBase::GetNEvents() const; UInt_tTMVA::MethodBase::GetNTargets() const; UInt_tTMVA::MethodBase::GetNvar() const; UInt_tTMVA::MethodBase::GetNVariables() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; virtual Double_tTMVA::MethodBase::GetProba(const TMVA::Event* ev); virtual Double_tTMVA::MethodBase::GetProba(Double_t mvaVal, Double_t ap_sig); const TStringTMVA::MethodBase::GetProbaName() const; virtual Double_tTMVA::MethodBase::GetRarity(Double_t mvaVal, TMVA::Types::ESBType reftype = Types::kBackground) const; virtual voidTMVA::MethodBase::GetRegressionDeviation(UInt_t tgtNum, TMVA::Types::ETreeType type, Double_t& stddev, Double_t& stddev90Percent) const; virtual const vector<Float_t>&GetRegressionValues(); Double_tTMVA::MethodBase::GetRMS(Int_t ivar) const; virtual Double_tTMVA::MethodBase::GetROCIntegral(TH1D* histS, TH1D* histB) const; virtual Double_tTMVA::MethodBase::GetROCIntegral(TMVA::PDF* pdfS = 0, TMVA::PDF* pdfB = 0) const; virtual Double_tTMVA::MethodBase::GetSeparation(TH1*, TH1*) const; virtual Double_tTMVA::MethodBase::GetSeparation(TMVA::PDF* pdfS = 0, TMVA::PDF* pdfB = 0) const; Double_tTMVA::MethodBase::GetSignalReferenceCut() const; D",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:8985,Modifiability,Inherit,InheritsFrom,8985,"dBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetVolumeContentForRoot(Double_t); TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; static Double_tIGetVolumeContentForRoot(Double_t); TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TMVA::MethodBase&); TMVA::MethodBaseTMVA::MethodBase::MethodBase(TMVA::Types::EMVA methodType, TMVA::DataSetInfo& dsi, const TString& weightFile, TDirectory* theBaseDir = 0); TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TString",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:9051,Modifiability,Inherit,InheritsFrom,9051,"hodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetVolumeContentForRoot(Double_t); TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; static Double_tIGetVolumeContentForRoot(Double_t); TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TMVA::MethodBase&); TMVA::MethodBaseTMVA::MethodBase::MethodBase(TMVA::Types::EMVA methodType, TMVA::DataSetInfo& dsi, const TString& weightFile, TDirectory* theBaseDir = 0); TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TString& jobName, TMVA::Types::EMVA methodType, const TString& methodTitl",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:11300,Modifiability,Config,Configurable,11300,"ta, const TString& theWeightFile, TDirectory* theTargetDir = __null); TMVA::MethodPDERSMethodPDERS(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodPDERS&operator=(const TMVA::MethodPDERS&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:11481,Modifiability,Config,Configurable,11481,"nst TString& theOption, TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodPDERS&operator=(const TMVA::MethodPDERS&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidT",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:11611,Modifiability,Config,Configurable,11611,"const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodPDERS&operator=(const TMVA::MethodPDERS&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTO",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:11673,Modifiability,Config,Configurable,11673,"TObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodPDERS&operator=(const TMVA::MethodPDERS&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t ",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:12696,Modifiability,Config,Configurable,12696,"XML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInsp",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:12757,Modifiability,Config,Configurable,12757,"oidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStrea",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:13041,Modifiability,Config,Configurable,13041,"dReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::Method",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:13143,Modifiability,Config,Configurable,13143,"hodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, ",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:14854,Modifiability,Config,Configurable,14854,"ethodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); static TMVA::MethodPDERS*ThisPDERS(); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const.",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:15350,Modifiability,Config,Configurable,15350,,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:15783,Modifiability,Config,Configurable,15783,,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:16315,Modifiability,Config,Configurable,16315," va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); TMVA::BinarySearchTree*GetBinaryTree() const; virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; Double_tGetNormalizedDistance(const TMVA::Event& base_event, const TMVA::BinarySearchTreeNode& sample_event, Double_t* dim_normalization); const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; Double_tKernelNormalization(Double_t pdf); Double_tLanczosFilter(Int_t level, Double_t x); TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); Double_tNormSinc(Double_t x); voidTMVA::Configurable::ResetSetFlag(); voidRKernelEstimate(const TMVA::Event&, vector<const TMVA::BinarySearchTreeNode*>&, TMVA::Volume&, vector<Float_t>* pdfSum); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile().",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:16354,Modifiability,Config,Configurable,16354," va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); TMVA::BinarySearchTree*GetBinaryTree() const; virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; Double_tGetNormalizedDistance(const TMVA::Event& base_event, const TMVA::BinarySearchTreeNode& sample_event, Double_t* dim_normalization); const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; Double_tKernelNormalization(Double_t pdf); Double_tLanczosFilter(Int_t level, Double_t x); TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); Double_tNormSinc(Double_t x); voidTMVA::Configurable::ResetSetFlag(); voidRKernelEstimate(const TMVA::Event&, vector<const TMVA::BinarySearchTreeNode*>&, TMVA::Volume&, vector<Float_t>* pdfSum); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile().",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:16706,Modifiability,Config,Configurable,16706," va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); TMVA::BinarySearchTree*GetBinaryTree() const; virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; Double_tGetNormalizedDistance(const TMVA::Event& base_event, const TMVA::BinarySearchTreeNode& sample_event, Double_t* dim_normalization); const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; Double_tKernelNormalization(Double_t pdf); Double_tLanczosFilter(Int_t level, Double_t x); TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); Double_tNormSinc(Double_t x); voidTMVA::Configurable::ResetSetFlag(); voidRKernelEstimate(const TMVA::Event&, vector<const TMVA::BinarySearchTreeNode*>&, TMVA::Volume&, vector<Float_t>* pdfSum); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile().",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:17277,Modifiability,Config,Configurable,17277," va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); TMVA::BinarySearchTree*GetBinaryTree() const; virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; Double_tGetNormalizedDistance(const TMVA::Event& base_event, const TMVA::BinarySearchTreeNode& sample_event, Double_t* dim_normalization); const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; Double_tKernelNormalization(Double_t pdf); Double_tLanczosFilter(Int_t level, Double_t x); TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); Double_tNormSinc(Double_t x); voidTMVA::Configurable::ResetSetFlag(); voidRKernelEstimate(const TMVA::Event&, vector<const TMVA::BinarySearchTreeNode*>&, TMVA::Volume&, vector<Float_t>* pdfSum); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile().",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:19230,Modifiability,variab,variable,19230,"tusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; Int_tfFcnCallnumber of external function calls (RootFinder); TMVA::Volume*fHelpVolumeauxiliary variable; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. vector<Float_t>fAverageRMSaverage RMS of signal and background; TMVA::BinarySearchTree*fBinaryTreebinary tree; vector<Float_t>*fDeltasize of volume; Float_tfDeltaFracfraction of RMS; Double_tfGaussSigmasize of Gauss in adaptive volume; Double_tfGaussSigmaNormsize of Gauss in adaptive volume (normalised to dimensions); Float_tfInitialScaleinitial scale for adaptive volume; Bool_tfInitializedVolumeEleis volume element initialized ?; enum EKernelEstimatorfKernelEstimator; TStringfKernelStringoption k",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:19300,Modifiability,variab,variables,19300,"tusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; Int_tfFcnCallnumber of external function calls (RootFinder); TMVA::Volume*fHelpVolumeauxiliary variable; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. vector<Float_t>fAverageRMSaverage RMS of signal and background; TMVA::BinarySearchTree*fBinaryTreebinary tree; vector<Float_t>*fDeltasize of volume; Float_tfDeltaFracfraction of RMS; Double_tfGaussSigmasize of Gauss in adaptive volume; Double_tfGaussSigmaNormsize of Gauss in adaptive volume (normalised to dimensions); Float_tfInitialScaleinitial scale for adaptive volume; Bool_tfInitializedVolumeEleis volume element initialized ?; enum EKernelEstimatorfKernelEstimator; TStringfKernelStringoption k",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:19489,Modifiability,variab,variable,19489,"tusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; Int_tfFcnCallnumber of external function calls (RootFinder); TMVA::Volume*fHelpVolumeauxiliary variable; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. vector<Float_t>fAverageRMSaverage RMS of signal and background; TMVA::BinarySearchTree*fBinaryTreebinary tree; vector<Float_t>*fDeltasize of volume; Float_tfDeltaFracfraction of RMS; Double_tfGaussSigmasize of Gauss in adaptive volume; Double_tfGaussSigmaNormsize of Gauss in adaptive volume (normalised to dimensions); Float_tfInitialScaleinitial scale for adaptive volume; Bool_tfInitializedVolumeEleis volume element initialized ?; enum EKernelEstimatorfKernelEstimator; TStringfKernelStringoption k",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:20150,Modifiability,adapt,adaptive,20150,,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:20207,Modifiability,adapt,adaptive,20207,,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:20289,Modifiability,adapt,adaptive,20289,,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:20504,Modifiability,adapt,adapt,20504,,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:20608,Modifiability,adapt,adaptive,20608,,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:20671,Modifiability,adapt,adaptive,20671,,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:22140,Modifiability,Inherit,Inheritance,22140,"TMVA::MethodPDERS::EKernelEstimatorkBox; static TMVA::MethodPDERS::EKernelEstimatorkGauss; static TMVA::MethodPDERS::EKernelEstimatorkLanczos2; static TMVA::MethodPDERS::EKernelEstimatorkLanczos3; static TMVA::MethodPDERS::EKernelEstimatorkLanczos5; static TMVA::MethodPDERS::EKernelEstimatorkLanczos8; static TMVA::MethodPDERS::EVolumeRangeModekMinMax; static TMVA::MethodPDERS::EVolumeRangeModekRMS; static TMVA::MethodPDERS::EKernelEstimatorkSinc11; static TMVA::MethodPDERS::EKernelEstimatorkSinc3; static TMVA::MethodPDERS::EKernelEstimatorkSinc5; static TMVA::MethodPDERS::EKernelEstimatorkSinc7; static TMVA::MethodPDERS::EKernelEstimatorkSinc9; static TMVA::MethodPDERS::EKernelEstimatorkSphere; static TMVA::MethodPDERS::EKernelEstimatorkTeepee; static TMVA::MethodPDERS::EKernelEstimatorkTrim; static TMVA::MethodPDERS::EVolumeRangeModekUnscaled; static TMVA::MethodPDERS::EVolumeRangeModekUnsupported; static TMVA::MethodPDERS::EVolumeRangeModekkNN. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodPDERS(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor for the PDERS method. MethodPDERS(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); construct MethodPDERS through from file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDERS can handle classification with 2 classes and regression with one or more regression-targets. void Init( void ); default initialisation routine called by all constructors. ~MethodPDERS( void ); destructor. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; VolumeRangeMode <string> Method to determine volume range; available values are: MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function; ava",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:22153,Modifiability,Inherit,Inherited,22153,"TMVA::MethodPDERS::EKernelEstimatorkBox; static TMVA::MethodPDERS::EKernelEstimatorkGauss; static TMVA::MethodPDERS::EKernelEstimatorkLanczos2; static TMVA::MethodPDERS::EKernelEstimatorkLanczos3; static TMVA::MethodPDERS::EKernelEstimatorkLanczos5; static TMVA::MethodPDERS::EKernelEstimatorkLanczos8; static TMVA::MethodPDERS::EVolumeRangeModekMinMax; static TMVA::MethodPDERS::EVolumeRangeModekRMS; static TMVA::MethodPDERS::EKernelEstimatorkSinc11; static TMVA::MethodPDERS::EKernelEstimatorkSinc3; static TMVA::MethodPDERS::EKernelEstimatorkSinc5; static TMVA::MethodPDERS::EKernelEstimatorkSinc7; static TMVA::MethodPDERS::EKernelEstimatorkSinc9; static TMVA::MethodPDERS::EKernelEstimatorkSphere; static TMVA::MethodPDERS::EKernelEstimatorkTeepee; static TMVA::MethodPDERS::EKernelEstimatorkTrim; static TMVA::MethodPDERS::EVolumeRangeModekUnscaled; static TMVA::MethodPDERS::EVolumeRangeModekUnsupported; static TMVA::MethodPDERS::EVolumeRangeModekkNN. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodPDERS(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor for the PDERS method. MethodPDERS(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); construct MethodPDERS through from file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDERS can handle classification with 2 classes and regression with one or more regression-targets. void Init( void ); default initialisation routine called by all constructors. ~MethodPDERS( void ); destructor. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; VolumeRangeMode <string> Method to determine volume range; available values are: MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function; ava",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:23090,Modifiability,Adapt,Adaptive,23090,"PDERS::EVolumeRangeModekUnscaled; static TMVA::MethodPDERS::EVolumeRangeModekUnsupported; static TMVA::MethodPDERS::EVolumeRangeModekkNN. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodPDERS(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor for the PDERS method. MethodPDERS(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); construct MethodPDERS through from file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDERS can handle classification with 2 classes and regression with one or more regression-targets. void Init( void ); default initialisation routine called by all constructors. ~MethodPDERS( void ); destructor. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; VolumeRangeMode <string> Method to determine volume range; available values are: MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function; available values are: Box <default>; Sphere; Teepee; Gauss; Sinc3; Sinc5; Sinc7; Sinc9; Sinc11; Lanczos2; Lanczos3; Lanczos5; Lanczos8; Trim. DeltaFrac <float> Ratio of #EventsMin/#EventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options specified by the user. void Train( void ); this is a dummy training: the preparation work to do is the construction; of the binary tree as a pointer chain. It is easier to directly save the; tra",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:23433,Modifiability,adapt,adaptive,23433,"thodPDERS through from file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDERS can handle classification with 2 classes and regression with one or more regression-targets. void Init( void ); default initialisation routine called by all constructors. ~MethodPDERS( void ); destructor. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; VolumeRangeMode <string> Method to determine volume range; available values are: MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function; available values are: Box <default>; Sphere; Teepee; Gauss; Sinc3; Sinc5; Sinc7; Sinc9; Sinc11; Lanczos2; Lanczos3; Lanczos5; Lanczos8; Trim. DeltaFrac <float> Ratio of #EventsMin/#EventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options specified by the user. void Train( void ); this is a dummy training: the preparation work to do is the construction; of the binary tree as a pointer chain. It is easier to directly save the; trainingTree in the weight file, and to rebuild the binary tree in the; test phase from scratch. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); init the size of a volume element using a defined fraction of the; volume containing the entire events. const std::vector< Float_t >& GetRegressionValues(). void CalcAverages(); compute also average RMS values required for adaptive Gaussian. void CreateBinarySearchTree(TMVA::Types::ETreeType type); create binary search trees for signal and background. void SetVolumeElement( voi",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:23502,Modifiability,adapt,adaptive,23502,"thodPDERS through from file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDERS can handle classification with 2 classes and regression with one or more regression-targets. void Init( void ); default initialisation routine called by all constructors. ~MethodPDERS( void ); destructor. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; VolumeRangeMode <string> Method to determine volume range; available values are: MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function; available values are: Box <default>; Sphere; Teepee; Gauss; Sinc3; Sinc5; Sinc7; Sinc9; Sinc11; Lanczos2; Lanczos3; Lanczos5; Lanczos8; Trim. DeltaFrac <float> Ratio of #EventsMin/#EventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options specified by the user. void Train( void ); this is a dummy training: the preparation work to do is the construction; of the binary tree as a pointer chain. It is easier to directly save the; trainingTree in the weight file, and to rebuild the binary tree in the; test phase from scratch. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); init the size of a volume element using a defined fraction of the; volume containing the entire events. const std::vector< Float_t >& GetRegressionValues(). void CalcAverages(); compute also average RMS values required for adaptive Gaussian. void CreateBinarySearchTree(TMVA::Types::ETreeType type); create binary search trees for signal and background. void SetVolumeElement( voi",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:23579,Modifiability,adapt,adaptive,23579,"thodPDERS through from file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDERS can handle classification with 2 classes and regression with one or more regression-targets. void Init( void ); default initialisation routine called by all constructors. ~MethodPDERS( void ); destructor. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; VolumeRangeMode <string> Method to determine volume range; available values are: MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function; available values are: Box <default>; Sphere; Teepee; Gauss; Sinc3; Sinc5; Sinc7; Sinc9; Sinc11; Lanczos2; Lanczos3; Lanczos5; Lanczos8; Trim. DeltaFrac <float> Ratio of #EventsMin/#EventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options specified by the user. void Train( void ); this is a dummy training: the preparation work to do is the construction; of the binary tree as a pointer chain. It is easier to directly save the; trainingTree in the weight file, and to rebuild the binary tree in the; test phase from scratch. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); init the size of a volume element using a defined fraction of the; volume containing the entire events. const std::vector< Float_t >& GetRegressionValues(). void CalcAverages(); compute also average RMS values required for adaptive Gaussian. void CreateBinarySearchTree(TMVA::Types::ETreeType type); create binary search trees for signal and background. void SetVolumeElement( voi",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:23641,Modifiability,adapt,adaptive,23641,"thodPDERS through from file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDERS can handle classification with 2 classes and regression with one or more regression-targets. void Init( void ); default initialisation routine called by all constructors. ~MethodPDERS( void ); destructor. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; VolumeRangeMode <string> Method to determine volume range; available values are: MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function; available values are: Box <default>; Sphere; Teepee; Gauss; Sinc3; Sinc5; Sinc7; Sinc9; Sinc11; Lanczos2; Lanczos3; Lanczos5; Lanczos8; Trim. DeltaFrac <float> Ratio of #EventsMin/#EventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options specified by the user. void Train( void ); this is a dummy training: the preparation work to do is the construction; of the binary tree as a pointer chain. It is easier to directly save the; trainingTree in the weight file, and to rebuild the binary tree in the; test phase from scratch. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); init the size of a volume element using a defined fraction of the; volume containing the entire events. const std::vector< Float_t >& GetRegressionValues(). void CalcAverages(); compute also average RMS values required for adaptive Gaussian. void CreateBinarySearchTree(TMVA::Types::ETreeType type); create binary search trees for signal and background. void SetVolumeElement( voi",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:24370,Modifiability,adapt,adaptive,24370,"ventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options specified by the user. void Train( void ); this is a dummy training: the preparation work to do is the construction; of the binary tree as a pointer chain. It is easier to directly save the; trainingTree in the weight file, and to rebuild the binary tree in the; test phase from scratch. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); init the size of a volume element using a defined fraction of the; volume containing the entire events. const std::vector< Float_t >& GetRegressionValues(). void CalcAverages(); compute also average RMS values required for adaptive Gaussian. void CreateBinarySearchTree(TMVA::Types::ETreeType type); create binary search trees for signal and background. void SetVolumeElement( void ); defines volume dimensions. Double_t IGetVolumeContentForRoot(Double_t ); Interface to RootFinder. Double_t GetVolumeContentForRoot(Double_t ); count number of events in rescaled volume. void GetSample(const TMVA::Event& e, vector<const TMVA::BinarySearchTreeNode*>& events, TMVA::Volume* volume). Double_t CRScalc(const TMVA::Event& ). void RRScalc(const TMVA::Event& , vector<Float_t>* count). Double_t CKernelEstimate(const TMVA::Event& , vector<const TMVA::BinarySearchTreeNode*>& , TMVA::Volume& ); normalization factors so we can work with radius 1 hyperspheres. void RKernelEstimate(const TMVA::Event& , vector<const TMVA::BinarySearchTreeNode*>& , TMVA::Volume& , vector<Float_t>* pdfSum); normalization factors so we can work with radius 1 hyperspheres. Double_t ApplyKernelFunction(Double_t normalized_dis",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:27043,Modifiability,variab,variables,27043,"nce(const TMVA::Event& base_event, const TMVA::BinarySearchTreeNode& sample_event, Double_t* dim_normalization); We use Euclidian metric here. Might not be best or most efficient. Double_t NormSinc(Double_t x); NormSinc. Double_t LanczosFilter(Int_t level, Double_t x); Lanczos Filter. Float_t GetError(Float_t countS, Float_t countB, Float_t sumW2S, Float_t sumW2B) const; statistical error estimate for RS estimator. void AddWeightsXMLTo(void* parent) const; write weights to xml file. void ReadWeightsFromXML(void* wghtnode). void ReadWeightsFromStream(istream& istr); read weight info from file. void WriteWeightsToStream(TFile& rf) const; write training sample (TTree) to file. void ReadWeightsFromStream(TFile& istr); read training sample from file. TMVA::MethodPDERS* ThisPDERS( void ); static pointer to this object. void UpdateThis( void ); update static this pointer. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodPDERS(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0). BinarySearchTree* GetBinaryTree( void ); accessors. { return fBinaryTree; }. const Ranking* CreateRanking(); ranking of input variables. { return 0; }. MethodPDERS*& GetMethodPDERSThreadLocal(); This is a workaround for OSx where static thread_local data members are; not supported. The C++ solution would indeed be the following:. {TTHREAD_TLS(MethodPDERS*) fgThisPDERS(nullptr); return fgThisPDERS;}. » Author: Andreas Hoecker, Yair Mahalalel, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:11145,Performance,Optimiz,OptimizeTuningParameters,11145,"MVA::MethodBase::MethodBaseDir() const; TMVA::MethodPDERSMethodPDERS(const TMVA::MethodPDERS&); TMVA::MethodPDERSMethodPDERS(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); TMVA::MethodPDERSMethodPDERS(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodPDERS&operator=(const TMVA::MethodPDERS&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:13568,Performance,tune,tuneParameters,13568,"::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); static TMVA::MethodPDERS*ThisPDERS(); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:8682,Security,Hash,Hash,8682,"e::GetTrainingEvent(Long64_t ievt) const; UInt_tTMVA::MethodBase::GetTrainingROOTVersionCode() const; TStringTMVA::MethodBase::GetTrainingROOTVersionString() const; UInt_tTMVA::MethodBase::GetTrainingTMVAVersionCode() const; TStringTMVA::MethodBase::GetTrainingTMVAVersionString() const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetVolumeContentForRoot(Double_t); TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; static Double_tIGetVolumeContentForRoot(Double_t); TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(cons",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:26958,Security,access,accessors,26958,"nce(const TMVA::Event& base_event, const TMVA::BinarySearchTreeNode& sample_event, Double_t* dim_normalization); We use Euclidian metric here. Might not be best or most efficient. Double_t NormSinc(Double_t x); NormSinc. Double_t LanczosFilter(Int_t level, Double_t x); Lanczos Filter. Float_t GetError(Float_t countS, Float_t countB, Float_t sumW2S, Float_t sumW2B) const; statistical error estimate for RS estimator. void AddWeightsXMLTo(void* parent) const; write weights to xml file. void ReadWeightsFromXML(void* wghtnode). void ReadWeightsFromStream(istream& istr); read weight info from file. void WriteWeightsToStream(TFile& rf) const; write training sample (TTree) to file. void ReadWeightsFromStream(TFile& istr); read training sample from file. TMVA::MethodPDERS* ThisPDERS( void ); static pointer to this object. void UpdateThis( void ); update static this pointer. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodPDERS(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0). BinarySearchTree* GetBinaryTree( void ); accessors. { return fBinaryTree; }. const Ranking* CreateRanking(); ranking of input variables. { return 0; }. MethodPDERS*& GetMethodPDERSThreadLocal(); This is a workaround for OSx where static thread_local data members are; not supported. The C++ solution would indeed be the following:. {TTHREAD_TLS(MethodPDERS*) fgThisPDERS(nullptr); return fgThisPDERS;}. » Author: Andreas Hoecker, Yair Mahalalel, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:872,Testability,test,test,872,". TMVA::MethodPDERS. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodPDERS. class TMVA::MethodPDERS: public TMVA::MethodBase. /*; This is a generalization of the above Likelihood methods to Nvar; dimensions, where Nvar is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. ; A very simple probability density estimator (PDE) has been suggested; in hep-ex/0211019. The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A search; method based on binary-trees is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional: . MinMax:; the volume is defined in each dimension with respect; to the full variable range found in the training sample. ; RMS:; the volume is defined in each dimensions with respect; to the RMS estimated from the training sample. ; Adaptive:; a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; . Function Members (Methods); public:. virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::Meth",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:1014,Testability,test,test,1014,". TMVA::MethodPDERS. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodPDERS. class TMVA::MethodPDERS: public TMVA::MethodBase. /*; This is a generalization of the above Likelihood methods to Nvar; dimensions, where Nvar is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. ; A very simple probability density estimator (PDE) has been suggested; in hep-ex/0211019. The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A search; method based on binary-trees is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional: . MinMax:; the volume is defined in each dimension with respect; to the full variable range found in the training sample. ; RMS:; the volume is defined in each dimensions with respect; to the RMS estimated from the training sample. ; Adaptive:; a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; . Function Members (Methods); public:. virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::Meth",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:13370,Testability,test,testTime,13370,"t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); static TMVA::MethodPDERS*ThisPDERS(); virtual voidTrain(); voidTMVA::MethodBase::Tra",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:13907,Testability,Test,TestBit,13907,"idTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); static TMVA::MethodPDERS*ThisPDERS(); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TStr",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:13946,Testability,Test,TestBits,13946,"irectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); static TMVA::MethodPDERS*ThisPDERS(); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:14002,Testability,Test,TestClassification,14002,"ectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); static TMVA::MethodPDERS*ThisPDERS(); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& r",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:14054,Testability,Test,TestMulticlass,14054,"ethodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); static TMVA::MethodPDERS*ThisPDERS(); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const.",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:14102,Testability,Test,TestRegression,14102,"ethodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); static TMVA::MethodPDERS*ThisPDERS(); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& rf) const.",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:16329,Testability,Log,Log,16329," va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); TMVA::BinarySearchTree*GetBinaryTree() const; virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; Double_tGetNormalizedDistance(const TMVA::Event& base_event, const TMVA::BinarySearchTreeNode& sample_event, Double_t* dim_normalization); const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; Double_tKernelNormalization(Double_t pdf); Double_tLanczosFilter(Int_t level, Double_t x); TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); Double_tNormSinc(Double_t x); voidTMVA::Configurable::ResetSetFlag(); voidRKernelEstimate(const TMVA::Event&, vector<const TMVA::BinarySearchTreeNode*>&, TMVA::Volume&, vector<Float_t>* pdfSum); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile().",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:18024,Testability,test,testing,18024,"tCRScalc(const TMVA::Event&); virtual voidDeclareOptions(); Float_tGetError(Float_t countS, Float_t countB, Float_t sumW2S, Float_t sumW2B) const; static TMVA::MethodPDERS*&GetMethodPDERSThreadLocal(); voidGetSample(const TMVA::Event& e, vector<const TMVA::BinarySearchTreeNode*>& events, TMVA::Volume* volume); virtual voidInit(); virtual voidProcessOptions(); voidRRScalc(const TMVA::Event&, vector<Float_t>* count); voidSetVolumeElement(); voidUpdateThis(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; Int_tfFcnCallnumber of external function calls (RootFinder); TMVA::Volume*fHelpVolumeauxiliary variable; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multicl",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:24057,Testability,test,test,24057," determine volume range; available values are: MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function; available values are: Box <default>; Sphere; Teepee; Gauss; Sinc3; Sinc5; Sinc7; Sinc9; Sinc11; Lanczos2; Lanczos3; Lanczos5; Lanczos8; Trim. DeltaFrac <float> Ratio of #EventsMin/#EventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options specified by the user. void Train( void ); this is a dummy training: the preparation work to do is the construction; of the binary tree as a pointer chain. It is easier to directly save the; trainingTree in the weight file, and to rebuild the binary tree in the; test phase from scratch. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); init the size of a volume element using a defined fraction of the; volume containing the entire events. const std::vector< Float_t >& GetRegressionValues(). void CalcAverages(); compute also average RMS values required for adaptive Gaussian. void CreateBinarySearchTree(TMVA::Types::ETreeType type); create binary search trees for signal and background. void SetVolumeElement( void ); defines volume dimensions. Double_t IGetVolumeContentForRoot(Double_t ); Interface to RootFinder. Double_t GetVolumeContentForRoot(Double_t ); count number of events in rescaled volume. void GetSample(const TMVA::Event& e, vector<const TMVA::BinarySearchTreeNode*>& events, TMVA::Volume* volume). Double_t CRScalc(const TMVA::Event& ). void RRScalc(const TMVA::Event& , vector<Float_t>* count). Double_t CKernelEstimate(const TMVA::Event& , vector<const TMVA::BinarySearchTreeNode*>&",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:769,Usability,simpl,simple,769,". TMVA::MethodPDERS. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodPDERS. class TMVA::MethodPDERS: public TMVA::MethodBase. /*; This is a generalization of the above Likelihood methods to Nvar; dimensions, where Nvar is the number of input variables; used in the MVA. If the multi-dimensional probability density functions; (PDFs) for signal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. ; A very simple probability density estimator (PDE) has been suggested; in hep-ex/0211019. The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A search; method based on binary-trees is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional: . MinMax:; the volume is defined in each dimension with respect; to the full variable range found in the training sample. ; RMS:; the volume is defined in each dimensions with respect; to the RMS estimated from the training sample. ; Adaptive:; a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; . Function Members (Methods); public:. virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::Meth",MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodPDERS.html:2472,Usability,Clear,Clear,2472, virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::Meth,MatchSource.WIKI,root/html604/TMVA__MethodPDERS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodPDERS.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:2072,Availability,Error,Error,2072,"nst char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMV",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:2201,Availability,error,error,2201,"figurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:2285,Availability,error,error,2285,"igurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollec",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:21637,Availability,avail,available,21637," initial s/b fraction in training data; Double_tfTreeEveFracfraction of events used for traing each tree; Bool_tfUseBoostuse boosted events for forest generation; Bool_tfUseRuleFitJFif true interface with J.Friedmans RuleFit module. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodRuleFit(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodRuleFit(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. ~MethodRuleFit( void ); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t ); RuleFit can handle classification with 2 classes. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options. general. RuleFitModule <string>; available values are: RFTMVA - use TMVA implementation; RFFriedman - use Friedmans original implementation. Path search (fitting). GDTau <float> gradient-directed path: fit threshhold, default; GDTauPrec <float> gradient-directed path: precision of estimated tau; GDStep <float> gradient-directed path: step size; GDNSteps <float> gradient-directed path: number of steps; GDErrScale <float> stop scan when error>scale*errmin. Tree generation. fEventsMin <float> minimum fraction of events in a splittable node; fEventsMax <float> maximum fraction of events in a splittable node; nTrees <float> number of trees in forest.; ForestType <string>; available values are: Random - create forest using random subsample and only random variables subset at each node; AdaBoost - create forest with boosted events. Model creation. RuleMinDist <float> min distance allowed between rules; MinImp <float> minimum rule importance accepted; Model <string> model to be used; available values are: ModRuleLinear <default>; ModRule; ModLinear. Friedmans module",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:22043,Availability,error,error,22043,"ss Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodRuleFit(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodRuleFit(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. ~MethodRuleFit( void ); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t ); RuleFit can handle classification with 2 classes. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options. general. RuleFitModule <string>; available values are: RFTMVA - use TMVA implementation; RFFriedman - use Friedmans original implementation. Path search (fitting). GDTau <float> gradient-directed path: fit threshhold, default; GDTauPrec <float> gradient-directed path: precision of estimated tau; GDStep <float> gradient-directed path: step size; GDNSteps <float> gradient-directed path: number of steps; GDErrScale <float> stop scan when error>scale*errmin. Tree generation. fEventsMin <float> minimum fraction of events in a splittable node; fEventsMax <float> maximum fraction of events in a splittable node; nTrees <float> number of trees in forest.; ForestType <string>; available values are: Random - create forest using random subsample and only random variables subset at each node; AdaBoost - create forest with boosted events. Model creation. RuleMinDist <float> min distance allowed between rules; MinImp <float> minimum rule importance accepted; Model <string> model to be used; available values are: ModRuleLinear <default>; ModRule; ModLinear. Friedmans module. RFWorkDir <string> directory where Friedmans module (rf_go.exe) is installed; RFNrules <int> maximum number of rules allowed; RFNendnodes <int> average number of end nodes in the forest of trees. void ProcessOptions(); process the opti",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:22280,Availability,avail,available,22280,"ctor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t ); RuleFit can handle classification with 2 classes. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options. general. RuleFitModule <string>; available values are: RFTMVA - use TMVA implementation; RFFriedman - use Friedmans original implementation. Path search (fitting). GDTau <float> gradient-directed path: fit threshhold, default; GDTauPrec <float> gradient-directed path: precision of estimated tau; GDStep <float> gradient-directed path: step size; GDNSteps <float> gradient-directed path: number of steps; GDErrScale <float> stop scan when error>scale*errmin. Tree generation. fEventsMin <float> minimum fraction of events in a splittable node; fEventsMax <float> maximum fraction of events in a splittable node; nTrees <float> number of trees in forest.; ForestType <string>; available values are: Random - create forest using random subsample and only random variables subset at each node; AdaBoost - create forest with boosted events. Model creation. RuleMinDist <float> min distance allowed between rules; MinImp <float> minimum rule importance accepted; Model <string> model to be used; available values are: ModRuleLinear <default>; ModRule; ModLinear. Friedmans module. RFWorkDir <string> directory where Friedmans module (rf_go.exe) is installed; RFNrules <int> maximum number of rules allowed; RFNendnodes <int> average number of end nodes in the forest of trees. void ProcessOptions(); process the options specified by the user. void InitMonitorNtuple(); initialize the monitoring ntuple. void Init(); default initialization. void InitEventSample( void ); write all Events from the Tree into a vector of Events, that are; more easily manipulated.; This method should never be called without existing trainingTree, as it; the vector of events from the ROOT training tree. void Train( void ). void TrainTMVARuleFit( void ); training of ru",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:22595,Availability,avail,available,22595,"an be set in the option string; know options. general. RuleFitModule <string>; available values are: RFTMVA - use TMVA implementation; RFFriedman - use Friedmans original implementation. Path search (fitting). GDTau <float> gradient-directed path: fit threshhold, default; GDTauPrec <float> gradient-directed path: precision of estimated tau; GDStep <float> gradient-directed path: step size; GDNSteps <float> gradient-directed path: number of steps; GDErrScale <float> stop scan when error>scale*errmin. Tree generation. fEventsMin <float> minimum fraction of events in a splittable node; fEventsMax <float> maximum fraction of events in a splittable node; nTrees <float> number of trees in forest.; ForestType <string>; available values are: Random - create forest using random subsample and only random variables subset at each node; AdaBoost - create forest with boosted events. Model creation. RuleMinDist <float> min distance allowed between rules; MinImp <float> minimum rule importance accepted; Model <string> model to be used; available values are: ModRuleLinear <default>; ModRule; ModLinear. Friedmans module. RFWorkDir <string> directory where Friedmans module (rf_go.exe) is installed; RFNrules <int> maximum number of rules allowed; RFNendnodes <int> average number of end nodes in the forest of trees. void ProcessOptions(); process the options specified by the user. void InitMonitorNtuple(); initialize the monitoring ntuple. void Init(); default initialization. void InitEventSample( void ); write all Events from the Tree into a vector of Events, that are; more easily manipulated.; This method should never be called without existing trainingTree, as it; the vector of events from the ROOT training tree. void Train( void ). void TrainTMVARuleFit( void ); training of rules using TMVA implementation. void TrainJFRuleFit( void ); training of rules using Jerome Friedmans implementation. const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void AddWeightsXML",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:22747,Deployability,install,installed,22747,"it threshhold, default; GDTauPrec <float> gradient-directed path: precision of estimated tau; GDStep <float> gradient-directed path: step size; GDNSteps <float> gradient-directed path: number of steps; GDErrScale <float> stop scan when error>scale*errmin. Tree generation. fEventsMin <float> minimum fraction of events in a splittable node; fEventsMax <float> maximum fraction of events in a splittable node; nTrees <float> number of trees in forest.; ForestType <string>; available values are: Random - create forest using random subsample and only random variables subset at each node; AdaBoost - create forest with boosted events. Model creation. RuleMinDist <float> min distance allowed between rules; MinImp <float> minimum rule importance accepted; Model <string> model to be used; available values are: ModRuleLinear <default>; ModRule; ModLinear. Friedmans module. RFWorkDir <string> directory where Friedmans module (rf_go.exe) is installed; RFNrules <int> maximum number of rules allowed; RFNendnodes <int> average number of end nodes in the forest of trees. void ProcessOptions(); process the options specified by the user. void InitMonitorNtuple(); initialize the monitoring ntuple. void Init(); default initialization. void InitEventSample( void ); write all Events from the Tree into a vector of Events, that are; more easily manipulated.; This method should never be called without existing trainingTree, as it; the vector of events from the ROOT training tree. void Train( void ). void TrainTMVARuleFit( void ); training of rules using TMVA implementation. void TrainJFRuleFit( void ); training of rules using Jerome Friedmans implementation. const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void AddWeightsXMLTo(void* parent) const; add the rules to XML node. void ReadWeightsFromStream(istream& istr); read rules from an std::istream. void ReadWeightsFromXML(void* wghtnode); read rules from XML node. Double_t GetMvaValue(Double_t* err = 0, Double_t* errU",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:19260,Energy Efficiency,monitor,monitor,19260,,MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:22983,Energy Efficiency,monitor,monitoring,22983,"dient-directed path: number of steps; GDErrScale <float> stop scan when error>scale*errmin. Tree generation. fEventsMin <float> minimum fraction of events in a splittable node; fEventsMax <float> maximum fraction of events in a splittable node; nTrees <float> number of trees in forest.; ForestType <string>; available values are: Random - create forest using random subsample and only random variables subset at each node; AdaBoost - create forest with boosted events. Model creation. RuleMinDist <float> min distance allowed between rules; MinImp <float> minimum rule importance accepted; Model <string> model to be used; available values are: ModRuleLinear <default>; ModRule; ModLinear. Friedmans module. RFWorkDir <string> directory where Friedmans module (rf_go.exe) is installed; RFNrules <int> maximum number of rules allowed; RFNendnodes <int> average number of end nodes in the forest of trees. void ProcessOptions(); process the options specified by the user. void InitMonitorNtuple(); initialize the monitoring ntuple. void Init(); default initialization. void InitEventSample( void ); write all Events from the Tree into a vector of Events, that are; more easily manipulated.; This method should never be called without existing trainingTree, as it; the vector of events from the ROOT training tree. void Train( void ). void TrainTMVARuleFit( void ); training of rules using TMVA implementation. void TrainJFRuleFit( void ); training of rules using Jerome Friedmans implementation. const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void AddWeightsXMLTo(void* parent) const; add the rules to XML node. void ReadWeightsFromStream(istream& istr); read rules from an std::istream. void ReadWeightsFromXML(void* wghtnode); read rules from XML node. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns MVA value for given event. void WriteMonitoringHistosToFile( void ); write special monitoring histograms to file (here ntuple). void MakeClassSpe",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:23909,Energy Efficiency,monitor,monitoring,23909,"cess the options specified by the user. void InitMonitorNtuple(); initialize the monitoring ntuple. void Init(); default initialization. void InitEventSample( void ); write all Events from the Tree into a vector of Events, that are; more easily manipulated.; This method should never be called without existing trainingTree, as it; the vector of events from the ROOT training tree. void Train( void ). void TrainTMVARuleFit( void ); training of rules using TMVA implementation. void TrainJFRuleFit( void ); training of rules using Jerome Friedmans implementation. const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void AddWeightsXMLTo(void* parent) const; add the rules to XML node. void ReadWeightsFromStream(istream& istr); read rules from an std::istream. void ReadWeightsFromXML(void* wghtnode); read rules from XML node. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns MVA value for given event. void WriteMonitoringHistosToFile( void ); write special monitoring histograms to file (here ntuple). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void MakeClassRuleCuts(ostream& ) const; print out the rule cuts. void MakeClassLinear(ostream& ) const; print out the linear terms. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodRuleFit(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0). Bool_t UseBoost() const; { return fUseBoost; }. RuleFit* GetRuleFitPtr(); accessors. { return &fRuleFit; }. const RuleFit* GetRuleFitConstPtr() const; { return &fRuleFit; }. TDirectory* GetMethodBaseDir() const; { return BaseDir(); }. const std::vector<TMVA::Event*>& GetTrainingEvents() const; { return fEventSample; }. const std::vector<TMVA::DecisionTree*>& GetForest() const; { return fForest; }. Int_t GetNTrees",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:20868,Integrability,interface,interface,20868,"uble_tfGDValidEveFracGD path: fraction of subsamples used for the fitting; Double_tfLinQuantilequantile cut to remove outliers - see RuleEnsemble; Double_tfMaxFracNEveditto max; Double_tfMinFracNEvemin fraction of number events; Double_tfMinimprule/linear: minimum importance; TStringfModelTypeSrule ensemble: which model (rule,linear or both); TTree*fMonitorNtuplepointer to monitor rule ntuple; Int_tfNCutsgrid used in cut applied in node splitting; Double_tfNTCoefficientntuple: rule coefficient; Double_tfNTImportancentuple: rule importance; Int_tfNTNcutsntuple: rule number of cuts; Int_tfNTNvarsntuple: rule number of vars; Double_tfNTPbbntuple: rule P(tag b, true b); Double_tfNTPbsntuple: rule P(tag b, true s); Double_tfNTPsbntuple: rule P(tag s, true b); Double_tfNTPssntuple: rule P(tag s, true s); Double_tfNTPtagntuple: rule P(tag); Double_tfNTSSBntuple: rule S/(S+B); Double_tfNTSupportntuple: rule support; Int_tfNTTypentuple: rule type (+1->signal, -1->bkg); Int_tfNTreesnumber of trees in forest; TMVA::DecisionTree::EPruneMethodfPruneMethodforest generation: method used for pruning - see DecisionTree; TStringfPruneMethodSforest generation: prune method - see DecisionTree; Double_tfPruneStrengthforest generation: prune strength - see DecisionTree; Int_tfRFNendnodesmax number of rules (only Friedmans module); Int_tfRFNrulesmax number of rules (only Friedmans module); TStringfRFWorkDirworking directory from Friedmans module; TMVA::RuleFitfRuleFitRuleFit instance; TStringfRuleFitModuleSwhich rulefit module to use; Double_tfRuleMinDistrule min distance - see RuleEnsemble; TMVA::SeparationBase*fSepTypethe separation used in node splitting; TStringfSepTypeSforest generation: separation type - see DecisionTree; Double_tfSignalFractionscalefactor for bkg events to modify initial s/b fraction in training data; Double_tfTreeEveFracfraction of events used for traing each tree; Bool_tfUseBoostuse boosted events for forest generation; Bool_tfUseRuleFitJFif true interface with J.",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:24219,Integrability,message,message,24219,"isting trainingTree, as it; the vector of events from the ROOT training tree. void Train( void ). void TrainTMVARuleFit( void ); training of rules using TMVA implementation. void TrainJFRuleFit( void ); training of rules using Jerome Friedmans implementation. const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void AddWeightsXMLTo(void* parent) const; add the rules to XML node. void ReadWeightsFromStream(istream& istr); read rules from an std::istream. void ReadWeightsFromXML(void* wghtnode); read rules from XML node. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns MVA value for given event. void WriteMonitoringHistosToFile( void ); write special monitoring histograms to file (here ntuple). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void MakeClassRuleCuts(ostream& ) const; print out the rule cuts. void MakeClassLinear(ostream& ) const; print out the linear terms. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodRuleFit(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0). Bool_t UseBoost() const; { return fUseBoost; }. RuleFit* GetRuleFitPtr(); accessors. { return &fRuleFit; }. const RuleFit* GetRuleFitConstPtr() const; { return &fRuleFit; }. TDirectory* GetMethodBaseDir() const; { return BaseDir(); }. const std::vector<TMVA::Event*>& GetTrainingEvents() const; { return fEventSample; }. const std::vector<TMVA::DecisionTree*>& GetForest() const; { return fForest; }. Int_t GetNTrees() const; { return fNTrees; }. Double_t GetTreeEveFrac() const; { return fTreeEveFrac; }. const SeparationBase* GetSeparationBaseConst() const; { return fSepType; }. SeparationBase* GetSeparationBase() const; { return fSepType; }. TMVA::DecisionTree::EPruneMethod GetPruneMethod() const; { return fPrune",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:483,Modifiability,Config,Configurable,483," virtual~MethodRuleFit(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") co",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:839,Modifiability,Config,Configurable,839," virtual~MethodRuleFit(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") co",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:1169,Modifiability,Config,ConfigurableTMVA,1169," virtual~MethodRuleFit(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") co",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:1187,Modifiability,Config,Configurable,1187," virtual~MethodRuleFit(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") co",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:1201,Modifiability,Config,Configurable,1201," virtual~MethodRuleFit(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") co",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:1252,Modifiability,Config,ConfigurableTMVA,1252," virtual~MethodRuleFit(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") co",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:1270,Modifiability,Config,Configurable,1270," virtual~MethodRuleFit(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") co",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:1284,Modifiability,Config,Configurable,1284," virtual~MethodRuleFit(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") co",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:1309,Modifiability,Config,Configurable,1309," virtual~MethodRuleFit(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") co",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:2649,Modifiability,Config,Configurable,2649,"ase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollection(TMVA::Types::ETreeType type); const vector<TMVA::DecisionTree*>&GetForest() const; Double_tGetGDErrScale() const; Int_tGetGDNPathSteps() const; Double_tGetGDPathEveFrac() const; Double_tGetGDPathStep() const; Double_tGetGDValidEveFrac() const; virtual const char*TObject::GetIconName() const; const TString&TMVA::MethodBase::GetInputLabel(Int_t i) const; const TS",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:2710,Modifiability,Config,Configurable,2710,"tancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollection(TMVA::Types::ETreeType type); const vector<TMVA::DecisionTree*>&GetForest() const; Double_tGetGDErrScale() const; Int_tGetGDNPathSteps() const; Double_tGetGDPathEveFrac() const; Double_tGetGDPathStep() const; Double_tGetGDValidEveFrac() const; virtual const char*TObject::GetIconName() const; const TString&TMVA::MethodBase::GetInputLabel(Int_t i) const; const TString&TMVA::MethodBase::GetInputTitle(Int_t i) const; const T",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:5208,Modifiability,Config,Configurable,5208," const TString&TMVA::MethodBase::GetMethodName() const; TMVA::Types::EMVATMVA::MethodBase::GetMethodType() const; TStringTMVA::MethodBase::GetMethodTypeName() const; Double_tGetMinFracNEve() const; virtual vector<Float_t>TMVA::MethodBase::GetMulticlassEfficiency(vector<vector<Float_t> >& purity); virtual vector<Float_t>TMVA::MethodBase::GetMulticlassTrainingEfficiency(vector<vector<Float_t> >& purity); virtual const vector<Float_t>&TMVA::MethodBase::GetMulticlassValues(); virtual Double_tGetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); virtual const char*TMVA::MethodBase::GetName() const; Int_tGetNCuts() const; UInt_tTMVA::MethodBase::GetNEvents() const; UInt_tTMVA::MethodBase::GetNTargets() const; Int_tGetNTrees() const; UInt_tTMVA::MethodBase::GetNvar() const; UInt_tTMVA::MethodBase::GetNVariables() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; virtual Double_tTMVA::MethodBase::GetProba(const TMVA::Event* ev); virtual Double_tTMVA::MethodBase::GetProba(Double_t mvaVal, Double_t ap_sig); const TStringTMVA::MethodBase::GetProbaName() const; TMVA::DecisionTree::EPruneMethodGetPruneMethod() const; Double_tGetPruneStrength() const; virtual Double_tTMVA::MethodBase::GetRarity(Double_t mvaVal, TMVA::Types::ESBType reftype = Types::kBackground) const; virtual voidTMVA::MethodBase::GetRegressionDeviation(UInt_t tgtNum, TMVA::Types::ETreeType type, Double_t& stddev, Double_t& stddev90Percent) const; virtual const vector<Float_t>&TMVA::MethodBase::GetRegressionValues(); const vector<Float_t>&TMVA::MethodBase::GetRegressionValues(const TMVA::Event*const ev); Int_tGetRFNendnodes() const; Int_tGetRFNrules() const; const TStringGetRFWorkDir() const; Double_tTMVA::MethodBase::GetRMS(Int_t ivar) const; virtual Double_tTMVA::MethodBase::GetROCIntegral(TH1D* histS, TH1D* histB) const; virtual Double_tTMVA::MethodBase:",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:8422,Modifiability,Inherit,InheritsFrom,8422,"gTMVA::MethodBase::GetTrainingTMVAVersionString() const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; Double_tGetTreeEveFrac() const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TMVA::MethodBase&); TMVA::MethodBaseTMVA::MethodBase::MethodBase(TMVA::Types::EMVA methodType, TMVA::DataSetInfo& dsi, const TString& weightFile, TDirectory* theBaseDir = 0); TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TString",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:8488,Modifiability,Inherit,InheritsFrom,8488,"MVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; Double_tGetTreeEveFrac() const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TMVA::MethodBase&); TMVA::MethodBaseTMVA::MethodBase::MethodBase(TMVA::Types::EMVA methodType, TMVA::DataSetInfo& dsi, const TString& weightFile, TDirectory* theBaseDir = 0); TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TString& jobName, TMVA::Types::EMVA methodType, const TString& methodTitl",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:10760,Modifiability,Config,Configurable,10760,"ring& theWeightFile, TDirectory* theTargetDir = __null); TMVA::MethodRuleFitMethodRuleFit(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodRuleFit&operator=(const TMVA::MethodRuleFit&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* fil",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:10941,Modifiability,Config,Configurable,10941,"ng& theOption = """", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodRuleFit&operator=(const TMVA::MethodRuleFit&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EA",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:11071,Modifiability,Config,Configurable,11071,"t char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodRuleFit&operator=(const TMVA::MethodRuleFit&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UIn",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:11133,Modifiability,Config,Configurable,11133,"ect::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodRuleFit&operator=(const TMVA::MethodRuleFit&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescripti",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:12108,Modifiability,Config,Configurable,12108,"& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInsp",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:12169,Modifiability,Config,Configurable,12169,"e); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStrea",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:12453,Modifiability,Config,Configurable,12453,"dReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::Method",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:12555,Modifiability,Config,Configurable,12555,"hodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, ",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:14234,Modifiability,Config,Configurable,14234,"ir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); Bool_tUseBoost() const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidWriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:14479,Modifiability,Config,Configurable,14479,"tring& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; virtual voidInit(); voidInitEventSample(); voidInitMonitorNtuple(); Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidMakeClassLinear(ostream&) const; voidMakeClassRuleCuts(ostream&) const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); voidTrainJFRuleFit(); voidTrainTMVARuleFit(); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); virtual voidProcessOptions(). Data Membe",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:14727,Modifiability,Config,Configurable,14727,"tring& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; virtual voidInit(); voidInitEventSample(); voidInitMonitorNtuple(); Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidMakeClassLinear(ostream&) const; voidMakeClassRuleCuts(ostream&) const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); voidTrainJFRuleFit(); voidTrainTMVARuleFit(); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); virtual voidProcessOptions(). Data Membe",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:15236,Modifiability,Config,Configurable,15236,"tring& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; virtual voidInit(); voidInitEventSample(); voidInitMonitorNtuple(); Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidMakeClassLinear(ostream&) const; voidMakeClassRuleCuts(ostream&) const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); voidTrainJFRuleFit(); voidTrainTMVARuleFit(); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); virtual voidProcessOptions(). Data Membe",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:15275,Modifiability,Config,Configurable,15275,"tring& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; virtual voidInit(); voidInitEventSample(); voidInitMonitorNtuple(); Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidMakeClassLinear(ostream&) const; voidMakeClassRuleCuts(ostream&) const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); voidTrainJFRuleFit(); voidTrainTMVARuleFit(); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); virtual voidProcessOptions(). Data Membe",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:15673,Modifiability,Config,Configurable,15673,"tring& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; virtual voidInit(); voidInitEventSample(); voidInitMonitorNtuple(); Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidMakeClassLinear(ostream&) const; voidMakeClassRuleCuts(ostream&) const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); voidTrainJFRuleFit(); voidTrainTMVARuleFit(); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); virtual voidProcessOptions(). Data Membe",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:16165,Modifiability,Config,Configurable,16165,"tring& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; virtual voidInit(); voidInitEventSample(); voidInitMonitorNtuple(); Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidMakeClassLinear(ostream&) const; voidMakeClassRuleCuts(ostream&) const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); voidTrainJFRuleFit(); voidTrainTMVARuleFit(); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); virtual voidProcessOptions(). Data Membe",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:17598,Modifiability,variab,variables,17598,"atusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. vector<TMVA::Event*>fEventSamplethe complete training sample; vector<TMVA::DecisionTree*>fForestthe forest; TStringfForestTypeSforest generation: how the trees are generated; Double_tfGDErrScaleGD path: stop; Int_tfGDNPathStepsGD path: number of steps; Double_tfGDPathEveFracGD path: fraction of subsamples used for the fitting; Double_tfGDPathStepGD path: step size in path; Double_tfGDTauGD path: def threshhold fraction [0..1]; Double_tfGDTauMaxGD path: max threshhold fraction [0..1]; Double_tfGDTauMinGD path: min threshhold fraction [0..1]; Double_",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:17787,Modifiability,variab,variable,17787,"atusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. vector<TMVA::Event*>fEventSamplethe complete training sample; vector<TMVA::DecisionTree*>fForestthe forest; TStringfForestTypeSforest generation: how the trees are generated; Double_tfGDErrScaleGD path: stop; Int_tfGDNPathStepsGD path: number of steps; Double_tfGDPathEveFracGD path: fraction of subsamples used for the fitting; Double_tfGDPathStepGD path: step size in path; Double_tfGDTauGD path: def threshhold fraction [0..1]; Double_tfGDTauMaxGD path: max threshhold fraction [0..1]; Double_tfGDTauMinGD path: min threshhold fraction [0..1]; Double_",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:20925,Modifiability,Inherit,Inheritance,20925,"eneration: method used for pruning - see DecisionTree; TStringfPruneMethodSforest generation: prune method - see DecisionTree; Double_tfPruneStrengthforest generation: prune strength - see DecisionTree; Int_tfRFNendnodesmax number of rules (only Friedmans module); Int_tfRFNrulesmax number of rules (only Friedmans module); TStringfRFWorkDirworking directory from Friedmans module; TMVA::RuleFitfRuleFitRuleFit instance; TStringfRuleFitModuleSwhich rulefit module to use; Double_tfRuleMinDistrule min distance - see RuleEnsemble; TMVA::SeparationBase*fSepTypethe separation used in node splitting; TStringfSepTypeSforest generation: separation type - see DecisionTree; Double_tfSignalFractionscalefactor for bkg events to modify initial s/b fraction in training data; Double_tfTreeEveFracfraction of events used for traing each tree; Bool_tfUseBoostuse boosted events for forest generation; Bool_tfUseRuleFitJFif true interface with J.Friedmans RuleFit module. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodRuleFit(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodRuleFit(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. ~MethodRuleFit( void ); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t ); RuleFit can handle classification with 2 classes. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options. general. RuleFitModule <string>; available values are: RFTMVA - use TMVA implementation; RFFriedman - use Friedmans original implementation. Path search (fitting). GDTau <float> gradient-directed path: fit threshhold, default; GDTauPrec <float> gradient-directed path: precision of estimated tau; GDStep <float> gradient-directed path: step size; ",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:20938,Modifiability,Inherit,Inherited,20938,"eneration: method used for pruning - see DecisionTree; TStringfPruneMethodSforest generation: prune method - see DecisionTree; Double_tfPruneStrengthforest generation: prune strength - see DecisionTree; Int_tfRFNendnodesmax number of rules (only Friedmans module); Int_tfRFNrulesmax number of rules (only Friedmans module); TStringfRFWorkDirworking directory from Friedmans module; TMVA::RuleFitfRuleFitRuleFit instance; TStringfRuleFitModuleSwhich rulefit module to use; Double_tfRuleMinDistrule min distance - see RuleEnsemble; TMVA::SeparationBase*fSepTypethe separation used in node splitting; TStringfSepTypeSforest generation: separation type - see DecisionTree; Double_tfSignalFractionscalefactor for bkg events to modify initial s/b fraction in training data; Double_tfTreeEveFracfraction of events used for traing each tree; Bool_tfUseBoostuse boosted events for forest generation; Bool_tfUseRuleFitJFif true interface with J.Friedmans RuleFit module. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodRuleFit(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodRuleFit(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. ~MethodRuleFit( void ); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t ); RuleFit can handle classification with 2 classes. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options. general. RuleFitModule <string>; available values are: RFTMVA - use TMVA implementation; RFFriedman - use Friedmans original implementation. Path search (fitting). GDTau <float> gradient-directed path: fit threshhold, default; GDTauPrec <float> gradient-directed path: precision of estimated tau; GDStep <float> gradient-directed path: step size; ",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:22364,Modifiability,variab,variables,22364,"ctor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t ); RuleFit can handle classification with 2 classes. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options. general. RuleFitModule <string>; available values are: RFTMVA - use TMVA implementation; RFFriedman - use Friedmans original implementation. Path search (fitting). GDTau <float> gradient-directed path: fit threshhold, default; GDTauPrec <float> gradient-directed path: precision of estimated tau; GDStep <float> gradient-directed path: step size; GDNSteps <float> gradient-directed path: number of steps; GDErrScale <float> stop scan when error>scale*errmin. Tree generation. fEventsMin <float> minimum fraction of events in a splittable node; fEventsMax <float> maximum fraction of events in a splittable node; nTrees <float> number of trees in forest.; ForestType <string>; available values are: Random - create forest using random subsample and only random variables subset at each node; AdaBoost - create forest with boosted events. Model creation. RuleMinDist <float> min distance allowed between rules; MinImp <float> minimum rule importance accepted; Model <string> model to be used; available values are: ModRuleLinear <default>; ModRule; ModLinear. Friedmans module. RFWorkDir <string> directory where Friedmans module (rf_go.exe) is installed; RFNrules <int> maximum number of rules allowed; RFNendnodes <int> average number of end nodes in the forest of trees. void ProcessOptions(); process the options specified by the user. void InitMonitorNtuple(); initialize the monitoring ntuple. void Init(); default initialization. void InitEventSample( void ); write all Events from the Tree into a vector of Events, that are; more easily manipulated.; This method should never be called without existing trainingTree, as it; the vector of events from the ROOT training tree. void Train( void ). void TrainTMVARuleFit( void ); training of ru",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:23530,Modifiability,variab,variables,23530,"een rules; MinImp <float> minimum rule importance accepted; Model <string> model to be used; available values are: ModRuleLinear <default>; ModRule; ModLinear. Friedmans module. RFWorkDir <string> directory where Friedmans module (rf_go.exe) is installed; RFNrules <int> maximum number of rules allowed; RFNendnodes <int> average number of end nodes in the forest of trees. void ProcessOptions(); process the options specified by the user. void InitMonitorNtuple(); initialize the monitoring ntuple. void Init(); default initialization. void InitEventSample( void ); write all Events from the Tree into a vector of Events, that are; more easily manipulated.; This method should never be called without existing trainingTree, as it; the vector of events from the ROOT training tree. void Train( void ). void TrainTMVARuleFit( void ); training of rules using TMVA implementation. void TrainJFRuleFit( void ); training of rules using Jerome Friedmans implementation. const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void AddWeightsXMLTo(void* parent) const; add the rules to XML node. void ReadWeightsFromStream(istream& istr); read rules from an std::istream. void ReadWeightsFromXML(void* wghtnode); read rules from XML node. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns MVA value for given event. void WriteMonitoringHistosToFile( void ); write special monitoring histograms to file (here ntuple). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void MakeClassRuleCuts(ostream& ) const; print out the rule cuts. void MakeClassLinear(ostream& ) const; print out the linear terms. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodRuleFit(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0). Bool_t UseBoost(",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:10605,Performance,Optimiz,OptimizeTuningParameters,10605,"BaseDir() const; TMVA::MethodRuleFitMethodRuleFit(const TMVA::MethodRuleFit&); TMVA::MethodRuleFitMethodRuleFit(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); TMVA::MethodRuleFitMethodRuleFit(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodRuleFit&operator=(const TMVA::MethodRuleFit&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::Transformatio",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:12980,Performance,tune,tuneParameters,12980,"::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); Bool_tUseBoost() const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0);",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:8170,Security,Hash,Hash,8170,"ievt) const; const vector<TMVA::Event*>&GetTrainingEvents() const; UInt_tTMVA::MethodBase::GetTrainingROOTVersionCode() const; TStringTMVA::MethodBase::GetTrainingROOTVersionString() const; UInt_tTMVA::MethodBase::GetTrainingTMVAVersionCode() const; TStringTMVA::MethodBase::GetTrainingTMVAVersionString() const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; Double_tGetTreeEveFrac() const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::Method",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:24561,Security,access,accessors,24561,"ghtsXMLTo(void* parent) const; add the rules to XML node. void ReadWeightsFromStream(istream& istr); read rules from an std::istream. void ReadWeightsFromXML(void* wghtnode); read rules from XML node. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns MVA value for given event. void WriteMonitoringHistosToFile( void ); write special monitoring histograms to file (here ntuple). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void MakeClassRuleCuts(ostream& ) const; print out the rule cuts. void MakeClassLinear(ostream& ) const; print out the linear terms. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodRuleFit(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0). Bool_t UseBoost() const; { return fUseBoost; }. RuleFit* GetRuleFitPtr(); accessors. { return &fRuleFit; }. const RuleFit* GetRuleFitConstPtr() const; { return &fRuleFit; }. TDirectory* GetMethodBaseDir() const; { return BaseDir(); }. const std::vector<TMVA::Event*>& GetTrainingEvents() const; { return fEventSample; }. const std::vector<TMVA::DecisionTree*>& GetForest() const; { return fForest; }. Int_t GetNTrees() const; { return fNTrees; }. Double_t GetTreeEveFrac() const; { return fTreeEveFrac; }. const SeparationBase* GetSeparationBaseConst() const; { return fSepType; }. SeparationBase* GetSeparationBase() const; { return fSepType; }. TMVA::DecisionTree::EPruneMethod GetPruneMethod() const; { return fPruneMethod; }. Double_t GetPruneStrength() const; { return fPruneStrength; }. Double_t GetMinFracNEve() const; { return fMinFracNEve; }. Double_t GetMaxFracNEve() const; { return fMaxFracNEve; }. Int_t GetNCuts() const. { return fNCuts; }. Int_t GetGDNPathSteps() const; { return fGDNPathSteps; }. Double_t GetGDPathStep() const; { return fGDPathStep;",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:12782,Testability,test,testTime,12782,"t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); Bool_tUseBoost() const; vi",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:13319,Testability,Test,TestBit,13319,"idTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); Bool_tUseBoost() const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidWriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::Me",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:13358,Testability,Test,TestBits,13358,"ir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); Bool_tUseBoost() const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidWriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:13414,Testability,Test,TestClassification,13414,"ir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); Bool_tUseBoost() const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidWriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:13466,Testability,Test,TestMulticlass,13466,"ir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); Bool_tUseBoost() const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidWriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:13514,Testability,Test,TestRegression,13514,"ir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); Bool_tUseBoost() const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidWriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:15250,Testability,Log,Log,15250,"tring& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; virtual voidInit(); voidInitEventSample(); voidInitMonitorNtuple(); Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidMakeClassLinear(ostream&) const; voidMakeClassRuleCuts(ostream&) const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); voidTrainJFRuleFit(); voidTrainTMVARuleFit(); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); virtual voidProcessOptions(). Data Membe",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:16427,Testability,test,testing,16427,":MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); voidTrainJFRuleFit(); voidTrainTMVARuleFit(); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodRuleFit.html:1019,Usability,Clear,Clear,1019," virtual~MethodRuleFit(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") co",MatchSource.WIKI,root/html604/TMVA__MethodRuleFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodRuleFit.html
https://root.cern/root/html604/TMVA__MethodSVM.html:2030,Availability,Error,Error,2030,"ect::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMV",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:2159,Availability,error,error,2159,"Object* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:2243,Availability,error,error,2243,"& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollec",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:18628,Availability,avail,available,18628,"tfOrderfor Polynomial Kernel ( polynomial order ); TMVA::SVKernelFunction*fSVKernelFunctionkernel function; vector<TMVA::SVEvent*>*fSupportVectorscontains support vectors; TStringfTheKernelkernel name; Float_tfThetafor Sigmoidal Kernel; Float_tfTolerancetolerance parameter; TMVA::SVWorkingSet*fWgSetsvm working set. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodSVM(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodSVM(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. ~MethodSVM(); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); SVM can handle classification with 2 classes and regression with one regression-target. void Init(); default initialisation. void DeclareOptions(); declare options available for this method. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility. void ProcessOptions(); option post processing (if necessary). void Train(); Train SVM. void AddWeightsXMLTo(void* parent) const; write configuration to xml file. void ReadWeightsFromXML(void* wghtnode). void WriteWeightsToStream(TFile& fout) const; TODO write IT; write training sample (TTree) to file. void ReadWeightsFromStream(istream& istr). void ReadWeightsFromStream(TFile& fFin); TODO write IT. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns MVA value for given event. const std::vector<Float_t>& GetRegressionValues(). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodSVM(const TString& jobName, const TString& methodTi",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:18902,Deployability,configurat,configuration,18902,"eter; TMVA::SVWorkingSet*fWgSetsvm working set. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodSVM(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodSVM(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. ~MethodSVM(); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); SVM can handle classification with 2 classes and regression with one regression-target. void Init(); default initialisation. void DeclareOptions(); declare options available for this method. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility. void ProcessOptions(); option post processing (if necessary). void Train(); Train SVM. void AddWeightsXMLTo(void* parent) const; write configuration to xml file. void ReadWeightsFromXML(void* wghtnode). void WriteWeightsToStream(TFile& fout) const; TODO write IT; write training sample (TTree) to file. void ReadWeightsFromStream(istream& istr). void ReadWeightsFromStream(TFile& fFin); TODO write IT. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns MVA value for given event. const std::vector<Float_t>& GetRegressionValues(). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodSVM(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0). const Ranking* CreateRanking(); ranking of input variables. { return 0; }. » Author: Marcin Wolter, Andrzej Zemla » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Las",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:19452,Integrability,message,message,19452," methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodSVM(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. ~MethodSVM(); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); SVM can handle classification with 2 classes and regression with one regression-target. void Init(); default initialisation. void DeclareOptions(); declare options available for this method. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility. void ProcessOptions(); option post processing (if necessary). void Train(); Train SVM. void AddWeightsXMLTo(void* parent) const; write configuration to xml file. void ReadWeightsFromXML(void* wghtnode). void WriteWeightsToStream(TFile& fout) const; TODO write IT; write training sample (TTree) to file. void ReadWeightsFromStream(istream& istr). void ReadWeightsFromStream(TFile& fFin); TODO write IT. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns MVA value for given event. const std::vector<Float_t>& GetRegressionValues(). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodSVM(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0). const Ranking* CreateRanking(); ranking of input variables. { return 0; }. » Author: Marcin Wolter, Andrzej Zemla » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:502,Modifiability,Config,Configurable,502," virtual~MethodSVM(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() cons",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:858,Modifiability,Config,Configurable,858," virtual~MethodSVM(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() cons",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:1188,Modifiability,Config,ConfigurableTMVA,1188," virtual~MethodSVM(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() cons",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:1206,Modifiability,Config,Configurable,1206," virtual~MethodSVM(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() cons",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:1220,Modifiability,Config,Configurable,1220," virtual~MethodSVM(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() cons",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:1271,Modifiability,Config,ConfigurableTMVA,1271," virtual~MethodSVM(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() cons",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:1289,Modifiability,Config,Configurable,1289," virtual~MethodSVM(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() cons",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:1303,Modifiability,Config,Configurable,1303," virtual~MethodSVM(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() cons",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:1328,Modifiability,Config,Configurable,1328," virtual~MethodSVM(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() cons",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:2607,Modifiability,Config,Configurable,2607,"ase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollection(TMVA::Types::ETreeType type); virtual const char*TObject::GetIconName() const; const TString&TMVA::MethodBase::GetInputLabel(Int_t i) const; const TString&TMVA::MethodBase::GetInputTitle(Int_t i) const; const TString&TMVA::MethodBase::GetInputVar(Int_t i) const; const TString&TMVA::MethodBase::GetJobName() const; virtual Double_tTMVA::MethodBase::GetKSTrainingV",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:2668,Modifiability,Config,Configurable,2668,"tancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollection(TMVA::Types::ETreeType type); virtual const char*TObject::GetIconName() const; const TString&TMVA::MethodBase::GetInputLabel(Int_t i) const; const TString&TMVA::MethodBase::GetInputTitle(Int_t i) const; const TString&TMVA::MethodBase::GetInputVar(Int_t i) const; const TString&TMVA::MethodBase::GetJobName() const; virtual Double_tTMVA::MethodBase::GetKSTrainingVsTest(Char_t SorB, TString opt = ""X""); virtual Double_tTMVA::",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:4772,Modifiability,Config,Configurable,4772,"significance_value) const; Double_tTMVA::MethodBase::GetMean(Int_t ivar) const; const TString&TMVA::MethodBase::GetMethodName() const; TMVA::Types::EMVATMVA::MethodBase::GetMethodType() const; TStringTMVA::MethodBase::GetMethodTypeName() const; virtual vector<Float_t>TMVA::MethodBase::GetMulticlassEfficiency(vector<vector<Float_t> >& purity); virtual vector<Float_t>TMVA::MethodBase::GetMulticlassTrainingEfficiency(vector<vector<Float_t> >& purity); virtual const vector<Float_t>&TMVA::MethodBase::GetMulticlassValues(); virtual Double_tGetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); virtual const char*TMVA::MethodBase::GetName() const; UInt_tTMVA::MethodBase::GetNEvents() const; UInt_tTMVA::MethodBase::GetNTargets() const; UInt_tTMVA::MethodBase::GetNvar() const; UInt_tTMVA::MethodBase::GetNVariables() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; virtual Double_tTMVA::MethodBase::GetProba(const TMVA::Event* ev); virtual Double_tTMVA::MethodBase::GetProba(Double_t mvaVal, Double_t ap_sig); const TStringTMVA::MethodBase::GetProbaName() const; virtual Double_tTMVA::MethodBase::GetRarity(Double_t mvaVal, TMVA::Types::ESBType reftype = Types::kBackground) const; virtual voidTMVA::MethodBase::GetRegressionDeviation(UInt_t tgtNum, TMVA::Types::ETreeType type, Double_t& stddev, Double_t& stddev90Percent) const; virtual const vector<Float_t>&GetRegressionValues(); Double_tTMVA::MethodBase::GetRMS(Int_t ivar) const; virtual Double_tTMVA::MethodBase::GetROCIntegral(TH1D* histS, TH1D* histB) const; virtual Double_tTMVA::MethodBase::GetROCIntegral(TMVA::PDF* pdfS = 0, TMVA::PDF* pdfB = 0) const; virtual Double_tTMVA::MethodBase::GetSeparation(TH1*, TH1*) const; virtual Double_tTMVA::MethodBase::GetSeparation(TMVA::PDF* pdfS = 0, TMVA::PDF* pdfB = 0) const; Double_tTMVA::MethodBase::GetSignalReferenceCut() const; D",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:7441,Modifiability,Inherit,InheritsFrom,7441,"de() const; TStringTMVA::MethodBase::GetTrainingTMVAVersionString() const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TMVA::MethodBase&); TMVA::MethodBaseTMVA::MethodBase::MethodBase(TMVA::Types::EMVA methodType, TMVA::DataSetInfo& dsi, const TString& weightFile, TDirectory* theBaseDir = 0); TMVA::MethodBaseTMVA::MethodBase::Meth",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:7507,Modifiability,Inherit,InheritsFrom,7507,") const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TMVA::MethodBase&); TMVA::MethodBaseTMVA::MethodBase::MethodBase(TMVA::Types::EMVA methodType, TMVA::DataSetInfo& dsi, const TString& weightFile, TDirectory* theBaseDir = 0); TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TString& jobName, TMVA::Types::EMVA methodType, const",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:9763,Modifiability,Config,Configurable,9763,"eData, const TString& theWeightFile, TDirectory* theTargetDir = __null); TMVA::MethodSVMMethodSVM(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodSVM&operator=(const TMVA::MethodSVM&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& fFin); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:9944,Modifiability,Config,Configurable,9944,"st TString& theOption = """", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodSVM&operator=(const TMVA::MethodSVM&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& fFin); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidT",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:10074,Modifiability,Config,Configurable,10074,"od, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodSVM&operator=(const TMVA::MethodSVM&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& fFin); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTO",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:10136,Modifiability,Config,Configurable,10136,"voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodSVM&operator=(const TMVA::MethodSVM&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& fFin); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t ",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:11159,Modifiability,Config,Configurable,11159,"XML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& fFin); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInsp",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:11220,Modifiability,Config,Configurable,11220,"oidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& fFin); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStrea",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:11504,Modifiability,Config,Configurable,11504,"dReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::Method",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:11606,Modifiability,Config,Configurable,11606,"hodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, ",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:13279,Modifiability,Config,Configurable,13279,"thodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& fout) const.",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:13569,Modifiability,Config,Configurable,13569,"gurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& fout) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompleted",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:13817,Modifiability,Config,Configurable,13817,"gurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& fout) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompleted",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:14258,Modifiability,Config,Configurable,14258,"gurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& fout) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompleted",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:14297,Modifiability,Config,Configurable,14297,"gurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& fout) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompleted",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:14619,Modifiability,Config,Configurable,14619,"gurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& fout) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompleted",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:15065,Modifiability,Config,Configurable,15065,"gurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& fout) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompleted",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:16541,Modifiability,variab,variables,16541,"atusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Float_tfBparmfree plane coefficient; Float_tfCostcost value; Float_tfDoubleSigmaSquaredfor RBF Kernel; Float_tfGammaRBF Kernel parameter; vector<TMVA::SVEvent*>*fInputDatavector of training data in SVM format; Float_tfKappafor Sigmoidal Kernel; UInt_tfMaxItermax number of iteration; TVectorD*fMaxVarsfor normalization //is it still needed??; TVectorD*fMinVarsfor normalization //is it still needed??; UShort_tfNSubSetsnr of subsets, default 1; Int_tfOrderfor Polynomial Kernel ( polynomial order ); TMVA::SVKernelFunction*fSVKernelFunctionkernel functio",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:16730,Modifiability,variab,variable,16730,"atusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Float_tfBparmfree plane coefficient; Float_tfCostcost value; Float_tfDoubleSigmaSquaredfor RBF Kernel; Float_tfGammaRBF Kernel parameter; vector<TMVA::SVEvent*>*fInputDatavector of training data in SVM format; Float_tfKappafor Sigmoidal Kernel; UInt_tfMaxItermax number of iteration; TVectorD*fMaxVarsfor normalization //is it still needed??; TVectorD*fMinVarsfor normalization //is it still needed??; UShort_tfNSubSetsnr of subsets, default 1; Int_tfOrderfor Polynomial Kernel ( polynomial order ); TMVA::SVKernelFunction*fSVKernelFunctionkernel functio",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:17952,Modifiability,Inherit,Inheritance,17952,"y derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Float_tfBparmfree plane coefficient; Float_tfCostcost value; Float_tfDoubleSigmaSquaredfor RBF Kernel; Float_tfGammaRBF Kernel parameter; vector<TMVA::SVEvent*>*fInputDatavector of training data in SVM format; Float_tfKappafor Sigmoidal Kernel; UInt_tfMaxItermax number of iteration; TVectorD*fMaxVarsfor normalization //is it still needed??; TVectorD*fMinVarsfor normalization //is it still needed??; UShort_tfNSubSetsnr of subsets, default 1; Int_tfOrderfor Polynomial Kernel ( polynomial order ); TMVA::SVKernelFunction*fSVKernelFunctionkernel function; vector<TMVA::SVEvent*>*fSupportVectorscontains support vectors; TStringfTheKernelkernel name; Float_tfThetafor Sigmoidal Kernel; Float_tfTolerancetolerance parameter; TMVA::SVWorkingSet*fWgSetsvm working set. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodSVM(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodSVM(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. ~MethodSVM(); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); SVM can handle classification with 2 classes and regression with one regression-target. void Init(); default initialisation. void DeclareOptions(); declare options available for this method. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility. void ProcessOptions(); option post processing (if necessary). void Train(); Train SVM. void AddWeightsXMLTo(void* parent) const; write configuration to xml file. void ReadWeightsFromXML(void* wghtnode). void Wri",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:17965,Modifiability,Inherit,Inherited,17965,"y derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Float_tfBparmfree plane coefficient; Float_tfCostcost value; Float_tfDoubleSigmaSquaredfor RBF Kernel; Float_tfGammaRBF Kernel parameter; vector<TMVA::SVEvent*>*fInputDatavector of training data in SVM format; Float_tfKappafor Sigmoidal Kernel; UInt_tfMaxItermax number of iteration; TVectorD*fMaxVarsfor normalization //is it still needed??; TVectorD*fMinVarsfor normalization //is it still needed??; UShort_tfNSubSetsnr of subsets, default 1; Int_tfOrderfor Polynomial Kernel ( polynomial order ); TMVA::SVKernelFunction*fSVKernelFunctionkernel function; vector<TMVA::SVEvent*>*fSupportVectorscontains support vectors; TStringfTheKernelkernel name; Float_tfThetafor Sigmoidal Kernel; Float_tfTolerancetolerance parameter; TMVA::SVWorkingSet*fWgSetsvm working set. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodSVM(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodSVM(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. ~MethodSVM(); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); SVM can handle classification with 2 classes and regression with one regression-target. void Init(); default initialisation. void DeclareOptions(); declare options available for this method. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility. void ProcessOptions(); option post processing (if necessary). void Train(); Train SVM. void AddWeightsXMLTo(void* parent) const; write configuration to xml file. void ReadWeightsFromXML(void* wghtnode). void Wri",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:18902,Modifiability,config,configuration,18902,"eter; TMVA::SVWorkingSet*fWgSetsvm working set. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodSVM(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodSVM(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. ~MethodSVM(); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); SVM can handle classification with 2 classes and regression with one regression-target. void Init(); default initialisation. void DeclareOptions(); declare options available for this method. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility. void ProcessOptions(); option post processing (if necessary). void Train(); Train SVM. void AddWeightsXMLTo(void* parent) const; write configuration to xml file. void ReadWeightsFromXML(void* wghtnode). void WriteWeightsToStream(TFile& fout) const; TODO write IT; write training sample (TTree) to file. void ReadWeightsFromStream(istream& istr). void ReadWeightsFromStream(TFile& fFin); TODO write IT. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns MVA value for given event. const std::vector<Float_t>& GetRegressionValues(). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodSVM(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0). const Ranking* CreateRanking(); ranking of input variables. { return 0; }. » Author: Marcin Wolter, Andrzej Zemla » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Las",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:19765,Modifiability,variab,variables,19765," methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodSVM(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. ~MethodSVM(); destructor. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); SVM can handle classification with 2 classes and regression with one regression-target. void Init(); default initialisation. void DeclareOptions(); declare options available for this method. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility. void ProcessOptions(); option post processing (if necessary). void Train(); Train SVM. void AddWeightsXMLTo(void* parent) const; write configuration to xml file. void ReadWeightsFromXML(void* wghtnode). void WriteWeightsToStream(TFile& fout) const; TODO write IT; write training sample (TTree) to file. void ReadWeightsFromStream(istream& istr). void ReadWeightsFromStream(TFile& fFin); TODO write IT. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns MVA value for given event. const std::vector<Float_t>& GetRegressionValues(). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodSVM(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0). const Ranking* CreateRanking(); ranking of input variables. { return 0; }. » Author: Marcin Wolter, Andrzej Zemla » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:9608,Performance,Optimiz,OptimizeTuningParameters,9608," TDirectory*TMVA::MethodBase::MethodBaseDir() const; TMVA::MethodSVMMethodSVM(const TMVA::MethodSVM&); TMVA::MethodSVMMethodSVM(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); TMVA::MethodSVMMethodSVM(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodSVM&operator=(const TMVA::MethodSVM&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromStream(TFile& fFin); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:12031,Performance,tune,tuneParameters,12031,"::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::W",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:7189,Security,Hash,Hash,7189,"String&); const TMVA::Event*TMVA::MethodBase::GetTrainingEvent(Long64_t ievt) const; UInt_tTMVA::MethodBase::GetTrainingROOTVersionCode() const; TStringTMVA::MethodBase::GetTrainingROOTVersionString() const; UInt_tTMVA::MethodBase::GetTrainingTMVAVersionCode() const; TStringTMVA::MethodBase::GetTrainingTMVAVersionString() const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::Me",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:11833,Testability,test,testTime,11833,"t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCu",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:12370,Testability,Test,TestBit,12370,"idTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBa",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:12409,Testability,Test,TestBits,12409,"irectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteW",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:12465,Testability,Test,TestClassification,12465,"thodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& fout) const.",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:12517,Testability,Test,TestMulticlass,12517,"thodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& fout) const.",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:12565,Testability,Test,TestRegression,12565,"thodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& fout) const.",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:14272,Testability,Log,Log,14272,"gurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const; voidWriteWeightsToStream(TFile& fout) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompleted",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:15370,Testability,test,testing,15370,"VA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodSVM.html:1038,Usability,Clear,Clear,1038," virtual~MethodSVM(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() cons",MatchSource.WIKI,root/html604/TMVA__MethodSVM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodSVM.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:473,Availability,Avail,Available,473,". TMVA::MethodTMlpANN. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodTMlpANN. class TMVA::MethodTMlpANN: public TMVA::MethodBase. This is the TMVA TMultiLayerPerceptron interface class. It provides the; training and testing the ROOT internal MLP class in the TMVA framework.; Available learning methods:. Stochastic ; Batch ; SteepestDescent ; RibierePolak ; FletcherReeves ; BFGS . . See the TMultiLayerPerceptron class description; for details on this ANN. Function Members (Methods); public:. virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual In",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:2372,Availability,Error,Error,2372,"nst char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMV",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:2501,Availability,error,error,2501,"figurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:2585,Availability,error,error,2585,"igurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollec",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:19686,Availability,avail,available,19686,"oid ); destructor. void CreateMLPOptions(TString ); translates options from option string into TMlpANN language. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; NCycles <integer> Number of training cycles (too many cycles could overtrain the network); HiddenLayers <string> Layout of the hidden layers (nodes per layer); * specifiactions for each hidden layer are separated by commata; * for each layer the number of nodes can be either absolut (simply a number); or relative to the number of input nodes to the neural net (N); * there is always a single node in the output layer; example: a net with 6 input nodes and ""Hiddenlayers=N-1,N-2"" has 6,5,4,1 nodes in the; layers 1,2,3,4, repectively. void ProcessOptions(); builds the neural network as specified by the user. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); calculate the value of the neural net for the current event. void Train( void ); performs TMlpANN training; available learning methods:. TMultiLayerPerceptron::kStochastic; TMultiLayerPerceptron::kBatch; TMultiLayerPerceptron::kSteepestDescent; TMultiLayerPerceptron::kRibierePolak; TMultiLayerPerceptron::kFletcherReeves; TMultiLayerPerceptron::kBFGS. TMultiLayerPerceptron wants test and training tree at once; so merge the training and testing trees from the MVA factory first:. void AddWeightsXMLTo(void* parent) const; write weights to xml file. void ReadWeightsFromXML(void* wghtnode); rebuild temporary textfile from xml weightfile and load this; file into MLP. void ReadWeightsFromStream(istream& istr); read weights from stream; since the MLP can not read from the stream, we; 1st: write the weights to temporary file. void MakeClass(const TString& classFileName = TString("""")) const; create reader class for classifier -> overwrites base class function; create specific class for TMultiLayerPerceptron. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier r",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:366,Integrability,interface,interface,366,". TMVA::MethodTMlpANN. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodTMlpANN. class TMVA::MethodTMlpANN: public TMVA::MethodBase. This is the TMVA TMultiLayerPerceptron interface class. It provides the; training and testing the ROOT internal MLP class in the TMVA framework.; Available learning methods:. Stochastic ; Batch ; SteepestDescent ; RibierePolak ; FletcherReeves ; BFGS . . See the TMultiLayerPerceptron class description; for details on this ANN. Function Members (Methods); public:. virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual In",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:20788,Integrability,message,message,20788,"ue(Double_t* err = 0, Double_t* errUpper = 0); calculate the value of the neural net for the current event. void Train( void ); performs TMlpANN training; available learning methods:. TMultiLayerPerceptron::kStochastic; TMultiLayerPerceptron::kBatch; TMultiLayerPerceptron::kSteepestDescent; TMultiLayerPerceptron::kRibierePolak; TMultiLayerPerceptron::kFletcherReeves; TMultiLayerPerceptron::kBFGS. TMultiLayerPerceptron wants test and training tree at once; so merge the training and testing trees from the MVA factory first:. void AddWeightsXMLTo(void* parent) const; write weights to xml file. void ReadWeightsFromXML(void* wghtnode); rebuild temporary textfile from xml weightfile and load this; file into MLP. void ReadWeightsFromStream(istream& istr); read weights from stream; since the MLP can not read from the stream, we; 1st: write the weights to temporary file. void MakeClass(const TString& classFileName = TString("""")) const; create reader class for classifier -> overwrites base class function; create specific class for TMultiLayerPerceptron. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response; nothing to do here - all taken care of by TMultiLayerPerceptron. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodTMlpANN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""3000:N-1:N-2"", TDirectory* theTargetDir = 0). void SetHiddenLayer(TString hiddenlayer = """"); { fHiddenLayer=hiddenlayer; }. const Ranking* CreateRanking(); ranking of input variables. { return 0; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:783,Modifiability,Config,Configurable,783," virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual In",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:1139,Modifiability,Config,Configurable,1139," virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual In",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:1469,Modifiability,Config,ConfigurableTMVA,1469," virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual In",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:1487,Modifiability,Config,Configurable,1487," virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual In",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:1501,Modifiability,Config,Configurable,1501," virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual In",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:1552,Modifiability,Config,ConfigurableTMVA,1552," virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual In",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:1570,Modifiability,Config,Configurable,1570," virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual In",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:1584,Modifiability,Config,Configurable,1584," virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual In",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:1609,Modifiability,Config,Configurable,1609," virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual In",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:2949,Modifiability,Config,Configurable,2949,"ase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollection(TMVA::Types::ETreeType type); virtual const char*TObject::GetIconName() const; const TString&TMVA::MethodBase::GetInputLabel(Int_t i) const; const TString&TMVA::MethodBase::GetInputTitle(Int_t i) const; const TString&TMVA::MethodBase::GetInputVar(Int_t i) const; const TString&TMVA::MethodBase::GetJobName() const; virtual Double_tTMVA::MethodBase::GetKSTrainingV",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:3010,Modifiability,Config,Configurable,3010,"tancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&TMVA::MethodBase::GetEventCollection(TMVA::Types::ETreeType type); virtual const char*TObject::GetIconName() const; const TString&TMVA::MethodBase::GetInputLabel(Int_t i) const; const TString&TMVA::MethodBase::GetInputTitle(Int_t i) const; const TString&TMVA::MethodBase::GetInputVar(Int_t i) const; const TString&TMVA::MethodBase::GetJobName() const; virtual Double_tTMVA::MethodBase::GetKSTrainingVsTest(Char_t SorB, TString opt = ""X""); virtual Double_tTMVA::",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:5114,Modifiability,Config,Configurable,5114,"significance_value) const; Double_tTMVA::MethodBase::GetMean(Int_t ivar) const; const TString&TMVA::MethodBase::GetMethodName() const; TMVA::Types::EMVATMVA::MethodBase::GetMethodType() const; TStringTMVA::MethodBase::GetMethodTypeName() const; virtual vector<Float_t>TMVA::MethodBase::GetMulticlassEfficiency(vector<vector<Float_t> >& purity); virtual vector<Float_t>TMVA::MethodBase::GetMulticlassTrainingEfficiency(vector<vector<Float_t> >& purity); virtual const vector<Float_t>&TMVA::MethodBase::GetMulticlassValues(); virtual Double_tGetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); virtual const char*TMVA::MethodBase::GetName() const; UInt_tTMVA::MethodBase::GetNEvents() const; UInt_tTMVA::MethodBase::GetNTargets() const; UInt_tTMVA::MethodBase::GetNvar() const; UInt_tTMVA::MethodBase::GetNVariables() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; virtual Double_tTMVA::MethodBase::GetProba(const TMVA::Event* ev); virtual Double_tTMVA::MethodBase::GetProba(Double_t mvaVal, Double_t ap_sig); const TStringTMVA::MethodBase::GetProbaName() const; virtual Double_tTMVA::MethodBase::GetRarity(Double_t mvaVal, TMVA::Types::ESBType reftype = Types::kBackground) const; virtual voidTMVA::MethodBase::GetRegressionDeviation(UInt_t tgtNum, TMVA::Types::ETreeType type, Double_t& stddev, Double_t& stddev90Percent) const; virtual const vector<Float_t>&TMVA::MethodBase::GetRegressionValues(); const vector<Float_t>&TMVA::MethodBase::GetRegressionValues(const TMVA::Event*const ev); Double_tTMVA::MethodBase::GetRMS(Int_t ivar) const; virtual Double_tTMVA::MethodBase::GetROCIntegral(TH1D* histS, TH1D* histB) const; virtual Double_tTMVA::MethodBase::GetROCIntegral(TMVA::PDF* pdfS = 0, TMVA::PDF* pdfB = 0) const; virtual Double_tTMVA::MethodBase::GetSeparation(TH1*, TH1*) const; virtual Double_tTMVA::MethodBase::GetSeparation(",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:7890,Modifiability,Inherit,InheritsFrom,7890,"de() const; TStringTMVA::MethodBase::GetTrainingTMVAVersionString() const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidMakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TMVA::MethodBase&); TMVA::MethodBaseTMVA::MethodBase::MethodBase(TMVA::Types::EMVA methodType, TMVA::DataSetInfo& dsi, const TString& weightFile, TDirectory* theBaseDir = 0); TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TString& jobName, TMVA::T",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:7956,Modifiability,Inherit,InheritsFrom,7956,") const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidMakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TMVA::MethodBase&); TMVA::MethodBaseTMVA::MethodBase::MethodBase(TMVA::Types::EMVA methodType, TMVA::DataSetInfo& dsi, const TString& weightFile, TDirectory* theBaseDir = 0); TMVA::MethodBaseTMVA::MethodBase::MethodBase(const TString& jobName, TMVA::Types::EMVA methodType, const TString& methodTitle, TMVA::DataSetIn",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:10222,Modifiability,Config,Configurable,10222,"ghtFile, TDirectory* theTargetDir = __null); TMVA::MethodTMlpANNMethodTMlpANN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""3000:N-1:N-2"", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodTMlpANN&operator=(const TMVA::MethodTMlpANN&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* fil",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:10403,Modifiability,Config,Configurable,10403,"n = ""3000:N-1:N-2"", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodTMlpANN&operator=(const TMVA::MethodTMlpANN&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EA",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:10533,Modifiability,Config,Configurable,10533,"t char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodTMlpANN&operator=(const TMVA::MethodTMlpANN&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UIn",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:10595,Modifiability,Config,Configurable,10595,"ect::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodTMlpANN&operator=(const TMVA::MethodTMlpANN&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescripti",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:11570,Modifiability,Config,Configurable,11570,"& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetHiddenLayer(TString hiddenlayer = """"); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::Setu",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:11631,Modifiability,Config,Configurable,11631,"e); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetHiddenLayer(TString hiddenlayer = """"); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) co",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:11961,Modifiability,Config,Configurable,11961,"oidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::TransformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetHiddenLayer(TString hiddenlayer = """"); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::Method",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:12063,Modifiability,Config,Configurable,12063,"ansformationHandler* fTargetTransformation); virtual voidTMVA::MethodBase::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetHiddenLayer(TString hiddenlayer = """"); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, ",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:13736,Modifiability,Config,Configurable,13736,"dBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:13981,Modifiability,Config,Configurable,13981,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidCreateMLPOptions(TString); virtual voidDeclareOptions(); virtual voidInit(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupC",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:14229,Modifiability,Config,Configurable,14229,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidCreateMLPOptions(TString); virtual voidDeclareOptions(); virtual voidInit(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupC",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:14670,Modifiability,Config,Configurable,14670,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidCreateMLPOptions(TString); virtual voidDeclareOptions(); virtual voidInit(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupC",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:14709,Modifiability,Config,Configurable,14709,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidCreateMLPOptions(TString); virtual voidDeclareOptions(); virtual voidInit(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupC",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:15031,Modifiability,Config,Configurable,15031,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidCreateMLPOptions(TString); virtual voidDeclareOptions(); virtual voidInit(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupC",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:15477,Modifiability,Config,Configurable,15477,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidCreateMLPOptions(TString); virtual voidDeclareOptions(); virtual voidInit(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupC",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:16961,Modifiability,variab,variables,16961,"atusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TStringfHiddenLayerstring containig the hidden layer structure; TStringfLayerSpecLayer specification option; TStringfLearningMethodthe learning method (given via option string); TTree*fLocalTrainingTreelocal copy of training tree; TMultiLayerPerceptron*fMLPthe TMLP; TStringfMLPBuildOptionsoption string to build the mlp; Int_tfNcyclesnumber of training cylcles; Double_tfValidationFractionfraction of events in training tree used for cross validation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodTMlp",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:17150,Modifiability,variab,variable,17150,"atusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TStringfHiddenLayerstring containig the hidden layer structure; TStringfLayerSpecLayer specification option; TStringfLearningMethodthe learning method (given via option string); TTree*fLocalTrainingTreelocal copy of training tree; TMultiLayerPerceptron*fMLPthe TMLP; TStringfMLPBuildOptionsoption string to build the mlp; Int_tfNcyclesnumber of training cylcles; Double_tfValidationFractionfraction of events in training tree used for cross validation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodTMlp",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:18059,Modifiability,Inherit,Inheritance,18059,"ssification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TStringfHiddenLayerstring containig the hidden layer structure; TStringfLayerSpecLayer specification option; TStringfLearningMethodthe learning method (given via option string); TTree*fLocalTrainingTreelocal copy of training tree; TMultiLayerPerceptron*fMLPthe TMLP; TStringfMLPBuildOptionsoption string to build the mlp; Int_tfNcyclesnumber of training cylcles; Double_tfValidationFractionfraction of events in training tree used for cross validation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodTMlpANN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""3000:N-1:N-2"", TDirectory* theTargetDir = 0); standard constructor. MethodTMlpANN(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); TMlpANN can handle classification with 2 classes. void Init( void ); default initialisations. ~MethodTMlpANN( void ); destructor. void CreateMLPOptions(TString ); translates options from option string into TMlpANN language. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; NCycles <integer> Number of training cycles (too many cycles could overtrain the network); HiddenLayers <string> Layout of the hidden layers (nodes per layer); * specifiactions for ea",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:18072,Modifiability,Inherit,Inherited,18072,"ssification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TStringfHiddenLayerstring containig the hidden layer structure; TStringfLayerSpecLayer specification option; TStringfLearningMethodthe learning method (given via option string); TTree*fLocalTrainingTreelocal copy of training tree; TMultiLayerPerceptron*fMLPthe TMLP; TStringfMLPBuildOptionsoption string to build the mlp; Int_tfNcyclesnumber of training cylcles; Double_tfValidationFractionfraction of events in training tree used for cross validation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodTMlpANN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""3000:N-1:N-2"", TDirectory* theTargetDir = 0); standard constructor. MethodTMlpANN(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); TMlpANN can handle classification with 2 classes. void Init( void ); default initialisations. ~MethodTMlpANN( void ); destructor. void CreateMLPOptions(TString ); translates options from option string into TMlpANN language. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; NCycles <integer> Number of training cycles (too many cycles could overtrain the network); HiddenLayers <string> Layout of the hidden layers (nodes per layer); * specifiactions for ea",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:19036,Modifiability,layers,layers,19036,"Function documentation; MethodTMlpANN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""3000:N-1:N-2"", TDirectory* theTargetDir = 0); standard constructor. MethodTMlpANN(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); TMlpANN can handle classification with 2 classes. void Init( void ); default initialisations. ~MethodTMlpANN( void ); destructor. void CreateMLPOptions(TString ); translates options from option string into TMlpANN language. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; NCycles <integer> Number of training cycles (too many cycles could overtrain the network); HiddenLayers <string> Layout of the hidden layers (nodes per layer); * specifiactions for each hidden layer are separated by commata; * for each layer the number of nodes can be either absolut (simply a number); or relative to the number of input nodes to the neural net (N); * there is always a single node in the output layer; example: a net with 6 input nodes and ""Hiddenlayers=N-1,N-2"" has 6,5,4,1 nodes in the; layers 1,2,3,4, repectively. void ProcessOptions(); builds the neural network as specified by the user. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); calculate the value of the neural net for the current event. void Train( void ); performs TMlpANN training; available learning methods:. TMultiLayerPerceptron::kStochastic; TMultiLayerPerceptron::kBatch; TMultiLayerPerceptron::kSteepestDescent; TMultiLayerPerceptron::kRibierePolak; TMultiLayerPerceptron::kFletcherReeves; TMultiLayerPerceptron::kBFGS. TMultiLayerPerceptron wants test and training tree at once; so merge the training and testing trees from the MVA factory first:. void AddWeightsXMLTo(void* parent) const; write weigh",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:19409,Modifiability,layers,layers,19409,"Function documentation; MethodTMlpANN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""3000:N-1:N-2"", TDirectory* theTargetDir = 0); standard constructor. MethodTMlpANN(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); TMlpANN can handle classification with 2 classes. void Init( void ); default initialisations. ~MethodTMlpANN( void ); destructor. void CreateMLPOptions(TString ); translates options from option string into TMlpANN language. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; NCycles <integer> Number of training cycles (too many cycles could overtrain the network); HiddenLayers <string> Layout of the hidden layers (nodes per layer); * specifiactions for each hidden layer are separated by commata; * for each layer the number of nodes can be either absolut (simply a number); or relative to the number of input nodes to the neural net (N); * there is always a single node in the output layer; example: a net with 6 input nodes and ""Hiddenlayers=N-1,N-2"" has 6,5,4,1 nodes in the; layers 1,2,3,4, repectively. void ProcessOptions(); builds the neural network as specified by the user. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); calculate the value of the neural net for the current event. void Train( void ); performs TMlpANN training; available learning methods:. TMultiLayerPerceptron::kStochastic; TMultiLayerPerceptron::kBatch; TMultiLayerPerceptron::kSteepestDescent; TMultiLayerPerceptron::kRibierePolak; TMultiLayerPerceptron::kFletcherReeves; TMultiLayerPerceptron::kBFGS. TMultiLayerPerceptron wants test and training tree at once; so merge the training and testing trees from the MVA factory first:. void AddWeightsXMLTo(void* parent) const; write weigh",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:21195,Modifiability,variab,variables,21195,"ue(Double_t* err = 0, Double_t* errUpper = 0); calculate the value of the neural net for the current event. void Train( void ); performs TMlpANN training; available learning methods:. TMultiLayerPerceptron::kStochastic; TMultiLayerPerceptron::kBatch; TMultiLayerPerceptron::kSteepestDescent; TMultiLayerPerceptron::kRibierePolak; TMultiLayerPerceptron::kFletcherReeves; TMultiLayerPerceptron::kBFGS. TMultiLayerPerceptron wants test and training tree at once; so merge the training and testing trees from the MVA factory first:. void AddWeightsXMLTo(void* parent) const; write weights to xml file. void ReadWeightsFromXML(void* wghtnode); rebuild temporary textfile from xml weightfile and load this; file into MLP. void ReadWeightsFromStream(istream& istr); read weights from stream; since the MLP can not read from the stream, we; 1st: write the weights to temporary file. void MakeClass(const TString& classFileName = TString("""")) const; create reader class for classifier -> overwrites base class function; create specific class for TMultiLayerPerceptron. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response; nothing to do here - all taken care of by TMultiLayerPerceptron. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodTMlpANN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""3000:N-1:N-2"", TDirectory* theTargetDir = 0). void SetHiddenLayer(TString hiddenlayer = """"); { fHiddenLayer=hiddenlayer; }. const Ranking* CreateRanking(); ranking of input variables. { return 0; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:10067,Performance,Optimiz,OptimizeTuningParameters,10067,"nst; TMVA::MethodTMlpANNMethodTMlpANN(const TMVA::MethodTMlpANN&); TMVA::MethodTMlpANNMethodTMlpANN(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); TMVA::MethodTMlpANNMethodTMlpANN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""3000:N-1:N-2"", TDirectory* theTargetDir = 0); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MethodTMlpANN&operator=(const TMVA::MethodTMlpANN&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA::Configurable::PrintOptions() const; voidTMVA::MethodBase::ProcessSetup(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidTMVA::MethodBase::ReadStateFromFile(); voidTMVA::MethodBase::ReadStateFromStream(istream& tf); voidTMVA::MethodBase::ReadStateFromStream(TFile& rf); voidTMVA::MethodBase::ReadStateFromXMLString(const char* xmlstr); virtual voidReadWeightsFromStream(istream& istr); virtual voidReadWeightsFromXML(void* wghtnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTMVA::MethodBase::RerouteTransformationHandler(TMVA::Transformatio",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:12488,Performance,tune,tuneParameters,12488,"ct::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetHiddenLayer(TString hiddenlayer = """"); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::W",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:19659,Performance,perform,performs,19659,"oid ); destructor. void CreateMLPOptions(TString ); translates options from option string into TMlpANN language. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; NCycles <integer> Number of training cycles (too many cycles could overtrain the network); HiddenLayers <string> Layout of the hidden layers (nodes per layer); * specifiactions for each hidden layer are separated by commata; * for each layer the number of nodes can be either absolut (simply a number); or relative to the number of input nodes to the neural net (N); * there is always a single node in the output layer; example: a net with 6 input nodes and ""Hiddenlayers=N-1,N-2"" has 6,5,4,1 nodes in the; layers 1,2,3,4, repectively. void ProcessOptions(); builds the neural network as specified by the user. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); calculate the value of the neural net for the current event. void Train( void ); performs TMlpANN training; available learning methods:. TMultiLayerPerceptron::kStochastic; TMultiLayerPerceptron::kBatch; TMultiLayerPerceptron::kSteepestDescent; TMultiLayerPerceptron::kRibierePolak; TMultiLayerPerceptron::kFletcherReeves; TMultiLayerPerceptron::kBFGS. TMultiLayerPerceptron wants test and training tree at once; so merge the training and testing trees from the MVA factory first:. void AddWeightsXMLTo(void* parent) const; write weights to xml file. void ReadWeightsFromXML(void* wghtnode); rebuild temporary textfile from xml weightfile and load this; file into MLP. void ReadWeightsFromStream(istream& istr); read weights from stream; since the MLP can not read from the stream, we; 1st: write the weights to temporary file. void MakeClass(const TString& classFileName = TString("""")) const; create reader class for classifier -> overwrites base class function; create specific class for TMultiLayerPerceptron. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier r",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:20221,Performance,load,load,20221,"simply a number); or relative to the number of input nodes to the neural net (N); * there is always a single node in the output layer; example: a net with 6 input nodes and ""Hiddenlayers=N-1,N-2"" has 6,5,4,1 nodes in the; layers 1,2,3,4, repectively. void ProcessOptions(); builds the neural network as specified by the user. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); calculate the value of the neural net for the current event. void Train( void ); performs TMlpANN training; available learning methods:. TMultiLayerPerceptron::kStochastic; TMultiLayerPerceptron::kBatch; TMultiLayerPerceptron::kSteepestDescent; TMultiLayerPerceptron::kRibierePolak; TMultiLayerPerceptron::kFletcherReeves; TMultiLayerPerceptron::kBFGS. TMultiLayerPerceptron wants test and training tree at once; so merge the training and testing trees from the MVA factory first:. void AddWeightsXMLTo(void* parent) const; write weights to xml file. void ReadWeightsFromXML(void* wghtnode); rebuild temporary textfile from xml weightfile and load this; file into MLP. void ReadWeightsFromStream(istream& istr); read weights from stream; since the MLP can not read from the stream, we; 1st: write the weights to temporary file. void MakeClass(const TString& classFileName = TString("""")) const; create reader class for classifier -> overwrites base class function; create specific class for TMultiLayerPerceptron. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response; nothing to do here - all taken care of by TMultiLayerPerceptron. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodTMlpANN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""3000:N-1:N-2"", TDirectory* theTargetDir = 0). void SetHiddenLayer(TString hiddenlayer = """"); { fHiddenLayer=hiddenlayer; }. const Ranking* CreateRanking(); ranking o",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:7638,Security,Hash,Hash,7638,"String&); const TMVA::Event*TMVA::MethodBase::GetTrainingEvent(Long64_t ievt) const; UInt_tTMVA::MethodBase::GetTrainingROOTVersionCode() const; TStringTMVA::MethodBase::GetTrainingROOTVersionString() const; UInt_tTMVA::MethodBase::GetTrainingTMVAVersionCode() const; TStringTMVA::MethodBase::GetTrainingTMVAVersionString() const; Double_tTMVA::MethodBase::GetTrainTime() const; TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true); const TMVA::TransformationHandler&TMVA::MethodBase::GetTransformationHandler(Bool_t takeReroutedIfAvailable = true) const; virtual UInt_tTObject::GetUniqueID() const; TStringTMVA::MethodBase::GetWeightFileName() const; Double_tTMVA::MethodBase::GetXmax(Int_t ivar) const; Double_tTMVA::MethodBase::GetXmin(Int_t ivar) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tHasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); virtual ULong_tTObject::Hash() const; Bool_tTMVA::MethodBase::HasMVAPdfs() const; TMVA::IMethodTMVA::IMethod::IMethod(); TMVA::IMethodTMVA::IMethod::IMethod(const TMVA::IMethod&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidMakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TMVA::MethodBaseTMVA::MethodBase::MethodBase(c",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:18033,Security,validat,validation,18033,"ssification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TStringfHiddenLayerstring containig the hidden layer structure; TStringfLayerSpecLayer specification option; TStringfLearningMethodthe learning method (given via option string); TTree*fLocalTrainingTreelocal copy of training tree; TMultiLayerPerceptron*fMLPthe TMLP; TStringfMLPBuildOptionsoption string to build the mlp; Int_tfNcyclesnumber of training cylcles; Double_tfValidationFractionfraction of events in training tree used for cross validation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodTMlpANN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""3000:N-1:N-2"", TDirectory* theTargetDir = 0); standard constructor. MethodTMlpANN(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); TMlpANN can handle classification with 2 classes. void Init( void ); default initialisations. ~MethodTMlpANN( void ); destructor. void CreateMLPOptions(TString ); translates options from option string into TMlpANN language. void DeclareOptions(); define",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:413,Testability,test,testing,413,". TMVA::MethodTMlpANN. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodTMlpANN. class TMVA::MethodTMlpANN: public TMVA::MethodBase. This is the TMVA TMultiLayerPerceptron interface class. It provides the; training and testing the ROOT internal MLP class in the TMVA framework.; Available learning methods:. Stochastic ; Batch ; SteepestDescent ; RibierePolak ; FletcherReeves ; BFGS . . See the TMultiLayerPerceptron class description; for details on this ANN. Function Members (Methods); public:. virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual In",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:12290,Testability,test,testTime,12290,"t::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTMVA::MethodBase::SetAnalysisType(TMVA::Types::EAnalysisType type); voidTMVA::MethodBase::SetBaseDir(TDirectory* methodDir); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetHiddenLayer(TString hiddenlayer = """"); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCu",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:12827,Testability,Test,TestBit,12827,"idTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBa",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:12866,Testability,Test,TestBits,12866,"dBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:12922,Testability,Test,TestClassification,12922,"dBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:12974,Testability,Test,TestMulticlass,12974,"dBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:13022,Testability,Test,TestRegression,13022,"dBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:14684,Testability,Log,Log,14684,"nitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidCreateMLPOptions(TString); virtual voidDeclareOptions(); virtual voidInit(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupC",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:15790,Testability,test,testing,15790,"odBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidCreateMLPOptions(TString); virtual voidDeclareOptions(); virtual voidInit(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:19959,Testability,test,test,19959,"iddenLayers <string> Layout of the hidden layers (nodes per layer); * specifiactions for each hidden layer are separated by commata; * for each layer the number of nodes can be either absolut (simply a number); or relative to the number of input nodes to the neural net (N); * there is always a single node in the output layer; example: a net with 6 input nodes and ""Hiddenlayers=N-1,N-2"" has 6,5,4,1 nodes in the; layers 1,2,3,4, repectively. void ProcessOptions(); builds the neural network as specified by the user. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); calculate the value of the neural net for the current event. void Train( void ); performs TMlpANN training; available learning methods:. TMultiLayerPerceptron::kStochastic; TMultiLayerPerceptron::kBatch; TMultiLayerPerceptron::kSteepestDescent; TMultiLayerPerceptron::kRibierePolak; TMultiLayerPerceptron::kFletcherReeves; TMultiLayerPerceptron::kBFGS. TMultiLayerPerceptron wants test and training tree at once; so merge the training and testing trees from the MVA factory first:. void AddWeightsXMLTo(void* parent) const; write weights to xml file. void ReadWeightsFromXML(void* wghtnode); rebuild temporary textfile from xml weightfile and load this; file into MLP. void ReadWeightsFromStream(istream& istr); read weights from stream; since the MLP can not read from the stream, we; 1st: write the weights to temporary file. void MakeClass(const TString& classFileName = TString("""")) const; create reader class for classifier -> overwrites base class function; create specific class for TMultiLayerPerceptron. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response; nothing to do here - all taken care of by TMultiLayerPerceptron. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodTMlpANN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, c",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:20017,Testability,test,testing,20017,"iddenLayers <string> Layout of the hidden layers (nodes per layer); * specifiactions for each hidden layer are separated by commata; * for each layer the number of nodes can be either absolut (simply a number); or relative to the number of input nodes to the neural net (N); * there is always a single node in the output layer; example: a net with 6 input nodes and ""Hiddenlayers=N-1,N-2"" has 6,5,4,1 nodes in the; layers 1,2,3,4, repectively. void ProcessOptions(); builds the neural network as specified by the user. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); calculate the value of the neural net for the current event. void Train( void ); performs TMlpANN training; available learning methods:. TMultiLayerPerceptron::kStochastic; TMultiLayerPerceptron::kBatch; TMultiLayerPerceptron::kSteepestDescent; TMultiLayerPerceptron::kRibierePolak; TMultiLayerPerceptron::kFletcherReeves; TMultiLayerPerceptron::kBFGS. TMultiLayerPerceptron wants test and training tree at once; so merge the training and testing trees from the MVA factory first:. void AddWeightsXMLTo(void* parent) const; write weights to xml file. void ReadWeightsFromXML(void* wghtnode); rebuild temporary textfile from xml weightfile and load this; file into MLP. void ReadWeightsFromStream(istream& istr); read weights from stream; since the MLP can not read from the stream, we; 1st: write the weights to temporary file. void MakeClass(const TString& classFileName = TString("""")) const; create reader class for classifier -> overwrites base class function; create specific class for TMultiLayerPerceptron. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response; nothing to do here - all taken care of by TMultiLayerPerceptron. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodTMlpANN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, c",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:483,Usability,learn,learning,483,". TMVA::MethodTMlpANN. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MethodTMlpANN. class TMVA::MethodTMlpANN: public TMVA::MethodBase. This is the TMVA TMultiLayerPerceptron interface class. It provides the; training and testing the ROOT internal MLP class in the TMVA framework.; Available learning methods:. Stochastic ; Batch ; SteepestDescent ; RibierePolak ; FletcherReeves ; BFGS . . See the TMultiLayerPerceptron class description; for details on this ANN. Function Members (Methods); public:. virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual In",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:1319,Usability,Clear,Clear,1319," virtual~MethodTMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual In",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:17727,Usability,learn,learning,17727,"ssification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TStringfHiddenLayerstring containig the hidden layer structure; TStringfLayerSpecLayer specification option; TStringfLearningMethodthe learning method (given via option string); TTree*fLocalTrainingTreelocal copy of training tree; TMultiLayerPerceptron*fMLPthe TMLP; TStringfMLPBuildOptionsoption string to build the mlp; Int_tfNcyclesnumber of training cylcles; Double_tfValidationFractionfraction of events in training tree used for cross validation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodTMlpANN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""3000:N-1:N-2"", TDirectory* theTargetDir = 0); standard constructor. MethodTMlpANN(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); TMlpANN can handle classification with 2 classes. void Init( void ); default initialisations. ~MethodTMlpANN( void ); destructor. void CreateMLPOptions(TString ); translates options from option string into TMlpANN language. void DeclareOptions(); define",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:19187,Usability,simpl,simply,19187,"Function documentation; MethodTMlpANN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""3000:N-1:N-2"", TDirectory* theTargetDir = 0); standard constructor. MethodTMlpANN(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = __null); constructor from weight file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); TMlpANN can handle classification with 2 classes. void Init( void ); default initialisations. ~MethodTMlpANN( void ); destructor. void CreateMLPOptions(TString ); translates options from option string into TMlpANN language. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; NCycles <integer> Number of training cycles (too many cycles could overtrain the network); HiddenLayers <string> Layout of the hidden layers (nodes per layer); * specifiactions for each hidden layer are separated by commata; * for each layer the number of nodes can be either absolut (simply a number); or relative to the number of input nodes to the neural net (N); * there is always a single node in the output layer; example: a net with 6 input nodes and ""Hiddenlayers=N-1,N-2"" has 6,5,4,1 nodes in the; layers 1,2,3,4, repectively. void ProcessOptions(); builds the neural network as specified by the user. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); calculate the value of the neural net for the current event. void Train( void ); performs TMlpANN training; available learning methods:. TMultiLayerPerceptron::kStochastic; TMultiLayerPerceptron::kBatch; TMultiLayerPerceptron::kSteepestDescent; TMultiLayerPerceptron::kRibierePolak; TMultiLayerPerceptron::kFletcherReeves; TMultiLayerPerceptron::kBFGS. TMultiLayerPerceptron wants test and training tree at once; so merge the training and testing trees from the MVA factory first:. void AddWeightsXMLTo(void* parent) const; write weigh",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MethodTMlpANN.html:19696,Usability,learn,learning,19696,"oid ); destructor. void CreateMLPOptions(TString ); translates options from option string into TMlpANN language. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; NCycles <integer> Number of training cycles (too many cycles could overtrain the network); HiddenLayers <string> Layout of the hidden layers (nodes per layer); * specifiactions for each hidden layer are separated by commata; * for each layer the number of nodes can be either absolut (simply a number); or relative to the number of input nodes to the neural net (N); * there is always a single node in the output layer; example: a net with 6 input nodes and ""Hiddenlayers=N-1,N-2"" has 6,5,4,1 nodes in the; layers 1,2,3,4, repectively. void ProcessOptions(); builds the neural network as specified by the user. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); calculate the value of the neural net for the current event. void Train( void ); performs TMlpANN training; available learning methods:. TMultiLayerPerceptron::kStochastic; TMultiLayerPerceptron::kBatch; TMultiLayerPerceptron::kSteepestDescent; TMultiLayerPerceptron::kRibierePolak; TMultiLayerPerceptron::kFletcherReeves; TMultiLayerPerceptron::kBFGS. TMultiLayerPerceptron wants test and training tree at once; so merge the training and testing trees from the MVA factory first:. void AddWeightsXMLTo(void* parent) const; write weights to xml file. void ReadWeightsFromXML(void* wghtnode); rebuild temporary textfile from xml weightfile and load this; file into MLP. void ReadWeightsFromStream(istream& istr); read weights from stream; since the MLP can not read from the stream, we; 1st: write the weights to temporary file. void MakeClass(const TString& classFileName = TString("""")) const; create reader class for classifier -> overwrites base class function; create specific class for TMultiLayerPerceptron. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier r",MatchSource.WIKI,root/html604/TMVA__MethodTMlpANN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MethodTMlpANN.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:1495,Availability,Error,Error,1495,":Configurable::AddOptionsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>& pars); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::FitterBaseTMVA::FitterBase::FitterBase(const TMVA::FitterBase&); TMVA::FitterBaseTMVA::FitterBase::FitterBase(TMVA::IFitterTarget& target, const TString& name, const vector<TMVA::Interval*> ranges, const TString& theOption); const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TMVA::IFitterTarget&T",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:1683,Availability,error,error,1683,"ptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>& pars); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::FitterBaseTMVA::FitterBase::FitterBase(const TMVA::FitterBase&); TMVA::FitterBaseTMVA::FitterBase::FitterBase(TMVA::IFitterTarget& target, const TString& name, const vector<TMVA::Interval*> ranges, const TString& theOption); const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TMVA::IFitterTarget&TMVA::FitterBase::GetFitterTarget() const; virtual const char*TObject::GetIconName() const; virtual const char*TMVA::FitterBase::GetName() const; Int_tTMVA::FitterBase::GetNpars() const; vi",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:1767,Availability,error,error,1767,"; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>& pars); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::FitterBaseTMVA::FitterBase::FitterBase(const TMVA::FitterBase&); TMVA::FitterBaseTMVA::FitterBase::FitterBase(TMVA::IFitterTarget& target, const TString& name, const vector<TMVA::Interval*> ranges, const TString& theOption); const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TMVA::IFitterTarget&TMVA::FitterBase::GetFitterTarget() const; virtual const char*TObject::GetIconName() const; virtual const char*TMVA::FitterBase::GetName() const; Int_tTMVA::FitterBase::GetNpars() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::G",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:8261,Availability,error,error,8261,"TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTMVA::FitterBase::fClassNameremove TMVA:: from TObject name; TMVA::IFitterTarget&TMVA::FitterBase::fFitterTargetpointer to target of fitting procedure; TMVA::MsgLogger*TMVA::FitterBase::fLoggermessage logger; TMVA::MinuitWrapper*fMinWrapholds a wrapper around TMinuit; Int_tTMVA::FitterBase::fNparsnumber of parameters; const vector<TMVA::Interval*>TMVA::FitterBase::fRangesallowed intervals. private:. Bool_tfBatchbatch mode; Int_tfErrorLevelminuit error level; Int_tfFitStrategyminuit strategy level; Int_tfMaxCalls(approximate) maximum number of function calls; Int_tfPrintLevelminuit printout level; Bool_tfPrintWarningsminuit warnings level; Double_tfTolerancetolerance to the function value at the minimum; Bool_tfUseImproveflag for 'IMPROVE' use; Bool_tfUseMinosflag for 'MINOS' use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitFitter(TMVA::IFitterTarget& target, const TString& name, vector<TMVA::Interval*>& ranges, const TString& theOption); constructor. ~MinuitFitter(); destructor. void DeclareOptions(); declare SA options. void Init(); minuit-specific settings. Double_t Run(vector<Double_t>& pars); performs the fit. Double_t EstimatorFunction(vector<Double_t>& pars); performs the fit by calliung Run(pars). MinuitFitter(TMVA::IFitterTarget& target, const TString& name, vector<TMVA::Interval*>& ranges, const TString& theOption). » Author: Andreas Hoecker » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regard",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:8056,Integrability,wrap,wrapper,8056,"te:. virtual voidDeclareOptions(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTMVA::FitterBase::fClassNameremove TMVA:: from TObject name; TMVA::IFitterTarget&TMVA::FitterBase::fFitterTargetpointer to target of fitting procedure; TMVA::MsgLogger*TMVA::FitterBase::fLoggermessage logger; TMVA::MinuitWrapper*fMinWrapholds a wrapper around TMinuit; Int_tTMVA::FitterBase::fNparsnumber of parameters; const vector<TMVA::Interval*>TMVA::FitterBase::fRangesallowed intervals. private:. Bool_tfBatchbatch mode; Int_tfErrorLevelminuit error level; Int_tfFitStrategyminuit strategy level; Int_tfMaxCalls(approximate) maximum number of function calls; Int_tfPrintLevelminuit printout level; Bool_tfPrintWarningsminuit warnings level; Double_tfTolerancetolerance to the function value at the minimum; Bool_tfUseImproveflag for 'IMPROVE' use; Bool_tfUseMinosflag for 'MINOS' use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitFitter(TMVA::IFitterTarget& target, const TString& name, vector<TMVA::Interval*>& ranges, const TString& theOption); constructor. ~MinuitFitter(); destructor. void DeclareOptions(); declare SA options. void Init(); minuit-specific settings. Double_t Run(vector<Double_t>& pars); performs the fit. Double_",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:499,Modifiability,Config,Configurable,499," virtual~MinuitFitter(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>& pars); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TOb",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:657,Modifiability,Config,Configurable,657," virtual~MinuitFitter(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>& pars); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TOb",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:943,Modifiability,Config,ConfigurableTMVA,943," virtual~MinuitFitter(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>& pars); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TOb",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:961,Modifiability,Config,Configurable,961," virtual~MinuitFitter(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>& pars); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TOb",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:975,Modifiability,Config,Configurable,975," virtual~MinuitFitter(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>& pars); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TOb",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:1026,Modifiability,Config,ConfigurableTMVA,1026," virtual~MinuitFitter(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>& pars); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TOb",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:1044,Modifiability,Config,Configurable,1044," virtual~MinuitFitter(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>& pars); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TOb",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:1058,Modifiability,Config,Configurable,1058," virtual~MinuitFitter(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>& pars); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TOb",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:1083,Modifiability,Config,Configurable,1083," virtual~MinuitFitter(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>& pars); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TOb",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:2293,Modifiability,Config,Configurable,2293,"on_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>& pars); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::FitterBaseTMVA::FitterBase::FitterBase(const TMVA::FitterBase&); TMVA::FitterBaseTMVA::FitterBase::FitterBase(TMVA::IFitterTarget& target, const TString& name, const vector<TMVA::Interval*> ranges, const TString& theOption); const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TMVA::IFitterTarget&TMVA::FitterBase::GetFitterTarget() const; virtual const char*TObject::GetIconName() const; virtual const char*TMVA::FitterBase::GetName() const; Int_tTMVA::FitterBase::GetNpars() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(const TMVA::IFitterTarget&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:2354,Modifiability,Config,Configurable,2354,"U ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>& pars); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::FitterBaseTMVA::FitterBase::FitterBase(const TMVA::FitterBase&); TMVA::FitterBaseTMVA::FitterBase::FitterBase(TMVA::IFitterTarget& target, const TString& name, const vector<TMVA::Interval*> ranges, const TString& theOption); const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TMVA::IFitterTarget&TMVA::FitterBase::GetFitterTarget() const; virtual const char*TObject::GetIconName() const; virtual const char*TMVA::FitterBase::GetName() const; Int_tTMVA::FitterBase::GetNpars() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(const TMVA::IFitterTarget&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObj",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:2851,Modifiability,Config,Configurable,2851,"idTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::FitterBaseTMVA::FitterBase::FitterBase(const TMVA::FitterBase&); TMVA::FitterBaseTMVA::FitterBase::FitterBase(TMVA::IFitterTarget& target, const TString& name, const vector<TMVA::Interval*> ranges, const TString& theOption); const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TMVA::IFitterTarget&TMVA::FitterBase::GetFitterTarget() const; virtual const char*TObject::GetIconName() const; virtual const char*TMVA::FitterBase::GetName() const; Int_tTMVA::FitterBase::GetNpars() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(const TMVA::IFitterTarget&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidInit(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; TMVA::MinuitFitterMinuitF",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:3300,Modifiability,Inherit,InheritsFrom,3300,":GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TMVA::IFitterTarget&TMVA::FitterBase::GetFitterTarget() const; virtual const char*TObject::GetIconName() const; virtual const char*TMVA::FitterBase::GetName() const; Int_tTMVA::FitterBase::GetNpars() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(const TMVA::IFitterTarget&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidInit(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; TMVA::MinuitFitterMinuitFitter(const TMVA::MinuitFitter&); TMVA::MinuitFitterMinuitFitter(TMVA::IFitterTarget& target, const TString& name, vector<TMVA::Interval*>& ranges, const TString& theOption); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTO",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:3366,Modifiability,Inherit,InheritsFrom,3366,"onfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TMVA::IFitterTarget&TMVA::FitterBase::GetFitterTarget() const; virtual const char*TObject::GetIconName() const; virtual const char*TMVA::FitterBase::GetName() const; Int_tTMVA::FitterBase::GetNpars() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(const TMVA::IFitterTarget&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidInit(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; TMVA::MinuitFitterMinuitFitter(const TMVA::MinuitFitter&); TMVA::MinuitFitterMinuitFitter(TMVA::IFitterTarget& target, const TString& name, vector<TMVA::Interval*>& ranges, const TString& theOption); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::opera",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:4660,Modifiability,Config,Configurable,4660,"tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; TMVA::MinuitFitterMinuitFitter(const TMVA::MinuitFitter&); TMVA::MinuitFitterMinuitFitter(TMVA::IFitterTarget& target, const TString& name, vector<TMVA::Interval*>& ranges, const TString& theOption); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MinuitFitter&operator=(const TMVA::MinuitFitter&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Double_tRun(vector<Double_t>& pars); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable:",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:4785,Modifiability,Config,Configurable,4785,"ect::MayNotUse(const char* method) const; TMVA::MinuitFitterMinuitFitter(const TMVA::MinuitFitter&); TMVA::MinuitFitterMinuitFitter(TMVA::IFitterTarget& target, const TString& name, vector<TMVA::Interval*>& ranges, const TString& theOption); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MinuitFitter&operator=(const TMVA::MinuitFitter&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Double_tRun(vector<Double_t>& pars); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TStri",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:4946,Modifiability,Config,Configurable,4946,"const TString& name, vector<TMVA::Interval*>& ranges, const TString& theOption); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MinuitFitter&operator=(const TMVA::MinuitFitter&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Double_tRun(vector<Double_t>& pars); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:5008,Modifiability,Config,Configurable,5008,"tring& theOption); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MinuitFitter&operator=(const TMVA::MinuitFitter&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Double_tRun(vector<Double_t>& pars); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::S",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:5431,Modifiability,Config,Configurable,5431,"vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MinuitFitter&operator=(const TMVA::MinuitFitter&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Double_tRun(vector<Double_t>& pars); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = ",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:5492,Modifiability,Config,Configurable,5492,"perator new[](size_t sz, void* vp); TMVA::MinuitFitter&operator=(const TMVA::MinuitFitter&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Double_tRun(vector<Double_t>& pars); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostrea",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:5654,Modifiability,Config,Configurable,5654," TMVA::MinuitFitter&operator=(const TMVA::MinuitFitter&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Double_tRun(vector<Double_t>& pars); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const.",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:5756,Modifiability,Config,Configurable,5756," TMVA::MinuitFitter&operator=(const TMVA::MinuitFitter&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Double_tRun(vector<Double_t>& pars); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const.",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:6458,Modifiability,Config,Configurable,6458," TMVA::MinuitFitter&operator=(const TMVA::MinuitFitter&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Double_tRun(vector<Double_t>& pars); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const.",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:6655,Modifiability,Config,Configurable,6655,"etOptions(const TString& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); const TString&TMVA::Configurable::GetReferenceFile() const; TMVA::MsgLogger&TMVA::FitterBase::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidTObject::MakeZombie(); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymou",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:6727,Modifiability,Config,Configurable,6727,"etOptions(const TString& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); const TString&TMVA::Configurable::GetReferenceFile() const; TMVA::MsgLogger&TMVA::FitterBase::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidTObject::MakeZombie(); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymou",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:6826,Modifiability,Config,Configurable,6826,"etOptions(const TString& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); const TString&TMVA::Configurable::GetReferenceFile() const; TMVA::MsgLogger&TMVA::FitterBase::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidTObject::MakeZombie(); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymou",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:6913,Modifiability,Config,Configurable,6913,"etOptions(const TString& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); const TString&TMVA::Configurable::GetReferenceFile() const; TMVA::MsgLogger&TMVA::FitterBase::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidTObject::MakeZombie(); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymou",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:6953,Modifiability,Config,Configurable,6953,"etOptions(const TString& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); const TString&TMVA::Configurable::GetReferenceFile() const; TMVA::MsgLogger&TMVA::FitterBase::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidTObject::MakeZombie(); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymou",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:8616,Modifiability,Inherit,Inheritance,8616,"::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTMVA::FitterBase::fClassNameremove TMVA:: from TObject name; TMVA::IFitterTarget&TMVA::FitterBase::fFitterTargetpointer to target of fitting procedure; TMVA::MsgLogger*TMVA::FitterBase::fLoggermessage logger; TMVA::MinuitWrapper*fMinWrapholds a wrapper around TMinuit; Int_tTMVA::FitterBase::fNparsnumber of parameters; const vector<TMVA::Interval*>TMVA::FitterBase::fRangesallowed intervals. private:. Bool_tfBatchbatch mode; Int_tfErrorLevelminuit error level; Int_tfFitStrategyminuit strategy level; Int_tfMaxCalls(approximate) maximum number of function calls; Int_tfPrintLevelminuit printout level; Bool_tfPrintWarningsminuit warnings level; Double_tfTolerancetolerance to the function value at the minimum; Bool_tfUseImproveflag for 'IMPROVE' use; Bool_tfUseMinosflag for 'MINOS' use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitFitter(TMVA::IFitterTarget& target, const TString& name, vector<TMVA::Interval*>& ranges, const TString& theOption); constructor. ~MinuitFitter(); destructor. void DeclareOptions(); declare SA options. void Init(); minuit-specific settings. Double_t Run(vector<Double_t>& pars); performs the fit. Double_t EstimatorFunction(vector<Double_t>& pars); performs the fit by calliung Run(pars). MinuitFitter(TMVA::IFitterTarget& target, const TString& name, vector<TMVA::Interval*>& ranges, const TString& theOption). » Author: Andreas Hoecker » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:8629,Modifiability,Inherit,Inherited,8629,"::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTMVA::FitterBase::fClassNameremove TMVA:: from TObject name; TMVA::IFitterTarget&TMVA::FitterBase::fFitterTargetpointer to target of fitting procedure; TMVA::MsgLogger*TMVA::FitterBase::fLoggermessage logger; TMVA::MinuitWrapper*fMinWrapholds a wrapper around TMinuit; Int_tTMVA::FitterBase::fNparsnumber of parameters; const vector<TMVA::Interval*>TMVA::FitterBase::fRangesallowed intervals. private:. Bool_tfBatchbatch mode; Int_tfErrorLevelminuit error level; Int_tfFitStrategyminuit strategy level; Int_tfMaxCalls(approximate) maximum number of function calls; Int_tfPrintLevelminuit printout level; Bool_tfPrintWarningsminuit warnings level; Double_tfTolerancetolerance to the function value at the minimum; Bool_tfUseImproveflag for 'IMPROVE' use; Bool_tfUseMinosflag for 'MINOS' use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitFitter(TMVA::IFitterTarget& target, const TString& name, vector<TMVA::Interval*>& ranges, const TString& theOption); constructor. ~MinuitFitter(); destructor. void DeclareOptions(); declare SA options. void Init(); minuit-specific settings. Double_t Run(vector<Double_t>& pars); performs the fit. Double_t EstimatorFunction(vector<Double_t>& pars); performs the fit by calliung Run(pars). MinuitFitter(TMVA::IFitterTarget& target, const TString& name, vector<TMVA::Interval*>& ranges, const TString& theOption). » Author: Andreas Hoecker » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:8978,Performance,perform,performs,8978,"::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTMVA::FitterBase::fClassNameremove TMVA:: from TObject name; TMVA::IFitterTarget&TMVA::FitterBase::fFitterTargetpointer to target of fitting procedure; TMVA::MsgLogger*TMVA::FitterBase::fLoggermessage logger; TMVA::MinuitWrapper*fMinWrapholds a wrapper around TMinuit; Int_tTMVA::FitterBase::fNparsnumber of parameters; const vector<TMVA::Interval*>TMVA::FitterBase::fRangesallowed intervals. private:. Bool_tfBatchbatch mode; Int_tfErrorLevelminuit error level; Int_tfFitStrategyminuit strategy level; Int_tfMaxCalls(approximate) maximum number of function calls; Int_tfPrintLevelminuit printout level; Bool_tfPrintWarningsminuit warnings level; Double_tfTolerancetolerance to the function value at the minimum; Bool_tfUseImproveflag for 'IMPROVE' use; Bool_tfUseMinosflag for 'MINOS' use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitFitter(TMVA::IFitterTarget& target, const TString& name, vector<TMVA::Interval*>& ranges, const TString& theOption); constructor. ~MinuitFitter(); destructor. void DeclareOptions(); declare SA options. void Init(); minuit-specific settings. Double_t Run(vector<Double_t>& pars); performs the fit. Double_t EstimatorFunction(vector<Double_t>& pars); performs the fit by calliung Run(pars). MinuitFitter(TMVA::IFitterTarget& target, const TString& name, vector<TMVA::Interval*>& ranges, const TString& theOption). » Author: Andreas Hoecker » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:9048,Performance,perform,performs,9048,"::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTMVA::FitterBase::fClassNameremove TMVA:: from TObject name; TMVA::IFitterTarget&TMVA::FitterBase::fFitterTargetpointer to target of fitting procedure; TMVA::MsgLogger*TMVA::FitterBase::fLoggermessage logger; TMVA::MinuitWrapper*fMinWrapholds a wrapper around TMinuit; Int_tTMVA::FitterBase::fNparsnumber of parameters; const vector<TMVA::Interval*>TMVA::FitterBase::fRangesallowed intervals. private:. Bool_tfBatchbatch mode; Int_tfErrorLevelminuit error level; Int_tfFitStrategyminuit strategy level; Int_tfMaxCalls(approximate) maximum number of function calls; Int_tfPrintLevelminuit printout level; Bool_tfPrintWarningsminuit warnings level; Double_tfTolerancetolerance to the function value at the minimum; Bool_tfUseImproveflag for 'IMPROVE' use; Bool_tfUseMinosflag for 'MINOS' use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitFitter(TMVA::IFitterTarget& target, const TString& name, vector<TMVA::Interval*>& ranges, const TString& theOption); constructor. ~MinuitFitter(); destructor. void DeclareOptions(); declare SA options. void Init(); minuit-specific settings. Double_t Run(vector<Double_t>& pars); performs the fit. Double_t EstimatorFunction(vector<Double_t>& pars); performs the fit by calliung Run(pars). MinuitFitter(TMVA::IFitterTarget& target, const TString& name, vector<TMVA::Interval*>& ranges, const TString& theOption). » Author: Andreas Hoecker » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:3050,Security,Hash,Hash,3050,"itterBaseTMVA::FitterBase::FitterBase(const TMVA::FitterBase&); TMVA::FitterBaseTMVA::FitterBase::FitterBase(TMVA::IFitterTarget& target, const TString& name, const vector<TMVA::Interval*> ranges, const TString& theOption); const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TMVA::IFitterTarget&TMVA::FitterBase::GetFitterTarget() const; virtual const char*TObject::GetIconName() const; virtual const char*TMVA::FitterBase::GetName() const; Int_tTMVA::FitterBase::GetNpars() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(const TMVA::IFitterTarget&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidInit(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; TMVA::MinuitFitterMinuitFitter(const TMVA::MinuitFitter&); TMVA::MinuitFitterMinuitFitter(TMVA::IFitterTarget& target, const TString& name, vector<TMVA::Interval*>& ranges, const TString& theOption); virtual Bool_tTObjec",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:6085,Testability,Test,TestBit,6085," TMVA::MinuitFitter&operator=(const TMVA::MinuitFitter&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Double_tRun(vector<Double_t>& pars); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const.",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:6124,Testability,Test,TestBits,6124," TMVA::MinuitFitter&operator=(const TMVA::MinuitFitter&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Double_tRun(vector<Double_t>& pars); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const.",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:6801,Testability,Log,Log,6801,"etOptions(const TString& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); const TString&TMVA::Configurable::GetReferenceFile() const; TMVA::MsgLogger&TMVA::FitterBase::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidTObject::MakeZombie(); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymou",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:8012,Testability,log,logger,8012,"te:. virtual voidDeclareOptions(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTMVA::FitterBase::fClassNameremove TMVA:: from TObject name; TMVA::IFitterTarget&TMVA::FitterBase::fFitterTargetpointer to target of fitting procedure; TMVA::MsgLogger*TMVA::FitterBase::fLoggermessage logger; TMVA::MinuitWrapper*fMinWrapholds a wrapper around TMinuit; Int_tTMVA::FitterBase::fNparsnumber of parameters; const vector<TMVA::Interval*>TMVA::FitterBase::fRangesallowed intervals. private:. Bool_tfBatchbatch mode; Int_tfErrorLevelminuit error level; Int_tfFitStrategyminuit strategy level; Int_tfMaxCalls(approximate) maximum number of function calls; Int_tfPrintLevelminuit printout level; Bool_tfPrintWarningsminuit warnings level; Double_tfTolerancetolerance to the function value at the minimum; Bool_tfUseImproveflag for 'IMPROVE' use; Bool_tfUseMinosflag for 'MINOS' use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitFitter(TMVA::IFitterTarget& target, const TString& name, vector<TMVA::Interval*>& ranges, const TString& theOption); constructor. ~MinuitFitter(); destructor. void DeclareOptions(); declare SA options. void Init(); minuit-specific settings. Double_t Run(vector<Double_t>& pars); performs the fit. Double_",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitFitter.html:793,Usability,Clear,Clear,793," virtual~MinuitFitter(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>& pars); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TOb",MatchSource.WIKI,root/html604/TMVA__MinuitFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitFitter.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:1525,Availability,Error,Error,1525,"ject::Browse(TBrowser* b); virtual voidTMinuit::BuildArrays(Int_t maxpar = 15); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* = 0); virtual TObject*Clone(const char*) const; virtual Int_tTMinuit::Command(const char* command); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual TObject*TMinuit::Contour(Int_t npoints = 10, Int_t pa1 = 0, Int_t pa2 = 1); virtual voidTNamed::Copy(TObject& named) const; virtual Int_tTMinuit::DefineParameter(Int_t parNo, const char* name, Double_t initVal, Double_t initErr, Double_t lowerLimit, Double_t upperLimit); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTMinuit::DeleteArrays(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tEval(Int_t, Double_t*, Double_t&, Double_t*, Int_t); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); Int_tExecuteCommand(const char* command, Double_t* args, Int_t nargs); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTMinuit::FixParameter(Int_t parNo); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc); virtual const char*TObject::GetIconName() const; Int_tTMinuit::GetMaxIterations() const; TMeth",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:1720,Availability,error,error,1720,"ject*Clone(const char*) const; virtual Int_tTMinuit::Command(const char* command); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual TObject*TMinuit::Contour(Int_t npoints = 10, Int_t pa1 = 0, Int_t pa2 = 1); virtual voidTNamed::Copy(TObject& named) const; virtual Int_tTMinuit::DefineParameter(Int_t parNo, const char* name, Double_t initVal, Double_t initErr, Double_t lowerLimit, Double_t upperLimit); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTMinuit::DeleteArrays(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tEval(Int_t, Double_t*, Double_t&, Double_t*, Int_t); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); Int_tExecuteCommand(const char* command, Double_t* args, Int_t nargs); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTMinuit::FixParameter(Int_t parNo); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc); virtual const char*TObject::GetIconName() const; Int_tTMinuit::GetMaxIterations() const; TMethodCall*TMinuit::GetMethodCall() const; virtual const char*TNamed::GetName() const; virtual Int_tTMinuit::GetNumFixedPars() const; virtual Int_tTMinuit::GetNumFreePars() const; virtual Int_tTMinui",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:1804,Availability,error,error,1804,"irtual Int_tTNamed::Compare(const TObject* obj) const; virtual TObject*TMinuit::Contour(Int_t npoints = 10, Int_t pa1 = 0, Int_t pa2 = 1); virtual voidTNamed::Copy(TObject& named) const; virtual Int_tTMinuit::DefineParameter(Int_t parNo, const char* name, Double_t initVal, Double_t initErr, Double_t lowerLimit, Double_t upperLimit); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTMinuit::DeleteArrays(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tEval(Int_t, Double_t*, Double_t&, Double_t*, Int_t); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); Int_tExecuteCommand(const char* command, Double_t* args, Int_t nargs); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTMinuit::FixParameter(Int_t parNo); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc); virtual const char*TObject::GetIconName() const; Int_tTMinuit::GetMaxIterations() const; TMethodCall*TMinuit::GetMethodCall() const; virtual const char*TNamed::GetName() const; virtual Int_tTMinuit::GetNumFixedPars() const; virtual Int_tTMinuit::GetNumFreePars() const; virtual Int_tTMinuit::GetNumPars() const; TObject*TMinuit::GetObjectFit() const; virtual char*TObject::",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:6056,Availability,toler,toler,6056," Int_t mits, Double_t* work, Double_t precis, Int_t& ifault); virtual voidTMinuit::mnemat(Double_t* emat, Int_t ndim); virtual voidTMinuit::mnerrs(Int_t number, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& gcc); virtual voidTMinuit::mneval(Double_t anext, Double_t& fnext, Int_t& ierev); virtual voidTMinuit::mnexcm(const char* comand, Double_t* plist, Int_t llist, Int_t& ierflg); virtual voidTMinuit::mnexin(Double_t* pint); virtual voidTMinuit::mnfixp(Int_t iint, Int_t& ierr); virtual voidTMinuit::mnfree(Int_t k); virtual voidTMinuit::mngrad(); virtual voidTMinuit::mnhelp(TString comd); virtual voidTMinuit::mnhelp(const char* command = """"); virtual voidTMinuit::mnhes1(); virtual voidTMinuit::mnhess(); virtual voidTMinuit::mnimpr(); virtual voidTMinuit::mninex(Double_t* pint); virtual voidTMinuit::mninit(Int_t i1, Int_t i2, Int_t i3); virtual voidTMinuit::mnlims(); virtual voidTMinuit::mnline(Double_t* start, Double_t fstart, Double_t* step, Double_t slope, Double_t toler); virtual voidTMinuit::mnmatu(Int_t kode); virtual voidTMinuit::mnmigr(); virtual voidTMinuit::mnmnos(); virtual voidTMinuit::mnmnot(Int_t ilax, Int_t ilax2, Double_t& val2pl, Double_t& val2mi); virtual voidTMinuit::mnparm(Int_t k, TString cnamj, Double_t uk, Double_t wk, Double_t a, Double_t b, Int_t& ierflg); virtual voidTMinuit::mnpars(TString& crdbuf, Int_t& icondn); virtual voidTMinuit::mnpfit(Double_t* parx2p, Double_t* pary2p, Int_t npar2p, Double_t* coef2p, Double_t& sdev2p); virtual voidTMinuit::mnpint(Double_t& pexti, Int_t i, Double_t& pinti); virtual voidTMinuit::mnplot(Double_t* xpt, Double_t* ypt, char* chpt, Int_t nxypt, Int_t npagwd, Int_t npagln); virtual voidTMinuit::mnpout(Int_t iuext, TString& chnam, Double_t& val, Double_t& err, Double_t& xlolim, Double_t& xuplim, Int_t& iuint) const; virtual voidTMinuit::mnprin(Int_t inkode, Double_t fval); virtual voidTMinuit::mnpsdf(); virtual voidTMinuit::mnrazz(Double_t ynew, Double_t* pnew, Double_t* y, Int_t& jh, Int_t& j",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:11928,Availability,error,errors,11928,"t*TMinuit::fCONTgcc[fMaxpar] array used in mncont; Double_t*TMinuit::fCONTw[fMaxpar] array used in mncont; TStringTMinuit::fCfrom; char*TMinuit::fChpt!Character to be plotted at the X,Y contour positions; TStringTMinuit::fCovmes[4]; TString*TMinuit::fCpnam[fMaxpar2] Array of parameters names; TStringTMinuit::fCstatu; TStringTMinuit::fCtitl; TStringTMinuit::fCundef; TStringTMinuit::fCvrsn; TStringTMinuit::fCword; Double_tTMinuit::fDcovarRelative change in covariance matrix; Double_t*TMinuit::fDgrd[fMaxpar] Uncertainties; Double_t*TMinuit::fDirin[fMaxpar] (Internal) step sizes for current step; Double_t*TMinuit::fDirins[fMaxpar] (Internal) step sizes for current step for fixed params; Double_tTMinuit::fEDMEstimated vertical distance to the minimum; Int_tTMinuit::fEmptyInitialization flag (1 = Minuit initialized); Double_tTMinuit::fEpsi; Double_tTMinuit::fEpsma2sqrt(fEpsmac); Double_tTMinuit::fEpsmacmachine precision for floating points:; Double_t*TMinuit::fErn[fMaxpar] Negative Minos errors if calculated; Double_t*TMinuit::fErp[fMaxpar] Positive Minos errors if calculated; void(*)(Int_t&,Double_t*,Double_t&,Double_t*,Int_t)TMinuit::fFCN!; Double_t*TMinuit::fFIXPyy[fMaxpar] array used in mnfixp; Double_tTMinuit::fFval3; Double_t*TMinuit::fG2[fMaxpar]; Double_t*TMinuit::fG2s[fMaxpar]; Double_t*TMinuit::fGRADgf[fMaxpar] array used in mngrad; Double_t*TMinuit::fGin[fMaxpar2]; Double_t*TMinuit::fGlobcc[fMaxpar] Global Correlation Coefficients; Bool_tTMinuit::fGraphicsModetrue if graphics mode on (default); Double_t*TMinuit::fGrd[fMaxpar] First derivatives; Double_t*TMinuit::fGrds[fMaxpar]; Double_t*TMinuit::fGstep[fMaxpar] Step sizes; Double_t*TMinuit::fGsteps[fMaxpar]; Double_t*TMinuit::fHESSyy[fMaxpar] array used in mnhess; Double_t*TMinuit::fIMPRdsav[fMaxpar] array used in mnimpr; Double_t*TMinuit::fIMPRy[fMaxpar] array used in mnimpr; Int_tTMinuit::fISW[7]Array of switches; Int_tTMinuit::fIcirc[2]; Int_tTMinuit::fIcomndNumber of commands; Int_tTMinuit::fIdbg[11]Array of",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:11997,Availability,error,errors,11997,"fCONTw[fMaxpar] array used in mncont; TStringTMinuit::fCfrom; char*TMinuit::fChpt!Character to be plotted at the X,Y contour positions; TStringTMinuit::fCovmes[4]; TString*TMinuit::fCpnam[fMaxpar2] Array of parameters names; TStringTMinuit::fCstatu; TStringTMinuit::fCtitl; TStringTMinuit::fCundef; TStringTMinuit::fCvrsn; TStringTMinuit::fCword; Double_tTMinuit::fDcovarRelative change in covariance matrix; Double_t*TMinuit::fDgrd[fMaxpar] Uncertainties; Double_t*TMinuit::fDirin[fMaxpar] (Internal) step sizes for current step; Double_t*TMinuit::fDirins[fMaxpar] (Internal) step sizes for current step for fixed params; Double_tTMinuit::fEDMEstimated vertical distance to the minimum; Int_tTMinuit::fEmptyInitialization flag (1 = Minuit initialized); Double_tTMinuit::fEpsi; Double_tTMinuit::fEpsma2sqrt(fEpsmac); Double_tTMinuit::fEpsmacmachine precision for floating points:; Double_t*TMinuit::fErn[fMaxpar] Negative Minos errors if calculated; Double_t*TMinuit::fErp[fMaxpar] Positive Minos errors if calculated; void(*)(Int_t&,Double_t*,Double_t&,Double_t*,Int_t)TMinuit::fFCN!; Double_t*TMinuit::fFIXPyy[fMaxpar] array used in mnfixp; Double_tTMinuit::fFval3; Double_t*TMinuit::fG2[fMaxpar]; Double_t*TMinuit::fG2s[fMaxpar]; Double_t*TMinuit::fGRADgf[fMaxpar] array used in mngrad; Double_t*TMinuit::fGin[fMaxpar2]; Double_t*TMinuit::fGlobcc[fMaxpar] Global Correlation Coefficients; Bool_tTMinuit::fGraphicsModetrue if graphics mode on (default); Double_t*TMinuit::fGrd[fMaxpar] First derivatives; Double_t*TMinuit::fGrds[fMaxpar]; Double_t*TMinuit::fGstep[fMaxpar] Step sizes; Double_t*TMinuit::fGsteps[fMaxpar]; Double_t*TMinuit::fHESSyy[fMaxpar] array used in mnhess; Double_t*TMinuit::fIMPRdsav[fMaxpar] array used in mnimpr; Double_t*TMinuit::fIMPRy[fMaxpar] array used in mnimpr; Int_tTMinuit::fISW[7]Array of switches; Int_tTMinuit::fIcirc[2]; Int_tTMinuit::fIcomndNumber of commands; Int_tTMinuit::fIdbg[11]Array of internal debug switches; Int_t*TMinuit::fIpfix[fMaxpar] List of fixe",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:16451,Availability,error,errors,16451,,MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:16726,Availability,error,error,16726," used in mnpars; Double_t*TMinuit::fPSDFs[fMaxpar] array used in mnpsdf; Double_t*TMinuit::fPbar[fMaxpar]; TObject*TMinuit::fPlotPointer to TGraph object created by mncont; Double_t*TMinuit::fPrho[fMaxpar] Minimum point of parabola; Double_t*TMinuit::fPstar[fMaxpar2]; Double_t*TMinuit::fPstst[fMaxpar]; Double_t*TMinuit::fSEEKxbest[fMaxpar] array used in mnseek; Double_t*TMinuit::fSEEKxmid[fMaxpar] array used in mnseek; Double_t*TMinuit::fSIMPy[fMaxpar] array used in mnsimp; Int_tTMinuit::fStatusStatus flag for the last called Minuit function; Double_t*TMinuit::fU[fMaxpar2] External (visible to user in FCN) value of parameters; Double_tTMinuit::fUndefiUndefined number = -54321; Double_tTMinuit::fUpFCN+-UP defines errors (for chisquare fits UP=1); Double_tTMinuit::fUpdflt; Double_t*TMinuit::fVERTpp[fMaxpar] array used in mnvert; Double_t*TMinuit::fVERTq[fMaxpar] array used in mnvert; Double_t*TMinuit::fVERTs[fMaxpar] array used in mnvert; Double_t*TMinuit::fVhmat[fMaxpar5] (Internal) error matrix stored as Half MATrix, since it is symmetric; Double_tTMinuit::fVlimhi; Double_tTMinuit::fVlimlo; Double_t*TMinuit::fVthmat[fMaxpar5] VHMAT is sometimes saved in VTHMAT, especially in MNMNOT; TStringTMinuit::fWarmes[100]; Double_t*TMinuit::fWerr[fMaxpar] External parameters error (standard deviation, defined by UP); Double_t*TMinuit::fWord7[fMaxpar]; Double_t*TMinuit::fX[fMaxpar] Internal parameters values; Double_tTMinuit::fXdircr; Double_tTMinuit::fXmidcr; Double_t*TMinuit::fXpt[fMaxcpt] X array of points for contours; Double_t*TMinuit::fXs[fMaxpar] Internal parameters values saved for fixed params; Double_t*TMinuit::fXt[fMaxpar] Internal parameters values X saved as Xt; Double_t*TMinuit::fXts[fMaxpar] Internal parameters values X saved as Xt for fixed params; Double_tTMinuit::fYdircr; Double_tTMinuit::fYmidcr; Double_t*TMinuit::fYpt[fMaxcpt] Y array of points for contours; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static ",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:17014,Availability,error,error,17014,"Pstst[fMaxpar]; Double_t*TMinuit::fSEEKxbest[fMaxpar] array used in mnseek; Double_t*TMinuit::fSEEKxmid[fMaxpar] array used in mnseek; Double_t*TMinuit::fSIMPy[fMaxpar] array used in mnsimp; Int_tTMinuit::fStatusStatus flag for the last called Minuit function; Double_t*TMinuit::fU[fMaxpar2] External (visible to user in FCN) value of parameters; Double_tTMinuit::fUndefiUndefined number = -54321; Double_tTMinuit::fUpFCN+-UP defines errors (for chisquare fits UP=1); Double_tTMinuit::fUpdflt; Double_t*TMinuit::fVERTpp[fMaxpar] array used in mnvert; Double_t*TMinuit::fVERTq[fMaxpar] array used in mnvert; Double_t*TMinuit::fVERTs[fMaxpar] array used in mnvert; Double_t*TMinuit::fVhmat[fMaxpar5] (Internal) error matrix stored as Half MATrix, since it is symmetric; Double_tTMinuit::fVlimhi; Double_tTMinuit::fVlimlo; Double_t*TMinuit::fVthmat[fMaxpar5] VHMAT is sometimes saved in VTHMAT, especially in MNMNOT; TStringTMinuit::fWarmes[100]; Double_t*TMinuit::fWerr[fMaxpar] External parameters error (standard deviation, defined by UP); Double_t*TMinuit::fWord7[fMaxpar]; Double_t*TMinuit::fX[fMaxpar] Internal parameters values; Double_tTMinuit::fXdircr; Double_tTMinuit::fXmidcr; Double_t*TMinuit::fXpt[fMaxcpt] X array of points for contours; Double_t*TMinuit::fXs[fMaxpar] Internal parameters values saved for fixed params; Double_t*TMinuit::fXt[fMaxpar] Internal parameters values X saved as Xt; Double_t*TMinuit::fXts[fMaxpar] Internal parameters values X saved as Xt for fixed params; Double_tTMinuit::fYdircr; Double_tTMinuit::fYmidcr; Double_t*TMinuit::fYpt[fMaxcpt] Y array of points for contours; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TMinuit::(anonymous)TMinuit::kMAXWARN; stat",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:19516,Availability,error,errors,19516,"ter Target; Int_tfNumParnumber of parameters; vector<Double_t>fParametersvector holding the current parameters. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar); constructor. Int_t Eval(Int_t , Double_t* , Double_t& , Double_t* , Int_t ); std::vector<Double_t> parameters( npar );. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs); Execute a fitter command;; command : command string; args : list of nargs command arguments. void Clear(Option_t* = 0); reset the fitter environment. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx); return global fit parameters; amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters. Int_t GetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc); return current errors for a parameter; ipar : parameter number; eplus : upper error; eminus : lower error; eparab : parabolic error; globcc : global correlation coefficient. Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); set initial values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter. TObject * Clone(const char* ) const; produces a clone of this MinuitWrapper. MinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar). virtual ~MinuitWrapper(); {}. void SetFitterTarget(TMVA::IFitterTarget& target); { fFitterTarget = target; }. » Author: Peter Speckmayer » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:19579,Availability,error,error,19579,"ter Target; Int_tfNumParnumber of parameters; vector<Double_t>fParametersvector holding the current parameters. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar); constructor. Int_t Eval(Int_t , Double_t* , Double_t& , Double_t* , Int_t ); std::vector<Double_t> parameters( npar );. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs); Execute a fitter command;; command : command string; args : list of nargs command arguments. void Clear(Option_t* = 0); reset the fitter environment. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx); return global fit parameters; amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters. Int_t GetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc); return current errors for a parameter; ipar : parameter number; eplus : upper error; eminus : lower error; eparab : parabolic error; globcc : global correlation coefficient. Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); set initial values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter. TObject * Clone(const char* ) const; produces a clone of this MinuitWrapper. MinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar). virtual ~MinuitWrapper(); {}. void SetFitterTarget(TMVA::IFitterTarget& target); { fFitterTarget = target; }. » Author: Peter Speckmayer » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:19601,Availability,error,error,19601,"ter Target; Int_tfNumParnumber of parameters; vector<Double_t>fParametersvector holding the current parameters. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar); constructor. Int_t Eval(Int_t , Double_t* , Double_t& , Double_t* , Int_t ); std::vector<Double_t> parameters( npar );. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs); Execute a fitter command;; command : command string; args : list of nargs command arguments. void Clear(Option_t* = 0); reset the fitter environment. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx); return global fit parameters; amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters. Int_t GetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc); return current errors for a parameter; ipar : parameter number; eplus : upper error; eminus : lower error; eparab : parabolic error; globcc : global correlation coefficient. Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); set initial values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter. TObject * Clone(const char* ) const; produces a clone of this MinuitWrapper. MinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar). virtual ~MinuitWrapper(); {}. void SetFitterTarget(TMVA::IFitterTarget& target); { fFitterTarget = target; }. » Author: Peter Speckmayer » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:19627,Availability,error,error,19627,"ter Target; Int_tfNumParnumber of parameters; vector<Double_t>fParametersvector holding the current parameters. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar); constructor. Int_t Eval(Int_t , Double_t* , Double_t& , Double_t* , Int_t ); std::vector<Double_t> parameters( npar );. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs); Execute a fitter command;; command : command string; args : list of nargs command arguments. void Clear(Option_t* = 0); reset the fitter environment. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx); return global fit parameters; amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters. Int_t GetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc); return current errors for a parameter; ipar : parameter number; eplus : upper error; eminus : lower error; eparab : parabolic error; globcc : global correlation coefficient. Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); set initial values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter. TObject * Clone(const char* ) const; produces a clone of this MinuitWrapper. MinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar). virtual ~MinuitWrapper(); {}. void SetFitterTarget(TMVA::IFitterTarget& target); { fFitterTarget = target; }. » Author: Peter Speckmayer » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:19925,Availability,error,error,19925,"; Int_tfNumParnumber of parameters; vector<Double_t>fParametersvector holding the current parameters. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar); constructor. Int_t Eval(Int_t , Double_t* , Double_t& , Double_t* , Int_t ); std::vector<Double_t> parameters( npar );. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs); Execute a fitter command;; command : command string; args : list of nargs command arguments. void Clear(Option_t* = 0); reset the fitter environment. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx); return global fit parameters; amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters. Int_t GetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc); return current errors for a parameter; ipar : parameter number; eplus : upper error; eminus : lower error; eparab : parabolic error; globcc : global correlation coefficient. Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); set initial values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter. TObject * Clone(const char* ) const; produces a clone of this MinuitWrapper. MinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar). virtual ~MinuitWrapper(); {}. void SetFitterTarget(TMVA::IFitterTarget& target); { fFitterTarget = target; }. » Author: Peter Speckmayer » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:8562,Deployability,Release,Release,8562,"uit::mnvert(Double_t* a, Int_t l, Int_t m, Int_t n, Int_t& ifail); virtual voidTMinuit::mnwarn(const char* copt, const char* corg, const char* cmes); virtual voidTMinuit::mnwerr(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::MinuitWrapper&operator=(const TMVA::MinuitWrapper&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tTMinuit::Release(Int_t parNo); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Int_tTMinuit::SetErrorDef(Double_t up); virtual voidTMinuit::SetFCN(void* fcn); virtual voidTMinuit::SetFCN(void(*)(Int_t&,Double_t*,Double_t&,Double_t*,Int_t) fcn); voidSetFitterTarget(TMVA::IFitterTarget& target); virtual voidTMinuit::SetGraphicsMode(Bool_t mode = kTRUE); virtual voidTMinuit::SetMaxIterations(Int_t maxiter = 500); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTMinuit::SetObjectFit(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); Int_tSetParameter(Int_t ipar, const char*",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:318,Integrability,Wrap,Wrapper,318,". TMVA::MinuitWrapper. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::MinuitWrapper. class TMVA::MinuitWrapper: public TMinuit. Wrapper around MINUIT. Function Members (Methods); public:. virtual~MinuitWrapper(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidTMinuit::BuildArrays(Int_t maxpar = 15); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* = 0); virtual TObject*Clone(const char*) const; virtual Int_tTMinuit::Command(const char* command); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual TObject*TMinuit::Contour(Int_t npoints = 10, Int_t pa1 = 0, Int_t pa2 = 1); virtual voidTNamed::Copy(TObject& named) const; virtual Int_tTMinuit::DefineParameter(Int_t parNo, const char* name, Double_t initVal, Double_t initErr, Double_t lowerLimit, Double_t upperLimit); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTMinuit::DeleteArrays(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tEval(Int_t, Double_t*, Double_t&, Double_t*, Int_t); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); Int_tExecuteCommand(const char* command, Double_t* args, Int_t nargs); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method,",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:3475,Modifiability,Inherit,InheritsFrom,3475,"; Int_tTMinuit::GetMaxIterations() const; TMethodCall*TMinuit::GetMethodCall() const; virtual const char*TNamed::GetName() const; virtual Int_tTMinuit::GetNumFixedPars() const; virtual Int_tTMinuit::GetNumFreePars() const; virtual Int_tTMinuit::GetNumPars() const; TObject*TMinuit::GetObjectFit() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTMinuit::GetParameter(Int_t parNo, Double_t& currentValue, Double_t& currentError) const; virtual TObject*TMinuit::GetPlot() const; Int_tGetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx); Int_tTMinuit::GetStatus() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Int_tTMinuit::Migrad(); TMVA::MinuitWrapperMinuitWrapper(const TMVA::MinuitWrapper&); TMVA::MinuitWrapperMinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar); virtual voidTMinuit::mnamin(); virtual voidTMinuit::mnbins(Double_t a1, Double_t a2, Int_t naa, Double_t& bl, Double_t& bh, Int_t& nb, Double_t& bwid); virtual voidTMinuit::mncalf(Double_t* pvec, Double_t& ycalf); virtual voidTMinuit::mncler(); virtual voidTMinuit::mncntr(Int_t ke1, Int_t ke2, Int_t& ierrf); virtual",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:3541,Modifiability,Inherit,InheritsFrom,3541,"MethodCall() const; virtual const char*TNamed::GetName() const; virtual Int_tTMinuit::GetNumFixedPars() const; virtual Int_tTMinuit::GetNumFreePars() const; virtual Int_tTMinuit::GetNumPars() const; TObject*TMinuit::GetObjectFit() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTMinuit::GetParameter(Int_t parNo, Double_t& currentValue, Double_t& currentError) const; virtual TObject*TMinuit::GetPlot() const; Int_tGetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx); Int_tTMinuit::GetStatus() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Int_tTMinuit::Migrad(); TMVA::MinuitWrapperMinuitWrapper(const TMVA::MinuitWrapper&); TMVA::MinuitWrapperMinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar); virtual voidTMinuit::mnamin(); virtual voidTMinuit::mnbins(Double_t a1, Double_t a2, Int_t naa, Double_t& bl, Double_t& bh, Int_t& nb, Double_t& bwid); virtual voidTMinuit::mncalf(Double_t* pvec, Double_t& ycalf); virtual voidTMinuit::mncler(); virtual voidTMinuit::mncntr(Int_t ke1, Int_t ke2, Int_t& ierrf); virtual voidTMinuit::mncomd(const char* crdbin, Int_t& icondn); virtual v",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:14897,Modifiability,variab,variable,14897,"if a heading should be put out for the next parameter definition; Bool_tTMinuit::fLreportrue if exceptional conditions are put out (default=false); Bool_tTMinuit::fLwarntrue if warning messges are to be put out (default=true); Double_t*TMinuit::fMATUvline[fMaxpar] array used in mnmatu; Double_t*TMinuit::fMIGRflnu[fMaxpar] array used in mnmigr; Double_t*TMinuit::fMIGRgs[fMaxpar] array used in mnmigr; Double_t*TMinuit::fMIGRstep[fMaxpar] array used in mnmigr; Double_t*TMinuit::fMIGRvg[fMaxpar] array used in mnmigr; Double_t*TMinuit::fMIGRxxs[fMaxpar] array used in mnmigr; Double_t*TMinuit::fMNOTgcc[fMaxpar] array used in mnmnot; Double_t*TMinuit::fMNOTw[fMaxpar] array used in mnmnot; Double_t*TMinuit::fMNOTxdev[fMaxpar] array used in mnmnot; Int_tTMinuit::fMaxIterationsMaximum number of iterations; Int_tTMinuit::fMaxcpt; Int_tTMinuit::fMaxextMaximum number of external parameters; Int_tTMinuit::fMaxintMaximum number of internal parameters; Int_tTMinuit::fMaxparMaximum number of parameters; Int_tTMinuit::fMaxpar1fMaxpar*(fMaxpar+1); Int_tTMinuit::fMaxpar2fMaxpar*fMaxpar; Int_tTMinuit::fMaxpar5fMaxpar*(fMaxpar+1)/2; TMethodCall*TMinuit::fMethodCallPointer to MethodCall in case of interpreted function; Int_tTMinuit::fNblockNumber of Minuit data blocks; Int_tTMinuit::fNewpag; Int_t*TMinuit::fNexofi[fMaxpar] External parameters number for currently variable parameters; Int_tTMinuit::fNfcnNumber of calls to FCN; Int_tTMinuit::fNfcnfr; Int_tTMinuit::fNfcnlc; Int_tTMinuit::fNfcnmxMaximum number of calls to FCN; Int_tTMinuit::fNfcwar[20]; Int_t*TMinuit::fNiofex[fMaxpar2] Internal parameters number, or zero if not currently variable; Int_tTMinuit::fNpaglnNumber of lines per page; Int_tTMinuit::fNpagwdPage width; Int_tTMinuit::fNparNumber of free parameters (total number of pars = fNpar + fNfix); Int_tTMinuit::fNpfixNumber of fixed parameters; Int_tTMinuit::fNstkrd; Int_tTMinuit::fNstkwr; Int_tTMinuit::fNu; Int_t*TMinuit::fNvarl[fMaxpar2] parameters flag (-1=undefined, 0=constant.",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:15173,Modifiability,variab,variable,15173,"if a heading should be put out for the next parameter definition; Bool_tTMinuit::fLreportrue if exceptional conditions are put out (default=false); Bool_tTMinuit::fLwarntrue if warning messges are to be put out (default=true); Double_t*TMinuit::fMATUvline[fMaxpar] array used in mnmatu; Double_t*TMinuit::fMIGRflnu[fMaxpar] array used in mnmigr; Double_t*TMinuit::fMIGRgs[fMaxpar] array used in mnmigr; Double_t*TMinuit::fMIGRstep[fMaxpar] array used in mnmigr; Double_t*TMinuit::fMIGRvg[fMaxpar] array used in mnmigr; Double_t*TMinuit::fMIGRxxs[fMaxpar] array used in mnmigr; Double_t*TMinuit::fMNOTgcc[fMaxpar] array used in mnmnot; Double_t*TMinuit::fMNOTw[fMaxpar] array used in mnmnot; Double_t*TMinuit::fMNOTxdev[fMaxpar] array used in mnmnot; Int_tTMinuit::fMaxIterationsMaximum number of iterations; Int_tTMinuit::fMaxcpt; Int_tTMinuit::fMaxextMaximum number of external parameters; Int_tTMinuit::fMaxintMaximum number of internal parameters; Int_tTMinuit::fMaxparMaximum number of parameters; Int_tTMinuit::fMaxpar1fMaxpar*(fMaxpar+1); Int_tTMinuit::fMaxpar2fMaxpar*fMaxpar; Int_tTMinuit::fMaxpar5fMaxpar*(fMaxpar+1)/2; TMethodCall*TMinuit::fMethodCallPointer to MethodCall in case of interpreted function; Int_tTMinuit::fNblockNumber of Minuit data blocks; Int_tTMinuit::fNewpag; Int_t*TMinuit::fNexofi[fMaxpar] External parameters number for currently variable parameters; Int_tTMinuit::fNfcnNumber of calls to FCN; Int_tTMinuit::fNfcnfr; Int_tTMinuit::fNfcnlc; Int_tTMinuit::fNfcnmxMaximum number of calls to FCN; Int_tTMinuit::fNfcwar[20]; Int_t*TMinuit::fNiofex[fMaxpar2] Internal parameters number, or zero if not currently variable; Int_tTMinuit::fNpaglnNumber of lines per page; Int_tTMinuit::fNpagwdPage width; Int_tTMinuit::fNparNumber of free parameters (total number of pars = fNpar + fNfix); Int_tTMinuit::fNpfixNumber of fixed parameters; Int_tTMinuit::fNstkrd; Int_tTMinuit::fNstkwr; Int_tTMinuit::fNu; Int_t*TMinuit::fNvarl[fMaxpar2] parameters flag (-1=undefined, 0=constant.",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:18663,Modifiability,Inherit,Inheritance,18663,"::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TMinuit::(anonymous)TMinuit::kMAXWARN; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TMVA::IFitterTarget&fFitterTargetfitter Target; Int_tfNumParnumber of parameters; vector<Double_t>fParametersvector holding the current parameters. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar); constructor. Int_t Eval(Int_t , Double_t* , Double_t& , Double_t* , Int_t ); std::vector<Double_t> parameters( npar );. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs); Execute a fitter command;; command : command string; args : list of nargs command arguments. void Clear(Option_t* = 0); reset the fitter environment. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx); return global fit parameters; amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters. Int_t GetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc); return current errors for a parameter; ipar : parameter number; eplus : upper error; eminus : lower error; eparab : parabolic error; globcc : global correlation coefficient. Int_t SetParam",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:18676,Modifiability,Inherit,Inherited,18676,"::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TMinuit::(anonymous)TMinuit::kMAXWARN; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TMVA::IFitterTarget&fFitterTargetfitter Target; Int_tfNumParnumber of parameters; vector<Double_t>fParametersvector holding the current parameters. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar); constructor. Int_t Eval(Int_t , Double_t* , Double_t& , Double_t* , Int_t ); std::vector<Double_t> parameters( npar );. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs); Execute a fitter command;; command : command string; args : list of nargs command arguments. void Clear(Option_t* = 0); reset the fitter environment. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx); return global fit parameters; amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters. Int_t GetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc); return current errors for a parameter; ipar : parameter number; eplus : upper error; eminus : lower error; eparab : parabolic error; globcc : global correlation coefficient. Int_t SetParam",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:19344,Modifiability,variab,variable,19344,"TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TMVA::IFitterTarget&fFitterTargetfitter Target; Int_tfNumParnumber of parameters; vector<Double_t>fParametersvector holding the current parameters. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar); constructor. Int_t Eval(Int_t , Double_t* , Double_t& , Double_t* , Int_t ); std::vector<Double_t> parameters( npar );. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs); Execute a fitter command;; command : command string; args : list of nargs command arguments. void Clear(Option_t* = 0); reset the fitter environment. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx); return global fit parameters; amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters. Int_t GetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc); return current errors for a parameter; ipar : parameter number; eplus : upper error; eminus : lower error; eparab : parabolic error; globcc : global correlation coefficient. Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); set initial values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter. TObject * Clone(const char* ) const; produces a clone of this MinuitWrapper. MinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar). virtual ~MinuitWrapper(); {}. void SetFitterTarget(TMVA::IFitterTarget& target); { fFitterTarget = target; ",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:3365,Security,Hash,Hash,3365,"e_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc); virtual const char*TObject::GetIconName() const; Int_tTMinuit::GetMaxIterations() const; TMethodCall*TMinuit::GetMethodCall() const; virtual const char*TNamed::GetName() const; virtual Int_tTMinuit::GetNumFixedPars() const; virtual Int_tTMinuit::GetNumFreePars() const; virtual Int_tTMinuit::GetNumPars() const; TObject*TMinuit::GetObjectFit() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTMinuit::GetParameter(Int_t parNo, Double_t& currentValue, Double_t& currentError) const; virtual TObject*TMinuit::GetPlot() const; Int_tGetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx); Int_tTMinuit::GetStatus() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Int_tTMinuit::Migrad(); TMVA::MinuitWrapperMinuitWrapper(const TMVA::MinuitWrapper&); TMVA::MinuitWrapperMinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar); virtual voidTMinuit::mnamin(); virtual voidTMinuit::mnbins(Double_t a1, Double_t a2, Int_t naa, Double_t& bl, Double_t& bh, Int_t& nb, Double_t& bwid); virtual voidTMinuit::mncalf(Double_t* pvec, Double_",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:10079,Testability,Test,TestBit,10079,"; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tTMinuit::Release(Int_t parNo); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Int_tTMinuit::SetErrorDef(Double_t up); virtual voidTMinuit::SetFCN(void* fcn); virtual voidTMinuit::SetFCN(void(*)(Int_t&,Double_t*,Double_t&,Double_t*,Int_t) fcn); voidSetFitterTarget(TMVA::IFitterTarget& target); virtual voidTMinuit::SetGraphicsMode(Bool_t mode = kTRUE); virtual voidTMinuit::SetMaxIterations(Int_t maxiter = 500); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTMinuit::SetObjectFit(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); Int_tSetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); virtual Int_tTMinuit::SetPrintLevel(Int_t printLevel = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:10118,Testability,Test,TestBits,10118,"; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tTMinuit::Release(Int_t parNo); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Int_tTMinuit::SetErrorDef(Double_t up); virtual voidTMinuit::SetFCN(void* fcn); virtual voidTMinuit::SetFCN(void(*)(Int_t&,Double_t*,Double_t&,Double_t*,Int_t) fcn); voidSetFitterTarget(TMVA::IFitterTarget& target); virtual voidTMinuit::SetGraphicsMode(Bool_t mode = kTRUE); virtual voidTMinuit::SetMaxIterations(Int_t maxiter = 500); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTMinuit::SetObjectFit(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); Int_tSetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); virtual Int_tTMinuit::SetPrintLevel(Int_t printLevel = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MinuitWrapper.html:19088,Usability,Clear,Clear,19088,"enu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TMVA::IFitterTarget&fFitterTargetfitter Target; Int_tfNumParnumber of parameters; vector<Double_t>fParametersvector holding the current parameters. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar); constructor. Int_t Eval(Int_t , Double_t* , Double_t& , Double_t* , Int_t ); std::vector<Double_t> parameters( npar );. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs); Execute a fitter command;; command : command string; args : list of nargs command arguments. void Clear(Option_t* = 0); reset the fitter environment. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx); return global fit parameters; amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters. Int_t GetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc); return current errors for a parameter; ipar : parameter number; eplus : upper error; eminus : lower error; eparab : parabolic error; globcc : global correlation coefficient. Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); set initial values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter. TObject * Clone(const char* ) const; produces a clone of this MinuitWrapper. Minuit",MatchSource.WIKI,root/html604/TMVA__MinuitWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MinuitWrapper.html
https://root.cern/root/html604/TMVA__MisClassificationError.html:1671,Availability,error,error,1671,"TMVA::MisClassificationError. class TMVA::MisClassificationError: public TMVA::SeparationBase. Implementation of the MisClassificationError as separation criterion. Function Members (Methods); public:. virtual~MisClassificationError(); static TClass*Class(); const TString&TMVA::SeparationBase::GetName(); virtual Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::MisClassificationErrorMisClassificationError(); TMVA::MisClassificationErrorMisClassificationError(const TMVA::MisClassificationError& g); TMVA::MisClassificationError&operator=(const TMVA::MisClassificationError&); TMVA::SeparationBaseTMVA::SeparationBase::SeparationBase(); TMVA::SeparationBaseTMVA::SeparationBase::SeparationBase(const TMVA::SeparationBase& s); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Misclassifiacton error criterion: 1-max(p, 1-p) (p: purity= s/(s+b)). MisClassificationError(); consturctor for the Misclassification error. { fName = ""MisCl""; }. MisClassificationError(const TMVA::MisClassificationError& g); copy constructor. {}. virtual ~MisClassificationError(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MisClassificationError.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MisClassificationError.html
https://root.cern/root/html604/TMVA__MisClassificationError.html:1788,Availability,error,error,1788,"TMVA::MisClassificationError. class TMVA::MisClassificationError: public TMVA::SeparationBase. Implementation of the MisClassificationError as separation criterion. Function Members (Methods); public:. virtual~MisClassificationError(); static TClass*Class(); const TString&TMVA::SeparationBase::GetName(); virtual Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::MisClassificationErrorMisClassificationError(); TMVA::MisClassificationErrorMisClassificationError(const TMVA::MisClassificationError& g); TMVA::MisClassificationError&operator=(const TMVA::MisClassificationError&); TMVA::SeparationBaseTMVA::SeparationBase::SeparationBase(); TMVA::SeparationBaseTMVA::SeparationBase::SeparationBase(const TMVA::SeparationBase& s); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Misclassifiacton error criterion: 1-max(p, 1-p) (p: purity= s/(s+b)). MisClassificationError(); consturctor for the Misclassification error. { fName = ""MisCl""; }. MisClassificationError(const TMVA::MisClassificationError& g); copy constructor. {}. virtual ~MisClassificationError(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MisClassificationError.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MisClassificationError.html
https://root.cern/root/html604/TMVA__MisClassificationError.html:1510,Modifiability,Inherit,Inheritance,1510,"TMVA::MisClassificationError. class TMVA::MisClassificationError: public TMVA::SeparationBase. Implementation of the MisClassificationError as separation criterion. Function Members (Methods); public:. virtual~MisClassificationError(); static TClass*Class(); const TString&TMVA::SeparationBase::GetName(); virtual Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::MisClassificationErrorMisClassificationError(); TMVA::MisClassificationErrorMisClassificationError(const TMVA::MisClassificationError& g); TMVA::MisClassificationError&operator=(const TMVA::MisClassificationError&); TMVA::SeparationBaseTMVA::SeparationBase::SeparationBase(); TMVA::SeparationBaseTMVA::SeparationBase::SeparationBase(const TMVA::SeparationBase& s); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Misclassifiacton error criterion: 1-max(p, 1-p) (p: purity= s/(s+b)). MisClassificationError(); consturctor for the Misclassification error. { fName = ""MisCl""; }. MisClassificationError(const TMVA::MisClassificationError& g); copy constructor. {}. virtual ~MisClassificationError(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MisClassificationError.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MisClassificationError.html
https://root.cern/root/html604/TMVA__MisClassificationError.html:1523,Modifiability,Inherit,Inherited,1523,"TMVA::MisClassificationError. class TMVA::MisClassificationError: public TMVA::SeparationBase. Implementation of the MisClassificationError as separation criterion. Function Members (Methods); public:. virtual~MisClassificationError(); static TClass*Class(); const TString&TMVA::SeparationBase::GetName(); virtual Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::MisClassificationErrorMisClassificationError(); TMVA::MisClassificationErrorMisClassificationError(const TMVA::MisClassificationError& g); TMVA::MisClassificationError&operator=(const TMVA::MisClassificationError&); TMVA::SeparationBaseTMVA::SeparationBase::SeparationBase(); TMVA::SeparationBaseTMVA::SeparationBase::SeparationBase(const TMVA::SeparationBase& s); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Misclassifiacton error criterion: 1-max(p, 1-p) (p: purity= s/(s+b)). MisClassificationError(); consturctor for the Misclassification error. { fName = ""MisCl""; }. MisClassificationError(const TMVA::MisClassificationError& g); copy constructor. {}. virtual ~MisClassificationError(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MisClassificationError.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MisClassificationError.html
https://root.cern/root/html604/TMVA__MsgLogger.html:1872,Availability,Error,Error,1872,"se(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidbasic_ios<char,char_traits<char> >::clear(ios_base::iostate __state = goodbit); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; basic_ios<char,char_traits<char> >&basic_ios<char,char_traits<char> >::copyfmt(const basic_ios<char,char_traits<char> >& __rhs); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidEnableOutput(); static TMVA::MsgLogger&Endmsg(TMVA::MsgLogger& logger); boolbasic_ios<char,char_traits<char> >::eof() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; ios_base::iostatebasic_ios<char,char_traits<char> >::exceptions() const; voidbasic_ios<char,char_traits<char> >::exceptions(ios_base::iostate __except); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); boolbasic_ios<char,char_traits<char> >::fail() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; basic_ios<char,char_traits<char> >::char_typebasic_ios<char,char_traits<char> >::fill() const; basic_ios<char,char_traits<char> >::char_typebasic_ios<char,char_traits<char> >::fill(basic_ios<char,char_traits<char> >::char_type __ch); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; ios_base::fmtflagsios_base::flags() const; ios_base::fmtflagsios_base::",MatchSource.WIKI,root/html604/TMVA__MsgLogger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MsgLogger.html
https://root.cern/root/html604/TMVA__MsgLogger.html:2154,Availability,error,error,2154,"tual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; basic_ios<char,char_traits<char> >&basic_ios<char,char_traits<char> >::copyfmt(const basic_ios<char,char_traits<char> >& __rhs); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidEnableOutput(); static TMVA::MsgLogger&Endmsg(TMVA::MsgLogger& logger); boolbasic_ios<char,char_traits<char> >::eof() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; ios_base::iostatebasic_ios<char,char_traits<char> >::exceptions() const; voidbasic_ios<char,char_traits<char> >::exceptions(ios_base::iostate __except); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); boolbasic_ios<char,char_traits<char> >::fail() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; basic_ios<char,char_traits<char> >::char_typebasic_ios<char,char_traits<char> >::fill() const; basic_ios<char,char_traits<char> >::char_typebasic_ios<char,char_traits<char> >::fill(basic_ios<char,char_traits<char> >::char_type __ch); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; ios_base::fmtflagsios_base::flags() const; ios_base::fmtflagsios_base::flags(ios_base::fmtflags __fmtfl); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::flush(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); stringGetFormattedSource() const; virtual const char*TObj",MatchSource.WIKI,root/html604/TMVA__MsgLogger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MsgLogger.html
https://root.cern/root/html604/TMVA__MsgLogger.html:2238,Availability,error,error,2238,"ect& object) const; basic_ios<char,char_traits<char> >&basic_ios<char,char_traits<char> >::copyfmt(const basic_ios<char,char_traits<char> >& __rhs); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidEnableOutput(); static TMVA::MsgLogger&Endmsg(TMVA::MsgLogger& logger); boolbasic_ios<char,char_traits<char> >::eof() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; ios_base::iostatebasic_ios<char,char_traits<char> >::exceptions() const; voidbasic_ios<char,char_traits<char> >::exceptions(ios_base::iostate __except); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); boolbasic_ios<char,char_traits<char> >::fail() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; basic_ios<char,char_traits<char> >::char_typebasic_ios<char,char_traits<char> >::fill() const; basic_ios<char,char_traits<char> >::char_typebasic_ios<char,char_traits<char> >::fill(basic_ios<char,char_traits<char> >::char_type __ch); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; ios_base::fmtflagsios_base::flags() const; ios_base::fmtflagsios_base::flags(ios_base::fmtflags __fmtfl); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::flush(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); stringGetFormattedSource() const; virtual const char*TObject::GetIconName() const; localeios_base::getloc() const; static UInt_tGetMaxSourceS",MatchSource.WIKI,root/html604/TMVA__MsgLogger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MsgLogger.html
https://root.cern/root/html604/TMVA__MsgLogger.html:15341,Integrability,message,message,15341," name; static const stringfgSuffixsuffix following source name; static atomic<const map<TMVA::EMsgType,string>*>fgTypeMapmatches output types with strings. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InhibitOutput(); { fgInhibitOutput = kTRUE; }. void EnableOutput(). { fgInhibitOutput = kFALSE; }. MsgLogger(const TObject* source, TMVA::EMsgType minType = kINFO); constructor. MsgLogger(const string& source, TMVA::EMsgType minType = kINFO); constructor. MsgLogger( EMsgType minType ); constructor. MsgLogger( const MsgLogger& parent ); copy constructor. ~MsgLogger(); destructor. TMVA::MsgLogger& operator=(const TMVA::MsgLogger& parent); assingment operator. std::string GetFormattedSource() const; make sure the source name is no longer than fgMaxSourceSize:. std::string GetPrintedSource() const; the full logger prefix. void Send(); activates the logger writer. void WriteMsg(TMVA::EMsgType type, const string& line) const; putting the output string, the message type, and the color; switcher together into a single string. TMVA::MsgLogger& Endmsg(TMVA::MsgLogger& logger); end line. void InitMaps(); Create the message type and color maps. void SetSource(const string& source); Accessors. { fStrSource = source; }. EMsgType GetMinType() const; { return fMinType; }. void SetMinType(TMVA::EMsgType minType); { fMinType = minType; }. std::string GetSource() const; { return fStrSource; }. UInt_t GetMaxSourceSize(); { return (const UInt_t)fgMaxSourceSize; }. MsgLogger& operator<<( MsgLogger& ( *_f )( MsgLogger& ) ); Accept stream modifiers. MsgLogger& operator<<( std::ostream& ( *_f )( std::ostream& ) ). MsgLogger& operator<<( std::ios& ( *_f )( std::ios& ) ). MsgLogger& operator<<( EMsgType type ); Accept message type specification. » Author: Attila Krasznahorkay, Andreas Hoecker, Joerg Stelzer, Eckhard von Toerne » Copyright (c) 2005-2011: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been auto",MatchSource.WIKI,root/html604/TMVA__MsgLogger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MsgLogger.html
https://root.cern/root/html604/TMVA__MsgLogger.html:15498,Integrability,message,message,15498,"put types with strings. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InhibitOutput(); { fgInhibitOutput = kTRUE; }. void EnableOutput(). { fgInhibitOutput = kFALSE; }. MsgLogger(const TObject* source, TMVA::EMsgType minType = kINFO); constructor. MsgLogger(const string& source, TMVA::EMsgType minType = kINFO); constructor. MsgLogger( EMsgType minType ); constructor. MsgLogger( const MsgLogger& parent ); copy constructor. ~MsgLogger(); destructor. TMVA::MsgLogger& operator=(const TMVA::MsgLogger& parent); assingment operator. std::string GetFormattedSource() const; make sure the source name is no longer than fgMaxSourceSize:. std::string GetPrintedSource() const; the full logger prefix. void Send(); activates the logger writer. void WriteMsg(TMVA::EMsgType type, const string& line) const; putting the output string, the message type, and the color; switcher together into a single string. TMVA::MsgLogger& Endmsg(TMVA::MsgLogger& logger); end line. void InitMaps(); Create the message type and color maps. void SetSource(const string& source); Accessors. { fStrSource = source; }. EMsgType GetMinType() const; { return fMinType; }. void SetMinType(TMVA::EMsgType minType); { fMinType = minType; }. std::string GetSource() const; { return fStrSource; }. UInt_t GetMaxSourceSize(); { return (const UInt_t)fgMaxSourceSize; }. MsgLogger& operator<<( MsgLogger& ( *_f )( MsgLogger& ) ); Accept stream modifiers. MsgLogger& operator<<( std::ostream& ( *_f )( std::ostream& ) ). MsgLogger& operator<<( std::ios& ( *_f )( std::ios& ) ). MsgLogger& operator<<( EMsgType type ); Accept message type specification. » Author: Attila Krasznahorkay, Andreas Hoecker, Joerg Stelzer, Eckhard von Toerne » Copyright (c) 2005-2011: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MsgLogger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MsgLogger.html
https://root.cern/root/html604/TMVA__MsgLogger.html:16097,Integrability,message,message,16097,"put types with strings. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InhibitOutput(); { fgInhibitOutput = kTRUE; }. void EnableOutput(). { fgInhibitOutput = kFALSE; }. MsgLogger(const TObject* source, TMVA::EMsgType minType = kINFO); constructor. MsgLogger(const string& source, TMVA::EMsgType minType = kINFO); constructor. MsgLogger( EMsgType minType ); constructor. MsgLogger( const MsgLogger& parent ); copy constructor. ~MsgLogger(); destructor. TMVA::MsgLogger& operator=(const TMVA::MsgLogger& parent); assingment operator. std::string GetFormattedSource() const; make sure the source name is no longer than fgMaxSourceSize:. std::string GetPrintedSource() const; the full logger prefix. void Send(); activates the logger writer. void WriteMsg(TMVA::EMsgType type, const string& line) const; putting the output string, the message type, and the color; switcher together into a single string. TMVA::MsgLogger& Endmsg(TMVA::MsgLogger& logger); end line. void InitMaps(); Create the message type and color maps. void SetSource(const string& source); Accessors. { fStrSource = source; }. EMsgType GetMinType() const; { return fMinType; }. void SetMinType(TMVA::EMsgType minType); { fMinType = minType; }. std::string GetSource() const; { return fStrSource; }. UInt_t GetMaxSourceSize(); { return (const UInt_t)fgMaxSourceSize; }. MsgLogger& operator<<( MsgLogger& ( *_f )( MsgLogger& ) ); Accept stream modifiers. MsgLogger& operator<<( std::ostream& ( *_f )( std::ostream& ) ). MsgLogger& operator<<( std::ios& ( *_f )( std::ios& ) ). MsgLogger& operator<<( EMsgType type ); Accept message type specification. » Author: Attila Krasznahorkay, Andreas Hoecker, Joerg Stelzer, Eckhard von Toerne » Copyright (c) 2005-2011: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MsgLogger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MsgLogger.html
https://root.cern/root/html604/TMVA__MsgLogger.html:3930,Modifiability,Inherit,InheritsFrom,3930,"aits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::flush(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); stringGetFormattedSource() const; virtual const char*TObject::GetIconName() const; localeios_base::getloc() const; static UInt_tGetMaxSourceSize(); TMVA::EMsgTypeGetMinType() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; stringGetPrintedSource() const; stringGetSource() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; boolbasic_ios<char,char_traits<char> >::good() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; localebasic_ios<char,char_traits<char> >::imbue(const locale& __loc); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; static voidInhibitOutput(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; long&ios_base::iword(int __ix); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; TMVA::MsgLoggerMsgLogger(TMVA::EMsgType minType = kINFO); TMVA::MsgLoggerMsgLogger(const TMVA::MsgLogger& parent); TMVA::MsgLoggerMsgLogger(const TObject* source, TMVA::EMsgType minType = kINFO); TMVA::MsgLoggerMsgLogger(const string& source, TMVA::EMsgType minType = kINFO); charbasic_ios<char,char_traits<char> >::narrow(basic_ios<char,char_traits<char> >::char_type __c, char __dfault) const; virtual Bool_tTObject::Notify(",MatchSource.WIKI,root/html604/TMVA__MsgLogger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MsgLogger.html
https://root.cern/root/html604/TMVA__MsgLogger.html:3996,Modifiability,Inherit,InheritsFrom,3996,">::flush(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); stringGetFormattedSource() const; virtual const char*TObject::GetIconName() const; localeios_base::getloc() const; static UInt_tGetMaxSourceSize(); TMVA::EMsgTypeGetMinType() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; stringGetPrintedSource() const; stringGetSource() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; boolbasic_ios<char,char_traits<char> >::good() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; localebasic_ios<char,char_traits<char> >::imbue(const locale& __loc); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; static voidInhibitOutput(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; long&ios_base::iword(int __ix); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; TMVA::MsgLoggerMsgLogger(TMVA::EMsgType minType = kINFO); TMVA::MsgLoggerMsgLogger(const TMVA::MsgLogger& parent); TMVA::MsgLoggerMsgLogger(const TObject* source, TMVA::EMsgType minType = kINFO); TMVA::MsgLoggerMsgLogger(const string& source, TMVA::EMsgType minType = kINFO); charbasic_ios<char,char_traits<char> >::narrow(basic_ios<char,char_traits<char> >::char_type __c, char __dfault) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers,",MatchSource.WIKI,root/html604/TMVA__MsgLogger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MsgLogger.html
https://root.cern/root/html604/TMVA__MsgLogger.html:14498,Modifiability,Inherit,Inheritance,14498,"sic_ios<char,char_traits<char> >::_M_tie; streamsizeios_base::_M_width; ios_base::_Words*ios_base::_M_word; intios_base::_M_word_size; ios_base::_Wordsios_base::_M_word_zero; static ios_base::(anonymous)ios_base::_S_local_word_size. private:. TMVA::EMsgTypefActiveTypeactive type; TMVA::EMsgTypefMinTypeminimum type for output; const TObject*fObjSourcethe source TObject (used for name); stringfStrSourcealternative string source; static atomic<const map<TMVA::EMsgType,string>*>fgColorMapmatches output types with terminal colors; static atomic<Bool_t>fgInhibitOutputflag to suppress all output; static const UInt_tfgMaxSourceSizemaximum length of source name; static atomic<Bool_t>fgOutputSupresseddisable the output globaly (used by generic booster); static const stringfgPrefixthe prefix of the source name; static const stringfgSuffixsuffix following source name; static atomic<const map<TMVA::EMsgType,string>*>fgTypeMapmatches output types with strings. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InhibitOutput(); { fgInhibitOutput = kTRUE; }. void EnableOutput(). { fgInhibitOutput = kFALSE; }. MsgLogger(const TObject* source, TMVA::EMsgType minType = kINFO); constructor. MsgLogger(const string& source, TMVA::EMsgType minType = kINFO); constructor. MsgLogger( EMsgType minType ); constructor. MsgLogger( const MsgLogger& parent ); copy constructor. ~MsgLogger(); destructor. TMVA::MsgLogger& operator=(const TMVA::MsgLogger& parent); assingment operator. std::string GetFormattedSource() const; make sure the source name is no longer than fgMaxSourceSize:. std::string GetPrintedSource() const; the full logger prefix. void Send(); activates the logger writer. void WriteMsg(TMVA::EMsgType type, const string& line) const; putting the output string, the message type, and the color; switcher together into a single string. TMVA::MsgLogger& Endmsg(TMVA::MsgLogger& logger); end line. void InitMaps(); Create the message type and color map",MatchSource.WIKI,root/html604/TMVA__MsgLogger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MsgLogger.html
https://root.cern/root/html604/TMVA__MsgLogger.html:14511,Modifiability,Inherit,Inherited,14511,"sic_ios<char,char_traits<char> >::_M_tie; streamsizeios_base::_M_width; ios_base::_Words*ios_base::_M_word; intios_base::_M_word_size; ios_base::_Wordsios_base::_M_word_zero; static ios_base::(anonymous)ios_base::_S_local_word_size. private:. TMVA::EMsgTypefActiveTypeactive type; TMVA::EMsgTypefMinTypeminimum type for output; const TObject*fObjSourcethe source TObject (used for name); stringfStrSourcealternative string source; static atomic<const map<TMVA::EMsgType,string>*>fgColorMapmatches output types with terminal colors; static atomic<Bool_t>fgInhibitOutputflag to suppress all output; static const UInt_tfgMaxSourceSizemaximum length of source name; static atomic<Bool_t>fgOutputSupresseddisable the output globaly (used by generic booster); static const stringfgPrefixthe prefix of the source name; static const stringfgSuffixsuffix following source name; static atomic<const map<TMVA::EMsgType,string>*>fgTypeMapmatches output types with strings. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InhibitOutput(); { fgInhibitOutput = kTRUE; }. void EnableOutput(). { fgInhibitOutput = kFALSE; }. MsgLogger(const TObject* source, TMVA::EMsgType minType = kINFO); constructor. MsgLogger(const string& source, TMVA::EMsgType minType = kINFO); constructor. MsgLogger( EMsgType minType ); constructor. MsgLogger( const MsgLogger& parent ); copy constructor. ~MsgLogger(); destructor. TMVA::MsgLogger& operator=(const TMVA::MsgLogger& parent); assingment operator. std::string GetFormattedSource() const; make sure the source name is no longer than fgMaxSourceSize:. std::string GetPrintedSource() const; the full logger prefix. void Send(); activates the logger writer. void WriteMsg(TMVA::EMsgType type, const string& line) const; putting the output string, the message type, and the color; switcher together into a single string. TMVA::MsgLogger& Endmsg(TMVA::MsgLogger& logger); end line. void InitMaps(); Create the message type and color map",MatchSource.WIKI,root/html604/TMVA__MsgLogger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MsgLogger.html
https://root.cern/root/html604/TMVA__MsgLogger.html:3750,Security,Hash,Hash,3750,"ject*TObject::FindObject(const TObject* obj) const; ios_base::fmtflagsios_base::flags() const; ios_base::fmtflagsios_base::flags(ios_base::fmtflags __fmtfl); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::flush(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); stringGetFormattedSource() const; virtual const char*TObject::GetIconName() const; localeios_base::getloc() const; static UInt_tGetMaxSourceSize(); TMVA::EMsgTypeGetMinType() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; stringGetPrintedSource() const; stringGetSource() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; boolbasic_ios<char,char_traits<char> >::good() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; localebasic_ios<char,char_traits<char> >::imbue(const locale& __loc); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; static voidInhibitOutput(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; long&ios_base::iword(int __ix); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; TMVA::MsgLoggerMsgLogger(TMVA::EMsgType minType = kINFO); TMVA::MsgLoggerMsgLogger(const TMVA::MsgLogger& parent); TMVA::MsgLoggerMsgLogger(const TObject* source, TMVA::EMsgType minType = kINFO); TMVA::MsgLoggerMsgLogger(const string& source,",MatchSource.WIKI,root/html604/TMVA__MsgLogger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MsgLogger.html
https://root.cern/root/html604/TMVA__MsgLogger.html:15565,Security,Access,Accessors,15565,"put types with strings. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InhibitOutput(); { fgInhibitOutput = kTRUE; }. void EnableOutput(). { fgInhibitOutput = kFALSE; }. MsgLogger(const TObject* source, TMVA::EMsgType minType = kINFO); constructor. MsgLogger(const string& source, TMVA::EMsgType minType = kINFO); constructor. MsgLogger( EMsgType minType ); constructor. MsgLogger( const MsgLogger& parent ); copy constructor. ~MsgLogger(); destructor. TMVA::MsgLogger& operator=(const TMVA::MsgLogger& parent); assingment operator. std::string GetFormattedSource() const; make sure the source name is no longer than fgMaxSourceSize:. std::string GetPrintedSource() const; the full logger prefix. void Send(); activates the logger writer. void WriteMsg(TMVA::EMsgType type, const string& line) const; putting the output string, the message type, and the color; switcher together into a single string. TMVA::MsgLogger& Endmsg(TMVA::MsgLogger& logger); end line. void InitMaps(); Create the message type and color maps. void SetSource(const string& source); Accessors. { fStrSource = source; }. EMsgType GetMinType() const; { return fMinType; }. void SetMinType(TMVA::EMsgType minType); { fMinType = minType; }. std::string GetSource() const; { return fStrSource; }. UInt_t GetMaxSourceSize(); { return (const UInt_t)fgMaxSourceSize; }. MsgLogger& operator<<( MsgLogger& ( *_f )( MsgLogger& ) ); Accept stream modifiers. MsgLogger& operator<<( std::ostream& ( *_f )( std::ostream& ) ). MsgLogger& operator<<( std::ios& ( *_f )( std::ios& ) ). MsgLogger& operator<<( EMsgType type ); Accept message type specification. » Author: Attila Krasznahorkay, Andreas Hoecker, Joerg Stelzer, Eckhard von Toerne » Copyright (c) 2005-2011: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__MsgLogger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MsgLogger.html
https://root.cern/root/html604/TMVA__MsgLogger.html:1789,Testability,log,logger,1789,"""""); boolbasic_ios<char,char_traits<char> >::bad() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidbasic_ios<char,char_traits<char> >::clear(ios_base::iostate __state = goodbit); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; basic_ios<char,char_traits<char> >&basic_ios<char,char_traits<char> >::copyfmt(const basic_ios<char,char_traits<char> >& __rhs); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidEnableOutput(); static TMVA::MsgLogger&Endmsg(TMVA::MsgLogger& logger); boolbasic_ios<char,char_traits<char> >::eof() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; ios_base::iostatebasic_ios<char,char_traits<char> >::exceptions() const; voidbasic_ios<char,char_traits<char> >::exceptions(ios_base::iostate __except); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); boolbasic_ios<char,char_traits<char> >::fail() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; basic_ios<char,char_traits<char> >::char_typebasic_ios<char,char_traits<char> >::fill() const; basic_ios<char,char_traits<char> >::char_typebasic_ios<char,char_traits<char> >::fill(basic_ios<char,char_traits<char> >::char_type __ch); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* o",MatchSource.WIKI,root/html604/TMVA__MsgLogger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MsgLogger.html
https://root.cern/root/html604/TMVA__MsgLogger.html:8722,Testability,Test,TestBit,8722,"mtflags __fmtfl, ios_base::fmtflags __mask); voidSetMinType(TMVA::EMsgType minType); static voidTObject::SetObjectStat(Bool_t stat); voidSetSource(const string& source); voidbasic_ios<char,char_traits<char> >::setstate(ios_base::iostate __state); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; basic_ostringstream<char,char_traits<char>,allocator<char> >::__string_typebasic_ostringstream<char,char_traits<char>,allocator<char> >::str() const; voidbasic_ostringstream<char,char_traits<char>,allocator<char> >::str(const basic_ostringstream<char,char_traits<char>,allocator<char> >::__string_type& __s); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); static boolios_base::sync_with_stdio(bool __sync = true); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; basic_ostream<char,char_traits<char> >::pos_typebasic_ostream<char,char_traits<char> >::tellp(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; basic_ostream<char,char_traits<char> >*basic_ios<char,char_traits<char> >::tie() const; basic_ostream<char,char_traits<char> >*basic_ios<char,char_traits<char> >::tie(basic_ostream<char,char_traits<char> >* __tiestr); voidios_base::unsetf(ios_base::fmtflags __mask); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; basic_ios<char,char_traits<char> >::char_typebasic_ios<char,char_traits<char> >::widen(char __c) const; streamsizeios_base::width() const; streamsizeios_base::width(streamsize __wide); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::write(const basic_ostream<char,char_traits<char> >::char_type* __s, streamsize __n); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; static in",MatchSource.WIKI,root/html604/TMVA__MsgLogger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MsgLogger.html
https://root.cern/root/html604/TMVA__MsgLogger.html:8761,Testability,Test,TestBits,8761,"s_base::fmtflags __mask); voidSetMinType(TMVA::EMsgType minType); static voidTObject::SetObjectStat(Bool_t stat); voidSetSource(const string& source); voidbasic_ios<char,char_traits<char> >::setstate(ios_base::iostate __state); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; basic_ostringstream<char,char_traits<char>,allocator<char> >::__string_typebasic_ostringstream<char,char_traits<char>,allocator<char> >::str() const; voidbasic_ostringstream<char,char_traits<char>,allocator<char> >::str(const basic_ostringstream<char,char_traits<char>,allocator<char> >::__string_type& __s); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); static boolios_base::sync_with_stdio(bool __sync = true); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; basic_ostream<char,char_traits<char> >::pos_typebasic_ostream<char,char_traits<char> >::tellp(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; basic_ostream<char,char_traits<char> >*basic_ios<char,char_traits<char> >::tie() const; basic_ostream<char,char_traits<char> >*basic_ios<char,char_traits<char> >::tie(basic_ostream<char,char_traits<char> >* __tiestr); voidios_base::unsetf(ios_base::fmtflags __mask); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; basic_ios<char,char_traits<char> >::char_typebasic_ios<char,char_traits<char> >::widen(char __c) const; streamsizeios_base::width() const; streamsizeios_base::width(streamsize __wide); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::write(const basic_ostream<char,char_traits<char> >::char_type* __s, streamsize __n); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; static intios_base::xalloc().",MatchSource.WIKI,root/html604/TMVA__MsgLogger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MsgLogger.html
https://root.cern/root/html604/TMVA__MsgLogger.html:15191,Testability,log,logger,15191,"urce name; static atomic<Bool_t>fgOutputSupresseddisable the output globaly (used by generic booster); static const stringfgPrefixthe prefix of the source name; static const stringfgSuffixsuffix following source name; static atomic<const map<TMVA::EMsgType,string>*>fgTypeMapmatches output types with strings. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InhibitOutput(); { fgInhibitOutput = kTRUE; }. void EnableOutput(). { fgInhibitOutput = kFALSE; }. MsgLogger(const TObject* source, TMVA::EMsgType minType = kINFO); constructor. MsgLogger(const string& source, TMVA::EMsgType minType = kINFO); constructor. MsgLogger( EMsgType minType ); constructor. MsgLogger( const MsgLogger& parent ); copy constructor. ~MsgLogger(); destructor. TMVA::MsgLogger& operator=(const TMVA::MsgLogger& parent); assingment operator. std::string GetFormattedSource() const; make sure the source name is no longer than fgMaxSourceSize:. std::string GetPrintedSource() const; the full logger prefix. void Send(); activates the logger writer. void WriteMsg(TMVA::EMsgType type, const string& line) const; putting the output string, the message type, and the color; switcher together into a single string. TMVA::MsgLogger& Endmsg(TMVA::MsgLogger& logger); end line. void InitMaps(); Create the message type and color maps. void SetSource(const string& source); Accessors. { fStrSource = source; }. EMsgType GetMinType() const; { return fMinType; }. void SetMinType(TMVA::EMsgType minType); { fMinType = minType; }. std::string GetSource() const; { return fStrSource; }. UInt_t GetMaxSourceSize(); { return (const UInt_t)fgMaxSourceSize; }. MsgLogger& operator<<( MsgLogger& ( *_f )( MsgLogger& ) ); Accept stream modifiers. MsgLogger& operator<<( std::ostream& ( *_f )( std::ostream& ) ). MsgLogger& operator<<( std::ios& ( *_f )( std::ios& ) ). MsgLogger& operator<<( EMsgType type ); Accept message type specification. » Author: Attila Krasznahorkay, Andreas Hoecker, ",MatchSource.WIKI,root/html604/TMVA__MsgLogger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MsgLogger.html
https://root.cern/root/html604/TMVA__MsgLogger.html:15233,Testability,log,logger,15233,"able the output globaly (used by generic booster); static const stringfgPrefixthe prefix of the source name; static const stringfgSuffixsuffix following source name; static atomic<const map<TMVA::EMsgType,string>*>fgTypeMapmatches output types with strings. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InhibitOutput(); { fgInhibitOutput = kTRUE; }. void EnableOutput(). { fgInhibitOutput = kFALSE; }. MsgLogger(const TObject* source, TMVA::EMsgType minType = kINFO); constructor. MsgLogger(const string& source, TMVA::EMsgType minType = kINFO); constructor. MsgLogger( EMsgType minType ); constructor. MsgLogger( const MsgLogger& parent ); copy constructor. ~MsgLogger(); destructor. TMVA::MsgLogger& operator=(const TMVA::MsgLogger& parent); assingment operator. std::string GetFormattedSource() const; make sure the source name is no longer than fgMaxSourceSize:. std::string GetPrintedSource() const; the full logger prefix. void Send(); activates the logger writer. void WriteMsg(TMVA::EMsgType type, const string& line) const; putting the output string, the message type, and the color; switcher together into a single string. TMVA::MsgLogger& Endmsg(TMVA::MsgLogger& logger); end line. void InitMaps(); Create the message type and color maps. void SetSource(const string& source); Accessors. { fStrSource = source; }. EMsgType GetMinType() const; { return fMinType; }. void SetMinType(TMVA::EMsgType minType); { fMinType = minType; }. std::string GetSource() const; { return fStrSource; }. UInt_t GetMaxSourceSize(); { return (const UInt_t)fgMaxSourceSize; }. MsgLogger& operator<<( MsgLogger& ( *_f )( MsgLogger& ) ); Accept stream modifiers. MsgLogger& operator<<( std::ostream& ( *_f )( std::ostream& ) ). MsgLogger& operator<<( std::ios& ( *_f )( std::ios& ) ). MsgLogger& operator<<( EMsgType type ); Accept message type specification. » Author: Attila Krasznahorkay, Andreas Hoecker, Joerg Stelzer, Eckhard von Toerne » Copyright (c) 20",MatchSource.WIKI,root/html604/TMVA__MsgLogger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MsgLogger.html
https://root.cern/root/html604/TMVA__MsgLogger.html:15451,Testability,log,logger,15451,">fgTypeMapmatches output types with strings. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InhibitOutput(); { fgInhibitOutput = kTRUE; }. void EnableOutput(). { fgInhibitOutput = kFALSE; }. MsgLogger(const TObject* source, TMVA::EMsgType minType = kINFO); constructor. MsgLogger(const string& source, TMVA::EMsgType minType = kINFO); constructor. MsgLogger( EMsgType minType ); constructor. MsgLogger( const MsgLogger& parent ); copy constructor. ~MsgLogger(); destructor. TMVA::MsgLogger& operator=(const TMVA::MsgLogger& parent); assingment operator. std::string GetFormattedSource() const; make sure the source name is no longer than fgMaxSourceSize:. std::string GetPrintedSource() const; the full logger prefix. void Send(); activates the logger writer. void WriteMsg(TMVA::EMsgType type, const string& line) const; putting the output string, the message type, and the color; switcher together into a single string. TMVA::MsgLogger& Endmsg(TMVA::MsgLogger& logger); end line. void InitMaps(); Create the message type and color maps. void SetSource(const string& source); Accessors. { fStrSource = source; }. EMsgType GetMinType() const; { return fMinType; }. void SetMinType(TMVA::EMsgType minType); { fMinType = minType; }. std::string GetSource() const; { return fStrSource; }. UInt_t GetMaxSourceSize(); { return (const UInt_t)fgMaxSourceSize; }. MsgLogger& operator<<( MsgLogger& ( *_f )( MsgLogger& ) ); Accept stream modifiers. MsgLogger& operator<<( std::ostream& ( *_f )( std::ostream& ) ). MsgLogger& operator<<( std::ios& ( *_f )( std::ios& ) ). MsgLogger& operator<<( EMsgType type ); Accept message type specification. » Author: Attila Krasznahorkay, Andreas Hoecker, Joerg Stelzer, Eckhard von Toerne » Copyright (c) 2005-2011: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a m",MatchSource.WIKI,root/html604/TMVA__MsgLogger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MsgLogger.html
https://root.cern/root/html604/TMVA__MsgLogger.html:983,Usability,Clear,Clear,983," virtual~MsgLogger(); const locale&ios_base::_M_getloc() const; voidbasic_ios<char,char_traits<char> >::_M_setstate(ios_base::iostate __state); voidbasic_ostream<char,char_traits<char> >::_M_write(const basic_ostream<char,char_traits<char> >::char_type* __s, streamsize __n); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); boolbasic_ios<char,char_traits<char> >::bad() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidbasic_ios<char,char_traits<char> >::clear(ios_base::iostate __state = goodbit); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; basic_ios<char,char_traits<char> >&basic_ios<char,char_traits<char> >::copyfmt(const basic_ios<char,char_traits<char> >& __rhs); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidEnableOutput(); static TMVA::MsgLogger&Endmsg(TMVA::MsgLogger& logger); boolbasic_ios<char,char_traits<char> >::eof() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; ios_base::iostatebasic_ios<char,char_traits<char> >::exceptions() const; voi",MatchSource.WIKI,root/html604/TMVA__MsgLogger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MsgLogger.html
https://root.cern/root/html604/TMVA__MsgLogger.html:1046,Usability,clear,clear,1046," virtual~MsgLogger(); const locale&ios_base::_M_getloc() const; voidbasic_ios<char,char_traits<char> >::_M_setstate(ios_base::iostate __state); voidbasic_ostream<char,char_traits<char> >::_M_write(const basic_ostream<char,char_traits<char> >::char_type* __s, streamsize __n); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); boolbasic_ios<char,char_traits<char> >::bad() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidbasic_ios<char,char_traits<char> >::clear(ios_base::iostate __state = goodbit); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; basic_ios<char,char_traits<char> >&basic_ios<char,char_traits<char> >::copyfmt(const basic_ios<char,char_traits<char> >& __rhs); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidEnableOutput(); static TMVA::MsgLogger&Endmsg(TMVA::MsgLogger& logger); boolbasic_ios<char,char_traits<char> >::eof() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; ios_base::iostatebasic_ios<char,char_traits<char> >::exceptions() const; voi",MatchSource.WIKI,root/html604/TMVA__MsgLogger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__MsgLogger.html
https://root.cern/root/html604/TMVA__Node.html:731,Availability,avail,available,731,". TMVA::Node. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::Node. class TMVA::Node. Node for the BinarySearch or Decision Trees. For the binary search tree, it basically consists of the EVENT, and; pointers to the parent and daughters. In case of the Decision Tree, it specifies parent and daughters, as; well as ""which variable is used"" in the selection of this node,; including the respective cut value. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Node(); virtual voidAddAttributesToNode(void* node) const; virtual voidAddContentToNode(stringstream& s) const; void*AddXMLTo(void* parent) const; static TClass*Class(); Int_tCountMeAndAllDaughters() const; virtual TMVA::Node*CreateNode() const; intGetCount(); UInt_tGetDepth() const; virtual TMVA::Node*GetLeft() const; virtual TMVA::Node*GetParent() const; virtual TMVA::BinaryTree*GetParentTree() const; charGetPos() const; virtual TMVA::Node*GetRight() const; virtual Bool_tGoesLeft(const TMVA::Event&) const; virtual Bool_tGoesRight(const TMVA::Event&) const; virtual TClass*IsA() const; TMVA::NodeNode(); TMVA::NodeNode(const TMVA::Node& n); TMVA::NodeNode(TMVA::Node* p, char pos); TMVA::Node&operator=(const TMVA::Node&); virtual voidPrint(ostream& os) const; virtual voidPrintRec(ostream& os) const; virtual voidReadAttributes(void* node, UInt_t tmva_Version_Code = 262657); virtual voidReadContent(stringstream& s); virtual Bool_tReadDataRecord(istream&, UInt_t tmva_Version_Code = 262657); voidReadXML(void* node, UInt_t tmva_Version_Code = 262657); voidSetDepth(UInt_t d); virtual voidSetLeft(TMVA::Node* l); virtual voidSetParent(TMVA::Node* p); virtual voidSetParentTree(TMVA::BinaryTree* t); voidSetPos(char s); v",MatchSource.WIKI,root/html604/TMVA__Node.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__Node.html
https://root.cern/root/html604/TMVA__Node.html:1180,Energy Efficiency,charGe,charGetPos,1180,"ent and daughters, as; well as ""which variable is used"" in the selection of this node,; including the respective cut value. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Node(); virtual voidAddAttributesToNode(void* node) const; virtual voidAddContentToNode(stringstream& s) const; void*AddXMLTo(void* parent) const; static TClass*Class(); Int_tCountMeAndAllDaughters() const; virtual TMVA::Node*CreateNode() const; intGetCount(); UInt_tGetDepth() const; virtual TMVA::Node*GetLeft() const; virtual TMVA::Node*GetParent() const; virtual TMVA::BinaryTree*GetParentTree() const; charGetPos() const; virtual TMVA::Node*GetRight() const; virtual Bool_tGoesLeft(const TMVA::Event&) const; virtual Bool_tGoesRight(const TMVA::Event&) const; virtual TClass*IsA() const; TMVA::NodeNode(); TMVA::NodeNode(const TMVA::Node& n); TMVA::NodeNode(TMVA::Node* p, char pos); TMVA::Node&operator=(const TMVA::Node&); virtual voidPrint(ostream& os) const; virtual voidPrintRec(ostream& os) const; virtual voidReadAttributes(void* node, UInt_t tmva_Version_Code = 262657); virtual voidReadContent(stringstream& s); virtual Bool_tReadDataRecord(istream&, UInt_t tmva_Version_Code = 262657); voidReadXML(void* node, UInt_t tmva_Version_Code = 262657); voidSetDepth(UInt_t d); virtual voidSetLeft(TMVA::Node* l); virtual voidSetParent(TMVA::Node* p); virtual voidSetParentTree(TMVA::BinaryTree* t); voidSetPos(char s); virtual voidSetRight(TMVA::Node* r); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. UInt_tfDepthdepth of the node within the tree (seen from root node); TMVA::Node*fLeftpointers to the two ""daughter"" nodes; TMVA::Node*fParentthe previous (parent) node; TMVA::BinaryTree*fParentTreepointer to the parent tree to which the Node belongs; charfPosposit",MatchSource.WIKI,root/html604/TMVA__Node.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__Node.html
https://root.cern/root/html604/TMVA__Node.html:511,Modifiability,variab,variable,511,". TMVA::Node. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::Node. class TMVA::Node. Node for the BinarySearch or Decision Trees. For the binary search tree, it basically consists of the EVENT, and; pointers to the parent and daughters. In case of the Decision Tree, it specifies parent and daughters, as; well as ""which variable is used"" in the selection of this node,; including the respective cut value. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Node(); virtual voidAddAttributesToNode(void* node) const; virtual voidAddContentToNode(stringstream& s) const; void*AddXMLTo(void* parent) const; static TClass*Class(); Int_tCountMeAndAllDaughters() const; virtual TMVA::Node*CreateNode() const; intGetCount(); UInt_tGetDepth() const; virtual TMVA::Node*GetLeft() const; virtual TMVA::Node*GetParent() const; virtual TMVA::BinaryTree*GetParentTree() const; charGetPos() const; virtual TMVA::Node*GetRight() const; virtual Bool_tGoesLeft(const TMVA::Event&) const; virtual Bool_tGoesRight(const TMVA::Event&) const; virtual TClass*IsA() const; TMVA::NodeNode(); TMVA::NodeNode(const TMVA::Node& n); TMVA::NodeNode(TMVA::Node* p, char pos); TMVA::Node&operator=(const TMVA::Node&); virtual voidPrint(ostream& os) const; virtual voidPrintRec(ostream& os) const; virtual voidReadAttributes(void* node, UInt_t tmva_Version_Code = 262657); virtual voidReadContent(stringstream& s); virtual Bool_tReadDataRecord(istream&, UInt_t tmva_Version_Code = 262657); voidReadXML(void* node, UInt_t tmva_Version_Code = 262657); voidSetDepth(UInt_t d); virtual voidSetLeft(TMVA::Node* l); virtual voidSetParent(TMVA::Node* p); virtual voidSetParentTree(TMVA::BinaryTree* t); voidSetPos(char s); v",MatchSource.WIKI,root/html604/TMVA__Node.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__Node.html
https://root.cern/root/html604/TMVA__Node.html:2689,Modifiability,Inherit,Inheritance,2689,"eadDataRecord(istream&, UInt_t tmva_Version_Code = 262657); voidReadXML(void* node, UInt_t tmva_Version_Code = 262657); voidSetDepth(UInt_t d); virtual voidSetLeft(TMVA::Node* l); virtual voidSetParent(TMVA::Node* p); virtual voidSetParentTree(TMVA::BinaryTree* t); voidSetPos(char s); virtual voidSetRight(TMVA::Node* r); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. UInt_tfDepthdepth of the node within the tree (seen from root node); TMVA::Node*fLeftpointers to the two ""daughter"" nodes; TMVA::Node*fParentthe previous (parent) node; TMVA::BinaryTree*fParentTreepointer to the parent tree to which the Node belongs; charfPosposition, i.e. it is a left (l) or right (r) daughter; TMVA::Node*fRightpointers to the two ""daughter"" nodes. private:. static Int_tfgCountcounter of all nodes present.. for debug.. to spot memory leaks... Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Node(); default constructor. Node(TMVA::Node* p, char pos); constructor of a daughter node as a daughter of 'p'. Node(const TMVA::Node& n); copy constructor, make sure you don't just copy the poiter to the node, but; that the parents/daugthers are initialized to 0 (and set by the copy; constructors of the derived classes. ~Node(); node destructor. int GetCount(); retuns the global number of instantiated nodes. Int_t CountMeAndAllDaughters() const; recursively go through the part of the tree below this node and count all daughters. void* AddXMLTo(void* parent) const; add attributes to XML. void ReadXML(void* node, UInt_t tmva_Version_Code = 262657); read attributes from XML. Node* CreateNode() const. Bool_t GoesRight(const TMVA::Event& ) const; test event if i{ decends the tree at this node to the right. Bool_t GoesLeft(const TMVA::Event& ) const; test event if it decends the tree at this node to the left. Node* GetLeft() const; test ev",MatchSource.WIKI,root/html604/TMVA__Node.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__Node.html
https://root.cern/root/html604/TMVA__Node.html:2702,Modifiability,Inherit,Inherited,2702,"eadDataRecord(istream&, UInt_t tmva_Version_Code = 262657); voidReadXML(void* node, UInt_t tmva_Version_Code = 262657); voidSetDepth(UInt_t d); virtual voidSetLeft(TMVA::Node* l); virtual voidSetParent(TMVA::Node* p); virtual voidSetParentTree(TMVA::BinaryTree* t); voidSetPos(char s); virtual voidSetRight(TMVA::Node* r); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. UInt_tfDepthdepth of the node within the tree (seen from root node); TMVA::Node*fLeftpointers to the two ""daughter"" nodes; TMVA::Node*fParentthe previous (parent) node; TMVA::BinaryTree*fParentTreepointer to the parent tree to which the Node belongs; charfPosposition, i.e. it is a left (l) or right (r) daughter; TMVA::Node*fRightpointers to the two ""daughter"" nodes. private:. static Int_tfgCountcounter of all nodes present.. for debug.. to spot memory leaks... Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Node(); default constructor. Node(TMVA::Node* p, char pos); constructor of a daughter node as a daughter of 'p'. Node(const TMVA::Node& n); copy constructor, make sure you don't just copy the poiter to the node, but; that the parents/daugthers are initialized to 0 (and set by the copy; constructors of the derived classes. ~Node(); node destructor. int GetCount(); retuns the global number of instantiated nodes. Int_t CountMeAndAllDaughters() const; recursively go through the part of the tree below this node and count all daughters. void* AddXMLTo(void* parent) const; add attributes to XML. void ReadXML(void* node, UInt_t tmva_Version_Code = 262657); read attributes from XML. Node* CreateNode() const. Bool_t GoesRight(const TMVA::Event& ) const; test event if i{ decends the tree at this node to the right. Bool_t GoesLeft(const TMVA::Event& ) const; test event if it decends the tree at this node to the left. Node* GetLeft() const; test ev",MatchSource.WIKI,root/html604/TMVA__Node.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__Node.html
https://root.cern/root/html604/TMVA__Node.html:3520,Testability,test,test,3520,"A::Node*fRightpointers to the two ""daughter"" nodes. private:. static Int_tfgCountcounter of all nodes present.. for debug.. to spot memory leaks... Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Node(); default constructor. Node(TMVA::Node* p, char pos); constructor of a daughter node as a daughter of 'p'. Node(const TMVA::Node& n); copy constructor, make sure you don't just copy the poiter to the node, but; that the parents/daugthers are initialized to 0 (and set by the copy; constructors of the derived classes. ~Node(); node destructor. int GetCount(); retuns the global number of instantiated nodes. Int_t CountMeAndAllDaughters() const; recursively go through the part of the tree below this node and count all daughters. void* AddXMLTo(void* parent) const; add attributes to XML. void ReadXML(void* node, UInt_t tmva_Version_Code = 262657); read attributes from XML. Node* CreateNode() const. Bool_t GoesRight(const TMVA::Event& ) const; test event if i{ decends the tree at this node to the right. Bool_t GoesLeft(const TMVA::Event& ) const; test event if it decends the tree at this node to the left. Node* GetLeft() const; test event if it is equal to the event that ""makes the node"" (just for the ""search tree""; return pointer to the left/right daughter or parent node. { return fLeft; }. Node* GetRight() const; { return fRight; }. Node* GetParent() const; { return fParent; }. void SetLeft(TMVA::Node* l); set pointer to the left/right daughter or parent node. { fLeft = l;}. void SetRight(TMVA::Node* r); { fRight = r;}. void SetParent(TMVA::Node* p); { fParent = p;}. void Print(ostream& os) const; printout of the node. void PrintRec(ostream& os) const; recursive printout of the node and it daughters. void AddAttributesToNode(void* node) const. void AddContentToNode(stringstream& s) const. void SetDepth(UInt_t d); Set depth, layer of the where the node is within the tree, seen from the top (root). {fDepth=d;}. UInt_t GetDepth() co",MatchSource.WIKI,root/html604/TMVA__Node.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__Node.html
https://root.cern/root/html604/TMVA__Node.html:3625,Testability,test,test,3625,"sent.. for debug.. to spot memory leaks... Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Node(); default constructor. Node(TMVA::Node* p, char pos); constructor of a daughter node as a daughter of 'p'. Node(const TMVA::Node& n); copy constructor, make sure you don't just copy the poiter to the node, but; that the parents/daugthers are initialized to 0 (and set by the copy; constructors of the derived classes. ~Node(); node destructor. int GetCount(); retuns the global number of instantiated nodes. Int_t CountMeAndAllDaughters() const; recursively go through the part of the tree below this node and count all daughters. void* AddXMLTo(void* parent) const; add attributes to XML. void ReadXML(void* node, UInt_t tmva_Version_Code = 262657); read attributes from XML. Node* CreateNode() const. Bool_t GoesRight(const TMVA::Event& ) const; test event if i{ decends the tree at this node to the right. Bool_t GoesLeft(const TMVA::Event& ) const; test event if it decends the tree at this node to the left. Node* GetLeft() const; test event if it is equal to the event that ""makes the node"" (just for the ""search tree""; return pointer to the left/right daughter or parent node. { return fLeft; }. Node* GetRight() const; { return fRight; }. Node* GetParent() const; { return fParent; }. void SetLeft(TMVA::Node* l); set pointer to the left/right daughter or parent node. { fLeft = l;}. void SetRight(TMVA::Node* r); { fRight = r;}. void SetParent(TMVA::Node* p); { fParent = p;}. void Print(ostream& os) const; printout of the node. void PrintRec(ostream& os) const; recursive printout of the node and it daughters. void AddAttributesToNode(void* node) const. void AddContentToNode(stringstream& s) const. void SetDepth(UInt_t d); Set depth, layer of the where the node is within the tree, seen from the top (root). {fDepth=d;}. UInt_t GetDepth() const; Return depth, layer of the where the node is within the tree, seen from the top (root). {return fDep",MatchSource.WIKI,root/html604/TMVA__Node.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__Node.html
https://root.cern/root/html604/TMVA__Node.html:3708,Testability,test,test,3708,"e(); default constructor. Node(TMVA::Node* p, char pos); constructor of a daughter node as a daughter of 'p'. Node(const TMVA::Node& n); copy constructor, make sure you don't just copy the poiter to the node, but; that the parents/daugthers are initialized to 0 (and set by the copy; constructors of the derived classes. ~Node(); node destructor. int GetCount(); retuns the global number of instantiated nodes. Int_t CountMeAndAllDaughters() const; recursively go through the part of the tree below this node and count all daughters. void* AddXMLTo(void* parent) const; add attributes to XML. void ReadXML(void* node, UInt_t tmva_Version_Code = 262657); read attributes from XML. Node* CreateNode() const. Bool_t GoesRight(const TMVA::Event& ) const; test event if i{ decends the tree at this node to the right. Bool_t GoesLeft(const TMVA::Event& ) const; test event if it decends the tree at this node to the left. Node* GetLeft() const; test event if it is equal to the event that ""makes the node"" (just for the ""search tree""; return pointer to the left/right daughter or parent node. { return fLeft; }. Node* GetRight() const; { return fRight; }. Node* GetParent() const; { return fParent; }. void SetLeft(TMVA::Node* l); set pointer to the left/right daughter or parent node. { fLeft = l;}. void SetRight(TMVA::Node* r); { fRight = r;}. void SetParent(TMVA::Node* p); { fParent = p;}. void Print(ostream& os) const; printout of the node. void PrintRec(ostream& os) const; recursive printout of the node and it daughters. void AddAttributesToNode(void* node) const. void AddContentToNode(stringstream& s) const. void SetDepth(UInt_t d); Set depth, layer of the where the node is within the tree, seen from the top (root). {fDepth=d;}. UInt_t GetDepth() const; Return depth, layer of the where the node is within the tree, seen from the top (root). {return fDepth;}. void SetPos(char s); set node position, i.e, the node is a left (l) or right (r) daugther. {fPos=s;}. char GetPos() const; Return th",MatchSource.WIKI,root/html604/TMVA__Node.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__Node.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:4275,Availability,reliab,reliably,4275,"d::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; overall quality measure of the classification. makeing pdfs out of the MVA-ouput distributions doesn't work; reliably for cases where the MVA-ouput isn't a smooth distribution.; this happens ""frequently"" in BDTs for example when the number of; trees is small resulting in only some discrete possible MVA ouput values.; (I still leave the code here, but use this with care!!! The default; however is to use the distributions!!!. Double_t GetSigEffAtBkgEff(Double_t bkgEff = 0.10000000000000001); calculate the signal efficiency for a given background efficiency. Double_t GetBkgEffAtSigEff(Double_t sigEff = 0.5); calculate the background efficiency for a given signal efficiency. Double_t GetBkgRejAtSigEff(Double_t sigEff = 0.5); calculate the background rejection for a given signal efficiency. OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); default constructor. MethodBase* GetMethod(); {return fMethod;}. » Last changed: Tue Jun 2 16:17:38 2015 » Last generated: 2015-06-02 16:17; This p",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:3781,Integrability,interface,interface,3781,"tring,Double_t>fTunedParametersparameters included in the tuning. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regression"". ~OptimizeConfigParameters(); the destructor (delete the OptimizeConfigParameters, store the graph and .. delete it). std::map<TString,Double_t> optimize(). std::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; overall quality measure of the classification. makeing pdfs out of the MVA-ouput distributions doesn't work; reliably for cases where the MVA-ouput isn't a smooth distribution.; this happens ""frequently"" in BDTs for example when the number of; trees is small resulting in only some discrete possible MVA ouput values.; (I still leave the code here, but use this with care!!! The default; however is to use the distributions!!!. Double_t GetSigEffAtBkgEff(Double_t bkgEff = 0.10000000000000001); calculate the signal efficiency for a given background efficiency. Double",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:2813,Modifiability,Inherit,Inheritance,2813," already known (GA seems to evaluate the same parameters several times); TStringfFOMTypethe FOM type (Separation, ROC integra.. whaeter you implemented..; vector<Float_t>fFOMvsItergraph showing the develompment of the Figure Of Merit values during the fit; TMVA::MsgLogger*fLoggermessage logger; TMVA::MethodBase*constfMethodThe MVA method to be evaluated; TH1D*fMvaBkgMVA distrituion for bakgr. events, used for spline fit; TH1D*fMvaBkgFineBinMVA distrituion for bakgr. events; TH1D*fMvaSigMVA distrituion for signal events, used for spline fit; TH1D*fMvaSigFineBinMVA distrituion for signal events; Bool_tfNotDoneYetflat to indicate of Method Transformations have been optained yet or not (normally done in MethodBase::TrainMethod); TStringfOptimizationFitTypewhich type of optimisation procedure to be used; map<TString,TMVA::Interval*>fTuneParametersparameters included in the tuning; map<TString,Double_t>fTunedParametersparameters included in the tuning. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regression"". ~OptimizeConfigParameters(); the destructor (delete the OptimizeConfigParameters, store the graph and .. delete it). std::map<TString,Double_t> optimize(). std::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:2826,Modifiability,Inherit,Inherited,2826," already known (GA seems to evaluate the same parameters several times); TStringfFOMTypethe FOM type (Separation, ROC integra.. whaeter you implemented..; vector<Float_t>fFOMvsItergraph showing the develompment of the Figure Of Merit values during the fit; TMVA::MsgLogger*fLoggermessage logger; TMVA::MethodBase*constfMethodThe MVA method to be evaluated; TH1D*fMvaBkgMVA distrituion for bakgr. events, used for spline fit; TH1D*fMvaBkgFineBinMVA distrituion for bakgr. events; TH1D*fMvaSigMVA distrituion for signal events, used for spline fit; TH1D*fMvaSigFineBinMVA distrituion for signal events; Bool_tfNotDoneYetflat to indicate of Method Transformations have been optained yet or not (normally done in MethodBase::TrainMethod); TStringfOptimizationFitTypewhich type of optimisation procedure to be used; map<TString,TMVA::Interval*>fTuneParametersparameters included in the tuning; map<TString,Double_t>fTunedParametersparameters included in the tuning. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regression"". ~OptimizeConfigParameters(); the destructor (delete the OptimizeConfigParameters, store the graph and .. delete it). std::map<TString,Double_t> optimize(). std::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:8,Performance,Optimiz,OptimizeConfigParameters,8,". TMVA::OptimizeConfigParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::OptimizeConfigParameters. class TMVA::OptimizeConfigParameters: public TMVA::IFitterTarget. Function Members (Methods); public:. virtual~OptimizeConfigParameters(); static TClass*Class(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(const TMVA::IFitterTarget&); virtual TClass*IsA() const; TMVA::OptimizeConfigParameters&operator=(const TMVA::OptimizeConfigParameters&); map<TString,Double_t>optimize(); TMVA::OptimizeConfigParametersOptimizeConfigParameters(const TMVA::OptimizeConfigParameters&); TMVA::OptimizeConfigParametersOptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. virtual Double_tEstimatorFunction(vector<Double_t>&); Double_tGetBkgEffAtSigEff(Double_t sigEff = 0.5); Double_tGetBkgRejAtSigEff(Double_t sigEff = 0.5); Double_tGetFOM(); TMVA::MethodBase*GetMethod(); voidGetMVADists(); Double_tGetROCIntegral(); vector<int>GetScanIndices(int val, vector<int> base); Double_tGetSeparation(); Double_tGetSigEffAtBkgEff(Double_t bkgEff = 0.10000000000000001); TMVA::MsgLogger&Log() const; voidoptimizeFit(); voidoptimizeScan(). Data Members; private:. map<vector<Double_t>,Double_t>fAlreadyTrainedParCombinationsave parameters for which the FOM is already known (GA seems to evaluate the same parameters several times); TStringfFOMTypethe FOM type (Separation, ROC integra.. whaeter you implemented..; vector<F",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:271,Performance,Optimiz,OptimizeConfigParameters,271,". TMVA::OptimizeConfigParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::OptimizeConfigParameters. class TMVA::OptimizeConfigParameters: public TMVA::IFitterTarget. Function Members (Methods); public:. virtual~OptimizeConfigParameters(); static TClass*Class(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(const TMVA::IFitterTarget&); virtual TClass*IsA() const; TMVA::OptimizeConfigParameters&operator=(const TMVA::OptimizeConfigParameters&); map<TString,Double_t>optimize(); TMVA::OptimizeConfigParametersOptimizeConfigParameters(const TMVA::OptimizeConfigParameters&); TMVA::OptimizeConfigParametersOptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. virtual Double_tEstimatorFunction(vector<Double_t>&); Double_tGetBkgEffAtSigEff(Double_t sigEff = 0.5); Double_tGetBkgRejAtSigEff(Double_t sigEff = 0.5); Double_tGetFOM(); TMVA::MethodBase*GetMethod(); voidGetMVADists(); Double_tGetROCIntegral(); vector<int>GetScanIndices(int val, vector<int> base); Double_tGetSeparation(); Double_tGetSigEffAtBkgEff(Double_t bkgEff = 0.10000000000000001); TMVA::MsgLogger&Log() const; voidoptimizeFit(); voidoptimizeScan(). Data Members; private:. map<vector<Double_t>,Double_t>fAlreadyTrainedParCombinationsave parameters for which the FOM is already known (GA seems to evaluate the same parameters several times); TStringfFOMTypethe FOM type (Separation, ROC integra.. whaeter you implemented..; vector<F",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:309,Performance,Optimiz,OptimizeConfigParameters,309,". TMVA::OptimizeConfigParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::OptimizeConfigParameters. class TMVA::OptimizeConfigParameters: public TMVA::IFitterTarget. Function Members (Methods); public:. virtual~OptimizeConfigParameters(); static TClass*Class(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(const TMVA::IFitterTarget&); virtual TClass*IsA() const; TMVA::OptimizeConfigParameters&operator=(const TMVA::OptimizeConfigParameters&); map<TString,Double_t>optimize(); TMVA::OptimizeConfigParametersOptimizeConfigParameters(const TMVA::OptimizeConfigParameters&); TMVA::OptimizeConfigParametersOptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. virtual Double_tEstimatorFunction(vector<Double_t>&); Double_tGetBkgEffAtSigEff(Double_t sigEff = 0.5); Double_tGetBkgRejAtSigEff(Double_t sigEff = 0.5); Double_tGetFOM(); TMVA::MethodBase*GetMethod(); voidGetMVADists(); Double_tGetROCIntegral(); vector<int>GetScanIndices(int val, vector<int> base); Double_tGetSeparation(); Double_tGetSigEffAtBkgEff(Double_t bkgEff = 0.10000000000000001); TMVA::MsgLogger&Log() const; voidoptimizeFit(); voidoptimizeScan(). Data Members; private:. map<vector<Double_t>,Double_t>fAlreadyTrainedParCombinationsave parameters for which the FOM is already known (GA seems to evaluate the same parameters several times); TStringfFOMTypethe FOM type (Separation, ROC integra.. whaeter you implemented..; vector<F",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:408,Performance,Optimiz,OptimizeConfigParameters,408,". TMVA::OptimizeConfigParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::OptimizeConfigParameters. class TMVA::OptimizeConfigParameters: public TMVA::IFitterTarget. Function Members (Methods); public:. virtual~OptimizeConfigParameters(); static TClass*Class(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(const TMVA::IFitterTarget&); virtual TClass*IsA() const; TMVA::OptimizeConfigParameters&operator=(const TMVA::OptimizeConfigParameters&); map<TString,Double_t>optimize(); TMVA::OptimizeConfigParametersOptimizeConfigParameters(const TMVA::OptimizeConfigParameters&); TMVA::OptimizeConfigParametersOptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. virtual Double_tEstimatorFunction(vector<Double_t>&); Double_tGetBkgEffAtSigEff(Double_t sigEff = 0.5); Double_tGetBkgRejAtSigEff(Double_t sigEff = 0.5); Double_tGetFOM(); TMVA::MethodBase*GetMethod(); voidGetMVADists(); Double_tGetROCIntegral(); vector<int>GetScanIndices(int val, vector<int> base); Double_tGetSeparation(); Double_tGetSigEffAtBkgEff(Double_t bkgEff = 0.10000000000000001); TMVA::MsgLogger&Log() const; voidoptimizeFit(); voidoptimizeScan(). Data Members; private:. map<vector<Double_t>,Double_t>fAlreadyTrainedParCombinationsave parameters for which the FOM is already known (GA seems to evaluate the same parameters several times); TStringfFOMTypethe FOM type (Separation, ROC integra.. whaeter you implemented..; vector<F",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:633,Performance,Optimiz,OptimizeConfigParameters,633,". TMVA::OptimizeConfigParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::OptimizeConfigParameters. class TMVA::OptimizeConfigParameters: public TMVA::IFitterTarget. Function Members (Methods); public:. virtual~OptimizeConfigParameters(); static TClass*Class(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(const TMVA::IFitterTarget&); virtual TClass*IsA() const; TMVA::OptimizeConfigParameters&operator=(const TMVA::OptimizeConfigParameters&); map<TString,Double_t>optimize(); TMVA::OptimizeConfigParametersOptimizeConfigParameters(const TMVA::OptimizeConfigParameters&); TMVA::OptimizeConfigParametersOptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. virtual Double_tEstimatorFunction(vector<Double_t>&); Double_tGetBkgEffAtSigEff(Double_t sigEff = 0.5); Double_tGetBkgRejAtSigEff(Double_t sigEff = 0.5); Double_tGetFOM(); TMVA::MethodBase*GetMethod(); voidGetMVADists(); Double_tGetROCIntegral(); vector<int>GetScanIndices(int val, vector<int> base); Double_tGetSeparation(); Double_tGetSigEffAtBkgEff(Double_t bkgEff = 0.10000000000000001); TMVA::MsgLogger&Log() const; voidoptimizeFit(); voidoptimizeScan(). Data Members; private:. map<vector<Double_t>,Double_t>fAlreadyTrainedParCombinationsave parameters for which the FOM is already known (GA seems to evaluate the same parameters several times); TStringfFOMTypethe FOM type (Separation, ROC integra.. whaeter you implemented..; vector<F",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:680,Performance,Optimiz,OptimizeConfigParameters,680,". TMVA::OptimizeConfigParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::OptimizeConfigParameters. class TMVA::OptimizeConfigParameters: public TMVA::IFitterTarget. Function Members (Methods); public:. virtual~OptimizeConfigParameters(); static TClass*Class(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(const TMVA::IFitterTarget&); virtual TClass*IsA() const; TMVA::OptimizeConfigParameters&operator=(const TMVA::OptimizeConfigParameters&); map<TString,Double_t>optimize(); TMVA::OptimizeConfigParametersOptimizeConfigParameters(const TMVA::OptimizeConfigParameters&); TMVA::OptimizeConfigParametersOptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. virtual Double_tEstimatorFunction(vector<Double_t>&); Double_tGetBkgEffAtSigEff(Double_t sigEff = 0.5); Double_tGetBkgRejAtSigEff(Double_t sigEff = 0.5); Double_tGetFOM(); TMVA::MethodBase*GetMethod(); voidGetMVADists(); Double_tGetROCIntegral(); vector<int>GetScanIndices(int val, vector<int> base); Double_tGetSeparation(); Double_tGetSigEffAtBkgEff(Double_t bkgEff = 0.10000000000000001); TMVA::MsgLogger&Log() const; voidoptimizeFit(); voidoptimizeScan(). Data Members; private:. map<vector<Double_t>,Double_t>fAlreadyTrainedParCombinationsave parameters for which the FOM is already known (GA seems to evaluate the same parameters several times); TStringfFOMTypethe FOM type (Separation, ROC integra.. whaeter you implemented..; vector<F",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:729,Performance,optimiz,optimize,729,". TMVA::OptimizeConfigParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::OptimizeConfigParameters. class TMVA::OptimizeConfigParameters: public TMVA::IFitterTarget. Function Members (Methods); public:. virtual~OptimizeConfigParameters(); static TClass*Class(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(const TMVA::IFitterTarget&); virtual TClass*IsA() const; TMVA::OptimizeConfigParameters&operator=(const TMVA::OptimizeConfigParameters&); map<TString,Double_t>optimize(); TMVA::OptimizeConfigParametersOptimizeConfigParameters(const TMVA::OptimizeConfigParameters&); TMVA::OptimizeConfigParametersOptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. virtual Double_tEstimatorFunction(vector<Double_t>&); Double_tGetBkgEffAtSigEff(Double_t sigEff = 0.5); Double_tGetBkgRejAtSigEff(Double_t sigEff = 0.5); Double_tGetFOM(); TMVA::MethodBase*GetMethod(); voidGetMVADists(); Double_tGetROCIntegral(); vector<int>GetScanIndices(int val, vector<int> base); Double_tGetSeparation(); Double_tGetSigEffAtBkgEff(Double_t bkgEff = 0.10000000000000001); TMVA::MsgLogger&Log() const; voidoptimizeFit(); voidoptimizeScan(). Data Members; private:. map<vector<Double_t>,Double_t>fAlreadyTrainedParCombinationsave parameters for which the FOM is already known (GA seems to evaluate the same parameters several times); TStringfFOMTypethe FOM type (Separation, ROC integra.. whaeter you implemented..; vector<F",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:747,Performance,Optimiz,OptimizeConfigParametersOptimizeConfigParameters,747,". TMVA::OptimizeConfigParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::OptimizeConfigParameters. class TMVA::OptimizeConfigParameters: public TMVA::IFitterTarget. Function Members (Methods); public:. virtual~OptimizeConfigParameters(); static TClass*Class(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(const TMVA::IFitterTarget&); virtual TClass*IsA() const; TMVA::OptimizeConfigParameters&operator=(const TMVA::OptimizeConfigParameters&); map<TString,Double_t>optimize(); TMVA::OptimizeConfigParametersOptimizeConfigParameters(const TMVA::OptimizeConfigParameters&); TMVA::OptimizeConfigParametersOptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. virtual Double_tEstimatorFunction(vector<Double_t>&); Double_tGetBkgEffAtSigEff(Double_t sigEff = 0.5); Double_tGetBkgRejAtSigEff(Double_t sigEff = 0.5); Double_tGetFOM(); TMVA::MethodBase*GetMethod(); voidGetMVADists(); Double_tGetROCIntegral(); vector<int>GetScanIndices(int val, vector<int> base); Double_tGetSeparation(); Double_tGetSigEffAtBkgEff(Double_t bkgEff = 0.10000000000000001); TMVA::MsgLogger&Log() const; voidoptimizeFit(); voidoptimizeScan(). Data Members; private:. map<vector<Double_t>,Double_t>fAlreadyTrainedParCombinationsave parameters for which the FOM is already known (GA seems to evaluate the same parameters several times); TStringfFOMTypethe FOM type (Separation, ROC integra.. whaeter you implemented..; vector<F",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:808,Performance,Optimiz,OptimizeConfigParameters,808,". TMVA::OptimizeConfigParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::OptimizeConfigParameters. class TMVA::OptimizeConfigParameters: public TMVA::IFitterTarget. Function Members (Methods); public:. virtual~OptimizeConfigParameters(); static TClass*Class(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(const TMVA::IFitterTarget&); virtual TClass*IsA() const; TMVA::OptimizeConfigParameters&operator=(const TMVA::OptimizeConfigParameters&); map<TString,Double_t>optimize(); TMVA::OptimizeConfigParametersOptimizeConfigParameters(const TMVA::OptimizeConfigParameters&); TMVA::OptimizeConfigParametersOptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. virtual Double_tEstimatorFunction(vector<Double_t>&); Double_tGetBkgEffAtSigEff(Double_t sigEff = 0.5); Double_tGetBkgRejAtSigEff(Double_t sigEff = 0.5); Double_tGetFOM(); TMVA::MethodBase*GetMethod(); voidGetMVADists(); Double_tGetROCIntegral(); vector<int>GetScanIndices(int val, vector<int> base); Double_tGetSeparation(); Double_tGetSigEffAtBkgEff(Double_t bkgEff = 0.10000000000000001); TMVA::MsgLogger&Log() const; voidoptimizeFit(); voidoptimizeScan(). Data Members; private:. map<vector<Double_t>,Double_t>fAlreadyTrainedParCombinationsave parameters for which the FOM is already known (GA seems to evaluate the same parameters several times); TStringfFOMTypethe FOM type (Separation, ROC integra.. whaeter you implemented..; vector<F",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:842,Performance,Optimiz,OptimizeConfigParametersOptimizeConfigParameters,842,". TMVA::OptimizeConfigParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::OptimizeConfigParameters. class TMVA::OptimizeConfigParameters: public TMVA::IFitterTarget. Function Members (Methods); public:. virtual~OptimizeConfigParameters(); static TClass*Class(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(const TMVA::IFitterTarget&); virtual TClass*IsA() const; TMVA::OptimizeConfigParameters&operator=(const TMVA::OptimizeConfigParameters&); map<TString,Double_t>optimize(); TMVA::OptimizeConfigParametersOptimizeConfigParameters(const TMVA::OptimizeConfigParameters&); TMVA::OptimizeConfigParametersOptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. virtual Double_tEstimatorFunction(vector<Double_t>&); Double_tGetBkgEffAtSigEff(Double_t sigEff = 0.5); Double_tGetBkgRejAtSigEff(Double_t sigEff = 0.5); Double_tGetFOM(); TMVA::MethodBase*GetMethod(); voidGetMVADists(); Double_tGetROCIntegral(); vector<int>GetScanIndices(int val, vector<int> base); Double_tGetSeparation(); Double_tGetSigEffAtBkgEff(Double_t bkgEff = 0.10000000000000001); TMVA::MsgLogger&Log() const; voidoptimizeFit(); voidoptimizeScan(). Data Members; private:. map<vector<Double_t>,Double_t>fAlreadyTrainedParCombinationsave parameters for which the FOM is already known (GA seems to evaluate the same parameters several times); TStringfFOMTypethe FOM type (Separation, ROC integra.. whaeter you implemented..; vector<F",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:951,Performance,tune,tuneParameters,951,". TMVA::OptimizeConfigParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::OptimizeConfigParameters. class TMVA::OptimizeConfigParameters: public TMVA::IFitterTarget. Function Members (Methods); public:. virtual~OptimizeConfigParameters(); static TClass*Class(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(const TMVA::IFitterTarget&); virtual TClass*IsA() const; TMVA::OptimizeConfigParameters&operator=(const TMVA::OptimizeConfigParameters&); map<TString,Double_t>optimize(); TMVA::OptimizeConfigParametersOptimizeConfigParameters(const TMVA::OptimizeConfigParameters&); TMVA::OptimizeConfigParametersOptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. virtual Double_tEstimatorFunction(vector<Double_t>&); Double_tGetBkgEffAtSigEff(Double_t sigEff = 0.5); Double_tGetBkgRejAtSigEff(Double_t sigEff = 0.5); Double_tGetFOM(); TMVA::MethodBase*GetMethod(); voidGetMVADists(); Double_tGetROCIntegral(); vector<int>GetScanIndices(int val, vector<int> base); Double_tGetSeparation(); Double_tGetSigEffAtBkgEff(Double_t bkgEff = 0.10000000000000001); TMVA::MsgLogger&Log() const; voidoptimizeFit(); voidoptimizeScan(). Data Members; private:. map<vector<Double_t>,Double_t>fAlreadyTrainedParCombinationsave parameters for which the FOM is already known (GA seems to evaluate the same parameters several times); TStringfFOMTypethe FOM type (Separation, ROC integra.. whaeter you implemented..; vector<F",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:1007,Performance,optimiz,optimizationType,1007,". TMVA::OptimizeConfigParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::OptimizeConfigParameters. class TMVA::OptimizeConfigParameters: public TMVA::IFitterTarget. Function Members (Methods); public:. virtual~OptimizeConfigParameters(); static TClass*Class(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(); TMVA::IFitterTargetTMVA::IFitterTarget::IFitterTarget(const TMVA::IFitterTarget&); virtual TClass*IsA() const; TMVA::OptimizeConfigParameters&operator=(const TMVA::OptimizeConfigParameters&); map<TString,Double_t>optimize(); TMVA::OptimizeConfigParametersOptimizeConfigParameters(const TMVA::OptimizeConfigParameters&); TMVA::OptimizeConfigParametersOptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. virtual Double_tEstimatorFunction(vector<Double_t>&); Double_tGetBkgEffAtSigEff(Double_t sigEff = 0.5); Double_tGetBkgRejAtSigEff(Double_t sigEff = 0.5); Double_tGetFOM(); TMVA::MethodBase*GetMethod(); voidGetMVADists(); Double_tGetROCIntegral(); vector<int>GetScanIndices(int val, vector<int> base); Double_tGetSeparation(); Double_tGetSigEffAtBkgEff(Double_t bkgEff = 0.10000000000000001); TMVA::MsgLogger&Log() const; voidoptimizeFit(); voidoptimizeScan(). Data Members; private:. map<vector<Double_t>,Double_t>fAlreadyTrainedParCombinationsave parameters for which the FOM is already known (GA seems to evaluate the same parameters several times); TStringfFOMTypethe FOM type (Separation, ROC integra.. whaeter you implemented..; vector<F",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:2890,Performance,Optimiz,OptimizeConfigParameters,2890,"; vector<Float_t>fFOMvsItergraph showing the develompment of the Figure Of Merit values during the fit; TMVA::MsgLogger*fLoggermessage logger; TMVA::MethodBase*constfMethodThe MVA method to be evaluated; TH1D*fMvaBkgMVA distrituion for bakgr. events, used for spline fit; TH1D*fMvaBkgFineBinMVA distrituion for bakgr. events; TH1D*fMvaSigMVA distrituion for signal events, used for spline fit; TH1D*fMvaSigFineBinMVA distrituion for signal events; Bool_tfNotDoneYetflat to indicate of Method Transformations have been optained yet or not (normally done in MethodBase::TrainMethod); TStringfOptimizationFitTypewhich type of optimisation procedure to be used; map<TString,TMVA::Interval*>fTuneParametersparameters included in the tuning; map<TString,Double_t>fTunedParametersparameters included in the tuning. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regression"". ~OptimizeConfigParameters(); the destructor (delete the OptimizeConfigParameters, store the graph and .. delete it). std::map<TString,Double_t> optimize(). std::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSep",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:2975,Performance,tune,tuneParameters,2975,"; vector<Float_t>fFOMvsItergraph showing the develompment of the Figure Of Merit values during the fit; TMVA::MsgLogger*fLoggermessage logger; TMVA::MethodBase*constfMethodThe MVA method to be evaluated; TH1D*fMvaBkgMVA distrituion for bakgr. events, used for spline fit; TH1D*fMvaBkgFineBinMVA distrituion for bakgr. events; TH1D*fMvaSigMVA distrituion for signal events, used for spline fit; TH1D*fMvaSigFineBinMVA distrituion for signal events; Bool_tfNotDoneYetflat to indicate of Method Transformations have been optained yet or not (normally done in MethodBase::TrainMethod); TStringfOptimizationFitTypewhich type of optimisation procedure to be used; map<TString,TMVA::Interval*>fTuneParametersparameters included in the tuning; map<TString,Double_t>fTunedParametersparameters included in the tuning. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regression"". ~OptimizeConfigParameters(); the destructor (delete the OptimizeConfigParameters, store the graph and .. delete it). std::map<TString,Double_t> optimize(). std::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSep",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:3031,Performance,optimiz,optimizationType,3031,"; vector<Float_t>fFOMvsItergraph showing the develompment of the Figure Of Merit values during the fit; TMVA::MsgLogger*fLoggermessage logger; TMVA::MethodBase*constfMethodThe MVA method to be evaluated; TH1D*fMvaBkgMVA distrituion for bakgr. events, used for spline fit; TH1D*fMvaBkgFineBinMVA distrituion for bakgr. events; TH1D*fMvaSigMVA distrituion for signal events, used for spline fit; TH1D*fMvaSigFineBinMVA distrituion for signal events; Bool_tfNotDoneYetflat to indicate of Method Transformations have been optained yet or not (normally done in MethodBase::TrainMethod); TStringfOptimizationFitTypewhich type of optimisation procedure to be used; map<TString,TMVA::Interval*>fTuneParametersparameters included in the tuning; map<TString,Double_t>fTunedParametersparameters included in the tuning. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regression"". ~OptimizeConfigParameters(); the destructor (delete the OptimizeConfigParameters, store the graph and .. delete it). std::map<TString,Double_t> optimize(). std::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSep",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:3120,Performance,Optimiz,OptimizeConfigParameters,3120," method to be evaluated; TH1D*fMvaBkgMVA distrituion for bakgr. events, used for spline fit; TH1D*fMvaBkgFineBinMVA distrituion for bakgr. events; TH1D*fMvaSigMVA distrituion for signal events, used for spline fit; TH1D*fMvaSigFineBinMVA distrituion for signal events; Bool_tfNotDoneYetflat to indicate of Method Transformations have been optained yet or not (normally done in MethodBase::TrainMethod); TStringfOptimizationFitTypewhich type of optimisation procedure to be used; map<TString,TMVA::Interval*>fTuneParametersparameters included in the tuning; map<TString,Double_t>fTunedParametersparameters included in the tuning. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regression"". ~OptimizeConfigParameters(); the destructor (delete the OptimizeConfigParameters, store the graph and .. delete it). std::map<TString,Double_t> optimize(). std::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; over",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:3175,Performance,Optimiz,OptimizeConfigParameters,3175," method to be evaluated; TH1D*fMvaBkgMVA distrituion for bakgr. events, used for spline fit; TH1D*fMvaBkgFineBinMVA distrituion for bakgr. events; TH1D*fMvaSigMVA distrituion for signal events, used for spline fit; TH1D*fMvaSigFineBinMVA distrituion for signal events; Bool_tfNotDoneYetflat to indicate of Method Transformations have been optained yet or not (normally done in MethodBase::TrainMethod); TStringfOptimizationFitTypewhich type of optimisation procedure to be used; map<TString,TMVA::Interval*>fTuneParametersparameters included in the tuning; map<TString,Double_t>fTunedParametersparameters included in the tuning. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regression"". ~OptimizeConfigParameters(); the destructor (delete the OptimizeConfigParameters, store the graph and .. delete it). std::map<TString,Double_t> optimize(). std::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; over",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:3263,Performance,optimiz,optimize,3263,"ine fit; TH1D*fMvaBkgFineBinMVA distrituion for bakgr. events; TH1D*fMvaSigMVA distrituion for signal events, used for spline fit; TH1D*fMvaSigFineBinMVA distrituion for signal events; Bool_tfNotDoneYetflat to indicate of Method Transformations have been optained yet or not (normally done in MethodBase::TrainMethod); TStringfOptimizationFitTypewhich type of optimisation procedure to be used; map<TString,TMVA::Interval*>fTuneParametersparameters included in the tuning; map<TString,Double_t>fTunedParametersparameters included in the tuning. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regression"". ~OptimizeConfigParameters(); the destructor (delete the OptimizeConfigParameters, store the graph and .. delete it). std::map<TString,Double_t> optimize(). std::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; overall quality measure of the classification. makeing pdfs out of the MVA-ouput distribu",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:3424,Performance,optimiz,optimizeScan,3424,"at to indicate of Method Transformations have been optained yet or not (normally done in MethodBase::TrainMethod); TStringfOptimizationFitTypewhich type of optimisation procedure to be used; map<TString,TMVA::Interval*>fTuneParametersparameters included in the tuning; map<TString,Double_t>fTunedParametersparameters included in the tuning. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regression"". ~OptimizeConfigParameters(); the destructor (delete the OptimizeConfigParameters, store the graph and .. delete it). std::map<TString,Double_t> optimize(). std::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; overall quality measure of the classification. makeing pdfs out of the MVA-ouput distributions doesn't work; reliably for cases where the MVA-ouput isn't a smooth distribution.; this happens ""frequently"" in BDTs for example when the number of; trees is small resulting in only some discrete p",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:3454,Performance,optimiz,optimization,3454,"at to indicate of Method Transformations have been optained yet or not (normally done in MethodBase::TrainMethod); TStringfOptimizationFitTypewhich type of optimisation procedure to be used; map<TString,TMVA::Interval*>fTuneParametersparameters included in the tuning; map<TString,Double_t>fTunedParametersparameters included in the tuning. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regression"". ~OptimizeConfigParameters(); the destructor (delete the OptimizeConfigParameters, store the graph and .. delete it). std::map<TString,Double_t> optimize(). std::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; overall quality measure of the classification. makeing pdfs out of the MVA-ouput distributions doesn't work; reliably for cases where the MVA-ouput isn't a smooth distribution.; this happens ""frequently"" in BDTs for example when the number of; trees is small resulting in only some discrete p",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:3603,Performance,optimiz,optimizeFit,3603," to be used; map<TString,TMVA::Interval*>fTuneParametersparameters included in the tuning; map<TString,Double_t>fTunedParametersparameters included in the tuning. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regression"". ~OptimizeConfigParameters(); the destructor (delete the OptimizeConfigParameters, store the graph and .. delete it). std::map<TString,Double_t> optimize(). std::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; overall quality measure of the classification. makeing pdfs out of the MVA-ouput distributions doesn't work; reliably for cases where the MVA-ouput isn't a smooth distribution.; this happens ""frequently"" in BDTs for example when the number of; trees is small resulting in only some discrete possible MVA ouput values.; (I still leave the code here, but use this with care!!! The default; however is to use the distributions!!!. Double_t GetSigEffAtBkgEff(Double_t bkgEff ",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:3867,Performance,optimiz,optimization,3867,"bers; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regression"". ~OptimizeConfigParameters(); the destructor (delete the OptimizeConfigParameters, store the graph and .. delete it). std::map<TString,Double_t> optimize(). std::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; overall quality measure of the classification. makeing pdfs out of the MVA-ouput distributions doesn't work; reliably for cases where the MVA-ouput isn't a smooth distribution.; this happens ""frequently"" in BDTs for example when the number of; trees is small resulting in only some discrete possible MVA ouput values.; (I still leave the code here, but use this with care!!! The default; however is to use the distributions!!!. Double_t GetSigEffAtBkgEff(Double_t bkgEff = 0.10000000000000001); calculate the signal efficiency for a given background efficiency. Double_t GetBkgEffAtSigEff(Double_t sigEff = 0.5); calculate the background efficiency for a given signal effici",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:4963,Performance,Optimiz,OptimizeConfigParameters,4963,"timizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; overall quality measure of the classification. makeing pdfs out of the MVA-ouput distributions doesn't work; reliably for cases where the MVA-ouput isn't a smooth distribution.; this happens ""frequently"" in BDTs for example when the number of; trees is small resulting in only some discrete possible MVA ouput values.; (I still leave the code here, but use this with care!!! The default; however is to use the distributions!!!. Double_t GetSigEffAtBkgEff(Double_t bkgEff = 0.10000000000000001); calculate the signal efficiency for a given background efficiency. Double_t GetBkgEffAtSigEff(Double_t sigEff = 0.5); calculate the background efficiency for a given signal efficiency. Double_t GetBkgRejAtSigEff(Double_t sigEff = 0.5); calculate the background rejection for a given signal efficiency. OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); default constructor. MethodBase* GetMethod(); {return fMethod;}. » Last changed: Tue Jun 2 16:17:38 2015 » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:5048,Performance,tune,tuneParameters,5048,"timizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; overall quality measure of the classification. makeing pdfs out of the MVA-ouput distributions doesn't work; reliably for cases where the MVA-ouput isn't a smooth distribution.; this happens ""frequently"" in BDTs for example when the number of; trees is small resulting in only some discrete possible MVA ouput values.; (I still leave the code here, but use this with care!!! The default; however is to use the distributions!!!. Double_t GetSigEffAtBkgEff(Double_t bkgEff = 0.10000000000000001); calculate the signal efficiency for a given background efficiency. Double_t GetBkgEffAtSigEff(Double_t sigEff = 0.5); calculate the background efficiency for a given signal efficiency. Double_t GetBkgRejAtSigEff(Double_t sigEff = 0.5); calculate the background rejection for a given signal efficiency. OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); default constructor. MethodBase* GetMethod(); {return fMethod;}. » Last changed: Tue Jun 2 16:17:38 2015 » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:5104,Performance,optimiz,optimizationType,5104,"timizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; overall quality measure of the classification. makeing pdfs out of the MVA-ouput distributions doesn't work; reliably for cases where the MVA-ouput isn't a smooth distribution.; this happens ""frequently"" in BDTs for example when the number of; trees is small resulting in only some discrete possible MVA ouput values.; (I still leave the code here, but use this with care!!! The default; however is to use the distributions!!!. Double_t GetSigEffAtBkgEff(Double_t bkgEff = 0.10000000000000001); calculate the signal efficiency for a given background efficiency. Double_t GetBkgEffAtSigEff(Double_t sigEff = 0.5); calculate the background efficiency for a given signal efficiency. Double_t GetBkgRejAtSigEff(Double_t sigEff = 0.5); calculate the background rejection for a given signal efficiency. OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); default constructor. MethodBase* GetMethod(); {return fMethod;}. » Last changed: Tue Jun 2 16:17:38 2015 » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:1667,Testability,Log,Log,1667,"TMVA::OptimizeConfigParameters&); map<TString,Double_t>optimize(); TMVA::OptimizeConfigParametersOptimizeConfigParameters(const TMVA::OptimizeConfigParameters&); TMVA::OptimizeConfigParametersOptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); virtual voidTMVA::IFitterTarget::ProgressNotifier(TString, TString); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. virtual Double_tEstimatorFunction(vector<Double_t>&); Double_tGetBkgEffAtSigEff(Double_t sigEff = 0.5); Double_tGetBkgRejAtSigEff(Double_t sigEff = 0.5); Double_tGetFOM(); TMVA::MethodBase*GetMethod(); voidGetMVADists(); Double_tGetROCIntegral(); vector<int>GetScanIndices(int val, vector<int> base); Double_tGetSeparation(); Double_tGetSigEffAtBkgEff(Double_t bkgEff = 0.10000000000000001); TMVA::MsgLogger&Log() const; voidoptimizeFit(); voidoptimizeScan(). Data Members; private:. map<vector<Double_t>,Double_t>fAlreadyTrainedParCombinationsave parameters for which the FOM is already known (GA seems to evaluate the same parameters several times); TStringfFOMTypethe FOM type (Separation, ROC integra.. whaeter you implemented..; vector<Float_t>fFOMvsItergraph showing the develompment of the Figure Of Merit values during the fit; TMVA::MsgLogger*fLoggermessage logger; TMVA::MethodBase*constfMethodThe MVA method to be evaluated; TH1D*fMvaBkgMVA distrituion for bakgr. events, used for spline fit; TH1D*fMvaBkgFineBinMVA distrituion for bakgr. events; TH1D*fMvaSigMVA distrituion for signal events, used for spline fit; TH1D*fMvaSigFineBinMVA distrituion for signal events; Bool_tfNotDoneYetflat to indicate of Method Transformations have been optained yet or not (normally done in MethodBase::TrainMethod); TStringfOptimizationFitTypewhich type of optimisation procedure to be used; map<TString,TMVA::Interval",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:2126,Testability,log,logger,2126,"idShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. virtual Double_tEstimatorFunction(vector<Double_t>&); Double_tGetBkgEffAtSigEff(Double_t sigEff = 0.5); Double_tGetBkgRejAtSigEff(Double_t sigEff = 0.5); Double_tGetFOM(); TMVA::MethodBase*GetMethod(); voidGetMVADists(); Double_tGetROCIntegral(); vector<int>GetScanIndices(int val, vector<int> base); Double_tGetSeparation(); Double_tGetSigEffAtBkgEff(Double_t bkgEff = 0.10000000000000001); TMVA::MsgLogger&Log() const; voidoptimizeFit(); voidoptimizeScan(). Data Members; private:. map<vector<Double_t>,Double_t>fAlreadyTrainedParCombinationsave parameters for which the FOM is already known (GA seems to evaluate the same parameters several times); TStringfFOMTypethe FOM type (Separation, ROC integra.. whaeter you implemented..; vector<Float_t>fFOMvsItergraph showing the develompment of the Figure Of Merit values during the fit; TMVA::MsgLogger*fLoggermessage logger; TMVA::MethodBase*constfMethodThe MVA method to be evaluated; TH1D*fMvaBkgMVA distrituion for bakgr. events, used for spline fit; TH1D*fMvaBkgFineBinMVA distrituion for bakgr. events; TH1D*fMvaSigMVA distrituion for signal events, used for spline fit; TH1D*fMvaSigFineBinMVA distrituion for signal events; Bool_tfNotDoneYetflat to indicate of Method Transformations have been optained yet or not (normally done in MethodBase::TrainMethod); TStringfOptimizationFitTypewhich type of optimisation procedure to be used; map<TString,TMVA::Interval*>fTuneParametersparameters included in the tuning; map<TString,Double_t>fTunedParametersparameters included in the tuning. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regres",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:3475,Usability,simpl,simple,3475,"at to indicate of Method Transformations have been optained yet or not (normally done in MethodBase::TrainMethod); TStringfOptimizationFitTypewhich type of optimisation procedure to be used; map<TString,TMVA::Interval*>fTuneParametersparameters included in the tuning; map<TString,Double_t>fTunedParametersparameters included in the tuning. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regression"". ~OptimizeConfigParameters(); the destructor (delete the OptimizeConfigParameters, store the graph and .. delete it). std::map<TString,Double_t> optimize(). std::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; overall quality measure of the classification. makeing pdfs out of the MVA-ouput distributions doesn't work; reliably for cases where the MVA-ouput isn't a smooth distribution.; this happens ""frequently"" in BDTs for example when the number of; trees is small resulting in only some discrete p",MatchSource.WIKI,root/html604/TMVA__OptimizeConfigParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html
https://root.cern/root/html604/TMVA__PDEFoam.html:2694,Availability,Error,Error,2694,"Method(const char* method) const; voidAddVariableName(const char* s); voidAddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidCreate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFillBinarySearchTree(const TMVA::Event* ev); virtual voidFillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidFinalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>GetCellValue(const map<Int_t,Float_t>& xvec, TMVA::ECellValue cv); virtual Float_tGetCellValue(const TMVA::PDEFoamCell* cell, TMVA::ECellValue cv); virtual Float_tGetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringGetFoamN",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:2823,Availability,error,error,2823,"pendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidCreate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFillBinarySearchTree(const TMVA::Event* ev); virtual voidFillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidFinalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>GetCellValue(const map<Int_t,Float_t>& xvec, TMVA::ECellValue cv); virtual Float_tGetCellValue(const TMVA::PDEFoamCell* cell, TMVA::ECellValue cv); virtual Float_tGetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringGetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tGetMaxDepth() const; UInt_tGetNActiveCells() const; virtual c",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:2907,Availability,error,error,2907,"ll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidCreate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFillBinarySearchTree(const TMVA::Event* ev); virtual voidFillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidFinalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>GetCellValue(const map<Int_t,Float_t>& xvec, TMVA::ECellValue cv); virtual Float_tGetCellValue(const TMVA::PDEFoamCell* cell, TMVA::ECellValue cv); virtual Float_tGetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringGetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tGetMaxDepth() const; UInt_tGetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tGetNCells() const; UInt_tGetNInActiveCells",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:10562,Availability,Mask,Mask,10562,"textMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationfDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tfDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*fDistr! distribution of training events; Int_tfEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tfFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypefFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*fHistEdgHistograms of wt, one for each cell edge; Int_t*fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tfLastCeIndex of the last cell; TMVA::MsgLogger*fLogger! message logger; Int_t*fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tfMaxDepthmaximum depth of cell tree; Int_tfNBinNo. of bins in the edge histogram for cell MC exploration; Int_tfNCellsMaximum number of cells; UInt_tfNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tfNSamplNo. of MC events, when dividing (exploring) cell; TStringfNameName of a given instance of the FOAM class; UInt_tfNminminimal number of events in cell to split cell; Int_tfNoActNumber of active cells; Bool_tfPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*fTimer! timer for graphical output; TObjArray*fVariableNamescollection of all variable names; Float_tfVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:15580,Availability,failure,failures,15580,"x is added to list of vertices.; List of active cells is updated, iCell removed, two daughters added; and their properties set with help of MC sampling (PDEFoam_Explore); Returns Code RC=-1 of buffer limit is reached, fLastCe=fnBuf. Double_t Eval(Double_t* xRand, Double_t& event_density); Internal subprogram.; Evaluates (training) distribution. void Grow(); Internal subrogram used by Create.; It grow new cells by the binary division process.; This function is overridden by the PDEFoam class to stop the foam buildup process; if one of the cut conditions stop the cell split. void SetInhiDiv(Int_t , Int_t ); This can be called before Create, after setting kDim; It defines which variables are excluded in the process of the cell division.; For example 'FoamX->SetInhiDiv(1, 1);' inhibits division of y-variable. void CheckAll(Int_t ); User utility, miscellaneous and debug.; Checks all pointers in the tree of cells. This is useful autodiagnostic.; level=0, no printout, failures causes STOP; level=1, printout, failures lead to WARNINGS only. void PrintCell(Long_t iCell = 0); Prints geometry of and elements of 'iCell', as well as relations; to parent and daughter cells. void PrintCells(void); Prints geometry of ALL cells of the FOAM. void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills a weight 'wt' into the PDEFoam cell, which; corresponds to the given event 'ev'. Per default cell element 0; is filled with the weight 'wt', and cell element 1 is filled; with the squared weight. This function can be overridden by a; subclass in order to change the values stored in the foam cells. void ResetCellElements(); Remove the cell elements from all cells. Bool_t CellValueIsUndefined(TMVA::PDEFoamCell* ); Returns true, if the value of the given cell is undefined.; Default value: kFALSE. This function can be overridden by; sub-classes. Float_t GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase* ); This function finds the cell, whic",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:15621,Availability,failure,failures,15621,"x is added to list of vertices.; List of active cells is updated, iCell removed, two daughters added; and their properties set with help of MC sampling (PDEFoam_Explore); Returns Code RC=-1 of buffer limit is reached, fLastCe=fnBuf. Double_t Eval(Double_t* xRand, Double_t& event_density); Internal subprogram.; Evaluates (training) distribution. void Grow(); Internal subrogram used by Create.; It grow new cells by the binary division process.; This function is overridden by the PDEFoam class to stop the foam buildup process; if one of the cut conditions stop the cell split. void SetInhiDiv(Int_t , Int_t ); This can be called before Create, after setting kDim; It defines which variables are excluded in the process of the cell division.; For example 'FoamX->SetInhiDiv(1, 1);' inhibits division of y-variable. void CheckAll(Int_t ); User utility, miscellaneous and debug.; Checks all pointers in the tree of cells. This is useful autodiagnostic.; level=0, no printout, failures causes STOP; level=1, printout, failures lead to WARNINGS only. void PrintCell(Long_t iCell = 0); Prints geometry of and elements of 'iCell', as well as relations; to parent and daughter cells. void PrintCells(void); Prints geometry of ALL cells of the FOAM. void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills a weight 'wt' into the PDEFoam cell, which; corresponds to the given event 'ev'. Per default cell element 0; is filled with the weight 'wt', and cell element 1 is filled; with the squared weight. This function can be overridden by a; subclass in order to change the values stored in the foam cells. void ResetCellElements(); Remove the cell elements from all cells. Bool_t CellValueIsUndefined(TMVA::PDEFoamCell* ); Returns true, if the value of the given cell is undefined.; Default value: kFALSE. This function can be overridden by; sub-classes. Float_t GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase* ); This function finds the cell, whic",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:924,Deployability,integrat,integration,924,". TMVA::PDEFoam. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::PDEFoam. class TMVA::PDEFoam: public TObject. Implementation of PDEFoam. The PDEFoam method is an extension of the PDERS method, which uses; self-adapting binning to divide the multi-dimensional phase space; in a finite number of hyper-rectangles (boxes). For a given number of boxes, the binning algorithm adjusts the size; and position of the boxes inside the multidimensional phase space,; minimizing the variance of the signal and background densities inside; the boxes. The binned density information is stored in binary trees,; allowing for a very fast and memory-efficient classification of; events. The implementation of the PDEFoam is based on the monte-carlo; integration package TFoam included in the analysis package ROOT. The class TMVA::PDEFoam defines the default interface for the; PDEFoam variants:. - PDEFoamEvent; - PDEFoamDiscriminant; - PDEFoamTarget; - PDEFoamMultiTarget; - PDEFoamDecisionTree. Per default PDEFoam stores in the cells the number of events (event; weights) and therefore acts as an event density estimator.; However, the above listed derived classes override this behaviour; to implement certain PDEFoam variations. In order to use PDEFoam the user has to set the density estimator; of the type TMVA::PDEFoamDensityBase, which is used to during the foam; build-up. The default PDEFoam should be used with; PDEFoamEventDensity. Function Members (Methods); public:. virtual~PDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidAddVariableName(const char* s); voidAddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual vo",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:10013,Deployability,integrat,integration,10013,"public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationfDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tfDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*fDistr! distribution of training events; Int_tfEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tfFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypefFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*fHistEdgHistograms of wt, one for each cell edge; Int_t*fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tfLastCeIndex of the last cell; TMVA::MsgLogger*fLogger! message logger; Int_t*fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tfMaxDepthmaximum depth of cell tree; Int_tfNBinNo. of bins in the edge histogram for cell MC exploration; Int_tfNCellsMaximum number of cells; UInt_tfNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tfNSamplNo. of MC events, when dividing (exploring) cell; TStringfNameName of a given instance of the FOAM class; UInt_tfNminminimal number of events in cell to split cell; Int_tfNoActNumber of acti",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:13313,Deployability,update,updated,13313," using SetPseRan and SetRho prior to invoking this initializator!. After the foam is grown, space for 2 variables is reserved in; every cell. They are used for filling the foam cells. void InitCells(); Internal subprogram used by Create.; It initializes ""root part"" of the FOAM of the tree of cells. Int_t CellFill(Int_t , TMVA::PDEFoamCell* ); Internal subprogram used by Create.; It initializes content of the newly allocated active cell. void Explore(TMVA::PDEFoamCell* Cell); Internal subprogram used by Create.; It explores newly defined cell with help of special short MC sampling.; As a result, estimates of kTRUE and drive volume is defined/determined; Average and dispersion of the weight distribution will is found along; each edge and the best edge (minimum dispersion, best maximum weight); is memorized for future use.; The optimal division point for eventual future cell division is; determined/recorded. Recorded are also minimum and maximum weight etc.; The volume estimate in all (inactive) parent cells is updated.; Note that links to parents and initial volume = 1/2 parent has to be; already defined prior to calling this routine. If fNmin > 0 then the total number of (training) events found in; the cell during the exploration is stored in the cell. This; information is used withing PeekMax() to avoid splitting cells; which contain less than fNmin events. void Varedu(Double_t[] , Int_t& , Double_t& , Double_t& ); Internal subrogram used by Create.; In determines the best edge candidate and the position of the cell division plane; in case of the variance reduction for future cell division,; using results of the MC exploration run stored in fHistEdg. void MakeAlpha(); Internal subrogram used by Create.; Provides random vector Alpha 0< Alpha(i) < 1. Long_t PeekMax(); Internal subprogram used by Create. It finds cell with maximal; driver integral for the purpose of the division. This function; is overridden by the PDEFoam Class to apply cuts on the number; of events i",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:14661,Deployability,update,updated,14661,"l subrogram used by Create.; In determines the best edge candidate and the position of the cell division plane; in case of the variance reduction for future cell division,; using results of the MC exploration run stored in fHistEdg. void MakeAlpha(); Internal subrogram used by Create.; Provides random vector Alpha 0< Alpha(i) < 1. Long_t PeekMax(); Internal subprogram used by Create. It finds cell with maximal; driver integral for the purpose of the division. This function; is overridden by the PDEFoam Class to apply cuts on the number; of events in the cell (fNmin) and the cell tree depth; (GetMaxDepth() > 0) during cell buildup. Int_t Divide(TMVA::PDEFoamCell* ); Internal subrogram used by Create.; It divides cell iCell into two daughter cells.; The iCell is retained and tagged as inactive, daughter cells are appended; at the end of the buffer.; New vertex is added to list of vertices.; List of active cells is updated, iCell removed, two daughters added; and their properties set with help of MC sampling (PDEFoam_Explore); Returns Code RC=-1 of buffer limit is reached, fLastCe=fnBuf. Double_t Eval(Double_t* xRand, Double_t& event_density); Internal subprogram.; Evaluates (training) distribution. void Grow(); Internal subrogram used by Create.; It grow new cells by the binary division process.; This function is overridden by the PDEFoam class to stop the foam buildup process; if one of the cut conditions stop the cell split. void SetInhiDiv(Int_t , Int_t ); This can be called before Create, after setting kDim; It defines which variables are excluded in the process of the cell division.; For example 'FoamX->SetInhiDiv(1, 1);' inhibits division of y-variable. void CheckAll(Int_t ); User utility, miscellaneous and debug.; Checks all pointers in the tree of cells. This is useful autodiagnostic.; level=0, no printout, failures causes STOP; level=1, printout, failures lead to WARNINGS only. void PrintCell(Long_t iCell = 0); Prints geometry of and elements of 'iCell', as we",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:400,Energy Efficiency,adapt,adapting,400,". TMVA::PDEFoam. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::PDEFoam. class TMVA::PDEFoam: public TObject. Implementation of PDEFoam. The PDEFoam method is an extension of the PDERS method, which uses; self-adapting binning to divide the multi-dimensional phase space; in a finite number of hyper-rectangles (boxes). For a given number of boxes, the binning algorithm adjusts the size; and position of the boxes inside the multidimensional phase space,; minimizing the variance of the signal and background densities inside; the boxes. The binned density information is stored in binary trees,; allowing for a very fast and memory-efficient classification of; events. The implementation of the PDEFoam is based on the monte-carlo; integration package TFoam included in the analysis package ROOT. The class TMVA::PDEFoam defines the default interface for the; PDEFoam variants:. - PDEFoamEvent; - PDEFoamDiscriminant; - PDEFoamTarget; - PDEFoamMultiTarget; - PDEFoamDecisionTree. Per default PDEFoam stores in the cells the number of events (event; weights) and therefore acts as an event density estimator.; However, the above listed derived classes override this behaviour; to implement certain PDEFoam variations. In order to use PDEFoam the user has to set the density estimator; of the type TMVA::PDEFoamDensityBase, which is used to during the foam; build-up. The default PDEFoam should be used with; PDEFoamEventDensity. Function Members (Methods); public:. virtual~PDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidAddVariableName(const char* s); voidAddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual vo",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:824,Energy Efficiency,efficient,efficient,824,". TMVA::PDEFoam. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::PDEFoam. class TMVA::PDEFoam: public TObject. Implementation of PDEFoam. The PDEFoam method is an extension of the PDERS method, which uses; self-adapting binning to divide the multi-dimensional phase space; in a finite number of hyper-rectangles (boxes). For a given number of boxes, the binning algorithm adjusts the size; and position of the boxes inside the multidimensional phase space,; minimizing the variance of the signal and background densities inside; the boxes. The binned density information is stored in binary trees,; allowing for a very fast and memory-efficient classification of; events. The implementation of the PDEFoam is based on the monte-carlo; integration package TFoam included in the analysis package ROOT. The class TMVA::PDEFoam defines the default interface for the; PDEFoam variants:. - PDEFoamEvent; - PDEFoamDiscriminant; - PDEFoamTarget; - PDEFoamMultiTarget; - PDEFoamDecisionTree. Per default PDEFoam stores in the cells the number of events (event; weights) and therefore acts as an event density estimator.; However, the above listed derived classes override this behaviour; to implement certain PDEFoam variations. In order to use PDEFoam the user has to set the density estimator; of the type TMVA::PDEFoamDensityBase, which is used to during the foam; build-up. The default PDEFoam should be used with; PDEFoamEventDensity. Function Members (Methods); public:. virtual~PDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidAddVariableName(const char* s); voidAddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual vo",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:12707,Energy Efficiency,allocate,allocated,12707," for streamer, user should not use it. PDEFoam(const TString& ); User constructor, to be employed by the user. ~PDEFoam(); Default destructor. PDEFoam(const TMVA::PDEFoam& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void SetDim(Int_t kDim); Sets dimension of cubical space. void SetXmin(Int_t idim, Double_t wmin); set lower foam bound in dimension idim. void SetXmax(Int_t idim, Double_t wmax); set upper foam bound in dimension idim. void Create(); Basic initialization of FOAM invoked by the user.; IMPORTANT: Random number generator and the distribution object has to be; provided using SetPseRan and SetRho prior to invoking this initializator!. After the foam is grown, space for 2 variables is reserved in; every cell. They are used for filling the foam cells. void InitCells(); Internal subprogram used by Create.; It initializes ""root part"" of the FOAM of the tree of cells. Int_t CellFill(Int_t , TMVA::PDEFoamCell* ); Internal subprogram used by Create.; It initializes content of the newly allocated active cell. void Explore(TMVA::PDEFoamCell* Cell); Internal subprogram used by Create.; It explores newly defined cell with help of special short MC sampling.; As a result, estimates of kTRUE and drive volume is defined/determined; Average and dispersion of the weight distribution will is found along; each edge and the best edge (minimum dispersion, best maximum weight); is memorized for future use.; The optimal division point for eventual future cell division is; determined/recorded. Recorded are also minimum and maximum weight etc.; The volume estimate in all (inactive) parent cells is updated.; Note that links to parents and initial volume = 1/2 parent has to be; already defined prior to calling this routine. If fNmin > 0 then the total number of (training) events found in; the cell during the exploration is stored in the cell. This; information is used withing PeekMax() to avoid splitting cells; which contain less than fNmin events. void Varedu(Double_t[] , Int_t",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:924,Integrability,integrat,integration,924,". TMVA::PDEFoam. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::PDEFoam. class TMVA::PDEFoam: public TObject. Implementation of PDEFoam. The PDEFoam method is an extension of the PDERS method, which uses; self-adapting binning to divide the multi-dimensional phase space; in a finite number of hyper-rectangles (boxes). For a given number of boxes, the binning algorithm adjusts the size; and position of the boxes inside the multidimensional phase space,; minimizing the variance of the signal and background densities inside; the boxes. The binned density information is stored in binary trees,; allowing for a very fast and memory-efficient classification of; events. The implementation of the PDEFoam is based on the monte-carlo; integration package TFoam included in the analysis package ROOT. The class TMVA::PDEFoam defines the default interface for the; PDEFoam variants:. - PDEFoamEvent; - PDEFoamDiscriminant; - PDEFoamTarget; - PDEFoamMultiTarget; - PDEFoamDecisionTree. Per default PDEFoam stores in the cells the number of events (event; weights) and therefore acts as an event density estimator.; However, the above listed derived classes override this behaviour; to implement certain PDEFoam variations. In order to use PDEFoam the user has to set the density estimator; of the type TMVA::PDEFoamDensityBase, which is used to during the foam; build-up. The default PDEFoam should be used with; PDEFoamEventDensity. Function Members (Methods); public:. virtual~PDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidAddVariableName(const char* s); voidAddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual vo",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:1033,Integrability,interface,interface,1033,"; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::PDEFoam. class TMVA::PDEFoam: public TObject. Implementation of PDEFoam. The PDEFoam method is an extension of the PDERS method, which uses; self-adapting binning to divide the multi-dimensional phase space; in a finite number of hyper-rectangles (boxes). For a given number of boxes, the binning algorithm adjusts the size; and position of the boxes inside the multidimensional phase space,; minimizing the variance of the signal and background densities inside; the boxes. The binned density information is stored in binary trees,; allowing for a very fast and memory-efficient classification of; events. The implementation of the PDEFoam is based on the monte-carlo; integration package TFoam included in the analysis package ROOT. The class TMVA::PDEFoam defines the default interface for the; PDEFoam variants:. - PDEFoamEvent; - PDEFoamDiscriminant; - PDEFoamTarget; - PDEFoamMultiTarget; - PDEFoamDecisionTree. Per default PDEFoam stores in the cells the number of events (event; weights) and therefore acts as an event density estimator.; However, the above listed derived classes override this behaviour; to implement certain PDEFoam variations. In order to use PDEFoam the user has to set the density estimator; of the type TMVA::PDEFoamDensityBase, which is used to during the foam; build-up. The default PDEFoam should be used with; PDEFoamEventDensity. Function Members (Methods); public:. virtual~PDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidAddVariableName(const char* s); voidAddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* =",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:10013,Integrability,integrat,integration,10013,"public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationfDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tfDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*fDistr! distribution of training events; Int_tfEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tfFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypefFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*fHistEdgHistograms of wt, one for each cell edge; Int_t*fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tfLastCeIndex of the last cell; TMVA::MsgLogger*fLogger! message logger; Int_t*fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tfMaxDepthmaximum depth of cell tree; Int_tfNBinNo. of bins in the edge histogram for cell MC exploration; Int_tfNCellsMaximum number of cells; UInt_tfNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tfNSamplNo. of MC events, when dividing (exploring) cell; TStringfNameName of a given instance of the FOAM class; UInt_tfNminminimal number of events in cell to split cell; Int_tfNoActNumber of acti",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:10515,Integrability,message,message,10515,"textMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationfDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tfDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*fDistr! distribution of training events; Int_tfEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tfFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypefFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*fHistEdgHistograms of wt, one for each cell edge; Int_t*fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tfLastCeIndex of the last cell; TMVA::MsgLogger*fLogger! message logger; Int_t*fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tfMaxDepthmaximum depth of cell tree; Int_tfNBinNo. of bins in the edge histogram for cell MC exploration; Int_tfNCellsMaximum number of cells; UInt_tfNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tfNSamplNo. of MC events, when dividing (exploring) cell; TStringfNameName of a given instance of the FOAM class; UInt_tfNminminimal number of events in cell to split cell; Int_tfNoActNumber of active cells; Bool_tfPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*fTimer! timer for graphical output; TObjArray*fVariableNamescollection of all variable names; Float_tfVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:13431,Integrability,rout,routine,13431," space for 2 variables is reserved in; every cell. They are used for filling the foam cells. void InitCells(); Internal subprogram used by Create.; It initializes ""root part"" of the FOAM of the tree of cells. Int_t CellFill(Int_t , TMVA::PDEFoamCell* ); Internal subprogram used by Create.; It initializes content of the newly allocated active cell. void Explore(TMVA::PDEFoamCell* Cell); Internal subprogram used by Create.; It explores newly defined cell with help of special short MC sampling.; As a result, estimates of kTRUE and drive volume is defined/determined; Average and dispersion of the weight distribution will is found along; each edge and the best edge (minimum dispersion, best maximum weight); is memorized for future use.; The optimal division point for eventual future cell division is; determined/recorded. Recorded are also minimum and maximum weight etc.; The volume estimate in all (inactive) parent cells is updated.; Note that links to parents and initial volume = 1/2 parent has to be; already defined prior to calling this routine. If fNmin > 0 then the total number of (training) events found in; the cell during the exploration is stored in the cell. This; information is used withing PeekMax() to avoid splitting cells; which contain less than fNmin events. void Varedu(Double_t[] , Int_t& , Double_t& , Double_t& ); Internal subrogram used by Create.; In determines the best edge candidate and the position of the cell division plane; in case of the variance reduction for future cell division,; using results of the MC exploration run stored in fHistEdg. void MakeAlpha(); Internal subrogram used by Create.; Provides random vector Alpha 0< Alpha(i) < 1. Long_t PeekMax(); Internal subprogram used by Create. It finds cell with maximal; driver integral for the purpose of the division. This function; is overridden by the PDEFoam Class to apply cuts on the number; of events in the cell (fNmin) and the cell tree depth; (GetMaxDepth() > 0) during cell buildup. Int_t ",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:400,Modifiability,adapt,adapting,400,". TMVA::PDEFoam. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::PDEFoam. class TMVA::PDEFoam: public TObject. Implementation of PDEFoam. The PDEFoam method is an extension of the PDERS method, which uses; self-adapting binning to divide the multi-dimensional phase space; in a finite number of hyper-rectangles (boxes). For a given number of boxes, the binning algorithm adjusts the size; and position of the boxes inside the multidimensional phase space,; minimizing the variance of the signal and background densities inside; the boxes. The binned density information is stored in binary trees,; allowing for a very fast and memory-efficient classification of; events. The implementation of the PDEFoam is based on the monte-carlo; integration package TFoam included in the analysis package ROOT. The class TMVA::PDEFoam defines the default interface for the; PDEFoam variants:. - PDEFoamEvent; - PDEFoamDiscriminant; - PDEFoamTarget; - PDEFoamMultiTarget; - PDEFoamDecisionTree. Per default PDEFoam stores in the cells the number of events (event; weights) and therefore acts as an event density estimator.; However, the above listed derived classes override this behaviour; to implement certain PDEFoam variations. In order to use PDEFoam the user has to set the density estimator; of the type TMVA::PDEFoamDensityBase, which is used to during the foam; build-up. The default PDEFoam should be used with; PDEFoamEventDensity. Function Members (Methods); public:. virtual~PDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidAddVariableName(const char* s); voidAddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual vo",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:4531,Modifiability,Inherit,InheritsFrom,4531,"_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringGetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tGetMaxDepth() const; UInt_tGetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tGetNCells() const; UInt_tGetNInActiveCells() const; UInt_tGetNmin(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tGetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*GetVariableName(Int_t idx); Double_tGetXmax(Int_t idim) const; Double_tGetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidInitialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](s",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:4597,Modifiability,Inherit,InheritsFrom,4597," Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringGetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tGetMaxDepth() const; UInt_tGetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tGetNCells() const; UInt_tGetNInActiveCells() const; UInt_tGetNmin(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tGetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*GetVariableName(Int_t idx); Double_tGetXmax(Int_t idim) const; Double_tGetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidInitialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:10786,Modifiability,variab,variables,10786,"TObject::kZombie. protected:. Double_t*fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationfDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tfDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*fDistr! distribution of training events; Int_tfEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tfFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypefFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*fHistEdgHistograms of wt, one for each cell edge; Int_t*fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tfLastCeIndex of the last cell; TMVA::MsgLogger*fLogger! message logger; Int_t*fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tfMaxDepthmaximum depth of cell tree; Int_tfNBinNo. of bins in the edge histogram for cell MC exploration; Int_tfNCellsMaximum number of cells; UInt_tfNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tfNSamplNo. of MC events, when dividing (exploring) cell; TStringfNameName of a given instance of the FOAM class; UInt_tfNminminimal number of events in cell to split cell; Int_tfNoActNumber of active cells; Bool_tfPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*fTimer! timer for graphical output; TObjArray*fVariableNamescollection of all variable names; Float_tfVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*fXmax[fDim] maximum for variable transform; Double_t*fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoam(); Default constructor for streamer, user should not use ",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:11364,Modifiability,variab,variable,11364,"iv! [fDim] Flags for inhibiting cell division; Int_tfLastCeIndex of the last cell; TMVA::MsgLogger*fLogger! message logger; Int_t*fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tfMaxDepthmaximum depth of cell tree; Int_tfNBinNo. of bins in the edge histogram for cell MC exploration; Int_tfNCellsMaximum number of cells; UInt_tfNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tfNSamplNo. of MC events, when dividing (exploring) cell; TStringfNameName of a given instance of the FOAM class; UInt_tfNminminimal number of events in cell to split cell; Int_tfNoActNumber of active cells; Bool_tfPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*fTimer! timer for graphical output; TObjArray*fVariableNamescollection of all variable names; Float_tfVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*fXmax[fDim] maximum for variable transform; Double_t*fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoam(); Default constructor for streamer, user should not use it. PDEFoam(const TString& ); User constructor, to be employed by the user. ~PDEFoam(); Default destructor. PDEFoam(const TMVA::PDEFoam& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void SetDim(Int_t kDim); Sets dimension of cubical space. void SetXmin(Int_t idim, Double_t wmin); set lower foam bound in dimension idim. void SetXmax(Int_t idim, Double_t wmax); set upper foam bound in dimension idim. void Create(); Basic initialization of FOAM invoked by the user.; IMPORTANT: Random number generator and the distribution object has to be; provided using SetPseRan and SetRho prior to invoking this initializator!. After the foam is grown, space for 2 variables is re",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:11505,Modifiability,variab,variable,11505,"iv! [fDim] Flags for inhibiting cell division; Int_tfLastCeIndex of the last cell; TMVA::MsgLogger*fLogger! message logger; Int_t*fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tfMaxDepthmaximum depth of cell tree; Int_tfNBinNo. of bins in the edge histogram for cell MC exploration; Int_tfNCellsMaximum number of cells; UInt_tfNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tfNSamplNo. of MC events, when dividing (exploring) cell; TStringfNameName of a given instance of the FOAM class; UInt_tfNminminimal number of events in cell to split cell; Int_tfNoActNumber of active cells; Bool_tfPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*fTimer! timer for graphical output; TObjArray*fVariableNamescollection of all variable names; Float_tfVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*fXmax[fDim] maximum for variable transform; Double_t*fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoam(); Default constructor for streamer, user should not use it. PDEFoam(const TString& ); User constructor, to be employed by the user. ~PDEFoam(); Default destructor. PDEFoam(const TMVA::PDEFoam& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void SetDim(Int_t kDim); Sets dimension of cubical space. void SetXmin(Int_t idim, Double_t wmin); set lower foam bound in dimension idim. void SetXmax(Int_t idim, Double_t wmax); set upper foam bound in dimension idim. void Create(); Basic initialization of FOAM invoked by the user.; IMPORTANT: Random number generator and the distribution object has to be; provided using SetPseRan and SetRho prior to invoking this initializator!. After the foam is grown, space for 2 variables is re",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:11558,Modifiability,variab,variable,11558,"iv! [fDim] Flags for inhibiting cell division; Int_tfLastCeIndex of the last cell; TMVA::MsgLogger*fLogger! message logger; Int_t*fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tfMaxDepthmaximum depth of cell tree; Int_tfNBinNo. of bins in the edge histogram for cell MC exploration; Int_tfNCellsMaximum number of cells; UInt_tfNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tfNSamplNo. of MC events, when dividing (exploring) cell; TStringfNameName of a given instance of the FOAM class; UInt_tfNminminimal number of events in cell to split cell; Int_tfNoActNumber of active cells; Bool_tfPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*fTimer! timer for graphical output; TObjArray*fVariableNamescollection of all variable names; Float_tfVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*fXmax[fDim] maximum for variable transform; Double_t*fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoam(); Default constructor for streamer, user should not use it. PDEFoam(const TString& ); User constructor, to be employed by the user. ~PDEFoam(); Default destructor. PDEFoam(const TMVA::PDEFoam& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void SetDim(Int_t kDim); Sets dimension of cubical space. void SetXmin(Int_t idim, Double_t wmin); set lower foam bound in dimension idim. void SetXmax(Int_t idim, Double_t wmax); set upper foam bound in dimension idim. void Create(); Basic initialization of FOAM invoked by the user.; IMPORTANT: Random number generator and the distribution object has to be; provided using SetPseRan and SetRho prior to invoking this initializator!. After the foam is grown, space for 2 variables is re",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:11592,Modifiability,Inherit,Inheritance,11592," cell tree; Int_tfNBinNo. of bins in the edge histogram for cell MC exploration; Int_tfNCellsMaximum number of cells; UInt_tfNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tfNSamplNo. of MC events, when dividing (exploring) cell; TStringfNameName of a given instance of the FOAM class; UInt_tfNminminimal number of events in cell to split cell; Int_tfNoActNumber of active cells; Bool_tfPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*fTimer! timer for graphical output; TObjArray*fVariableNamescollection of all variable names; Float_tfVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*fXmax[fDim] maximum for variable transform; Double_t*fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoam(); Default constructor for streamer, user should not use it. PDEFoam(const TString& ); User constructor, to be employed by the user. ~PDEFoam(); Default destructor. PDEFoam(const TMVA::PDEFoam& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void SetDim(Int_t kDim); Sets dimension of cubical space. void SetXmin(Int_t idim, Double_t wmin); set lower foam bound in dimension idim. void SetXmax(Int_t idim, Double_t wmax); set upper foam bound in dimension idim. void Create(); Basic initialization of FOAM invoked by the user.; IMPORTANT: Random number generator and the distribution object has to be; provided using SetPseRan and SetRho prior to invoking this initializator!. After the foam is grown, space for 2 variables is reserved in; every cell. They are used for filling the foam cells. void InitCells(); Internal subprogram used by Create.; It initializes ""root part"" of the FOAM of the tree of cells. Int_t CellFill(Int_t , TMVA::",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:11605,Modifiability,Inherit,Inherited,11605," cell tree; Int_tfNBinNo. of bins in the edge histogram for cell MC exploration; Int_tfNCellsMaximum number of cells; UInt_tfNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tfNSamplNo. of MC events, when dividing (exploring) cell; TStringfNameName of a given instance of the FOAM class; UInt_tfNminminimal number of events in cell to split cell; Int_tfNoActNumber of active cells; Bool_tfPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*fTimer! timer for graphical output; TObjArray*fVariableNamescollection of all variable names; Float_tfVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*fXmax[fDim] maximum for variable transform; Double_t*fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoam(); Default constructor for streamer, user should not use it. PDEFoam(const TString& ); User constructor, to be employed by the user. ~PDEFoam(); Default destructor. PDEFoam(const TMVA::PDEFoam& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void SetDim(Int_t kDim); Sets dimension of cubical space. void SetXmin(Int_t idim, Double_t wmin); set lower foam bound in dimension idim. void SetXmax(Int_t idim, Double_t wmax); set upper foam bound in dimension idim. void Create(); Basic initialization of FOAM invoked by the user.; IMPORTANT: Random number generator and the distribution object has to be; provided using SetPseRan and SetRho prior to invoking this initializator!. After the foam is grown, space for 2 variables is reserved in; every cell. They are used for filling the foam cells. void InitCells(); Internal subprogram used by Create.; It initializes ""root part"" of the FOAM of the tree of cells. Int_t CellFill(Int_t , TMVA::",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:12393,Modifiability,variab,variables,12393,"racBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*fXmax[fDim] maximum for variable transform; Double_t*fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoam(); Default constructor for streamer, user should not use it. PDEFoam(const TString& ); User constructor, to be employed by the user. ~PDEFoam(); Default destructor. PDEFoam(const TMVA::PDEFoam& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void SetDim(Int_t kDim); Sets dimension of cubical space. void SetXmin(Int_t idim, Double_t wmin); set lower foam bound in dimension idim. void SetXmax(Int_t idim, Double_t wmax); set upper foam bound in dimension idim. void Create(); Basic initialization of FOAM invoked by the user.; IMPORTANT: Random number generator and the distribution object has to be; provided using SetPseRan and SetRho prior to invoking this initializator!. After the foam is grown, space for 2 variables is reserved in; every cell. They are used for filling the foam cells. void InitCells(); Internal subprogram used by Create.; It initializes ""root part"" of the FOAM of the tree of cells. Int_t CellFill(Int_t , TMVA::PDEFoamCell* ); Internal subprogram used by Create.; It initializes content of the newly allocated active cell. void Explore(TMVA::PDEFoamCell* Cell); Internal subprogram used by Create.; It explores newly defined cell with help of special short MC sampling.; As a result, estimates of kTRUE and drive volume is defined/determined; Average and dispersion of the weight distribution will is found along; each edge and the best edge (minimum dispersion, best maximum weight); is memorized for future use.; The optimal division point for eventual future cell division is; determined/recorded. Recorded are also minimum and maximum weight etc.; The volume estimate in all (inactive) parent cells is updated.; Note that links to parents and initial volume = 1/2 parent has to be; ",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:15288,Modifiability,variab,variables,15288," the number; of events in the cell (fNmin) and the cell tree depth; (GetMaxDepth() > 0) during cell buildup. Int_t Divide(TMVA::PDEFoamCell* ); Internal subrogram used by Create.; It divides cell iCell into two daughter cells.; The iCell is retained and tagged as inactive, daughter cells are appended; at the end of the buffer.; New vertex is added to list of vertices.; List of active cells is updated, iCell removed, two daughters added; and their properties set with help of MC sampling (PDEFoam_Explore); Returns Code RC=-1 of buffer limit is reached, fLastCe=fnBuf. Double_t Eval(Double_t* xRand, Double_t& event_density); Internal subprogram.; Evaluates (training) distribution. void Grow(); Internal subrogram used by Create.; It grow new cells by the binary division process.; This function is overridden by the PDEFoam class to stop the foam buildup process; if one of the cut conditions stop the cell split. void SetInhiDiv(Int_t , Int_t ); This can be called before Create, after setting kDim; It defines which variables are excluded in the process of the cell division.; For example 'FoamX->SetInhiDiv(1, 1);' inhibits division of y-variable. void CheckAll(Int_t ); User utility, miscellaneous and debug.; Checks all pointers in the tree of cells. This is useful autodiagnostic.; level=0, no printout, failures causes STOP; level=1, printout, failures lead to WARNINGS only. void PrintCell(Long_t iCell = 0); Prints geometry of and elements of 'iCell', as well as relations; to parent and daughter cells. void PrintCells(void); Prints geometry of ALL cells of the FOAM. void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills a weight 'wt' into the PDEFoam cell, which; corresponds to the given event 'ev'. Per default cell element 0; is filled with the weight 'wt', and cell element 1 is filled; with the squared weight. This function can be overridden by a; subclass in order to change the values stored in the foam cells. void ResetCellElements(); Remove the cell e",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:15411,Modifiability,variab,variable,15411,"ide(TMVA::PDEFoamCell* ); Internal subrogram used by Create.; It divides cell iCell into two daughter cells.; The iCell is retained and tagged as inactive, daughter cells are appended; at the end of the buffer.; New vertex is added to list of vertices.; List of active cells is updated, iCell removed, two daughters added; and their properties set with help of MC sampling (PDEFoam_Explore); Returns Code RC=-1 of buffer limit is reached, fLastCe=fnBuf. Double_t Eval(Double_t* xRand, Double_t& event_density); Internal subprogram.; Evaluates (training) distribution. void Grow(); Internal subrogram used by Create.; It grow new cells by the binary division process.; This function is overridden by the PDEFoam class to stop the foam buildup process; if one of the cut conditions stop the cell split. void SetInhiDiv(Int_t , Int_t ); This can be called before Create, after setting kDim; It defines which variables are excluded in the process of the cell division.; For example 'FoamX->SetInhiDiv(1, 1);' inhibits division of y-variable. void CheckAll(Int_t ); User utility, miscellaneous and debug.; Checks all pointers in the tree of cells. This is useful autodiagnostic.; level=0, no printout, failures causes STOP; level=1, printout, failures lead to WARNINGS only. void PrintCell(Long_t iCell = 0); Prints geometry of and elements of 'iCell', as well as relations; to parent and daughter cells. void PrintCells(void); Prints geometry of ALL cells of the FOAM. void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills a weight 'wt' into the PDEFoam cell, which; corresponds to the given event 'ev'. Per default cell element 0; is filled with the weight 'wt', and cell element 1 is filled; with the squared weight. This function can be overridden by a; subclass in order to change the values stored in the foam cells. void ResetCellElements(); Remove the cell elements from all cells. Bool_t CellValueIsUndefined(TMVA::PDEFoamCell* ); Returns true, if the value of the given cell ",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:16818,Modifiability,variab,variables,16818,"ells. void PrintCells(void); Prints geometry of ALL cells of the FOAM. void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills a weight 'wt' into the PDEFoam cell, which; corresponds to the given event 'ev'. Per default cell element 0; is filled with the weight 'wt', and cell element 1 is filled; with the squared weight. This function can be overridden by a; subclass in order to change the values stored in the foam cells. void ResetCellElements(); Remove the cell elements from all cells. Bool_t CellValueIsUndefined(TMVA::PDEFoamCell* ); Returns true, if the value of the given cell is undefined.; Default value: kFALSE. This function can be overridden by; sub-classes. Float_t GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase* ); This function finds the cell, which corresponds to the given; untransformed event vector 'xvec' and return its value, which is; given by the parameter 'cv'. If kernel != NULL, then; PDEFoamKernelBase::Estimate() is called on the transformed event; variables. Parameters:. - xvec - event vector (untransformed, [fXmin,fXmax]). - cv - the cell value to return. - kernel - PDEFoam kernel estimator. If NULL is given, than the; pure cell value is returned. Return:. The cell value, corresponding to 'xvec', estimated by the given; kernel. std::vector<Float_t> GetCellValue( const std::map<Int_t,Float_t>& xvec, ECellValue cv ); This function finds all cells, which corresponds to the given; (incomplete) untransformed event vector 'xvec' and returns the; cell values, according to the parameter 'cv'. Parameters:. - xvec - map for the untransformed vector. The key (Int_t) is; the dimension, and the value (Float_t) is the event; coordinate. Note that not all coordinates have to be; specified. - cv - cell values to return. Return:. cell values from all cells that were found. TMVA::PDEFoamCell* FindCell(const vector<Float_t>& ) const; Find cell that contains 'xvec' (in foam coordinates [0,1]). Loop to find ",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:19102,Modifiability,variab,variables,19102,"ponding to 'xvec'. void FindCells(const map<Int_t,Float_t>& , TMVA::PDEFoamCell* , vector<TMVA::PDEFoamCell*>& ) const; This is a helper function for std::vector<PDEFoamCell*>; FindCells(...) and a generalisation of PDEFoamCell* FindCell().; It saves in 'cells' all cells, which contain the coordinates; specifies in 'txvec'. Note, that not all coordinates have to be; specified in 'txvec'. Parameters:. - txvec - event vector in foam coordinates [0,1]. The key is; the dimension and the value is the event coordinate. Note,; that not all coordinates have to be specified. - cell - cell to start searching with (usually root cell; fCells[0]). - cells - list of cells that were found. std::vector<TMVA::PDEFoamCell*> FindCells(const std::vector<Float_t> &txvec); Find all cells, that contain txvec. This function can be used,; when the dimension of the foam is greater than the dimension of; txvec. E.g. this is the case for multi-target regression. Parameters:. - txvec - event vector of variables, transformed into foam; coordinates [0,1]. The size of txvec can be smaller than the; dimension of the foam. Return value:. - vector of cells, that fit txvec. std::vector<TMVA::PDEFoamCell*> FindCells(const std::map<Int_t, Float_t> &txvec); Find all cells, that contain the coordinates specified in txvec.; The key in 'txvec' is the dimension, and the corresponding value; is the coordinate. Note, that not all coordinates have to be; specified in txvec. Parameters:. - txvec - map of coordinates (transformed into foam coordinates; [0,1]). Return value:. - vector of cells, that fit txvec. TH1D* Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); Draws 1-dimensional foam (= histogram). Parameters:. - cell_value - the cell value to draw. - nbin - number of bins of result histogram. - kernel - a PDEFoam kernel. TH2D* Project2(Int_t idim1, Int_t idim2, TMVA::ECellValue cell_value = kValue, TMVA::PDEFoamKernelBase* kernel = __null, UInt_t nbin = 50); Project",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:20121,Modifiability,variab,variable,20121,"meters:. - txvec - event vector of variables, transformed into foam; coordinates [0,1]. The size of txvec can be smaller than the; dimension of the foam. Return value:. - vector of cells, that fit txvec. std::vector<TMVA::PDEFoamCell*> FindCells(const std::map<Int_t, Float_t> &txvec); Find all cells, that contain the coordinates specified in txvec.; The key in 'txvec' is the dimension, and the corresponding value; is the coordinate. Note, that not all coordinates have to be; specified in txvec. Parameters:. - txvec - map of coordinates (transformed into foam coordinates; [0,1]). Return value:. - vector of cells, that fit txvec. TH1D* Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); Draws 1-dimensional foam (= histogram). Parameters:. - cell_value - the cell value to draw. - nbin - number of bins of result histogram. - kernel - a PDEFoam kernel. TH2D* Project2(Int_t idim1, Int_t idim2, TMVA::ECellValue cell_value = kValue, TMVA::PDEFoamKernelBase* kernel = __null, UInt_t nbin = 50); Project foam variable idim1 and variable idim2 to histogram. Parameters:. - idim1, idim2 - dimensions to project to. - cell_value - the cell value to draw. - kernel - a PDEFoam kernel (optional). If NULL is given, the; kernel is ignored and the pure cell values are; plotted. - nbin - number of bins in x and y direction of result histogram; (optional, default is 50). Returns:; a 2-dimensional histogram. Float_t GetCellValue(const PDEFoamCell* cell, ECellValue cv); Returns the cell value of 'cell' corresponding to the given; option 'cv'. This function should be overridden by the subclass; in order to specify which cell elements to return for a given; cell value 'cv'. By default kValue returns cell element 0, and; kValueError returns cell element 1. Double_t GetCellElement(const TMVA::PDEFoamCell* cell, UInt_t i) const; Returns cell element i of cell 'cell'. If the cell has no; elements or the index 'i' is out of range, than 0 is returned. void SetC",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:20140,Modifiability,variab,variable,20140,"meters:. - txvec - event vector of variables, transformed into foam; coordinates [0,1]. The size of txvec can be smaller than the; dimension of the foam. Return value:. - vector of cells, that fit txvec. std::vector<TMVA::PDEFoamCell*> FindCells(const std::map<Int_t, Float_t> &txvec); Find all cells, that contain the coordinates specified in txvec.; The key in 'txvec' is the dimension, and the corresponding value; is the coordinate. Note, that not all coordinates have to be; specified in txvec. Parameters:. - txvec - map of coordinates (transformed into foam coordinates; [0,1]). Return value:. - vector of cells, that fit txvec. TH1D* Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); Draws 1-dimensional foam (= histogram). Parameters:. - cell_value - the cell value to draw. - nbin - number of bins of result histogram. - kernel - a PDEFoam kernel. TH2D* Project2(Int_t idim1, Int_t idim2, TMVA::ECellValue cell_value = kValue, TMVA::PDEFoamKernelBase* kernel = __null, UInt_t nbin = 50); Project foam variable idim1 and variable idim2 to histogram. Parameters:. - idim1, idim2 - dimensions to project to. - cell_value - the cell value to draw. - kernel - a PDEFoam kernel (optional). If NULL is given, the; kernel is ignored and the pure cell values are; plotted. - nbin - number of bins in x and y direction of result histogram; (optional, default is 50). Returns:; a 2-dimensional histogram. Float_t GetCellValue(const PDEFoamCell* cell, ECellValue cv); Returns the cell value of 'cell' corresponding to the given; option 'cv'. This function should be overridden by the subclass; in order to specify which cell elements to return for a given; cell value 'cv'. By default kValue returns cell element 0, and; kValueError returns cell element 1. Double_t GetCellElement(const TMVA::PDEFoamCell* cell, UInt_t i) const; Returns cell element i of cell 'cell'. If the cell has no; elements or the index 'i' is out of range, than 0 is returned. void SetC",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:24483,Modifiability,variab,variable,24483,"td::vector<Float_t> VarTransform(const vector<Float_t>& invec) const. Float_t VarTransformInvers(Int_t idim, Float_t x) const. std::vector<Float_t> VarTransformInvers(const vector<Float_t>& invec) const. PDEFoamDensityBase* GetDistr() const; get internal density. { assert(fDistr); return fDistr; }. void Initialize(); ---------- Foam creation functions. {}. void Finalize(); function to call after foam is grown. {}. void SetnCells(Long_t nCells); {fNCells =nCells;}. void SetnSampl(Long_t nSampl); {fNSampl =nSampl;}. void SetnBin(Int_t nBin); {fNBin = nBin;}. void SetEvPerBin(Int_t EvPerBin); {fEvPerBin =EvPerBin;}. void SetDensity(TMVA::PDEFoamDensityBase* dens); { fDistr = dens; }. Int_t GetTotDim() const; coverity[ -tainted_data_return ]. {return fDim; }. TString GetFoamName() const; {return fName; }. UInt_t GetNActiveCells() const; {return fNoAct;}. UInt_t GetNInActiveCells() const; {return GetNCells()-GetNActiveCells();}. UInt_t GetNCells() const; {return fNCells;}. PDEFoamCell* GetRootCell() const; {return fCells[0];}. void SetNmin(UInt_t val); Getters and Setters for user cut options. { fNmin=val; }. UInt_t GetNmin(); { return fNmin; }. void SetMaxDepth(UInt_t maxdepth); { fMaxDepth = maxdepth; }. UInt_t GetMaxDepth() const; { return fMaxDepth; }. Double_t GetXmin(Int_t idim) const; {return fXmin[idim];}. Double_t GetXmax(Int_t idim) const; {return fXmax[idim];}. void AddVariableName(const char* s); Getters and Setters for variable names. { AddVariableName(new TObjString(s)); }. void AddVariableName(TObjString* s); { fVariableNames->Add(s); }. TObjString* GetVariableName(Int_t idx); {return dynamic_cast<TObjString*>(fVariableNames->At(idx));}. » Author: S. Jadach, Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:22295,Performance,load,load,22295,"e foam output.; Draw TMVA-process bar instead. void RootPlot2dim(const TString& filename, TString opt, Bool_t createCanvas = kTRUE, Bool_t colors = kTRUE); Debugging tool which plots the cells of a 2-dimensional PDEFoam; as rectangles in C++ format readable for ROOT. Parameters:; - filename - filename of ouput root macro. - opt - cell_value, rms, rms_ov_mean; If cell_value is set, the following values will be filled into; the result histogram:; - number of events - in case of classification with 2 separate; foams or multi-target regression; - discriminator - in case of classification with one; unified foam; - target - in case of mono-target regression; If none of {cell_value, rms, rms_ov_mean} is given, the cells; will not be filled.; If 'opt' contains the string 'cellnumber', the index of; each cell is draw in addition. - createCanvas - whether to create a new canvas or not. - colors - whether to fill cells with colors or shades of grey. Example:. The following commands load a mono-target regression foam from; file 'foam.root' and create a ROOT macro 'output.C', which; draws all PDEFoam cells with little boxes. The latter are; filled with colors according to the target value stored in the; cell. Also the cell number is drawn. TFile file(""foam.root"");; TMVA::PDEFoam *foam = (TMVA::PDEFoam*) gDirectory->Get(""MonoTargetRegressionFoam"");; foam->RootPlot2dim(""output.C"",""cell_value,cellnumber"");; gROOT->Macro(""output.C"");. void FillBinarySearchTree(const TMVA::Event* ev); Insert event to internal foam's density estimator; PDEFoamDensityBase. void DeleteBinarySearchTree(); Delete the foam's density estimator, which contains the binary; search tree. Float_t VarTransform(Int_t idim, Float_t x) const. std::vector<Float_t> VarTransform(const vector<Float_t>& invec) const. Float_t VarTransformInvers(Int_t idim, Float_t x) const. std::vector<Float_t> VarTransformInvers(const vector<Float_t>& invec) const. PDEFoamDensityBase* GetDistr() const; get internal density. { assert(fDis",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:13608,Safety,avoid,avoid,13608,"VA::PDEFoamCell* ); Internal subprogram used by Create.; It initializes content of the newly allocated active cell. void Explore(TMVA::PDEFoamCell* Cell); Internal subprogram used by Create.; It explores newly defined cell with help of special short MC sampling.; As a result, estimates of kTRUE and drive volume is defined/determined; Average and dispersion of the weight distribution will is found along; each edge and the best edge (minimum dispersion, best maximum weight); is memorized for future use.; The optimal division point for eventual future cell division is; determined/recorded. Recorded are also minimum and maximum weight etc.; The volume estimate in all (inactive) parent cells is updated.; Note that links to parents and initial volume = 1/2 parent has to be; already defined prior to calling this routine. If fNmin > 0 then the total number of (training) events found in; the cell during the exploration is stored in the cell. This; information is used withing PeekMax() to avoid splitting cells; which contain less than fNmin events. void Varedu(Double_t[] , Int_t& , Double_t& , Double_t& ); Internal subrogram used by Create.; In determines the best edge candidate and the position of the cell division plane; in case of the variance reduction for future cell division,; using results of the MC exploration run stored in fHistEdg. void MakeAlpha(); Internal subrogram used by Create.; Provides random vector Alpha 0< Alpha(i) < 1. Long_t PeekMax(); Internal subprogram used by Create. It finds cell with maximal; driver integral for the purpose of the division. This function; is overridden by the PDEFoam Class to apply cuts on the number; of events in the cell (fNmin) and the cell tree depth; (GetMaxDepth() > 0) during cell buildup. Int_t Divide(TMVA::PDEFoamCell* ); Internal subrogram used by Create.; It divides cell iCell into two daughter cells.; The iCell is retained and tagged as inactive, daughter cells are appended; at the end of the buffer.; New vertex is added",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:21298,Safety,avoid,avoid,21298," - a PDEFoam kernel (optional). If NULL is given, the; kernel is ignored and the pure cell values are; plotted. - nbin - number of bins in x and y direction of result histogram; (optional, default is 50). Returns:; a 2-dimensional histogram. Float_t GetCellValue(const PDEFoamCell* cell, ECellValue cv); Returns the cell value of 'cell' corresponding to the given; option 'cv'. This function should be overridden by the subclass; in order to specify which cell elements to return for a given; cell value 'cv'. By default kValue returns cell element 0, and; kValueError returns cell element 1. Double_t GetCellElement(const TMVA::PDEFoamCell* cell, UInt_t i) const; Returns cell element i of cell 'cell'. If the cell has no; elements or the index 'i' is out of range, than 0 is returned. void SetCellElement(TMVA::PDEFoamCell* cell, UInt_t i, Double_t value); Set cell element i of cell to value. If the cell element i does; not exist, it is created. void OutputGrow(Bool_t finished = false); Overridden function of PDEFoam to avoid native foam output.; Draw TMVA-process bar instead. void RootPlot2dim(const TString& filename, TString opt, Bool_t createCanvas = kTRUE, Bool_t colors = kTRUE); Debugging tool which plots the cells of a 2-dimensional PDEFoam; as rectangles in C++ format readable for ROOT. Parameters:; - filename - filename of ouput root macro. - opt - cell_value, rms, rms_ov_mean; If cell_value is set, the following values will be filled into; the result histogram:; - number of events - in case of classification with 2 separate; foams or multi-target regression; - discriminator - in case of classification with one; unified foam; - target - in case of mono-target regression; If none of {cell_value, rms, rms_ov_mean} is given, the cells; will not be filled.; If 'opt' contains the string 'cellnumber', the index of; each cell is draw in addition. - createCanvas - whether to create a new canvas or not. - colors - whether to fill cells with colors or shades of grey. Example:. ",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:4421,Security,Hash,Hash,4421,"_tGetCellValue(const TMVA::PDEFoamCell* cell, TMVA::ECellValue cv); virtual Float_tGetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringGetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tGetMaxDepth() const; UInt_tGetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tGetNCells() const; UInt_tGetNInActiveCells() const; UInt_tGetNmin(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tGetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*GetVariableName(Int_t idx); Double_tGetXmax(Int_t idim) const; Double_tGetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidInitialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:4982,Testability,Log,Log,4982,"nt_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tGetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*GetVariableName(Int_t idx); Double_tGetXmax(Int_t idim) const; Double_tGetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidInitialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoam&operator=(const TMVA::PDEFoam&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamPDEFoam(); TMVA::PDEFoamPDEFoam(const TString&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidPrintCell(Long_t iCell = 0); voidPrintCells(); virtual TH2D*Project2(Int_t idim1, Int_t idim2, TMVA::ECellValue cell_value = kValue, TM",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:7344,Testability,Test,TestBit,7344,"A::ECellValue cell_value = kValue, TMVA::PDEFoamKernelBase* kernel = __null, UInt_t nbin = 50); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidResetCellElements(); voidRootPlot2dim(const TString& filename, TString opt, Bool_t createCanvas = kTRUE, Bool_t colors = kTRUE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDensity(TMVA::PDEFoamDensityBase* dens); voidSetDim(Int_t kDim); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEvPerBin(Int_t EvPerBin); voidSetInhiDiv(Int_t, Int_t); voidSetMaxDepth(UInt_t maxdepth); voidSetnBin(Int_t nBin); voidSetnCells(Long_t nCells); voidSetNmin(UInt_t val); voidSetnSampl(Long_t nSampl); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetXmax(Int_t idim, Double_t wmax); voidSetXmin(Int_t idim, Double_t wmin); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); vector<Float_t>VarTransform(const vector<Float_t>& invec) const; Float_tVarTransform(Int_t idim, Float_t x) const; vector<Float_t>VarTransformInvers(const vector<Float_t>& invec) const; Float_tVarTransformInvers(Int_t idim, Float_t x) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:7383,Testability,Test,TestBits,7383,"A::ECellValue cell_value = kValue, TMVA::PDEFoamKernelBase* kernel = __null, UInt_t nbin = 50); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidResetCellElements(); voidRootPlot2dim(const TString& filename, TString opt, Bool_t createCanvas = kTRUE, Bool_t colors = kTRUE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDensity(TMVA::PDEFoamDensityBase* dens); voidSetDim(Int_t kDim); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEvPerBin(Int_t EvPerBin); voidSetInhiDiv(Int_t, Int_t); voidSetMaxDepth(UInt_t maxdepth); voidSetnBin(Int_t nBin); voidSetnCells(Long_t nCells); voidSetNmin(UInt_t val); voidSetnSampl(Long_t nSampl); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetXmax(Int_t idim, Double_t wmax); voidSetXmin(Int_t idim, Double_t wmin); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); vector<Float_t>VarTransform(const vector<Float_t>& invec) const; Float_tVarTransform(Int_t idim, Float_t x) const; vector<Float_t>VarTransformInvers(const vector<Float_t>& invec) const; Float_tVarTransformInvers(Int_t idim, Float_t x) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:9980,Testability,log,logic,9980,"public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationfDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tfDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*fDistr! distribution of training events; Int_tfEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tfFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypefFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*fHistEdgHistograms of wt, one for each cell edge; Int_t*fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tfLastCeIndex of the last cell; TMVA::MsgLogger*fLogger! message logger; Int_t*fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tfMaxDepthmaximum depth of cell tree; Int_tfNBinNo. of bins in the edge histogram for cell MC exploration; Int_tfNCellsMaximum number of cells; UInt_tfNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tfNSamplNo. of MC events, when dividing (exploring) cell; TStringfNameName of a given instance of the FOAM class; UInt_tfNminminimal number of events in cell to split cell; Int_tfNoActNumber of acti",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:10523,Testability,log,logger,10523,"textMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationfDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tfDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*fDistr! distribution of training events; Int_tfEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tfFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypefFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*fHistEdgHistograms of wt, one for each cell edge; Int_t*fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tfLastCeIndex of the last cell; TMVA::MsgLogger*fLogger! message logger; Int_t*fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tfMaxDepthmaximum depth of cell tree; Int_tfNBinNo. of bins in the edge histogram for cell MC exploration; Int_tfNCellsMaximum number of cells; UInt_tfNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tfNSamplNo. of MC events, when dividing (exploring) cell; TStringfNameName of a given instance of the FOAM class; UInt_tfNminminimal number of events in cell to split cell; Int_tfNoActNumber of active cells; Bool_tfPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*fTimer! timer for graphical output; TObjArray*fVariableNamescollection of all variable names; Float_tfVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:23298,Testability,assert,assert,23298," regression foam from; file 'foam.root' and create a ROOT macro 'output.C', which; draws all PDEFoam cells with little boxes. The latter are; filled with colors according to the target value stored in the; cell. Also the cell number is drawn. TFile file(""foam.root"");; TMVA::PDEFoam *foam = (TMVA::PDEFoam*) gDirectory->Get(""MonoTargetRegressionFoam"");; foam->RootPlot2dim(""output.C"",""cell_value,cellnumber"");; gROOT->Macro(""output.C"");. void FillBinarySearchTree(const TMVA::Event* ev); Insert event to internal foam's density estimator; PDEFoamDensityBase. void DeleteBinarySearchTree(); Delete the foam's density estimator, which contains the binary; search tree. Float_t VarTransform(Int_t idim, Float_t x) const. std::vector<Float_t> VarTransform(const vector<Float_t>& invec) const. Float_t VarTransformInvers(Int_t idim, Float_t x) const. std::vector<Float_t> VarTransformInvers(const vector<Float_t>& invec) const. PDEFoamDensityBase* GetDistr() const; get internal density. { assert(fDistr); return fDistr; }. void Initialize(); ---------- Foam creation functions. {}. void Finalize(); function to call after foam is grown. {}. void SetnCells(Long_t nCells); {fNCells =nCells;}. void SetnSampl(Long_t nSampl); {fNSampl =nSampl;}. void SetnBin(Int_t nBin); {fNBin = nBin;}. void SetEvPerBin(Int_t EvPerBin); {fEvPerBin =EvPerBin;}. void SetDensity(TMVA::PDEFoamDensityBase* dens); { fDistr = dens; }. Int_t GetTotDim() const; coverity[ -tainted_data_return ]. {return fDim; }. TString GetFoamName() const; {return fName; }. UInt_t GetNActiveCells() const; {return fNoAct;}. UInt_t GetNInActiveCells() const; {return GetNCells()-GetNActiveCells();}. UInt_t GetNCells() const; {return fNCells;}. PDEFoamCell* GetRootCell() const; {return fCells[0];}. void SetNmin(UInt_t val); Getters and Setters for user cut options. { fNmin=val; }. UInt_t GetNmin(); { return fNmin; }. void SetMaxDepth(UInt_t maxdepth); { fMaxDepth = maxdepth; }. UInt_t GetMaxDepth() const; { return fMaxDepth; }. Double_t ",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoam.html:2012,Usability,Clear,Clear,2012," virtual~PDEFoam(); voidTObject::AbstractMethod(const char* method) const; voidAddVariableName(const char* s); voidAddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual vo",MatchSource.WIKI,root/html604/TMVA__PDEFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoam.html
https://root.cern/root/html604/TMVA__PDEFoamCell.html:1173,Availability,Error,Error,1173," virtual~PDEFoamCell(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCalcVolume(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFill(Int_t, TMVA::PDEFoamCell*, TMVA::PDEFoamCell*, TMVA::PDEFoamCell*); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetBest() const; TMVA::PDEFoamCell*GetDau0() const; TMVA::PDEFoamCell*GetDau1() const; UInt_tGetDepth(); virtual Option_t*TObject::GetDrawOption() const; Double_tGetDriv() const; static Long_tTObject::GetDtorOnly(); TObject*GetElement() const; voidGetHcub",MatchSource.WIKI,root/html604/TMVA__PDEFoamCell.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamCell.html
https://root.cern/root/html604/TMVA__PDEFoamCell.html:1302,Availability,error,error,1302," virtual~PDEFoamCell(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCalcVolume(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFill(Int_t, TMVA::PDEFoamCell*, TMVA::PDEFoamCell*, TMVA::PDEFoamCell*); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetBest() const; TMVA::PDEFoamCell*GetDau0() const; TMVA::PDEFoamCell*GetDau1() const; UInt_tGetDepth(); virtual Option_t*TObject::GetDrawOption() const; Double_tGetDriv() const; static Long_tTObject::GetDtorOnly(); TObject*GetElement() const; voidGetHcub",MatchSource.WIKI,root/html604/TMVA__PDEFoamCell.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamCell.html
https://root.cern/root/html604/TMVA__PDEFoamCell.html:1386,Availability,error,error,1386,"ractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCalcVolume(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFill(Int_t, TMVA::PDEFoamCell*, TMVA::PDEFoamCell*, TMVA::PDEFoamCell*); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetBest() const; TMVA::PDEFoamCell*GetDau0() const; TMVA::PDEFoamCell*GetDau1() const; UInt_tGetDepth(); virtual Option_t*TObject::GetDrawOption() const; Double_tGetDriv() const; static Long_tTObject::GetDtorOnly(); TObject*GetElement() const; voidGetHcub(TMVA::PDEFoamVect&, TMVA::PDEFoamVect&) const; voidGetHSize(TMVA::PDEFoamVect&) const; virtual const char*TObject::GetIconName() const; Double_tGetIntg() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*GetPare() const;",MatchSource.WIKI,root/html604/TMVA__PDEFoamCell.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamCell.html
https://root.cern/root/html604/TMVA__PDEFoamCell.html:7425,Energy Efficiency,allocate,allocated,7425,"ymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Int_tfBestBest Edge for division; TReffDaught0Pointer to daughter 1; TReffDaught1Pointer to daughter 2; Short_tfDimDimension of the vector space; Double_tfDriveDriver integral, only for cell build-up; TObject*fElementmay set by the user to save some data in this cell; Double_tfIntegralIntegral over cell (estimate from exploration); TReffParentPointer to parent cell; Int_tfSerialSerial number; Int_tfStatusStatus (active, inactive); Double_tfVolumeCartesian Volume of cell; Double_tfXdivFactor for division. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamCell(); Default constructor for streamer. PDEFoamCell(Int_t ); User constructor allocating single empty Cell. PDEFoamCell(const TMVA::PDEFoamCell& ); Copy constructor. ~PDEFoamCell(); Destructor. void Fill(Int_t , TMVA::PDEFoamCell* , TMVA::PDEFoamCell* , TMVA::PDEFoamCell* ); Fills in certain data into newly allocated cell. void GetHcub(TMVA::PDEFoamVect& , TMVA::PDEFoamVect& ) const; Provides size and position of the cell; These parameter are calculated by analyzing information in all parents; cells up to the root cell. It takes time but saves memory. void GetHSize(TMVA::PDEFoamVect& ) const; Provides size of the cell; Size parameters are calculated by analyzing information in all parents; cells up to the root cell. It takes time but saves memory. void CalcVolume(void); Calculates volume of the cell using size params which are calculated. UInt_t GetDepth(); Get depth of cell in binary tree, where the root cell has depth; 1. UInt_t GetTreeDepth(UInt_t depth = 0); Get depth of cell tree, starting at this cell. void Print(Option_t* option) const; Printout of the cell geometry parameters for the debug purpose. Double_t GetXdiv() const; Geometry. { return fXdiv;}. Int_t GetBest() const; { return fBest;}. void SetBest(Int_t Best); { fBest =Best;",MatchSource.WIKI,root/html604/TMVA__PDEFoamCell.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamCell.html
https://root.cern/root/html604/TMVA__PDEFoamCell.html:2801,Modifiability,Inherit,InheritsFrom,2801,"FoamCell*GetDau1() const; UInt_tGetDepth(); virtual Option_t*TObject::GetDrawOption() const; Double_tGetDriv() const; static Long_tTObject::GetDtorOnly(); TObject*GetElement() const; voidGetHcub(TMVA::PDEFoamVect&, TMVA::PDEFoamVect&) const; voidGetHSize(TMVA::PDEFoamVect&) const; virtual const char*TObject::GetIconName() const; Double_tGetIntg() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*GetPare() const; Int_tGetSerial() const; Int_tGetStat() const; virtual const char*TObject::GetTitle() const; UInt_tGetTreeDepth(UInt_t depth = 0); virtual UInt_tTObject::GetUniqueID() const; Double_tGetVolume() const; Double_tGetXdiv() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TMVA__PDEFoamCell.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamCell.html
https://root.cern/root/html604/TMVA__PDEFoamCell.html:2867,Modifiability,Inherit,InheritsFrom,2867,"ct::GetDrawOption() const; Double_tGetDriv() const; static Long_tTObject::GetDtorOnly(); TObject*GetElement() const; voidGetHcub(TMVA::PDEFoamVect&, TMVA::PDEFoamVect&) const; voidGetHSize(TMVA::PDEFoamVect&) const; virtual const char*TObject::GetIconName() const; Double_tGetIntg() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*GetPare() const; Int_tGetSerial() const; Int_tGetStat() const; virtual const char*TObject::GetTitle() const; UInt_tGetTreeDepth(UInt_t depth = 0); virtual UInt_tTObject::GetUniqueID() const; Double_tGetVolume() const; Double_tGetXdiv() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamCell&operator=(const TMVA::PDEFoamCell",MatchSource.WIKI,root/html604/TMVA__PDEFoamCell.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamCell.html
https://root.cern/root/html604/TMVA__PDEFoamCell.html:7030,Modifiability,Inherit,Inheritance,7030,"atic TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Int_tfBestBest Edge for division; TReffDaught0Pointer to daughter 1; TReffDaught1Pointer to daughter 2; Short_tfDimDimension of the vector space; Double_tfDriveDriver integral, only for cell build-up; TObject*fElementmay set by the user to save some data in this cell; Double_tfIntegralIntegral over cell (estimate from exploration); TReffParentPointer to parent cell; Int_tfSerialSerial number; Int_tfStatusStatus (active, inactive); Double_tfVolumeCartesian Volume of cell; Double_tfXdivFactor for division. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamCell(); Default constructor for streamer. PDEFoamCell(Int_t ); User constructor allocating single empty Cell. PDEFoamCell(const TMVA::PDEFoamCell& ); Copy constructor. ~PDEFoamCell(); Destructor. void Fill(Int_t , TMVA::PDEFoamCell* , TMVA::PDEFoamCell* , TMVA::PDEFoamCell* ); Fills in certain data into newly allocated cell. void GetHcub(TMVA::PDEFoamVect& , TMVA::PDEFoamVect& ) const; Provides size and position of the cell; These parameter are calculated by analyzing information in all parents; cells up to the root cell. It takes time but saves memory. void GetHSize(TMVA::PDEFoamVect& ) const; Provides size of the cell; Size parameters are calculated by analyzing information in all parents; cells up to the root cell. It takes time but saves memory. void CalcVolume(void); Calculates volume of the cell using size params which are calculated. UInt_t GetDepth(); Get depth of cell in binary tree, where the root cell has depth; 1. UI",MatchSource.WIKI,root/html604/TMVA__PDEFoamCell.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamCell.html
https://root.cern/root/html604/TMVA__PDEFoamCell.html:7043,Modifiability,Inherit,Inherited,7043,"atic TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Int_tfBestBest Edge for division; TReffDaught0Pointer to daughter 1; TReffDaught1Pointer to daughter 2; Short_tfDimDimension of the vector space; Double_tfDriveDriver integral, only for cell build-up; TObject*fElementmay set by the user to save some data in this cell; Double_tfIntegralIntegral over cell (estimate from exploration); TReffParentPointer to parent cell; Int_tfSerialSerial number; Int_tfStatusStatus (active, inactive); Double_tfVolumeCartesian Volume of cell; Double_tfXdivFactor for division. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamCell(); Default constructor for streamer. PDEFoamCell(Int_t ); User constructor allocating single empty Cell. PDEFoamCell(const TMVA::PDEFoamCell& ); Copy constructor. ~PDEFoamCell(); Destructor. void Fill(Int_t , TMVA::PDEFoamCell* , TMVA::PDEFoamCell* , TMVA::PDEFoamCell* ); Fills in certain data into newly allocated cell. void GetHcub(TMVA::PDEFoamVect& , TMVA::PDEFoamVect& ) const; Provides size and position of the cell; These parameter are calculated by analyzing information in all parents; cells up to the root cell. It takes time but saves memory. void GetHSize(TMVA::PDEFoamVect& ) const; Provides size of the cell; Size parameters are calculated by analyzing information in all parents; cells up to the root cell. It takes time but saves memory. void CalcVolume(void); Calculates volume of the cell using size params which are calculated. UInt_t GetDepth(); Get depth of cell in binary tree, where the root cell has depth; 1. UI",MatchSource.WIKI,root/html604/TMVA__PDEFoamCell.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamCell.html
https://root.cern/root/html604/TMVA__PDEFoamCell.html:9343,Modifiability,variab,variable,9343,"ize parameters are calculated by analyzing information in all parents; cells up to the root cell. It takes time but saves memory. void CalcVolume(void); Calculates volume of the cell using size params which are calculated. UInt_t GetDepth(); Get depth of cell in binary tree, where the root cell has depth; 1. UInt_t GetTreeDepth(UInt_t depth = 0); Get depth of cell tree, starting at this cell. void Print(Option_t* option) const; Printout of the cell geometry parameters for the debug purpose. Double_t GetXdiv() const; Geometry. { return fXdiv;}. Int_t GetBest() const; { return fBest;}. void SetBest(Int_t Best); { fBest =Best;}. void SetXdiv(Double_t Xdiv); { fXdiv =Xdiv;}. Double_t GetVolume() const; { return fVolume;}. Double_t GetIntg() const; { return fIntegral;}. Double_t GetDriv() const; { return fDrive;}. void SetIntg(Double_t Intg); { fIntegral=Intg;}. void SetDriv(Double_t Driv); linked tree organization. { fDrive =Driv;}. Int_t GetStat() const; { return fStatus;}. void SetStat(Int_t Stat); { fStatus=Stat;}. PDEFoamCell* GetPare() const; { return (PDEFoamCell*) fParent.GetObject(); }. PDEFoamCell* GetDau0() const; { return (PDEFoamCell*) fDaught0.GetObject(); }. PDEFoamCell* GetDau1() const; { return (PDEFoamCell*) fDaught1.GetObject(); }. void SetDau0(TMVA::PDEFoamCell* Daug); { fDaught0 = Daug;}. void SetDau1(TMVA::PDEFoamCell* Daug); { fDaught1 = Daug;}. void SetPare(TMVA::PDEFoamCell* Pare); { fParent = Pare;}. void SetSerial(Int_t Serial); { fSerial=Serial;}. Int_t GetSerial() const; { return fSerial;}. void SetElement(TObject* fobj); getter and setter for user variable. { fElement = fobj; }. TObject* GetElement() const. { return fElement; }. » Author: S. Jadach, Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__PDEFoamCell.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamCell.html
https://root.cern/root/html604/TMVA__PDEFoamCell.html:2691,Security,Hash,Hash,2691,"*TObject::FindObject(const TObject* obj) const; Int_tGetBest() const; TMVA::PDEFoamCell*GetDau0() const; TMVA::PDEFoamCell*GetDau1() const; UInt_tGetDepth(); virtual Option_t*TObject::GetDrawOption() const; Double_tGetDriv() const; static Long_tTObject::GetDtorOnly(); TObject*GetElement() const; voidGetHcub(TMVA::PDEFoamVect&, TMVA::PDEFoamVect&) const; voidGetHSize(TMVA::PDEFoamVect&) const; virtual const char*TObject::GetIconName() const; Double_tGetIntg() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*GetPare() const; Int_tGetSerial() const; Int_tGetStat() const; virtual const char*TObject::GetTitle() const; UInt_tGetTreeDepth(UInt_t depth = 0); virtual UInt_tTObject::GetUniqueID() const; Double_tGetVolume() const; Double_tGetXdiv() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html604/TMVA__PDEFoamCell.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamCell.html
https://root.cern/root/html604/TMVA__PDEFoamCell.html:5242,Testability,Test,TestBit,5242,"operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamCell&operator=(const TMVA::PDEFoamCell&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamCellPDEFoamCell(); TMVA::PDEFoamCellPDEFoamCell(Int_t); TMVA::PDEFoamCellPDEFoamCell(const TMVA::PDEFoamCell&); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetBest(Int_t Best); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDau0(TMVA::PDEFoamCell* Daug); voidSetDau1(TMVA::PDEFoamCell* Daug); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; voidSetDriv(Double_t Driv); static voidTObject::SetDtorOnly(void* obj); voidSetElement(TObject* fobj); voidSetIntg(Double_t Intg); static voidTObject::SetObjectStat(Bool_t stat); voidSetPare(TMVA::PDEFoamCell* Pare); voidSetSerial(Int_t Serial); voidSetStat(Int_t Stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetXdiv(Double_t Xdiv); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamCell.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamCell.html
https://root.cern/root/html604/TMVA__PDEFoamCell.html:5281,Testability,Test,TestBits,5281,"operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamCell&operator=(const TMVA::PDEFoamCell&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamCellPDEFoamCell(); TMVA::PDEFoamCellPDEFoamCell(Int_t); TMVA::PDEFoamCellPDEFoamCell(const TMVA::PDEFoamCell&); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetBest(Int_t Best); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDau0(TMVA::PDEFoamCell* Daug); voidSetDau1(TMVA::PDEFoamCell* Daug); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; voidSetDriv(Double_t Driv); static voidTObject::SetDtorOnly(void* obj); voidSetElement(TObject* fobj); voidSetIntg(Double_t Intg); static voidTObject::SetObjectStat(Bool_t stat); voidSetPare(TMVA::PDEFoamCell* Pare); voidSetSerial(Int_t Serial); voidSetStat(Int_t Stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetXdiv(Double_t Xdiv); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamCell.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamCell.html
https://root.cern/root/html604/TMVA__PDEFoamCell.html:633,Usability,Clear,Clear,633," virtual~PDEFoamCell(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCalcVolume(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFill(Int_t, TMVA::PDEFoamCell*, TMVA::PDEFoamCell*, TMVA::PDEFoamCell*); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetBest() const; TMVA::PDEFoamCell*GetDau0() const; TMVA::PDEFoamCell*GetDau1() const; UInt_tGetDepth(); virtual Option_t*TObject::GetDrawOption() const; Double_tGetDriv() const; static Long_tTObject::GetDtorOnly(); TObject*GetElement() const; voidGetHcub",MatchSource.WIKI,root/html604/TMVA__PDEFoamCell.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamCell.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:548,Availability,error,error,548,". TMVA::PDEFoamDecisionTree. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::PDEFoamDecisionTree. class TMVA::PDEFoamDecisionTree: public TMVA::PDEFoamDiscriminant. PDEFoamDecisionTree. This PDEFoam variant acts like a decision tree and stores in every; cell the discriminant. D = #events with given class / total number of events. as well as the statistical error on the discriminant. It therefore; acts as a discriminant estimator. The decision tree-like behaviour; is achieved by overriding PDEFoamDiscriminant::Explore() to use a; decision tree-like cell splitting algorithm (given a separation; type). This PDEFoam variant should be booked together with the; PDEFoamDecisionTreeDensity density estimator, which returns the; events in a cell without sampling. Function Members (Methods); public:. virtual~PDEFoamDecisionTree(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::PDEFoam::AddVariableName(const char* s); voidTMVA::PDEFoam::AddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; vir",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:2129,Availability,Error,Error,2129,"MVA::PDEFoam::AddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidTMVA::PDEFoamDiscriminant::FillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidTMVA::PDEFoamDiscriminant::Finalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>TMVA::PDEFoam::GetCellValue(const map<Int_t,Float_t>& xvec, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const TMVA::PDEFoamCell* cell, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamK",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:2258,Availability,error,error,2258,"TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidTMVA::PDEFoamDiscriminant::FillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidTMVA::PDEFoamDiscriminant::Finalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>TMVA::PDEFoam::GetCellValue(const map<Int_t,Float_t>& xvec, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const TMVA::PDEFoamCell* cell, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamN",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:2342,Availability,error,error,2342,"st char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidTMVA::PDEFoamDiscriminant::FillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidTMVA::PDEFoamDiscriminant::Finalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>TMVA::PDEFoam::GetCellValue(const map<Int_t,Float_t>& xvec, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const TMVA::PDEFoamCell* cell, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::G",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:11644,Availability,Mask,Mask,11644,"t::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; UInt_tTMVA::PDEFoamDiscriminant::fClasssignal class; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 m",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:10960,Deployability,integrat,integration,10960,"itsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; UInt_tTMVA::PDEFoamDiscriminant::fClasssignal class; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number o",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:10960,Integrability,integrat,integration,10960,"itsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; UInt_tTMVA::PDEFoamDiscriminant::fClasssignal class; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number o",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:11582,Integrability,message,message,11582,"t::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; UInt_tTMVA::PDEFoamDiscriminant::fClasssignal class; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 m",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:13975,Integrability,rout,routine,13975,"bers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. private:. TMVA::SeparationBase*fSepTypeseparation type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDecisionTree(); Default constructor for streamer, user should not use it. PDEFoamDecisionTree(const TString& , TMVA::SeparationBase* sepType, UInt_t cls); Parameters:. - name - name of the foam. - sepType - separation type used for the cell splitting (will be; deleted in the destructor). - cls - class to consider as signal when calcualting the purity. PDEFoamDecisionTree(const TMVA::PDEFoamDecisionTree& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). ~PDEFoamDecisionTree(); Destructor; deletes fSepType. void Explore(TMVA::PDEFoamCell* Cell); Internal subprogram used by Create. It explores newly defined; cell with according to the decision tree logic. The separation; set via the 'sepType' option in the constructor. The optimal division point for eventual future cell division is; determined/recorded. Note that links to parents and initial; volume = 1/2 parent has to be already defined prior to calling; this routine. Note, that according to the decision tree logic, a cell is only; split, if the number of (unweighted) events in each dautghter; cell is greater than fNmin. » Author: Alexander Voigt » Copyright (c) 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:4245,Modifiability,Inherit,InheritsFrom,4245,"::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::GetNInActiveCells() const; UInt_tTMVA::PDEFoam::GetNmin(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*TMVA::PDEFoam::GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tTMVA::PDEFoam::GetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*TMVA::PDEFoam::GetVariableName(Int_t idx); Double_tTMVA::PDEFoam::GetXmax(Int_t idim) const; Double_tTMVA::PDEFoam::GetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::PDEFoam::Initialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoam::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); ",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:4311,Modifiability,Inherit,InheritsFrom,4311,"onst; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::GetNInActiveCells() const; UInt_tTMVA::PDEFoam::GetNmin(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*TMVA::PDEFoam::GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tTMVA::PDEFoam::GetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*TMVA::PDEFoam::GetVariableName(Int_t idx); Double_tTMVA::PDEFoam::GetXmax(Int_t idim) const; Double_tTMVA::PDEFoam::GetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::PDEFoam::Initialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoam::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator ne",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:11928,Modifiability,variab,variables,11928,"ITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] m",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:12641,Modifiability,variab,variable,12641,"xDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. private:. TMVA::SeparationBase*fSepTypeseparation type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDecisionTree(); Default constructor for streamer, user should not use it. PDEFoamDecisionTree(const TString& , TMVA::SeparationBase* sepType, UInt_t cls); Parameters:. - name - name of the foam. - sepType - separation type used for the cell splitting (will be; deleted in the destructor). - cls - class to consider as signal when calcualting the purity. PDEFoamDecisionTree(const TMVA::PDEFoamDecisionTree& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). ~PDEFoamDecisionTree(); Destructor; deletes fSepType. void Explore(TMVA::PDEFoamCell* Cell); Internal subprogram used by Create. It explores newly defined; cell with according to th",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:12812,Modifiability,variab,variable,12812,"xDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. private:. TMVA::SeparationBase*fSepTypeseparation type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDecisionTree(); Default constructor for streamer, user should not use it. PDEFoamDecisionTree(const TString& , TMVA::SeparationBase* sepType, UInt_t cls); Parameters:. - name - name of the foam. - sepType - separation type used for the cell splitting (will be; deleted in the destructor). - cls - class to consider as signal when calcualting the purity. PDEFoamDecisionTree(const TMVA::PDEFoamDecisionTree& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). ~PDEFoamDecisionTree(); Destructor; deletes fSepType. void Explore(TMVA::PDEFoamCell* Cell); Internal subprogram used by Create. It explores newly defined; cell with according to th",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:12880,Modifiability,variab,variable,12880,"xDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. private:. TMVA::SeparationBase*fSepTypeseparation type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDecisionTree(); Default constructor for streamer, user should not use it. PDEFoamDecisionTree(const TString& , TMVA::SeparationBase* sepType, UInt_t cls); Parameters:. - name - name of the foam. - sepType - separation type used for the cell splitting (will be; deleted in the destructor). - cls - class to consider as signal when calcualting the purity. PDEFoamDecisionTree(const TMVA::PDEFoamDecisionTree& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). ~PDEFoamDecisionTree(); Destructor; deletes fSepType. void Explore(TMVA::PDEFoamCell* Cell); Internal subprogram used by Create. It explores newly defined; cell with according to th",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:12970,Modifiability,Inherit,Inheritance,12970,"s, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. private:. TMVA::SeparationBase*fSepTypeseparation type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDecisionTree(); Default constructor for streamer, user should not use it. PDEFoamDecisionTree(const TString& , TMVA::SeparationBase* sepType, UInt_t cls); Parameters:. - name - name of the foam. - sepType - separation type used for the cell splitting (will be; deleted in the destructor). - cls - class to consider as signal when calcualting the purity. PDEFoamDecisionTree(const TMVA::PDEFoamDecisionTree& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). ~PDEFoamDecisionTree(); Destructor; deletes fSepType. void Explore(TMVA::PDEFoamCell* Cell); Internal subprogram used by Create. It explores newly defined; cell with according to the decision tree logic. The separation; set via the 'sepType' option in the constructor. The optimal division point for eventual future cell division is; determined/recorded. Note that links to parents and initial; volume = 1/2 parent has to be already defined prior to calling; this routine. Note, that a",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:12983,Modifiability,Inherit,Inherited,12983,"s, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. private:. TMVA::SeparationBase*fSepTypeseparation type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDecisionTree(); Default constructor for streamer, user should not use it. PDEFoamDecisionTree(const TString& , TMVA::SeparationBase* sepType, UInt_t cls); Parameters:. - name - name of the foam. - sepType - separation type used for the cell splitting (will be; deleted in the destructor). - cls - class to consider as signal when calcualting the purity. PDEFoamDecisionTree(const TMVA::PDEFoamDecisionTree& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). ~PDEFoamDecisionTree(); Destructor; deletes fSepType. void Explore(TMVA::PDEFoamCell* Cell); Internal subprogram used by Create. It explores newly defined; cell with according to the decision tree logic. The separation; set via the 'sepType' option in the constructor. The optimal division point for eventual future cell division is; determined/recorded. Note that links to parents and initial; volume = 1/2 parent has to be already defined prior to calling; this routine. Note, that a",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:4135,Security,Hash,Hash,4135,"Base*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::GetNInActiveCells() const; UInt_tTMVA::PDEFoam::GetNmin(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*TMVA::PDEFoam::GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tTMVA::PDEFoam::GetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*TMVA::PDEFoam::GetVariableName(Int_t idx); Double_tTMVA::PDEFoam::GetXmax(Int_t idim) const; Double_tTMVA::PDEFoam::GetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::PDEFoam::Initialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoam::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delet",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:4726,Testability,Log,Log,4726,":PDEFoamCell*TMVA::PDEFoam::GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tTMVA::PDEFoam::GetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*TMVA::PDEFoam::GetVariableName(Int_t idx); Double_tTMVA::PDEFoam::GetXmax(Int_t idim) const; Double_tTMVA::PDEFoam::GetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::PDEFoam::Initialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoam::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamDecisionTree&operator=(const TMVA::PDEFoamDecisionTree&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamTMVA::PDEFoam::PDEFoam(); TMVA::PDEFoamTMVA::PDEFoam::PDEFoam(const TString&); TMVA::PDEFoamDecisionTreePDEFoamDecisionTree(); TMVA::PDEFoamDecisionTreePDEFoamDecisionTree(const TString&, TMVA::SeparationBase* sepType, UInt_t cls); TMVA::PDEFoamDisc",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:7661,Testability,Test,TestBit,7661,"Elements(); voidTMVA::PDEFoam::RootPlot2dim(const TString& filename, TString opt, Bool_t createCanvas = kTRUE, Bool_t colors = kTRUE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoam::SetDensity(TMVA::PDEFoamDensityBase* dens); voidTMVA::PDEFoam::SetDim(Int_t kDim); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::PDEFoam::SetEvPerBin(Int_t EvPerBin); voidTMVA::PDEFoam::SetInhiDiv(Int_t, Int_t); voidTMVA::PDEFoam::SetMaxDepth(UInt_t maxdepth); voidTMVA::PDEFoam::SetnBin(Int_t nBin); voidTMVA::PDEFoam::SetnCells(Long_t nCells); voidTMVA::PDEFoam::SetNmin(UInt_t val); voidTMVA::PDEFoam::SetnSampl(Long_t nSampl); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::PDEFoam::SetXmax(Int_t idim, Double_t wmax); voidTMVA::PDEFoam::SetXmin(Int_t idim, Double_t wmin); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); vector<Float_t>TMVA::PDEFoam::VarTransform(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransform(Int_t idim, Float_t x) const; vector<Float_t>TMVA::PDEFoam::VarTransformInvers(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransformInvers(Int_t idim, Float_t x) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:7700,Testability,Test,TestBits,7700,"Elements(); voidTMVA::PDEFoam::RootPlot2dim(const TString& filename, TString opt, Bool_t createCanvas = kTRUE, Bool_t colors = kTRUE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoam::SetDensity(TMVA::PDEFoamDensityBase* dens); voidTMVA::PDEFoam::SetDim(Int_t kDim); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::PDEFoam::SetEvPerBin(Int_t EvPerBin); voidTMVA::PDEFoam::SetInhiDiv(Int_t, Int_t); voidTMVA::PDEFoam::SetMaxDepth(UInt_t maxdepth); voidTMVA::PDEFoam::SetnBin(Int_t nBin); voidTMVA::PDEFoam::SetnCells(Long_t nCells); voidTMVA::PDEFoam::SetNmin(UInt_t val); voidTMVA::PDEFoam::SetnSampl(Long_t nSampl); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::PDEFoam::SetXmax(Int_t idim, Double_t wmax); voidTMVA::PDEFoam::SetXmin(Int_t idim, Double_t wmin); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); vector<Float_t>TMVA::PDEFoam::VarTransform(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransform(Int_t idim, Float_t x) const; vector<Float_t>TMVA::PDEFoam::VarTransformInvers(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransformInvers(Int_t idim, Float_t x) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:10912,Testability,log,logic,10912,"itsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; UInt_tTMVA::PDEFoamDiscriminant::fClasssignal class; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number o",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:11590,Testability,log,logger,11590,"t::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; UInt_tTMVA::PDEFoamDiscriminant::fClasssignal class; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 m",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:13708,Testability,log,logic,13708,"bers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. private:. TMVA::SeparationBase*fSepTypeseparation type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDecisionTree(); Default constructor for streamer, user should not use it. PDEFoamDecisionTree(const TString& , TMVA::SeparationBase* sepType, UInt_t cls); Parameters:. - name - name of the foam. - sepType - separation type used for the cell splitting (will be; deleted in the destructor). - cls - class to consider as signal when calcualting the purity. PDEFoamDecisionTree(const TMVA::PDEFoamDecisionTree& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). ~PDEFoamDecisionTree(); Destructor; deletes fSepType. void Explore(TMVA::PDEFoamCell* Cell); Internal subprogram used by Create. It explores newly defined; cell with according to the decision tree logic. The separation; set via the 'sepType' option in the constructor. The optimal division point for eventual future cell division is; determined/recorded. Note that links to parents and initial; volume = 1/2 parent has to be already defined prior to calling; this routine. Note, that according to the decision tree logic, a cell is only; split, if the number of (unweighted) events in each dautghter; cell is greater than fNmin. » Author: Alexander Voigt » Copyright (c) 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:14026,Testability,log,logic,14026,"bers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. private:. TMVA::SeparationBase*fSepTypeseparation type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDecisionTree(); Default constructor for streamer, user should not use it. PDEFoamDecisionTree(const TString& , TMVA::SeparationBase* sepType, UInt_t cls); Parameters:. - name - name of the foam. - sepType - separation type used for the cell splitting (will be; deleted in the destructor). - cls - class to consider as signal when calcualting the purity. PDEFoamDecisionTree(const TMVA::PDEFoamDecisionTree& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). ~PDEFoamDecisionTree(); Destructor; deletes fSepType. void Explore(TMVA::PDEFoamCell* Cell); Internal subprogram used by Create. It explores newly defined; cell with according to the decision tree logic. The separation; set via the 'sepType' option in the constructor. The optimal division point for eventual future cell division is; determined/recorded. Note that links to parents and initial; volume = 1/2 parent has to be already defined prior to calling; this routine. Note, that according to the decision tree logic, a cell is only; split, if the number of (unweighted) events in each dautghter; cell is greater than fNmin. » Author: Alexander Voigt » Copyright (c) 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html:1402,Usability,Clear,Clear,1402," virtual~PDEFoamDecisionTree(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::PDEFoam::AddVariableName(const char* s); voidTMVA::PDEFoam::AddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; vir",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTree.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html:1517,Availability,Error,Error,1517," virtual~PDEFoamDecisionTreeDensity(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(vector<Double_t>& Xarg, Double_t& event_density); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual voidFillHistograms(TMVA::Volume&, ",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTreeDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html:1646,Availability,error,error,1646,"Density(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(vector<Double_t>& Xarg, Double_t& event_density); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual voidFillHistograms(TMVA::Volume&, vector<TH1D*>&, vector<TH1D*>&, vector<TH1D*>&, vector<TH1D*>&); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&TMVA::PDEFoamDensityBase::GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTreeDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html:1730,Availability,error,error,1730,"t::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(vector<Double_t>& Xarg, Double_t& event_density); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual voidFillHistograms(TMVA::Volume&, vector<TH1D*>&, vector<TH1D*>&, vector<TH1D*>&, vector<TH1D*>&); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&TMVA::PDEFoamDensityBase::GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual UL",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTreeDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html:7038,Integrability,message,message,7038," const; Double_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; UInt_tfClasssignal class; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDecisionTreeDensity(); {}. PDEFoamDecisionTreeDensity(vector<Double_t> box, UInt_t cls); User construcor:. Parameters:. - box - size of the range-searching box (n-dimensional; std::vector). - cls - event class used for the range-searching. PDEFoamDecisionTreeDensity(const TMVA::PDEFoamDecisionTreeDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is not used in the decision tree like PDEFoam,; instead FillHist() is used. void FillHistograms(TMVA::Volume& , vector<TH1D*>& , vector<TH1D*>& , vector<TH1D*>& , vector<TH1D*>& ); Fill the given histograms with signal and background events,; which are found in the volume. Parameters:. - volume - volume box to search in. - hsig, hbkg, hsig_unw, hbkg_unw - histograms with weighted and; unweighte",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTreeDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html:2857,Modifiability,Inherit,InheritsFrom,2857,"char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual voidFillHistograms(TMVA::Volume&, vector<TH1D*>&, vector<TH1D*>&, vector<TH1D*>&, vector<TH1D*>&); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&TMVA::PDEFoamDensityBase::GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTreeDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html:2923,Modifiability,Inherit,InheritsFrom,2923,"hTree(const TMVA::Event* ev); virtual voidFillHistograms(TMVA::Volume&, vector<TH1D*>&, vector<TH1D*>&, vector<TH1D*>&, vector<TH1D*>&); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&TMVA::PDEFoamDensityBase::GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamDecisionTreeDensity&operator=(const TM",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTreeDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html:7068,Modifiability,Inherit,Inheritance,7068,"e(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; UInt_tfClasssignal class; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDecisionTreeDensity(); {}. PDEFoamDecisionTreeDensity(vector<Double_t> box, UInt_t cls); User construcor:. Parameters:. - box - size of the range-searching box (n-dimensional; std::vector). - cls - event class used for the range-searching. PDEFoamDecisionTreeDensity(const TMVA::PDEFoamDecisionTreeDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is not used in the decision tree like PDEFoam,; instead FillHist() is used. void FillHistograms(TMVA::Volume& , vector<TH1D*>& , vector<TH1D*>& , vector<TH1D*>& , vector<TH1D*>& ); Fill the given histograms with signal and background events,; which are found in the volume. Parameters:. - volume - volume box to search in. - hsig, hbkg, hsig_unw, hbkg_unw - histograms with weighted and; unweighted signal and background events. virtual ~PDEFoamDecisionTreeDensity(); {}. » Author: Alexander Voigt » Copyright (c) 2010: *; » Last cha",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTreeDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html:7081,Modifiability,Inherit,Inherited,7081,"e(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; UInt_tfClasssignal class; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDecisionTreeDensity(); {}. PDEFoamDecisionTreeDensity(vector<Double_t> box, UInt_t cls); User construcor:. Parameters:. - box - size of the range-searching box (n-dimensional; std::vector). - cls - event class used for the range-searching. PDEFoamDecisionTreeDensity(const TMVA::PDEFoamDecisionTreeDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is not used in the decision tree like PDEFoam,; instead FillHist() is used. void FillHistograms(TMVA::Volume& , vector<TH1D*>& , vector<TH1D*>& , vector<TH1D*>& , vector<TH1D*>& ); Fill the given histograms with signal and background events,; which are found in the volume. Parameters:. - volume - volume box to search in. - hsig, hbkg, hsig_unw, hbkg_unw - histograms with weighted and; unweighted signal and background events. virtual ~PDEFoamDecisionTreeDensity(); {}. » Author: Alexander Voigt » Copyright (c) 2010: *; » Last cha",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTreeDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html:2747,Security,Hash,Hash,2747," voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual voidFillHistograms(TMVA::Volume&, vector<TH1D*>&, vector<TH1D*>&, vector<TH1D*>&, vector<TH1D*>&); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&TMVA::PDEFoamDensityBase::GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTreeDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html:5493,Testability,Test,TestBit,5493,"[](size_t sz, void* vp); TMVA::PDEFoamDecisionTreeDensity&operator=(const TMVA::PDEFoamDecisionTreeDensity&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamDecisionTreeDensityPDEFoamDecisionTreeDensity(); TMVA::PDEFoamDecisionTreeDensityPDEFoamDecisionTreeDensity(const TMVA::PDEFoamDecisionTreeDensity&); TMVA::PDEFoamDecisionTreeDensityPDEFoamDecisionTreeDensity(vector<Double_t> box, UInt_t cls); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(vector<Double_t> box); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(const TMVA::PDEFoamDensityBase&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoamDensityBase::SetBox(vector<Double_t> box); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTreeDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html:5532,Testability,Test,TestBits,5532,"[](size_t sz, void* vp); TMVA::PDEFoamDecisionTreeDensity&operator=(const TMVA::PDEFoamDecisionTreeDensity&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamDecisionTreeDensityPDEFoamDecisionTreeDensity(); TMVA::PDEFoamDecisionTreeDensityPDEFoamDecisionTreeDensity(const TMVA::PDEFoamDecisionTreeDensity&); TMVA::PDEFoamDecisionTreeDensityPDEFoamDecisionTreeDensity(vector<Double_t> box, UInt_t cls); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(vector<Double_t> box); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(const TMVA::PDEFoamDensityBase&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoamDensityBase::SetBox(vector<Double_t> box); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTreeDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html:6058,Testability,Log,Log,6058,"l_t set); voidTMVA::PDEFoamDensityBase::SetBox(vector<Double_t> box); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; UInt_tfClasssignal cl",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTreeDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html:7046,Testability,log,logger,7046," const; Double_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; UInt_tfClasssignal class; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDecisionTreeDensity(); {}. PDEFoamDecisionTreeDensity(vector<Double_t> box, UInt_t cls); User construcor:. Parameters:. - box - size of the range-searching box (n-dimensional; std::vector). - cls - event class used for the range-searching. PDEFoamDecisionTreeDensity(const TMVA::PDEFoamDecisionTreeDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is not used in the decision tree like PDEFoam,; instead FillHist() is used. void FillHistograms(TMVA::Volume& , vector<TH1D*>& , vector<TH1D*>& , vector<TH1D*>& , vector<TH1D*>& ); Fill the given histograms with signal and background events,; which are found in the volume. Parameters:. - volume - volume box to search in. - hsig, hbkg, hsig_unw, hbkg_unw - histograms with weighted and; unweighte",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTreeDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html:903,Usability,Clear,Clear,903," virtual~PDEFoamDecisionTreeDensity(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(vector<Double_t>& Xarg, Double_t& event_density); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual voidFillHistograms(TMVA::Volume&, ",MatchSource.WIKI,root/html604/TMVA__PDEFoamDecisionTreeDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDecisionTreeDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html:1260,Availability,avail,available,1260,"MVA; » TMVA::PDEFoamDensityBase. class TMVA::PDEFoamDensityBase: public TObject. PDEFoamDensityBase. This is an abstract class, which provides an interface for a; PDEFoam density estimator. Derived classes have to implement the; Density(...) function, which returns the density of a certain; quantity at a given phase-space point during the foam build-up. Variants of PDEFoamDensityBase are:. - PDEFoamEventDensity; - PDEFoamDiscriminantDensity; - PDEFoamTargetDensity; - PDEFoamDecisionTreeDensity. Usage:. The user has to instantiate a child class of PDEFoamDensityBase and; set the pointer to the owner, which is a PDEFoam object:. PDEFoamDensityBase *dens = new MyDensity();; pdefoam->SetDensity(dens);. Afterwards the binary search tree should be filled with TMVA; events, by either using. pdefoam->FillBinarySearchTree(event);. or. dens->FillBinarySearchTree(event);. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~PDEFoamDensityBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(vector<Double_t>& Xarg, Double_t& event_density); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject",MatchSource.WIKI,root/html604/TMVA__PDEFoamDensityBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html
https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html:2181,Availability,Error,Error,2181," virtual~PDEFoamDensityBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(vector<Double_t>& Xarg, Double_t& event_density); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """,MatchSource.WIKI,root/html604/TMVA__PDEFoamDensityBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html
https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html:2310,Availability,error,error,2310,"ityBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(vector<Double_t>& Xarg, Double_t& event_density); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, c",MatchSource.WIKI,root/html604/TMVA__PDEFoamDensityBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html
https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html:2394,Availability,error,error,2394,"t::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(vector<Double_t>& Xarg, Double_t& event_density); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname)",MatchSource.WIKI,root/html604/TMVA__PDEFoamDensityBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html
https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html:398,Integrability,interface,interface,398,". TMVA::PDEFoamDensityBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::PDEFoamDensityBase. class TMVA::PDEFoamDensityBase: public TObject. PDEFoamDensityBase. This is an abstract class, which provides an interface for a; PDEFoam density estimator. Derived classes have to implement the; Density(...) function, which returns the density of a certain; quantity at a given phase-space point during the foam build-up. Variants of PDEFoamDensityBase are:. - PDEFoamEventDensity; - PDEFoamDiscriminantDensity; - PDEFoamTargetDensity; - PDEFoamDecisionTreeDensity. Usage:. The user has to instantiate a child class of PDEFoamDensityBase and; set the pointer to the owner, which is a PDEFoam object:. PDEFoamDensityBase *dens = new MyDensity();; pdefoam->SetDensity(dens);. Afterwards the binary search tree should be filled with TMVA; events, by either using. pdefoam->FillBinarySearchTree(event);. or. dens->FillBinarySearchTree(event);. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~PDEFoamDensityBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(vector<Double_t>& Xarg, Double_t& event_density); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """,MatchSource.WIKI,root/html604/TMVA__PDEFoamDensityBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html
https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html:7036,Integrability,message,message,7036," virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_tGetBoxVolume(); TMVA::MsgLogger&Log() const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*fBstBinary tree to find events within a volume; TMVA::MsgLogger*fLogger! message logger. private:. vector<Double_t>fBoxrange-searching box; Bool_tfBoxHasChangedrange searching box has changed; Double_tfBoxVolumevolume of range searching box. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDensityBase(); {}. PDEFoamDensityBase(vector<Double_t> box); User constructor. - box - range-searching box, where box.size() == dimension of; the PDEFoam == periode of the binary search tree. ~PDEFoamDensityBase(); destructor. PDEFoamDensityBase(const TMVA::PDEFoamDensityBase& ); Copy constructor. Creates a deep copy, using the copy constructor of; TMVA::BinarySearchTree. void FillBinarySearchTree(const TMVA::Event* ev); This method inserts the given event 'ev' it into the binary; search tree. Double_t GetBoxVolume(); Returns the volume of range searching box fBox. If the range searching box 'fBox' has changed (fBoxHasChanged is; kTRUE), recalculate the box volume and set fBoxHasChan",MatchSource.WIKI,root/html604/TMVA__PDEFoamDensityBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html
https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html:3362,Modifiability,Inherit,InheritsFrom,3362,"TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TMVA__PDEFoamDensityBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html
https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html:3428,Modifiability,Inherit,InheritsFrom,3428,"Event(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamDensityBase&operator=(const TMVA::PDEF",MatchSource.WIKI,root/html604/TMVA__PDEFoamDensityBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html
https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html:7219,Modifiability,Inherit,Inheritance,7219,"tatic TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*fBstBinary tree to find events within a volume; TMVA::MsgLogger*fLogger! message logger. private:. vector<Double_t>fBoxrange-searching box; Bool_tfBoxHasChangedrange searching box has changed; Double_tfBoxVolumevolume of range searching box. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDensityBase(); {}. PDEFoamDensityBase(vector<Double_t> box); User constructor. - box - range-searching box, where box.size() == dimension of; the PDEFoam == periode of the binary search tree. ~PDEFoamDensityBase(); destructor. PDEFoamDensityBase(const TMVA::PDEFoamDensityBase& ); Copy constructor. Creates a deep copy, using the copy constructor of; TMVA::BinarySearchTree. void FillBinarySearchTree(const TMVA::Event* ev); This method inserts the given event 'ev' it into the binary; search tree. Double_t GetBoxVolume(); Returns the volume of range searching box fBox. If the range searching box 'fBox' has changed (fBoxHasChanged is; kTRUE), recalculate the box volume and set fBoxHasChanged to; kFALSE. void SetBox(vector<Double_t> box); set the range-searching box. { fBox = box; fBoxHasChanged = kTRUE; }. const std::vector<Double_t>& GetBox() const; get the range-searching box. { return fBox; }. Double_t Density(vector<Double_t>& Xa",MatchSource.WIKI,root/html604/TMVA__PDEFoamDensityBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html
https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html:7232,Modifiability,Inherit,Inherited,7232,"tatic TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*fBstBinary tree to find events within a volume; TMVA::MsgLogger*fLogger! message logger. private:. vector<Double_t>fBoxrange-searching box; Bool_tfBoxHasChangedrange searching box has changed; Double_tfBoxVolumevolume of range searching box. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDensityBase(); {}. PDEFoamDensityBase(vector<Double_t> box); User constructor. - box - range-searching box, where box.size() == dimension of; the PDEFoam == periode of the binary search tree. ~PDEFoamDensityBase(); destructor. PDEFoamDensityBase(const TMVA::PDEFoamDensityBase& ); Copy constructor. Creates a deep copy, using the copy constructor of; TMVA::BinarySearchTree. void FillBinarySearchTree(const TMVA::Event* ev); This method inserts the given event 'ev' it into the binary; search tree. Double_t GetBoxVolume(); Returns the volume of range searching box fBox. If the range searching box 'fBox' has changed (fBoxHasChanged is; kTRUE), recalculate the box volume and set fBoxHasChanged to; kFALSE. void SetBox(vector<Double_t> box); set the range-searching box. { fBox = box; fBoxHasChanged = kTRUE; }. const std::vector<Double_t>& GetBox() const; get the range-searching box. { return fBox; }. Double_t Density(vector<Double_t>& Xa",MatchSource.WIKI,root/html604/TMVA__PDEFoamDensityBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html
https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html:3252,Security,Hash,Hash,3252,":Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html604/TMVA__PDEFoamDensityBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html
https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html:5621,Testability,Test,TestBit,5621,"nst char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamDensityBase&operator=(const TMVA::PDEFoamDensityBase&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamDensityBasePDEFoamDensityBase(); TMVA::PDEFoamDensityBasePDEFoamDensityBase(vector<Double_t> box); TMVA::PDEFoamDensityBasePDEFoamDensityBase(const TMVA::PDEFoamDensityBase&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetBox(vector<Double_t> box); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamDensityBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html
https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html:5660,Testability,Test,TestBits,5660,"nst char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamDensityBase&operator=(const TMVA::PDEFoamDensityBase&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamDensityBasePDEFoamDensityBase(); TMVA::PDEFoamDensityBasePDEFoamDensityBase(vector<Double_t> box); TMVA::PDEFoamDensityBasePDEFoamDensityBase(const TMVA::PDEFoamDensityBase&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetBox(vector<Double_t> box); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamDensityBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html
https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html:6134,Testability,Log,Log,6134,":SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetBox(vector<Double_t> box); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_tGetBoxVolume(); TMVA::MsgLogger&Log() const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*fBstBinary tree to find events within a volume; TMVA::MsgLogger*fLogger! message logger. private:. vector<Double_t>fBoxra",MatchSource.WIKI,root/html604/TMVA__PDEFoamDensityBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html
https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html:7044,Testability,log,logger,7044," virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_tGetBoxVolume(); TMVA::MsgLogger&Log() const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*fBstBinary tree to find events within a volume; TMVA::MsgLogger*fLogger! message logger. private:. vector<Double_t>fBoxrange-searching box; Bool_tfBoxHasChangedrange searching box has changed; Double_tfBoxVolumevolume of range searching box. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDensityBase(); {}. PDEFoamDensityBase(vector<Double_t> box); User constructor. - box - range-searching box, where box.size() == dimension of; the PDEFoam == periode of the binary search tree. ~PDEFoamDensityBase(); destructor. PDEFoamDensityBase(const TMVA::PDEFoamDensityBase& ); Copy constructor. Creates a deep copy, using the copy constructor of; TMVA::BinarySearchTree. void FillBinarySearchTree(const TMVA::Event* ev); This method inserts the given event 'ev' it into the binary; search tree. Double_t GetBoxVolume(); Returns the volume of range searching box fBox. If the range searching box 'fBox' has changed (fBoxHasChanged is; kTRUE), recalculate the box volume and set fBoxHasChan",MatchSource.WIKI,root/html604/TMVA__PDEFoamDensityBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html
https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html:1567,Usability,Clear,Clear,1567," virtual~PDEFoamDensityBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(vector<Double_t>& Xarg, Double_t& event_density); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """,MatchSource.WIKI,root/html604/TMVA__PDEFoamDensityBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDensityBase.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:505,Availability,error,error,505,". TMVA::PDEFoamDiscriminant. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::PDEFoamDiscriminant. class TMVA::PDEFoamDiscriminant: public TMVA::PDEFoam. PDEFoamDiscriminant. This PDEFoam variant stores in every cell the discriminant. D = #events with given class / total number of events. as well as the statistical error on the discriminant. It therefore; acts as a discriminant estimator. It should be booked together; with the PDEFoamDiscriminantDensity density estimator, which; returns the discriminant density at a given phase space point; during the foam build-up. Function Members (Methods); public:. virtual~PDEFoamDiscriminant(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::PDEFoam::AddVariableName(const char* s); voidTMVA::PDEFoam::AddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voi",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:1937,Availability,Error,Error,1937,"MVA::PDEFoam::AddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidFillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidFinalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>TMVA::PDEFoam::GetCellValue(const map<Int_t,Float_t>& xvec, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const TMVA::PDEFoamCell* cell, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption()",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:2066,Availability,error,error,2066,"TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidFillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidFinalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>TMVA::PDEFoam::GetCellValue(const map<Int_t,Float_t>& xvec, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const TMVA::PDEFoamCell* cell, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject::GetIconName()",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:2150,Availability,error,error,2150,"st char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidFillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidFinalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>TMVA::PDEFoam::GetCellValue(const map<Int_t,Float_t>& xvec, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const TMVA::PDEFoamCell* cell, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCel",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:11045,Availability,Mask,Mask,11045,"::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; UInt_tfClasssignal class; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 m",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:12915,Availability,error,error,12915,"ments; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDiscriminant(); Default constructor for streamer, user should not use it. PDEFoamDiscriminant(const TString& , UInt_t ); {}. PDEFoamDiscriminant(const TMVA::PDEFoamDiscriminant& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event into the discriminant PDEFoam. The; event weight 'wt' is filled into cell element 0 if the event is; of class fClass, and filled into cell element 1 otherwise. void Finalize(); Calc discriminator and its error for every cell and save it to; the cell. TH2D* Project2(Int_t , Int_t , TMVA::ECellValue , TMVA::PDEFoamKernelBase* , UInt_t ); Project foam variable idim1 and variable idim2 to histogram.; The projection algorithm is modified such that the z axis range; of the returned histogram is [0, 1], as necessary for the; interpretation as a discriminator. This is done by weighting; the cell values (in case of cell_value = kValue) by the cell; volume in all dimensions, excluding 'idim1' and 'idim2'. Parameters:. - idim1, idim2 - dimensions to project to. - cell_value - the cell value to draw. - kernel - a PDEFoam kernel (optional). If NULL is given, the; kernel is ignored and the pure cell values are; plotted. - nbin - number of bins in x and y direction of result histogram; (optional, default is 50). Returns:; a 2-dimensional histogram. virtual ~PDEFoamDiscriminant(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $I",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:10361,Deployability,integrat,integration,10361,"ect::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; UInt_tfClasssignal class; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables i",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:10361,Integrability,integrat,integration,10361,"ect::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; UInt_tfClasssignal class; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables i",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:10983,Integrability,message,message,10983,"::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; UInt_tfClasssignal class; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 m",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:3999,Modifiability,Inherit,InheritsFrom,3999,"::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::GetNInActiveCells() const; UInt_tTMVA::PDEFoam::GetNmin(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*TMVA::PDEFoam::GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tTMVA::PDEFoam::GetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*TMVA::PDEFoam::GetVariableName(Int_t idx); Double_tTMVA::PDEFoam::GetXmax(Int_t idim) const; Double_tTMVA::PDEFoam::GetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::PDEFoam::Initialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoam::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); ",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:4065,Modifiability,Inherit,InheritsFrom,4065,"onst; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::GetNInActiveCells() const; UInt_tTMVA::PDEFoam::GetNmin(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*TMVA::PDEFoam::GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tTMVA::PDEFoam::GetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*TMVA::PDEFoam::GetVariableName(Int_t idx); Double_tTMVA::PDEFoam::GetXmax(Int_t idim) const; Double_tTMVA::PDEFoam::GetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::PDEFoam::Initialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoam::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator ne",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:11329,Modifiability,variab,variables,11329,"ITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] m",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:12042,Modifiability,variab,variable,12042,"xDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDiscriminant(); Default constructor for streamer, user should not use it. PDEFoamDiscriminant(const TString& , UInt_t ); {}. PDEFoamDiscriminant(const TMVA::PDEFoamDiscriminant& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event into the discriminant PDEFoam. The; event weight 'wt' is filled into cell element 0 if the event is; of class fClass, and filled into cell element 1 otherwise. void Finalize(); Calc discriminator and its error for every cell and save it to; the cell. TH2D* Project2(Int_t , Int_t , TMVA::ECellValue , TMVA::PDEFoamKernelBase* , UInt_t ); Project foam variable idim1 and variable idi",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:12213,Modifiability,variab,variable,12213,"xDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDiscriminant(); Default constructor for streamer, user should not use it. PDEFoamDiscriminant(const TString& , UInt_t ); {}. PDEFoamDiscriminant(const TMVA::PDEFoamDiscriminant& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event into the discriminant PDEFoam. The; event weight 'wt' is filled into cell element 0 if the event is; of class fClass, and filled into cell element 1 otherwise. void Finalize(); Calc discriminator and its error for every cell and save it to; the cell. TH2D* Project2(Int_t , Int_t , TMVA::ECellValue , TMVA::PDEFoamKernelBase* , UInt_t ); Project foam variable idim1 and variable idi",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:12281,Modifiability,variab,variable,12281,"xDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDiscriminant(); Default constructor for streamer, user should not use it. PDEFoamDiscriminant(const TString& , UInt_t ); {}. PDEFoamDiscriminant(const TMVA::PDEFoamDiscriminant& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event into the discriminant PDEFoam. The; event weight 'wt' is filled into cell element 0 if the event is; of class fClass, and filled into cell element 1 otherwise. void Finalize(); Calc discriminator and its error for every cell and save it to; the cell. TH2D* Project2(Int_t , Int_t , TMVA::ECellValue , TMVA::PDEFoamKernelBase* , UInt_t ); Project foam variable idim1 and variable idi",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:12315,Modifiability,Inherit,Inheritance,12315,"n every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDiscriminant(); Default constructor for streamer, user should not use it. PDEFoamDiscriminant(const TString& , UInt_t ); {}. PDEFoamDiscriminant(const TMVA::PDEFoamDiscriminant& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event into the discriminant PDEFoam. The; event weight 'wt' is filled into cell element 0 if the event is; of class fClass, and filled into cell element 1 otherwise. void Finalize(); Calc discriminator and its error for every cell and save it to; the cell. TH2D* Project2(Int_t , Int_t , TMVA::ECellValue , TMVA::PDEFoamKernelBase* , UInt_t ); Project foam variable idim1 and variable idim2 to histogram.; The projection algorithm is modified such that the z axis range; of the returned histogram is [0, 1], as necessary for the; interpretation as a discriminator. This is done by weighting; the cell values (in case of cell_value = kVa",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:12328,Modifiability,Inherit,Inherited,12328,"n every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDiscriminant(); Default constructor for streamer, user should not use it. PDEFoamDiscriminant(const TString& , UInt_t ); {}. PDEFoamDiscriminant(const TMVA::PDEFoamDiscriminant& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event into the discriminant PDEFoam. The; event weight 'wt' is filled into cell element 0 if the event is; of class fClass, and filled into cell element 1 otherwise. void Finalize(); Calc discriminator and its error for every cell and save it to; the cell. TH2D* Project2(Int_t , Int_t , TMVA::ECellValue , TMVA::PDEFoamKernelBase* , UInt_t ); Project foam variable idim1 and variable idim2 to histogram.; The projection algorithm is modified such that the z axis range; of the returned histogram is [0, 1], as necessary for the; interpretation as a discriminator. This is done by weighting; the cell values (in case of cell_value = kVa",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:13062,Modifiability,variab,variable,13062,"of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDiscriminant(); Default constructor for streamer, user should not use it. PDEFoamDiscriminant(const TString& , UInt_t ); {}. PDEFoamDiscriminant(const TMVA::PDEFoamDiscriminant& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event into the discriminant PDEFoam. The; event weight 'wt' is filled into cell element 0 if the event is; of class fClass, and filled into cell element 1 otherwise. void Finalize(); Calc discriminator and its error for every cell and save it to; the cell. TH2D* Project2(Int_t , Int_t , TMVA::ECellValue , TMVA::PDEFoamKernelBase* , UInt_t ); Project foam variable idim1 and variable idim2 to histogram.; The projection algorithm is modified such that the z axis range; of the returned histogram is [0, 1], as necessary for the; interpretation as a discriminator. This is done by weighting; the cell values (in case of cell_value = kValue) by the cell; volume in all dimensions, excluding 'idim1' and 'idim2'. Parameters:. - idim1, idim2 - dimensions to project to. - cell_value - the cell value to draw. - kernel - a PDEFoam kernel (optional). If NULL is given, the; kernel is ignored and the pure cell values are; plotted. - nbin - number of bins in x and y direction of result histogram; (optional, default is 50). Returns:; a 2-dimensional histogram. virtual ~PDEFoamDiscriminant(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regardin",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:13081,Modifiability,variab,variable,13081,"of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDiscriminant(); Default constructor for streamer, user should not use it. PDEFoamDiscriminant(const TString& , UInt_t ); {}. PDEFoamDiscriminant(const TMVA::PDEFoamDiscriminant& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event into the discriminant PDEFoam. The; event weight 'wt' is filled into cell element 0 if the event is; of class fClass, and filled into cell element 1 otherwise. void Finalize(); Calc discriminator and its error for every cell and save it to; the cell. TH2D* Project2(Int_t , Int_t , TMVA::ECellValue , TMVA::PDEFoamKernelBase* , UInt_t ); Project foam variable idim1 and variable idim2 to histogram.; The projection algorithm is modified such that the z axis range; of the returned histogram is [0, 1], as necessary for the; interpretation as a discriminator. This is done by weighting; the cell values (in case of cell_value = kValue) by the cell; volume in all dimensions, excluding 'idim1' and 'idim2'. Parameters:. - idim1, idim2 - dimensions to project to. - cell_value - the cell value to draw. - kernel - a PDEFoam kernel (optional). If NULL is given, the; kernel is ignored and the pure cell values are; plotted. - nbin - number of bins in x and y direction of result histogram; (optional, default is 50). Returns:; a 2-dimensional histogram. virtual ~PDEFoamDiscriminant(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regardin",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:3889,Security,Hash,Hash,3889,"Base*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::GetNInActiveCells() const; UInt_tTMVA::PDEFoam::GetNmin(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*TMVA::PDEFoam::GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tTMVA::PDEFoam::GetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*TMVA::PDEFoam::GetVariableName(Int_t idx); Double_tTMVA::PDEFoam::GetXmax(Int_t idim) const; Double_tTMVA::PDEFoam::GetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::PDEFoam::Initialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoam::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delet",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:4480,Testability,Log,Log,4480,":PDEFoamCell*TMVA::PDEFoam::GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tTMVA::PDEFoam::GetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*TMVA::PDEFoam::GetVariableName(Int_t idx); Double_tTMVA::PDEFoam::GetXmax(Int_t idim) const; Double_tTMVA::PDEFoam::GetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::PDEFoam::Initialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoam::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamDiscriminant&operator=(const TMVA::PDEFoamDiscriminant&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamTMVA::PDEFoam::PDEFoam(); TMVA::PDEFoamTMVA::PDEFoam::PDEFoam(const TString&); TMVA::PDEFoamDiscriminantPDEFoamDiscriminant(); TMVA::PDEFoamDiscriminantPDEFoamDiscriminant(const TString&, UInt_t); virtual voidTObject::Pop(); virtual voidTObject::Pri",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:7181,Testability,Test,TestBit,7181,"Elements(); voidTMVA::PDEFoam::RootPlot2dim(const TString& filename, TString opt, Bool_t createCanvas = kTRUE, Bool_t colors = kTRUE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoam::SetDensity(TMVA::PDEFoamDensityBase* dens); voidTMVA::PDEFoam::SetDim(Int_t kDim); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::PDEFoam::SetEvPerBin(Int_t EvPerBin); voidTMVA::PDEFoam::SetInhiDiv(Int_t, Int_t); voidTMVA::PDEFoam::SetMaxDepth(UInt_t maxdepth); voidTMVA::PDEFoam::SetnBin(Int_t nBin); voidTMVA::PDEFoam::SetnCells(Long_t nCells); voidTMVA::PDEFoam::SetNmin(UInt_t val); voidTMVA::PDEFoam::SetnSampl(Long_t nSampl); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::PDEFoam::SetXmax(Int_t idim, Double_t wmax); voidTMVA::PDEFoam::SetXmin(Int_t idim, Double_t wmin); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); vector<Float_t>TMVA::PDEFoam::VarTransform(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransform(Int_t idim, Float_t x) const; vector<Float_t>TMVA::PDEFoam::VarTransformInvers(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransformInvers(Int_t idim, Float_t x) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:7220,Testability,Test,TestBits,7220,"Elements(); voidTMVA::PDEFoam::RootPlot2dim(const TString& filename, TString opt, Bool_t createCanvas = kTRUE, Bool_t colors = kTRUE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoam::SetDensity(TMVA::PDEFoamDensityBase* dens); voidTMVA::PDEFoam::SetDim(Int_t kDim); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::PDEFoam::SetEvPerBin(Int_t EvPerBin); voidTMVA::PDEFoam::SetInhiDiv(Int_t, Int_t); voidTMVA::PDEFoam::SetMaxDepth(UInt_t maxdepth); voidTMVA::PDEFoam::SetnBin(Int_t nBin); voidTMVA::PDEFoam::SetnCells(Long_t nCells); voidTMVA::PDEFoam::SetNmin(UInt_t val); voidTMVA::PDEFoam::SetnSampl(Long_t nSampl); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::PDEFoam::SetXmax(Int_t idim, Double_t wmax); voidTMVA::PDEFoam::SetXmin(Int_t idim, Double_t wmin); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); vector<Float_t>TMVA::PDEFoam::VarTransform(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransform(Int_t idim, Float_t x) const; vector<Float_t>TMVA::PDEFoam::VarTransformInvers(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransformInvers(Int_t idim, Float_t x) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:10313,Testability,log,logic,10313,"ect::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; UInt_tfClasssignal class; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables i",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:10991,Testability,log,logger,10991,"::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; UInt_tfClasssignal class; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 m",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html:1210,Usability,Clear,Clear,1210," virtual~PDEFoamDiscriminant(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::PDEFoam::AddVariableName(const char* s); voidTMVA::PDEFoam::AddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voi",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminant.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminant.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html:1571,Availability,Error,Error,1571," virtual~PDEFoamDiscriminantDensity(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(vector<Double_t>& Xarg, Double_t& event_density); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminantDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html:1700,Availability,error,error,1700,"Density(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(vector<Double_t>& Xarg, Double_t& event_density); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&TMVA::PDEFoamDensityBase::GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() co",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminantDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html:1784,Availability,error,error,1784,"t::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(vector<Double_t>& Xarg, Double_t& event_density); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&TMVA::PDEFoamDensityBase::GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtua",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminantDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html:6985,Integrability,message,message,6985," const; Double_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; UInt_tfClasssignal class; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDiscriminantDensity(); {}. PDEFoamDiscriminantDensity(vector<Double_t> box, UInt_t cls); User construcor:. Parameters:. - box - size of the range-searching box (n-dimensional; std::vector). - cls - event class used for the range-searching. PDEFoamDiscriminantDensity(const TMVA::PDEFoamDiscriminantDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is needed during the foam buildup. It returns the; average number density of events of type fClass within the; range-searching volume (specified by fBox). Parameters:. - xev - event vector (in [fXmin,fXmax]) to place the box at. - event_density - here the event density is stored. Returns:. Number of events (event weights) of type fClass, which were; found in the range-searching volume at point ",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminantDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html:2804,Modifiability,Inherit,InheritsFrom,2804,"bject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&TMVA::PDEFoamDensityBase::GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminantDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html:2870,Modifiability,Inherit,InheritsFrom,2870,"TObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&TMVA::PDEFoamDensityBase::GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamDiscriminantDensity&operator=(const TM",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminantDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html:7015,Modifiability,Inherit,Inheritance,7015,"e(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; UInt_tfClasssignal class; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDiscriminantDensity(); {}. PDEFoamDiscriminantDensity(vector<Double_t> box, UInt_t cls); User construcor:. Parameters:. - box - size of the range-searching box (n-dimensional; std::vector). - cls - event class used for the range-searching. PDEFoamDiscriminantDensity(const TMVA::PDEFoamDiscriminantDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is needed during the foam buildup. It returns the; average number density of events of type fClass within the; range-searching volume (specified by fBox). Parameters:. - xev - event vector (in [fXmin,fXmax]) to place the box at. - event_density - here the event density is stored. Returns:. Number of events (event weights) of type fClass, which were; found in the range-searching volume at point 'xev', divided by; the box volume. virtual ~PDEFoamDiscriminantDensity(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voig",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminantDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html:7028,Modifiability,Inherit,Inherited,7028,"e(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; UInt_tfClasssignal class; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDiscriminantDensity(); {}. PDEFoamDiscriminantDensity(vector<Double_t> box, UInt_t cls); User construcor:. Parameters:. - box - size of the range-searching box (n-dimensional; std::vector). - cls - event class used for the range-searching. PDEFoamDiscriminantDensity(const TMVA::PDEFoamDiscriminantDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is needed during the foam buildup. It returns the; average number density of events of type fClass within the; range-searching volume (specified by fBox). Parameters:. - xev - event vector (in [fXmin,fXmax]) to place the box at. - event_density - here the event density is stored. Returns:. Number of events (event weights) of type fClass, which were; found in the range-searching volume at point 'xev', divided by; the box volume. virtual ~PDEFoamDiscriminantDensity(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voig",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminantDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html:2694,Security,Hash,Hash,2694,"_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&TMVA::PDEFoamDensityBase::GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminantDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html:5440,Testability,Test,TestBit,5440,"[](size_t sz, void* vp); TMVA::PDEFoamDiscriminantDensity&operator=(const TMVA::PDEFoamDiscriminantDensity&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(vector<Double_t> box); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(const TMVA::PDEFoamDensityBase&); TMVA::PDEFoamDiscriminantDensityPDEFoamDiscriminantDensity(); TMVA::PDEFoamDiscriminantDensityPDEFoamDiscriminantDensity(const TMVA::PDEFoamDiscriminantDensity&); TMVA::PDEFoamDiscriminantDensityPDEFoamDiscriminantDensity(vector<Double_t> box, UInt_t cls); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoamDensityBase::SetBox(vector<Double_t> box); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminantDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html:5479,Testability,Test,TestBits,5479,"[](size_t sz, void* vp); TMVA::PDEFoamDiscriminantDensity&operator=(const TMVA::PDEFoamDiscriminantDensity&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(vector<Double_t> box); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(const TMVA::PDEFoamDensityBase&); TMVA::PDEFoamDiscriminantDensityPDEFoamDiscriminantDensity(); TMVA::PDEFoamDiscriminantDensityPDEFoamDiscriminantDensity(const TMVA::PDEFoamDiscriminantDensity&); TMVA::PDEFoamDiscriminantDensityPDEFoamDiscriminantDensity(vector<Double_t> box, UInt_t cls); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoamDensityBase::SetBox(vector<Double_t> box); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminantDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html:6005,Testability,Log,Log,6005,"l_t set); voidTMVA::PDEFoamDensityBase::SetBox(vector<Double_t> box); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; UInt_tfClasssignal cl",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminantDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html:6993,Testability,log,logger,6993," const; Double_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; UInt_tfClasssignal class; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDiscriminantDensity(); {}. PDEFoamDiscriminantDensity(vector<Double_t> box, UInt_t cls); User construcor:. Parameters:. - box - size of the range-searching box (n-dimensional; std::vector). - cls - event class used for the range-searching. PDEFoamDiscriminantDensity(const TMVA::PDEFoamDiscriminantDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is needed during the foam buildup. It returns the; average number density of events of type fClass within the; range-searching volume (specified by fBox). Parameters:. - xev - event vector (in [fXmin,fXmax]) to place the box at. - event_density - here the event density is stored. Returns:. Number of events (event weights) of type fClass, which were; found in the range-searching volume at point ",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminantDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html
https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html:957,Usability,Clear,Clear,957," virtual~PDEFoamDiscriminantDensity(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(vector<Double_t>& Xarg, Double_t& event_density); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::",MatchSource.WIKI,root/html604/TMVA__PDEFoamDiscriminantDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamDiscriminantDensity.html
https://root.cern/root/html604/TMVA__PDEFoamEvent.html:1835,Availability,Error,Error,1835,"MVA::PDEFoam::AddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidFillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidTMVA::PDEFoam::Finalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>TMVA::PDEFoam::GetCellValue(const map<Int_t,Float_t>& xvec, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const TMVA::PDEFoamCell* cell, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::",MatchSource.WIKI,root/html604/TMVA__PDEFoamEvent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEvent.html
https://root.cern/root/html604/TMVA__PDEFoamEvent.html:1964,Availability,error,error,1964,"TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidFillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidTMVA::PDEFoam::Finalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>TMVA::PDEFoam::GetCellValue(const map<Int_t,Float_t>& xvec, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const TMVA::PDEFoamCell* cell, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject",MatchSource.WIKI,root/html604/TMVA__PDEFoamEvent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEvent.html
https://root.cern/root/html604/TMVA__PDEFoamEvent.html:2048,Availability,error,error,2048,"st char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidFillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidTMVA::PDEFoam::Finalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>TMVA::PDEFoam::GetCellValue(const map<Int_t,Float_t>& xvec, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const TMVA::PDEFoamCell* cell, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam",MatchSource.WIKI,root/html604/TMVA__PDEFoamEvent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEvent.html
https://root.cern/root/html604/TMVA__PDEFoamEvent.html:10934,Availability,Mask,Mask,10934,"Object::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 m",MatchSource.WIKI,root/html604/TMVA__PDEFoamEvent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEvent.html
https://root.cern/root/html604/TMVA__PDEFoamEvent.html:10250,Deployability,integrat,integration,10250,"; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell;",MatchSource.WIKI,root/html604/TMVA__PDEFoamEvent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEvent.html
https://root.cern/root/html604/TMVA__PDEFoamEvent.html:10250,Integrability,integrat,integration,10250,"; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell;",MatchSource.WIKI,root/html604/TMVA__PDEFoamEvent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEvent.html
https://root.cern/root/html604/TMVA__PDEFoamEvent.html:10872,Integrability,message,message,10872,"Object::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 m",MatchSource.WIKI,root/html604/TMVA__PDEFoamEvent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEvent.html
https://root.cern/root/html604/TMVA__PDEFoamEvent.html:3912,Modifiability,Inherit,InheritsFrom,3912,"::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::GetNInActiveCells() const; UInt_tTMVA::PDEFoam::GetNmin(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*TMVA::PDEFoam::GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tTMVA::PDEFoam::GetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*TMVA::PDEFoam::GetVariableName(Int_t idx); Double_tTMVA::PDEFoam::GetXmax(Int_t idim) const; Double_tTMVA::PDEFoam::GetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::PDEFoam::Initialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoam::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); ",MatchSource.WIKI,root/html604/TMVA__PDEFoamEvent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEvent.html
https://root.cern/root/html604/TMVA__PDEFoamEvent.html:3978,Modifiability,Inherit,InheritsFrom,3978,"onst; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::GetNInActiveCells() const; UInt_tTMVA::PDEFoam::GetNmin(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*TMVA::PDEFoam::GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tTMVA::PDEFoam::GetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*TMVA::PDEFoam::GetVariableName(Int_t idx); Double_tTMVA::PDEFoam::GetXmax(Int_t idim) const; Double_tTMVA::PDEFoam::GetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::PDEFoam::Initialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoam::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator ne",MatchSource.WIKI,root/html604/TMVA__PDEFoamEvent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEvent.html
https://root.cern/root/html604/TMVA__PDEFoamEvent.html:11218,Modifiability,variab,variables,11218,"ITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] m",MatchSource.WIKI,root/html604/TMVA__PDEFoamEvent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEvent.html
https://root.cern/root/html604/TMVA__PDEFoamEvent.html:11931,Modifiability,variab,variable,11931,"xDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamEvent(); Default constructor for streamer, user should not use it. PDEFoamEvent(const TString& ); {}. PDEFoamEvent(const TMVA::PDEFoamEvent& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event weight 'wt' into the PDEFoam. Cell; element 0 is filled with the weight 'wt', and element 1 is; filled with the squared weight. virtual ~PDEFoamEvent(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or R",MatchSource.WIKI,root/html604/TMVA__PDEFoamEvent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEvent.html
https://root.cern/root/html604/TMVA__PDEFoamEvent.html:12102,Modifiability,variab,variable,12102,"xDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamEvent(); Default constructor for streamer, user should not use it. PDEFoamEvent(const TString& ); {}. PDEFoamEvent(const TMVA::PDEFoamEvent& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event weight 'wt' into the PDEFoam. Cell; element 0 is filled with the weight 'wt', and element 1 is; filled with the squared weight. virtual ~PDEFoamEvent(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or R",MatchSource.WIKI,root/html604/TMVA__PDEFoamEvent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEvent.html
https://root.cern/root/html604/TMVA__PDEFoamEvent.html:12170,Modifiability,variab,variable,12170,"xDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamEvent(); Default constructor for streamer, user should not use it. PDEFoamEvent(const TString& ); {}. PDEFoamEvent(const TMVA::PDEFoamEvent& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event weight 'wt' into the PDEFoam. Cell; element 0 is filled with the weight 'wt', and element 1 is; filled with the squared weight. virtual ~PDEFoamEvent(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or R",MatchSource.WIKI,root/html604/TMVA__PDEFoamEvent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEvent.html
https://root.cern/root/html604/TMVA__PDEFoamEvent.html:12204,Modifiability,Inherit,Inheritance,12204,"m::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamEvent(); Default constructor for streamer, user should not use it. PDEFoamEvent(const TString& ); {}. PDEFoamEvent(const TMVA::PDEFoamEvent& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event weight 'wt' into the PDEFoam. Cell; element 0 is filled with the weight 'wt', and element 1 is; filled with the squared weight. virtual ~PDEFoamEvent(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__PDEFoamEvent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEvent.html
https://root.cern/root/html604/TMVA__PDEFoamEvent.html:12217,Modifiability,Inherit,Inherited,12217,"m::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamEvent(); Default constructor for streamer, user should not use it. PDEFoamEvent(const TString& ); {}. PDEFoamEvent(const TMVA::PDEFoamEvent& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event weight 'wt' into the PDEFoam. Cell; element 0 is filled with the weight 'wt', and element 1 is; filled with the squared weight. virtual ~PDEFoamEvent(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__PDEFoamEvent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEvent.html
https://root.cern/root/html604/TMVA__PDEFoamEvent.html:3802,Security,Hash,Hash,3802,"Base*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::GetNInActiveCells() const; UInt_tTMVA::PDEFoam::GetNmin(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*TMVA::PDEFoam::GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tTMVA::PDEFoam::GetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*TMVA::PDEFoam::GetVariableName(Int_t idx); Double_tTMVA::PDEFoam::GetXmax(Int_t idim) const; Double_tTMVA::PDEFoam::GetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::PDEFoam::Initialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoam::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delet",MatchSource.WIKI,root/html604/TMVA__PDEFoamEvent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEvent.html
https://root.cern/root/html604/TMVA__PDEFoamEvent.html:4393,Testability,Log,Log,4393,":PDEFoamCell*TMVA::PDEFoam::GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tTMVA::PDEFoam::GetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*TMVA::PDEFoam::GetVariableName(Int_t idx); Double_tTMVA::PDEFoam::GetXmax(Int_t idim) const; Double_tTMVA::PDEFoam::GetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::PDEFoam::Initialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoam::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamEvent&operator=(const TMVA::PDEFoamEvent&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamTMVA::PDEFoam::PDEFoam(); TMVA::PDEFoamTMVA::PDEFoam::PDEFoam(const TString&); TMVA::PDEFoamEventPDEFoamEvent(); TMVA::PDEFoamEventPDEFoamEvent(const TString&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::PDEFoam",MatchSource.WIKI,root/html604/TMVA__PDEFoamEvent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEvent.html
https://root.cern/root/html604/TMVA__PDEFoamEvent.html:7117,Testability,Test,TestBit,7117,"Elements(); voidTMVA::PDEFoam::RootPlot2dim(const TString& filename, TString opt, Bool_t createCanvas = kTRUE, Bool_t colors = kTRUE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoam::SetDensity(TMVA::PDEFoamDensityBase* dens); voidTMVA::PDEFoam::SetDim(Int_t kDim); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::PDEFoam::SetEvPerBin(Int_t EvPerBin); voidTMVA::PDEFoam::SetInhiDiv(Int_t, Int_t); voidTMVA::PDEFoam::SetMaxDepth(UInt_t maxdepth); voidTMVA::PDEFoam::SetnBin(Int_t nBin); voidTMVA::PDEFoam::SetnCells(Long_t nCells); voidTMVA::PDEFoam::SetNmin(UInt_t val); voidTMVA::PDEFoam::SetnSampl(Long_t nSampl); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::PDEFoam::SetXmax(Int_t idim, Double_t wmax); voidTMVA::PDEFoam::SetXmin(Int_t idim, Double_t wmin); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); vector<Float_t>TMVA::PDEFoam::VarTransform(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransform(Int_t idim, Float_t x) const; vector<Float_t>TMVA::PDEFoam::VarTransformInvers(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransformInvers(Int_t idim, Float_t x) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamEvent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEvent.html
https://root.cern/root/html604/TMVA__PDEFoamEvent.html:7156,Testability,Test,TestBits,7156,"Elements(); voidTMVA::PDEFoam::RootPlot2dim(const TString& filename, TString opt, Bool_t createCanvas = kTRUE, Bool_t colors = kTRUE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoam::SetDensity(TMVA::PDEFoamDensityBase* dens); voidTMVA::PDEFoam::SetDim(Int_t kDim); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::PDEFoam::SetEvPerBin(Int_t EvPerBin); voidTMVA::PDEFoam::SetInhiDiv(Int_t, Int_t); voidTMVA::PDEFoam::SetMaxDepth(UInt_t maxdepth); voidTMVA::PDEFoam::SetnBin(Int_t nBin); voidTMVA::PDEFoam::SetnCells(Long_t nCells); voidTMVA::PDEFoam::SetNmin(UInt_t val); voidTMVA::PDEFoam::SetnSampl(Long_t nSampl); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::PDEFoam::SetXmax(Int_t idim, Double_t wmax); voidTMVA::PDEFoam::SetXmin(Int_t idim, Double_t wmin); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); vector<Float_t>TMVA::PDEFoam::VarTransform(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransform(Int_t idim, Float_t x) const; vector<Float_t>TMVA::PDEFoam::VarTransformInvers(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransformInvers(Int_t idim, Float_t x) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamEvent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEvent.html
https://root.cern/root/html604/TMVA__PDEFoamEvent.html:10202,Testability,log,logic,10202,"; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell;",MatchSource.WIKI,root/html604/TMVA__PDEFoamEvent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEvent.html
https://root.cern/root/html604/TMVA__PDEFoamEvent.html:10880,Testability,log,logger,10880,"Object::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 m",MatchSource.WIKI,root/html604/TMVA__PDEFoamEvent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEvent.html
https://root.cern/root/html604/TMVA__PDEFoamEvent.html:1108,Usability,Clear,Clear,1108," virtual~PDEFoamEvent(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::PDEFoam::AddVariableName(const char* s); voidTMVA::PDEFoam::AddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Exec",MatchSource.WIKI,root/html604/TMVA__PDEFoamEvent.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEvent.html
https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html:1449,Availability,Error,Error,1449," virtual~PDEFoamEventDensity(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(vector<Double_t>& Xarg, Double_t& event_density); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject",MatchSource.WIKI,root/html604/TMVA__PDEFoamEventDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html
https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html:1578,Availability,error,error,1578,"Density(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(vector<Double_t>& Xarg, Double_t& event_density); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&TMVA::PDEFoamDensityBase::GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() co",MatchSource.WIKI,root/html604/TMVA__PDEFoamEventDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html
https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html:1662,Availability,error,error,1662,"t::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(vector<Double_t>& Xarg, Double_t& event_density); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&TMVA::PDEFoamDensityBase::GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtua",MatchSource.WIKI,root/html604/TMVA__PDEFoamEventDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html
https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html:6762,Integrability,message,message,6762,", va_list va) const; Double_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamEventDensity(); {}. PDEFoamEventDensity(vector<Double_t> box); User construcor. Parameters:. - box - size of sampling box. PDEFoamEventDensity(const TMVA::PDEFoamEventDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is needed during the foam buildup. It returns the; event density within the range-searching volume (specified by; fBox). Parameters:. - xev - event vector (in [fXmin,fXmax]) to place the box at. - event_density - here the event density is stored. Returns:. Number of events (event weights), which were found in the; range-searching volume at point 'xev', divided by the box; volume. virtual ~PDEFoamEventDensity(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $Id$ ",MatchSource.WIKI,root/html604/TMVA__PDEFoamEventDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html
https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html:2682,Modifiability,Inherit,InheritsFrom,2682,"bject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&TMVA::PDEFoamDensityBase::GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TMVA__PDEFoamEventDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html
https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html:2748,Modifiability,Inherit,InheritsFrom,2748,"TObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&TMVA::PDEFoamDensityBase::GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamEventDensity&operator=(const TMVA::PDE",MatchSource.WIKI,root/html604/TMVA__PDEFoamEventDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html
https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html:6792,Modifiability,Inherit,Inheritance,6792,"st; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamEventDensity(); {}. PDEFoamEventDensity(vector<Double_t> box); User construcor. Parameters:. - box - size of sampling box. PDEFoamEventDensity(const TMVA::PDEFoamEventDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is needed during the foam buildup. It returns the; event density within the range-searching volume (specified by; fBox). Parameters:. - xev - event vector (in [fXmin,fXmax]) to place the box at. - event_density - here the event density is stored. Returns:. Number of events (event weights), which were found in the; range-searching volume at point 'xev', divided by the box; volume. virtual ~PDEFoamEventDensity(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the d",MatchSource.WIKI,root/html604/TMVA__PDEFoamEventDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html
https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html:6805,Modifiability,Inherit,Inherited,6805,"st; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamEventDensity(); {}. PDEFoamEventDensity(vector<Double_t> box); User construcor. Parameters:. - box - size of sampling box. PDEFoamEventDensity(const TMVA::PDEFoamEventDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is needed during the foam buildup. It returns the; event density within the range-searching volume (specified by; fBox). Parameters:. - xev - event vector (in [fXmin,fXmax]) to place the box at. - event_density - here the event density is stored. Returns:. Number of events (event weights), which were found in the; range-searching volume at point 'xev', divided by the box; volume. virtual ~PDEFoamEventDensity(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the d",MatchSource.WIKI,root/html604/TMVA__PDEFoamEventDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html
https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html:2572,Security,Hash,Hash,2572,"_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&TMVA::PDEFoamDensityBase::GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html604/TMVA__PDEFoamEventDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html
https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html:5243,Testability,Test,TestBit,5243,"d* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamEventDensity&operator=(const TMVA::PDEFoamEventDensity&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(vector<Double_t> box); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(const TMVA::PDEFoamDensityBase&); TMVA::PDEFoamEventDensityPDEFoamEventDensity(); TMVA::PDEFoamEventDensityPDEFoamEventDensity(vector<Double_t> box); TMVA::PDEFoamEventDensityPDEFoamEventDensity(const TMVA::PDEFoamEventDensity&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoamDensityBase::SetBox(vector<Double_t> box); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamEventDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html
https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html:5282,Testability,Test,TestBits,5282,"d* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamEventDensity&operator=(const TMVA::PDEFoamEventDensity&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(vector<Double_t> box); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(const TMVA::PDEFoamDensityBase&); TMVA::PDEFoamEventDensityPDEFoamEventDensity(); TMVA::PDEFoamEventDensityPDEFoamEventDensity(vector<Double_t> box); TMVA::PDEFoamEventDensityPDEFoamEventDensity(const TMVA::PDEFoamEventDensity&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoamDensityBase::SetBox(vector<Double_t> box); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamEventDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html
https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html:5808,Testability,Log,Log,5808,"l_t set); voidTMVA::PDEFoamDensityBase::SetBox(vector<Double_t> box); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; TMVA::MsgLogger*TMVA:",MatchSource.WIKI,root/html604/TMVA__PDEFoamEventDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html
https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html:6770,Testability,log,logger,6770,", va_list va) const; Double_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamEventDensity(); {}. PDEFoamEventDensity(vector<Double_t> box); User construcor. Parameters:. - box - size of sampling box. PDEFoamEventDensity(const TMVA::PDEFoamEventDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is needed during the foam buildup. It returns the; event density within the range-searching volume (specified by; fBox). Parameters:. - xev - event vector (in [fXmin,fXmax]) to place the box at. - event_density - here the event density is stored. Returns:. Number of events (event weights), which were found in the; range-searching volume at point 'xev', divided by the box; volume. virtual ~PDEFoamEventDensity(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $Id$ ",MatchSource.WIKI,root/html604/TMVA__PDEFoamEventDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html
https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html:835,Usability,Clear,Clear,835," virtual~PDEFoamEventDensity(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(vector<Double_t>& Xarg, Double_t& event_density); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject",MatchSource.WIKI,root/html604/TMVA__PDEFoamEventDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamEventDensity.html
https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html:780,Availability,avail,available,780,". TMVA::PDEFoamKernelBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::PDEFoamKernelBase. class TMVA::PDEFoamKernelBase: public TObject. PDEFoamKernelBase. This class is the abstract kernel interface for PDEFoam. The; kernel can be used for manipulating (smearing) the cell values of a; PDEFoam, by passing it as an argument to; PDEFoam::GetCellValue(...). Derived classes must implement the Estimate() function to provide a; specific kernel behaviour. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~PDEFoamKernelBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Float_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtu",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html
https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html:1626,Availability,Error,Error,1626," virtual~PDEFoamKernelBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Float_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtu",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html
https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html:1832,Availability,error,error,1832,"Base(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Float_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) con",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html
https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html:1916,Availability,error,error,1916,"AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Float_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html
https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html:383,Integrability,interface,interface,383,". TMVA::PDEFoamKernelBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::PDEFoamKernelBase. class TMVA::PDEFoamKernelBase: public TObject. PDEFoamKernelBase. This class is the abstract kernel interface for PDEFoam. The; kernel can be used for manipulating (smearing) the cell values of a; PDEFoam, by passing it as an argument to; PDEFoam::GetCellValue(...). Derived classes must implement the Estimate() function to provide a; specific kernel behaviour. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~PDEFoamKernelBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Float_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtu",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html
https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html:6268,Integrability,message,message,6268,"onst char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::MsgLogger*fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelBase(); Default constructor for streamer. PDEFoamKernelBase(const TMVA::PDEFoamKernelBase& ); Copy constructor. ~PDEFoamKernelBase(); Destructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); kernel estimator. » Author: Dominik Dannheim, Alexander Voigt » Copyright (c) 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html
https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html:2796,Modifiability,Inherit,InheritsFrom,2796,"d, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TO",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html
https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html:2862,Modifiability,Inherit,InheritsFrom,2862,"cute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamKernelBas",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html
https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html:6298,Modifiability,Inherit,Inheritance,6298,"onst char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::MsgLogger*fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelBase(); Default constructor for streamer. PDEFoamKernelBase(const TMVA::PDEFoamKernelBase& ); Copy constructor. ~PDEFoamKernelBase(); Destructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); kernel estimator. » Author: Dominik Dannheim, Alexander Voigt » Copyright (c) 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html
https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html:6311,Modifiability,Inherit,Inherited,6311,"onst char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::MsgLogger*fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelBase(); Default constructor for streamer. PDEFoamKernelBase(const TMVA::PDEFoamKernelBase& ); Copy constructor. ~PDEFoamKernelBase(); Destructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); kernel estimator. » Author: Dominik Dannheim, Alexander Voigt » Copyright (c) 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html
https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html:2686,Security,Hash,Hash,2686,"loat_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html
https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html:3229,Testability,Log,Log,3229,"on() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamKernelBase&operator=(const TMVA::PDEFoamKernelBase&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamKernelBasePDEFoamKernelBase(); TMVA::PDEFoamKernelBasePDEFoamKernelBase(const TMVA::PDEFoamKernelBase&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObje",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html
https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html:4977,Testability,Test,TestBit,4977," const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamKernelBase&operator=(const TMVA::PDEFoamKernelBase&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamKernelBasePDEFoamKernelBase(); TMVA::PDEFoamKernelBasePDEFoamKernelBase(const TMVA::PDEFoamKernelBase&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html
https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html:5016,Testability,Test,TestBits,5016," const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamKernelBase&operator=(const TMVA::PDEFoamKernelBase&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamKernelBasePDEFoamKernelBase(); TMVA::PDEFoamKernelBasePDEFoamKernelBase(const TMVA::PDEFoamKernelBase&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html
https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html:6276,Testability,log,logger,6276,"onst char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::MsgLogger*fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelBase(); Default constructor for streamer. PDEFoamKernelBase(const TMVA::PDEFoamKernelBase& ); Copy constructor. ~PDEFoamKernelBase(); Destructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); kernel estimator. » Author: Dominik Dannheim, Alexander Voigt » Copyright (c) 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html
https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html:1086,Usability,Clear,Clear,1086," virtual~PDEFoamKernelBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Float_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtu",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelBase.html
https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html:1333,Availability,Error,Error,1333," virtual~PDEFoamKernelGauss(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Float_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const ",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelGauss.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html
https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html:1539,Availability,error,error,1539,"auss(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Float_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) con",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelGauss.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html
https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html:1623,Availability,error,error,1623,"AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Float_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelGauss.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html
https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html:6371,Integrability,message,message,6371,"Float_tGetAverageNeighborsValue(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); voidTObject::MakeZombie(); Float_tWeightGaus(TMVA::PDEFoam*, TMVA::PDEFoamCell*, vector<Float_t>&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::MsgLogger*TMVA::PDEFoamKernelBase::fLogger! message logger; Float_tfSigmawidth of gauss curve. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelGauss(Float_t sigma); Default constructor for streamer. PDEFoamKernelGauss(const TMVA::PDEFoamKernelGauss& ); Copy constructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); Gaussian kernel estimator. It returns the cell value 'cv',; corresponding to the event vector 'txvec' (in foam coordinates); weighted by the cell values of all other cells, where the weight; is a gaussian function. Parameters:. - foam - the pdefoam to search in. - txvec - event vector in foam coordinates [0,1]. - cv - cell value to estimate. Float_t GetAverageNeighborsValue(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); This function returns the average value 'cv' of only nearest; neighbor cells. It is used in cases when a cell value is; undefined and the cell value shall be estimated by the; (well-defined) cell values of the n",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelGauss.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html
https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html:2503,Modifiability,Inherit,InheritsFrom,2503,"d, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoamKernelBase::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelGauss.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html
https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html:2569,Modifiability,Inherit,InheritsFrom,2569,"cute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoamKernelBase::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelGauss.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html
https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html:6436,Modifiability,Inherit,Inheritance,6436,"bject::MakeZombie(); Float_tWeightGaus(TMVA::PDEFoam*, TMVA::PDEFoamCell*, vector<Float_t>&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::MsgLogger*TMVA::PDEFoamKernelBase::fLogger! message logger; Float_tfSigmawidth of gauss curve. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelGauss(Float_t sigma); Default constructor for streamer. PDEFoamKernelGauss(const TMVA::PDEFoamKernelGauss& ); Copy constructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); Gaussian kernel estimator. It returns the cell value 'cv',; corresponding to the event vector 'txvec' (in foam coordinates); weighted by the cell values of all other cells, where the weight; is a gaussian function. Parameters:. - foam - the pdefoam to search in. - txvec - event vector in foam coordinates [0,1]. - cv - cell value to estimate. Float_t GetAverageNeighborsValue(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); This function returns the average value 'cv' of only nearest; neighbor cells. It is used in cases when a cell value is; undefined and the cell value shall be estimated by the; (well-defined) cell values of the neighbor cells. Parameters:; - foam - the foam to search in; - txvec - event vector, transfo",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelGauss.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html
https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html:6449,Modifiability,Inherit,Inherited,6449,"bject::MakeZombie(); Float_tWeightGaus(TMVA::PDEFoam*, TMVA::PDEFoamCell*, vector<Float_t>&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::MsgLogger*TMVA::PDEFoamKernelBase::fLogger! message logger; Float_tfSigmawidth of gauss curve. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelGauss(Float_t sigma); Default constructor for streamer. PDEFoamKernelGauss(const TMVA::PDEFoamKernelGauss& ); Copy constructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); Gaussian kernel estimator. It returns the cell value 'cv',; corresponding to the event vector 'txvec' (in foam coordinates); weighted by the cell values of all other cells, where the weight; is a gaussian function. Parameters:. - foam - the pdefoam to search in. - txvec - event vector in foam coordinates [0,1]. - cv - cell value to estimate. Float_t GetAverageNeighborsValue(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); This function returns the average value 'cv' of only nearest; neighbor cells. It is used in cases when a cell value is; undefined and the cell value shall be estimated by the; (well-defined) cell values of the neighbor cells. Parameters:; - foam - the foam to search in; - txvec - event vector, transfo",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelGauss.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html
https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html:7763,Modifiability,variab,variables,7763,"mawidth of gauss curve. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelGauss(Float_t sigma); Default constructor for streamer. PDEFoamKernelGauss(const TMVA::PDEFoamKernelGauss& ); Copy constructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); Gaussian kernel estimator. It returns the cell value 'cv',; corresponding to the event vector 'txvec' (in foam coordinates); weighted by the cell values of all other cells, where the weight; is a gaussian function. Parameters:. - foam - the pdefoam to search in. - txvec - event vector in foam coordinates [0,1]. - cv - cell value to estimate. Float_t GetAverageNeighborsValue(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); This function returns the average value 'cv' of only nearest; neighbor cells. It is used in cases when a cell value is; undefined and the cell value shall be estimated by the; (well-defined) cell values of the neighbor cells. Parameters:; - foam - the foam to search in; - txvec - event vector, transformed into foam coordinates [0, 1]; - cv - cell value, see definition of ECellValue. Float_t WeightGaus(TMVA::PDEFoam* , TMVA::PDEFoamCell* , vector<Float_t>& ); Returns the gauss weight between the 'cell' and a given coordinate 'txvec'. Parameters:; - cell - the cell. - txvec - the transformed event variables (in [0,1]) (coordinates <0 are; set to 0, >1 are set to 1). Returns:; exp(-(d/sigma)^2/2), where; - d - is the euclidean distance between 'txvec' and the point of the 'cell'; which is most close to 'txvec' (in order to avoid artefacts because of the; form of the cells).; - sigma = 1/VolFrac. virtual ~PDEFoamKernelGauss(); {}. » Author: Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelGauss.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html
https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html:7992,Safety,avoid,avoid,7992,"mawidth of gauss curve. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelGauss(Float_t sigma); Default constructor for streamer. PDEFoamKernelGauss(const TMVA::PDEFoamKernelGauss& ); Copy constructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); Gaussian kernel estimator. It returns the cell value 'cv',; corresponding to the event vector 'txvec' (in foam coordinates); weighted by the cell values of all other cells, where the weight; is a gaussian function. Parameters:. - foam - the pdefoam to search in. - txvec - event vector in foam coordinates [0,1]. - cv - cell value to estimate. Float_t GetAverageNeighborsValue(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); This function returns the average value 'cv' of only nearest; neighbor cells. It is used in cases when a cell value is; undefined and the cell value shall be estimated by the; (well-defined) cell values of the neighbor cells. Parameters:; - foam - the foam to search in; - txvec - event vector, transformed into foam coordinates [0, 1]; - cv - cell value, see definition of ECellValue. Float_t WeightGaus(TMVA::PDEFoam* , TMVA::PDEFoamCell* , vector<Float_t>& ); Returns the gauss weight between the 'cell' and a given coordinate 'txvec'. Parameters:; - cell - the cell. - txvec - the transformed event variables (in [0,1]) (coordinates <0 are; set to 0, >1 are set to 1). Returns:; exp(-(d/sigma)^2/2), where; - d - is the euclidean distance between 'txvec' and the point of the 'cell'; which is most close to 'txvec' (in order to avoid artefacts because of the; form of the cells).; - sigma = 1/VolFrac. virtual ~PDEFoamKernelGauss(); {}. » Author: Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelGauss.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html
https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html:2393,Security,Hash,Hash,2393,"loat_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoamKernelBase::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelGauss.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html
https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html:2961,Testability,Log,Log,2961,"TObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoamKernelBase::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamKernelGauss&operator=(const TMVA::PDEFoamKernelGauss&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamKernelBaseTMVA::PDEFoamKernelBase::PDEFoamKernelBase(); TMVA::PDEFoamKernelBaseTMVA::PDEFoamKernelBase::PDEFoamKernelBase(const TMVA::PDEFoamKernelBase&); TMVA::PDEFoamKernelGaussPDEFoamKernelGauss(Float_t sigma); TMVA::PDEFoamKernelGaussPDEFoamKernel",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelGauss.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html
https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html:4897,Testability,Test,TestBit,4897,"bject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamKernelGauss&operator=(const TMVA::PDEFoamKernelGauss&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamKernelBaseTMVA::PDEFoamKernelBase::PDEFoamKernelBase(); TMVA::PDEFoamKernelBaseTMVA::PDEFoamKernelBase::PDEFoamKernelBase(const TMVA::PDEFoamKernelBase&); TMVA::PDEFoamKernelGaussPDEFoamKernelGauss(Float_t sigma); TMVA::PDEFoamKernelGaussPDEFoamKernelGauss(const TMVA::PDEFoamKernelGauss&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelGauss.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html
https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html:4936,Testability,Test,TestBits,4936,"bject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamKernelGauss&operator=(const TMVA::PDEFoamKernelGauss&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamKernelBaseTMVA::PDEFoamKernelBase::PDEFoamKernelBase(); TMVA::PDEFoamKernelBaseTMVA::PDEFoamKernelBase::PDEFoamKernelBase(const TMVA::PDEFoamKernelBase&); TMVA::PDEFoamKernelGaussPDEFoamKernelGauss(Float_t sigma); TMVA::PDEFoamKernelGaussPDEFoamKernelGauss(const TMVA::PDEFoamKernelGauss&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelGauss.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html
https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html:6379,Testability,log,logger,6379,"Float_tGetAverageNeighborsValue(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); voidTObject::MakeZombie(); Float_tWeightGaus(TMVA::PDEFoam*, TMVA::PDEFoamCell*, vector<Float_t>&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::MsgLogger*TMVA::PDEFoamKernelBase::fLogger! message logger; Float_tfSigmawidth of gauss curve. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelGauss(Float_t sigma); Default constructor for streamer. PDEFoamKernelGauss(const TMVA::PDEFoamKernelGauss& ); Copy constructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); Gaussian kernel estimator. It returns the cell value 'cv',; corresponding to the event vector 'txvec' (in foam coordinates); weighted by the cell values of all other cells, where the weight; is a gaussian function. Parameters:. - foam - the pdefoam to search in. - txvec - event vector in foam coordinates [0,1]. - cv - cell value to estimate. Float_t GetAverageNeighborsValue(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); This function returns the average value 'cv' of only nearest; neighbor cells. It is used in cases when a cell value is; undefined and the cell value shall be estimated by the; (well-defined) cell values of the n",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelGauss.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html
https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html:793,Usability,Clear,Clear,793," virtual~PDEFoamKernelGauss(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Float_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const ",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelGauss.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelGauss.html
https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html:1337,Availability,Error,Error,1337," virtual~PDEFoamKernelLinN(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Float_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual co",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelLinN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html
https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html:1543,Availability,error,error,1543,"LinN(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Float_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) con",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelLinN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html
https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html:1627,Availability,error,error,1627,"AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Float_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelLinN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html
https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html:6369,Integrability,message,message,6369,"t; Float_tGetAverageNeighborsValue(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); voidTObject::MakeZombie(); Float_tWeightLinNeighbors(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue, Bool_t). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::MsgLogger*TMVA::PDEFoamKernelBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelLinN(); Default constructor for streamer. PDEFoamKernelLinN(const TMVA::PDEFoamKernelLinN& ); Copy constructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); Linear neighbors kernel estimator. It returns the cell value; 'cv', corresponding to the event vector 'txvec' (in foam; coordinates) linear weighted by the cell values of the neighbor; cells. Parameters:. - foam - the pdefoam to search in. - txvec - event vector in foam coordinates [0,1]. - cv - cell value to estimate. Float_t WeightLinNeighbors(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue , Bool_t ); Returns the cell value, corresponding to 'txvec' (foam; coordinates [0,1]), weighted by the neighbor cells via a linear; function. Parameters:; - foam - the foam to search in. - txvec - event vector, transformed into foam coordinates [0,1]. - cv - cell value to be",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelLinN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html
https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html:2507,Modifiability,Inherit,InheritsFrom,2507,"d, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoamKernelBase::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelLinN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html
https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html:2573,Modifiability,Inherit,InheritsFrom,2573,"cute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoamKernelBase::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelLinN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html
https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html:6399,Modifiability,Inherit,Inheritance,6399,"::ECellValue); voidTObject::MakeZombie(); Float_tWeightLinNeighbors(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue, Bool_t). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::MsgLogger*TMVA::PDEFoamKernelBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelLinN(); Default constructor for streamer. PDEFoamKernelLinN(const TMVA::PDEFoamKernelLinN& ); Copy constructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); Linear neighbors kernel estimator. It returns the cell value; 'cv', corresponding to the event vector 'txvec' (in foam; coordinates) linear weighted by the cell values of the neighbor; cells. Parameters:. - foam - the pdefoam to search in. - txvec - event vector in foam coordinates [0,1]. - cv - cell value to estimate. Float_t WeightLinNeighbors(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue , Bool_t ); Returns the cell value, corresponding to 'txvec' (foam; coordinates [0,1]), weighted by the neighbor cells via a linear; function. Parameters:; - foam - the foam to search in. - txvec - event vector, transformed into foam coordinates [0,1]. - cv - cell value to be weighted. - treatEmptyCells - if this option is set to false (default),; ",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelLinN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html
https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html:6412,Modifiability,Inherit,Inherited,6412,"::ECellValue); voidTObject::MakeZombie(); Float_tWeightLinNeighbors(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue, Bool_t). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::MsgLogger*TMVA::PDEFoamKernelBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelLinN(); Default constructor for streamer. PDEFoamKernelLinN(const TMVA::PDEFoamKernelLinN& ); Copy constructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); Linear neighbors kernel estimator. It returns the cell value; 'cv', corresponding to the event vector 'txvec' (in foam; coordinates) linear weighted by the cell values of the neighbor; cells. Parameters:. - foam - the pdefoam to search in. - txvec - event vector in foam coordinates [0,1]. - cv - cell value to estimate. Float_t WeightLinNeighbors(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue , Bool_t ); Returns the cell value, corresponding to 'txvec' (foam; coordinates [0,1]), weighted by the neighbor cells via a linear; function. Parameters:; - foam - the foam to search in. - txvec - event vector, transformed into foam coordinates [0,1]. - cv - cell value to be weighted. - treatEmptyCells - if this option is set to false (default),; ",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelLinN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html
https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html:2397,Security,Hash,Hash,2397,"loat_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoamKernelBase::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelLinN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html
https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html:2965,Testability,Log,Log,2965,"TObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoamKernelBase::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamKernelLinN&operator=(const TMVA::PDEFoamKernelLinN&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamKernelBaseTMVA::PDEFoamKernelBase::PDEFoamKernelBase(); TMVA::PDEFoamKernelBaseTMVA::PDEFoamKernelBase::PDEFoamKernelBase(const TMVA::PDEFoamKernelBase&); TMVA::PDEFoamKernelLinNPDEFoamKernelLinN(); TMVA::PDEFoamKernelLinNPDEFoamKernelLinN(const TMVA::P",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelLinN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html
https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html:4881,Testability,Test,TestBit,4881,"e(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamKernelLinN&operator=(const TMVA::PDEFoamKernelLinN&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamKernelBaseTMVA::PDEFoamKernelBase::PDEFoamKernelBase(); TMVA::PDEFoamKernelBaseTMVA::PDEFoamKernelBase::PDEFoamKernelBase(const TMVA::PDEFoamKernelBase&); TMVA::PDEFoamKernelLinNPDEFoamKernelLinN(); TMVA::PDEFoamKernelLinNPDEFoamKernelLinN(const TMVA::PDEFoamKernelLinN&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelLinN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html
https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html:4920,Testability,Test,TestBits,4920,"e(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamKernelLinN&operator=(const TMVA::PDEFoamKernelLinN&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamKernelBaseTMVA::PDEFoamKernelBase::PDEFoamKernelBase(); TMVA::PDEFoamKernelBaseTMVA::PDEFoamKernelBase::PDEFoamKernelBase(const TMVA::PDEFoamKernelBase&); TMVA::PDEFoamKernelLinNPDEFoamKernelLinN(); TMVA::PDEFoamKernelLinNPDEFoamKernelLinN(const TMVA::PDEFoamKernelLinN&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelLinN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html
https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html:6377,Testability,log,logger,6377,"t; Float_tGetAverageNeighborsValue(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); voidTObject::MakeZombie(); Float_tWeightLinNeighbors(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue, Bool_t). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::MsgLogger*TMVA::PDEFoamKernelBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelLinN(); Default constructor for streamer. PDEFoamKernelLinN(const TMVA::PDEFoamKernelLinN& ); Copy constructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); Linear neighbors kernel estimator. It returns the cell value; 'cv', corresponding to the event vector 'txvec' (in foam; coordinates) linear weighted by the cell values of the neighbor; cells. Parameters:. - foam - the pdefoam to search in. - txvec - event vector in foam coordinates [0,1]. - cv - cell value to estimate. Float_t WeightLinNeighbors(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue , Bool_t ); Returns the cell value, corresponding to 'txvec' (foam; coordinates [0,1]), weighted by the neighbor cells via a linear; function. Parameters:; - foam - the foam to search in. - txvec - event vector, transformed into foam coordinates [0,1]. - cv - cell value to be",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelLinN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html
https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html:797,Usability,Clear,Clear,797," virtual~PDEFoamKernelLinN(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Float_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual co",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelLinN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelLinN.html
https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html:1352,Availability,Error,Error,1352," virtual~PDEFoamKernelTrivial(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Float_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnl",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelTrivial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html
https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html:1558,Availability,error,error,1558,"vial(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Float_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) con",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelTrivial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html
https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html:1642,Availability,error,error,1642,"AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Float_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelTrivial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html
https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html:6233,Integrability,message,message,6233,"onst char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::MsgLogger*TMVA::PDEFoamKernelBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelTrivial(); Default constructor for streamer. PDEFoamKernelTrivial(const TMVA::PDEFoamKernelTrivial& ); Copy constructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); Simple kernel estimator. It returns the cell value 'cv',; corresponding to the event vector 'txvec' (in foam coordinates). Parameters:. - foam - the pdefoam to search in. - txvec - event vector in foam coordinates [0,1]. - cv - cell value to estimate. virtual ~PDEFoamKernelTrivial(); {}. » Author: Dominik Dannheim, Alexander Voigt » Copyright (c) 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelTrivial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html
https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html:2522,Modifiability,Inherit,InheritsFrom,2522,"d, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoamKernelBase::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelTrivial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html
https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html:2588,Modifiability,Inherit,InheritsFrom,2588,"cute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoamKernelBase::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelTrivial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html
https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html:6263,Modifiability,Inherit,Inheritance,6263,"onst char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::MsgLogger*TMVA::PDEFoamKernelBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelTrivial(); Default constructor for streamer. PDEFoamKernelTrivial(const TMVA::PDEFoamKernelTrivial& ); Copy constructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); Simple kernel estimator. It returns the cell value 'cv',; corresponding to the event vector 'txvec' (in foam coordinates). Parameters:. - foam - the pdefoam to search in. - txvec - event vector in foam coordinates [0,1]. - cv - cell value to estimate. virtual ~PDEFoamKernelTrivial(); {}. » Author: Dominik Dannheim, Alexander Voigt » Copyright (c) 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelTrivial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html
https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html:6276,Modifiability,Inherit,Inherited,6276,"onst char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::MsgLogger*TMVA::PDEFoamKernelBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelTrivial(); Default constructor for streamer. PDEFoamKernelTrivial(const TMVA::PDEFoamKernelTrivial& ); Copy constructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); Simple kernel estimator. It returns the cell value 'cv',; corresponding to the event vector 'txvec' (in foam coordinates). Parameters:. - foam - the pdefoam to search in. - txvec - event vector in foam coordinates [0,1]. - cv - cell value to estimate. virtual ~PDEFoamKernelTrivial(); {}. » Author: Dominik Dannheim, Alexander Voigt » Copyright (c) 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelTrivial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html
https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html:2412,Security,Hash,Hash,2412,"loat_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoamKernelBase::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelTrivial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html
https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html:2980,Testability,Log,Log,2980,"TObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoamKernelBase::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamKernelTrivial&operator=(const TMVA::PDEFoamKernelTrivial&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamKernelBaseTMVA::PDEFoamKernelBase::PDEFoamKernelBase(); TMVA::PDEFoamKernelBaseTMVA::PDEFoamKernelBase::PDEFoamKernelBase(const TMVA::PDEFoamKernelBase&); TMVA::PDEFoamKernelTrivialPDEFoamKernelTrivial(); TMVA::PDEFoamKernelTrivialPDEFoamKernelTri",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelTrivial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html
https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html:4917,Testability,Test,TestBit,4917,"ject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamKernelTrivial&operator=(const TMVA::PDEFoamKernelTrivial&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamKernelBaseTMVA::PDEFoamKernelBase::PDEFoamKernelBase(); TMVA::PDEFoamKernelBaseTMVA::PDEFoamKernelBase::PDEFoamKernelBase(const TMVA::PDEFoamKernelBase&); TMVA::PDEFoamKernelTrivialPDEFoamKernelTrivial(); TMVA::PDEFoamKernelTrivialPDEFoamKernelTrivial(const TMVA::PDEFoamKernelTrivial&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelTrivial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html
https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html:4956,Testability,Test,TestBits,4956,"ject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamKernelTrivial&operator=(const TMVA::PDEFoamKernelTrivial&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamKernelBaseTMVA::PDEFoamKernelBase::PDEFoamKernelBase(); TMVA::PDEFoamKernelBaseTMVA::PDEFoamKernelBase::PDEFoamKernelBase(const TMVA::PDEFoamKernelBase&); TMVA::PDEFoamKernelTrivialPDEFoamKernelTrivial(); TMVA::PDEFoamKernelTrivialPDEFoamKernelTrivial(const TMVA::PDEFoamKernelTrivial&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelTrivial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html
https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html:6241,Testability,log,logger,6241,"onst char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::MsgLogger*TMVA::PDEFoamKernelBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelTrivial(); Default constructor for streamer. PDEFoamKernelTrivial(const TMVA::PDEFoamKernelTrivial& ); Copy constructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); Simple kernel estimator. It returns the cell value 'cv',; corresponding to the event vector 'txvec' (in foam coordinates). Parameters:. - foam - the pdefoam to search in. - txvec - event vector in foam coordinates [0,1]. - cv - cell value to estimate. virtual ~PDEFoamKernelTrivial(); {}. » Author: Dominik Dannheim, Alexander Voigt » Copyright (c) 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelTrivial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html
https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html:812,Usability,Clear,Clear,812," virtual~PDEFoamKernelTrivial(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Float_tEstimate(TMVA::PDEFoam*, vector<Float_t>&, TMVA::ECellValue); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnl",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelTrivial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html
https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html:6547,Usability,Simpl,Simple,6547,"onst char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::MsgLogger*TMVA::PDEFoamKernelBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamKernelTrivial(); Default constructor for streamer. PDEFoamKernelTrivial(const TMVA::PDEFoamKernelTrivial& ); Copy constructor. Float_t Estimate(TMVA::PDEFoam* , vector<Float_t>& , TMVA::ECellValue ); Simple kernel estimator. It returns the cell value 'cv',; corresponding to the event vector 'txvec' (in foam coordinates). Parameters:. - foam - the pdefoam to search in. - txvec - event vector in foam coordinates [0,1]. - cv - cell value to estimate. virtual ~PDEFoamKernelTrivial(); {}. » Author: Dominik Dannheim, Alexander Voigt » Copyright (c) 2010: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TMVA__PDEFoamKernelTrivial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamKernelTrivial.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:2369,Availability,Error,Error,2369,"MVA::PDEFoam::AddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidTMVA::PDEFoamEvent::FillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidTMVA::PDEFoam::Finalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>GetCellValue(const map<Int_t,Float_t>&, TMVA::ECellValue); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetN",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:2498,Availability,error,error,2498,"TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidTMVA::PDEFoamEvent::FillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidTMVA::PDEFoam::Finalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>GetCellValue(const map<Int_t,Float_t>&, TMVA::ECellValue); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::Ge",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:2582,Availability,error,error,2582,"st char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidTMVA::PDEFoamEvent::FillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidTMVA::PDEFoam::Finalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>GetCellValue(const map<Int_t,Float_t>&, TMVA::ECellValue); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::GetNInActiveCells() const; UInt_tTMVA::PDEFoam::GetNmin(); virtual char*TObject::GetOb",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:11693,Availability,Mask,Mask,11693,"Object::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 m",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:11009,Deployability,integrat,integration,11009,"; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell;",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:911,Integrability,depend,depending,911,". TMVA::PDEFoamMultiTarget. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::PDEFoamMultiTarget. class TMVA::PDEFoamMultiTarget: public TMVA::PDEFoamEvent. PDEFoamMultiTarget. This PDEFoam variant is used to estimate multiple targets by; creating an event density foam (PDEFoamEvent), which has dimension:. dimension = number of variables + number targets. This PDEFoam variant stores in every cell the sum of event weights; and the sum of the squared event weights. During evaluation for a; given event, which has only variables and no targets (number of; event variables is smaller than the foam dimension), the targets; are estimated by finding all cells, which correspond to this event; and calculate the Mean (or Mpv, depending on the ETargetSelection); cell center weighted by the event density in the cell. This PDEFoam variant should be booked together with the; PDEFoamEventDensity density estimator, which returns the event; weight density at a given phase space point during the foam; build-up. Function Members (Methods); public:. virtual~PDEFoamMultiTarget(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::PDEFoam::AddVariableName(const char* s); voidTMVA::PDEFoam::AddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPr",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:11009,Integrability,integrat,integration,11009,"; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell;",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:11631,Integrability,message,message,11631,"Object::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 m",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:517,Modifiability,variab,variables,517,". TMVA::PDEFoamMultiTarget. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::PDEFoamMultiTarget. class TMVA::PDEFoamMultiTarget: public TMVA::PDEFoamEvent. PDEFoamMultiTarget. This PDEFoam variant is used to estimate multiple targets by; creating an event density foam (PDEFoamEvent), which has dimension:. dimension = number of variables + number targets. This PDEFoam variant stores in every cell the sum of event weights; and the sum of the squared event weights. During evaluation for a; given event, which has only variables and no targets (number of; event variables is smaller than the foam dimension), the targets; are estimated by finding all cells, which correspond to this event; and calculate the Mean (or Mpv, depending on the ETargetSelection); cell center weighted by the event density in the cell. This PDEFoam variant should be booked together with the; PDEFoamEventDensity density estimator, which returns the event; weight density at a given phase space point during the foam; build-up. Function Members (Methods); public:. virtual~PDEFoamMultiTarget(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::PDEFoam::AddVariableName(const char* s); voidTMVA::PDEFoam::AddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPr",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:708,Modifiability,variab,variables,708,". TMVA::PDEFoamMultiTarget. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::PDEFoamMultiTarget. class TMVA::PDEFoamMultiTarget: public TMVA::PDEFoamEvent. PDEFoamMultiTarget. This PDEFoam variant is used to estimate multiple targets by; creating an event density foam (PDEFoamEvent), which has dimension:. dimension = number of variables + number targets. This PDEFoam variant stores in every cell the sum of event weights; and the sum of the squared event weights. During evaluation for a; given event, which has only variables and no targets (number of; event variables is smaller than the foam dimension), the targets; are estimated by finding all cells, which correspond to this event; and calculate the Mean (or Mpv, depending on the ETargetSelection); cell center weighted by the event density in the cell. This PDEFoam variant should be booked together with the; PDEFoamEventDensity density estimator, which returns the event; weight density at a given phase space point during the foam; build-up. Function Members (Methods); public:. virtual~PDEFoamMultiTarget(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::PDEFoam::AddVariableName(const char* s); voidTMVA::PDEFoam::AddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPr",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:751,Modifiability,variab,variables,751,". TMVA::PDEFoamMultiTarget. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::PDEFoamMultiTarget. class TMVA::PDEFoamMultiTarget: public TMVA::PDEFoamEvent. PDEFoamMultiTarget. This PDEFoam variant is used to estimate multiple targets by; creating an event density foam (PDEFoamEvent), which has dimension:. dimension = number of variables + number targets. This PDEFoam variant stores in every cell the sum of event weights; and the sum of the squared event weights. During evaluation for a; given event, which has only variables and no targets (number of; event variables is smaller than the foam dimension), the targets; are estimated by finding all cells, which correspond to this event; and calculate the Mean (or Mpv, depending on the ETargetSelection); cell center weighted by the event density in the cell. This PDEFoam variant should be booked together with the; PDEFoamEventDensity density estimator, which returns the event; weight density at a given phase space point during the foam; build-up. Function Members (Methods); public:. virtual~PDEFoamMultiTarget(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::PDEFoam::AddVariableName(const char* s); voidTMVA::PDEFoam::AddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPr",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:4227,Modifiability,Inherit,InheritsFrom,4227,"::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::GetNInActiveCells() const; UInt_tTMVA::PDEFoam::GetNmin(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*TMVA::PDEFoam::GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tTMVA::PDEFoam::GetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*TMVA::PDEFoam::GetVariableName(Int_t idx); Double_tTMVA::PDEFoam::GetXmax(Int_t idim) const; Double_tTMVA::PDEFoam::GetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::PDEFoam::Initialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoam::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); ",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:4293,Modifiability,Inherit,InheritsFrom,4293,"onst; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::GetNInActiveCells() const; UInt_tTMVA::PDEFoam::GetNmin(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*TMVA::PDEFoam::GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tTMVA::PDEFoam::GetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*TMVA::PDEFoam::GetVariableName(Int_t idx); Double_tTMVA::PDEFoam::GetXmax(Int_t idim) const; Double_tTMVA::PDEFoam::GetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::PDEFoam::Initialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoam::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator ne",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:11977,Modifiability,variab,variables,11977,"ITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::ETargetSelectionfTargetSelectionthe target selection method; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] ma",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:12757,Modifiability,variab,variable,12757," Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::ETargetSelectionfTargetSelectionthe target selection method; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamMultiTarget(); Default constructor for streamer, user should not use it. PDEFoamMultiTarget(const TString& , TMVA::ETargetSelection ); User constructor. Parameters:. - name - name of PDEFoam object. - ts - target selection method used in; GetCellValue(const std::map<Int_t, Float_t>& xvec, ECellValue); Cadidates are: TMVA::kMean, TMVA::kMpv. - TMVA::kMean - The function GetCellValue() finds all cells; which contain a given event vector 'xvec' and returns the; mean target (for every target variable in the foam). - TMVA::kMpv - The function GetCellValue() finds all cells; which contain a given event vector 'xvec' and returns the; most probable target (for ",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:12928,Modifiability,variab,variable,12928," Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::ETargetSelectionfTargetSelectionthe target selection method; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamMultiTarget(); Default constructor for streamer, user should not use it. PDEFoamMultiTarget(const TString& , TMVA::ETargetSelection ); User constructor. Parameters:. - name - name of PDEFoam object. - ts - target selection method used in; GetCellValue(const std::map<Int_t, Float_t>& xvec, ECellValue); Cadidates are: TMVA::kMean, TMVA::kMpv. - TMVA::kMean - The function GetCellValue() finds all cells; which contain a given event vector 'xvec' and returns the; mean target (for every target variable in the foam). - TMVA::kMpv - The function GetCellValue() finds all cells; which contain a given event vector 'xvec' and returns the; most probable target (for ",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:12996,Modifiability,variab,variable,12996," Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::ETargetSelectionfTargetSelectionthe target selection method; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamMultiTarget(); Default constructor for streamer, user should not use it. PDEFoamMultiTarget(const TString& , TMVA::ETargetSelection ); User constructor. Parameters:. - name - name of PDEFoam object. - ts - target selection method used in; GetCellValue(const std::map<Int_t, Float_t>& xvec, ECellValue); Cadidates are: TMVA::kMean, TMVA::kMpv. - TMVA::kMean - The function GetCellValue() finds all cells; which contain a given event vector 'xvec' and returns the; mean target (for every target variable in the foam). - TMVA::kMpv - The function GetCellValue() finds all cells; which contain a given event vector 'xvec' and returns the; most probable target (for ",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:13030,Modifiability,Inherit,Inheritance,13030,"iding (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::ETargetSelectionfTargetSelectionthe target selection method; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamMultiTarget(); Default constructor for streamer, user should not use it. PDEFoamMultiTarget(const TString& , TMVA::ETargetSelection ); User constructor. Parameters:. - name - name of PDEFoam object. - ts - target selection method used in; GetCellValue(const std::map<Int_t, Float_t>& xvec, ECellValue); Cadidates are: TMVA::kMean, TMVA::kMpv. - TMVA::kMean - The function GetCellValue() finds all cells; which contain a given event vector 'xvec' and returns the; mean target (for every target variable in the foam). - TMVA::kMpv - The function GetCellValue() finds all cells; which contain a given event vector 'xvec' and returns the; most probable target (for every target variable in the; foam), that is the target value which corresponds to the; cell with the largest event density. PDEFoamMultiTarget(const TMVA::PDEFoamMultiTarget& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). std::vector<Float_t> GetCellValue(const map<Int_t,Float",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:13043,Modifiability,Inherit,Inherited,13043,"iding (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::ETargetSelectionfTargetSelectionthe target selection method; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamMultiTarget(); Default constructor for streamer, user should not use it. PDEFoamMultiTarget(const TString& , TMVA::ETargetSelection ); User constructor. Parameters:. - name - name of PDEFoam object. - ts - target selection method used in; GetCellValue(const std::map<Int_t, Float_t>& xvec, ECellValue); Cadidates are: TMVA::kMean, TMVA::kMpv. - TMVA::kMean - The function GetCellValue() finds all cells; which contain a given event vector 'xvec' and returns the; mean target (for every target variable in the foam). - TMVA::kMpv - The function GetCellValue() finds all cells; which contain a given event vector 'xvec' and returns the; most probable target (for every target variable in the; foam), that is the target value which corresponds to the; cell with the largest event density. PDEFoamMultiTarget(const TMVA::PDEFoamMultiTarget& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). std::vector<Float_t> GetCellValue(const map<Int_t,Float",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:13607,Modifiability,variab,variable,13607,"or fDim+1 maximum elements; TMVA::ETargetSelectionfTargetSelectionthe target selection method; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamMultiTarget(); Default constructor for streamer, user should not use it. PDEFoamMultiTarget(const TString& , TMVA::ETargetSelection ); User constructor. Parameters:. - name - name of PDEFoam object. - ts - target selection method used in; GetCellValue(const std::map<Int_t, Float_t>& xvec, ECellValue); Cadidates are: TMVA::kMean, TMVA::kMpv. - TMVA::kMean - The function GetCellValue() finds all cells; which contain a given event vector 'xvec' and returns the; mean target (for every target variable in the foam). - TMVA::kMpv - The function GetCellValue() finds all cells; which contain a given event vector 'xvec' and returns the; most probable target (for every target variable in the; foam), that is the target value which corresponds to the; cell with the largest event density. PDEFoamMultiTarget(const TMVA::PDEFoamMultiTarget& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). std::vector<Float_t> GetCellValue(const map<Int_t,Float_t>& , TMVA::ECellValue ); This function is overridden from PDFEFoam. It returns all; regression targets (in order), given an untransformed event; vector 'xvec'. The key of 'xvec' is the dimension and the value; (Float_t) is the coordinate. Note: number of foam dimensions = number of variables + number; of targets. Parameters:; - xvec - map of event variables (no targets!); - cv - cell value to return (ignored!). Return:; Targets, ordered by missing dimensions in 'xvec'.; The size o",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:13788,Modifiability,variab,variable,13788,"e names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamMultiTarget(); Default constructor for streamer, user should not use it. PDEFoamMultiTarget(const TString& , TMVA::ETargetSelection ); User constructor. Parameters:. - name - name of PDEFoam object. - ts - target selection method used in; GetCellValue(const std::map<Int_t, Float_t>& xvec, ECellValue); Cadidates are: TMVA::kMean, TMVA::kMpv. - TMVA::kMean - The function GetCellValue() finds all cells; which contain a given event vector 'xvec' and returns the; mean target (for every target variable in the foam). - TMVA::kMpv - The function GetCellValue() finds all cells; which contain a given event vector 'xvec' and returns the; most probable target (for every target variable in the; foam), that is the target value which corresponds to the; cell with the largest event density. PDEFoamMultiTarget(const TMVA::PDEFoamMultiTarget& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). std::vector<Float_t> GetCellValue(const map<Int_t,Float_t>& , TMVA::ECellValue ); This function is overridden from PDFEFoam. It returns all; regression targets (in order), given an untransformed event; vector 'xvec'. The key of 'xvec' is the dimension and the value; (Float_t) is the coordinate. Note: number of foam dimensions = number of variables + number; of targets. Parameters:; - xvec - map of event variables (no targets!); - cv - cell value to return (ignored!). Return:; Targets, ordered by missing dimensions in 'xvec'.; The size of the returned vector = foam dimension - size of xvec. void CalculateMpv(map<Int_t,Float_t>& , const vector<TMVA::PDEFoamCell*>& ); This function calculates the most probable target value from a; given number of cells. Th",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:14341,Modifiability,variab,variables,14341,"on method used in; GetCellValue(const std::map<Int_t, Float_t>& xvec, ECellValue); Cadidates are: TMVA::kMean, TMVA::kMpv. - TMVA::kMean - The function GetCellValue() finds all cells; which contain a given event vector 'xvec' and returns the; mean target (for every target variable in the foam). - TMVA::kMpv - The function GetCellValue() finds all cells; which contain a given event vector 'xvec' and returns the; most probable target (for every target variable in the; foam), that is the target value which corresponds to the; cell with the largest event density. PDEFoamMultiTarget(const TMVA::PDEFoamMultiTarget& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). std::vector<Float_t> GetCellValue(const map<Int_t,Float_t>& , TMVA::ECellValue ); This function is overridden from PDFEFoam. It returns all; regression targets (in order), given an untransformed event; vector 'xvec'. The key of 'xvec' is the dimension and the value; (Float_t) is the coordinate. Note: number of foam dimensions = number of variables + number; of targets. Parameters:; - xvec - map of event variables (no targets!); - cv - cell value to return (ignored!). Return:; Targets, ordered by missing dimensions in 'xvec'.; The size of the returned vector = foam dimension - size of xvec. void CalculateMpv(map<Int_t,Float_t>& , const vector<TMVA::PDEFoamCell*>& ); This function calculates the most probable target value from a; given number of cells. The most probable target is defined to; be the coordinates of the cell which has the biggest event; density. Parameters:. - target - map of targets, where the key is the dimension and; the value is the target value. It is assumed that this map is; initialized such that there is a map entry for every target. - cells - vector of PDEFoam cells to pick the most probable; target from. void CalculateMean(map<Int_t,Float_t>& , const vector<TMVA::PDEFoamCell*>& ); This function calculates the mean target value from a given; number of cells. As weight the event density of th",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:14408,Modifiability,variab,variables,14408,"ates are: TMVA::kMean, TMVA::kMpv. - TMVA::kMean - The function GetCellValue() finds all cells; which contain a given event vector 'xvec' and returns the; mean target (for every target variable in the foam). - TMVA::kMpv - The function GetCellValue() finds all cells; which contain a given event vector 'xvec' and returns the; most probable target (for every target variable in the; foam), that is the target value which corresponds to the; cell with the largest event density. PDEFoamMultiTarget(const TMVA::PDEFoamMultiTarget& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). std::vector<Float_t> GetCellValue(const map<Int_t,Float_t>& , TMVA::ECellValue ); This function is overridden from PDFEFoam. It returns all; regression targets (in order), given an untransformed event; vector 'xvec'. The key of 'xvec' is the dimension and the value; (Float_t) is the coordinate. Note: number of foam dimensions = number of variables + number; of targets. Parameters:; - xvec - map of event variables (no targets!); - cv - cell value to return (ignored!). Return:; Targets, ordered by missing dimensions in 'xvec'.; The size of the returned vector = foam dimension - size of xvec. void CalculateMpv(map<Int_t,Float_t>& , const vector<TMVA::PDEFoamCell*>& ); This function calculates the most probable target value from a; given number of cells. The most probable target is defined to; be the coordinates of the cell which has the biggest event; density. Parameters:. - target - map of targets, where the key is the dimension and; the value is the target value. It is assumed that this map is; initialized such that there is a map entry for every target. - cells - vector of PDEFoam cells to pick the most probable; target from. void CalculateMean(map<Int_t,Float_t>& , const vector<TMVA::PDEFoamCell*>& ); This function calculates the mean target value from a given; number of cells. As weight the event density of the cell is; used. Parameters:. - target - map of targets, where the key is the dimension ",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:4117,Security,Hash,Hash,4117,"Value); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::GetNInActiveCells() const; UInt_tTMVA::PDEFoam::GetNmin(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*TMVA::PDEFoam::GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tTMVA::PDEFoam::GetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*TMVA::PDEFoam::GetVariableName(Int_t idx); Double_tTMVA::PDEFoam::GetXmax(Int_t idim) const; Double_tTMVA::PDEFoam::GetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::PDEFoam::Initialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoam::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delet",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:4708,Testability,Log,Log,4708,":PDEFoamCell*TMVA::PDEFoam::GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tTMVA::PDEFoam::GetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*TMVA::PDEFoam::GetVariableName(Int_t idx); Double_tTMVA::PDEFoam::GetXmax(Int_t idim) const; Double_tTMVA::PDEFoam::GetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::PDEFoam::Initialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoam::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamMultiTarget&operator=(const TMVA::PDEFoamMultiTarget&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamTMVA::PDEFoam::PDEFoam(); TMVA::PDEFoamTMVA::PDEFoam::PDEFoam(const TString&); TMVA::PDEFoamEventTMVA::PDEFoamEvent::PDEFoamEvent(); TMVA::PDEFoamEventTMVA::PDEFoamEvent::PDEFoamEvent(const TString&); TMVA::PDEFoamMultiTargetPDEFoamMultiTarget(); TMVA",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:7614,Testability,Test,TestBit,7614,"Elements(); voidTMVA::PDEFoam::RootPlot2dim(const TString& filename, TString opt, Bool_t createCanvas = kTRUE, Bool_t colors = kTRUE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoam::SetDensity(TMVA::PDEFoamDensityBase* dens); voidTMVA::PDEFoam::SetDim(Int_t kDim); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::PDEFoam::SetEvPerBin(Int_t EvPerBin); voidTMVA::PDEFoam::SetInhiDiv(Int_t, Int_t); voidTMVA::PDEFoam::SetMaxDepth(UInt_t maxdepth); voidTMVA::PDEFoam::SetnBin(Int_t nBin); voidTMVA::PDEFoam::SetnCells(Long_t nCells); voidTMVA::PDEFoam::SetNmin(UInt_t val); voidTMVA::PDEFoam::SetnSampl(Long_t nSampl); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::PDEFoam::SetXmax(Int_t idim, Double_t wmax); voidTMVA::PDEFoam::SetXmin(Int_t idim, Double_t wmin); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); vector<Float_t>TMVA::PDEFoam::VarTransform(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransform(Int_t idim, Float_t x) const; vector<Float_t>TMVA::PDEFoam::VarTransformInvers(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransformInvers(Int_t idim, Float_t x) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:7653,Testability,Test,TestBits,7653,"Elements(); voidTMVA::PDEFoam::RootPlot2dim(const TString& filename, TString opt, Bool_t createCanvas = kTRUE, Bool_t colors = kTRUE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoam::SetDensity(TMVA::PDEFoamDensityBase* dens); voidTMVA::PDEFoam::SetDim(Int_t kDim); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::PDEFoam::SetEvPerBin(Int_t EvPerBin); voidTMVA::PDEFoam::SetInhiDiv(Int_t, Int_t); voidTMVA::PDEFoam::SetMaxDepth(UInt_t maxdepth); voidTMVA::PDEFoam::SetnBin(Int_t nBin); voidTMVA::PDEFoam::SetnCells(Long_t nCells); voidTMVA::PDEFoam::SetNmin(UInt_t val); voidTMVA::PDEFoam::SetnSampl(Long_t nSampl); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::PDEFoam::SetXmax(Int_t idim, Double_t wmax); voidTMVA::PDEFoam::SetXmin(Int_t idim, Double_t wmin); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); vector<Float_t>TMVA::PDEFoam::VarTransform(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransform(Int_t idim, Float_t x) const; vector<Float_t>TMVA::PDEFoam::VarTransformInvers(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransformInvers(Int_t idim, Float_t x) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:10961,Testability,log,logic,10961,"; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell;",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:11639,Testability,log,logger,11639,"Object::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 m",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html:1642,Usability,Clear,Clear,1642," virtual~PDEFoamMultiTarget(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::PDEFoam::AddVariableName(const char* s); voidTMVA::PDEFoam::AddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPr",MatchSource.WIKI,root/html604/TMVA__PDEFoamMultiTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamMultiTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:458,Availability,error,error,458,". TMVA::PDEFoamTarget. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::PDEFoamTarget. class TMVA::PDEFoamTarget: public TMVA::PDEFoam. PDEFoamTarget. This PDEFoam variant stores in every cell the average target; fTarget (see the Constructor) as well as the statistical error on; the target fTarget. It therefore acts as a target estimator. It; should be booked together with the PDEFoamTargetDensity density; estimator, which returns the target fTarget density at a given; phase space point during the foam build-up. Function Members (Methods); public:. virtual~PDEFoamTarget(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::PDEFoam::AddVariableName(const char* s); voidTMVA::PDEFoam::AddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:1876,Availability,Error,Error,1876,"MVA::PDEFoam::AddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidFillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidFinalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tGetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells(",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:2005,Availability,error,error,2005,"TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidFillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidFinalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tGetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::GetNInActiveCe",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:2089,Availability,error,error,2089,"st char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidFillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidFinalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tGetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::GetNInActiveCells() const; UInt_tTMVA::PDEFoam::GetNmin(); virtual char*TObject::GetObjectInfo(Int",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:10820,Availability,Mask,Mask,10820,"Object::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 m",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:12946,Availability,error,error,12946,"CKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamTarget(); Default constructor for streamer, user should not use it. PDEFoamTarget(const TString& , UInt_t ); User constructor. Parameters:. - name - name of PDEFoam object. - target - target number to range-search for. PDEFoamTarget(const TMVA::PDEFoamTarget& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event into the discriminant PDEFoam. The; weight 'wt' is filled into cell element 0 if the event is of; class 'fTarget', and filled into cell element 1 otherwise. void Finalize(); Calculate average cell target in every cell and save them to the; cell. Cell element 0 will contain the average target and cell; element 1 will contain the error on the target. Bool_t CellValueIsUndefined(TMVA::PDEFoamCell* cell); Returns true, if the target error equals -1, as set in; Finalize() in case of no events in the cell. Float_t GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase* ); This function finds the cell, which corresponds to the given; untransformed event vector 'xvec' and return its value, which is; given by the parameter 'cv'. If cv == kValue, it is checked wether the cell value is; undefined. If this is the case, then the mean of the neighbor's; target values is returned, using GetAverageNeighborsValue(). Float_t GetAverageNeighborsValue(vector<Float_t>& , TMVA::ECellValue ); This function returns the average value 'cv' of only nearest; neighbor cells. It is used in cases, where empty cells shall; not be evaluated. Parameters:; - txvec - event vector, transformed into foam coordinates [0, 1]; - cv - cell value, see definition of ECellValue. virtual ~PD",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:13049,Availability,error,error,13049,"e transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamTarget(); Default constructor for streamer, user should not use it. PDEFoamTarget(const TString& , UInt_t ); User constructor. Parameters:. - name - name of PDEFoam object. - target - target number to range-search for. PDEFoamTarget(const TMVA::PDEFoamTarget& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event into the discriminant PDEFoam. The; weight 'wt' is filled into cell element 0 if the event is of; class 'fTarget', and filled into cell element 1 otherwise. void Finalize(); Calculate average cell target in every cell and save them to the; cell. Cell element 0 will contain the average target and cell; element 1 will contain the error on the target. Bool_t CellValueIsUndefined(TMVA::PDEFoamCell* cell); Returns true, if the target error equals -1, as set in; Finalize() in case of no events in the cell. Float_t GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase* ); This function finds the cell, which corresponds to the given; untransformed event vector 'xvec' and return its value, which is; given by the parameter 'cv'. If cv == kValue, it is checked wether the cell value is; undefined. If this is the case, then the mean of the neighbor's; target values is returned, using GetAverageNeighborsValue(). Float_t GetAverageNeighborsValue(vector<Float_t>& , TMVA::ECellValue ); This function returns the average value 'cv' of only nearest; neighbor cells. It is used in cases, where empty cells shall; not be evaluated. Parameters:; - txvec - event vector, transformed into foam coordinates [0, 1]; - cv - cell value, see definition of ECellValue. virtual ~PDEFoamTarget(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:10136,Deployability,integrat,integration,10136,"; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell;",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:10136,Integrability,integrat,integration,10136,"; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell;",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:10758,Integrability,message,message,10758,"Object::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 m",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:3722,Modifiability,Inherit,InheritsFrom,3722,"::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::GetNInActiveCells() const; UInt_tTMVA::PDEFoam::GetNmin(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*TMVA::PDEFoam::GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tTMVA::PDEFoam::GetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*TMVA::PDEFoam::GetVariableName(Int_t idx); Double_tTMVA::PDEFoam::GetXmax(Int_t idim) const; Double_tTMVA::PDEFoam::GetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::PDEFoam::Initialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoam::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); ",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:3788,Modifiability,Inherit,InheritsFrom,3788,"onst; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::GetNInActiveCells() const; UInt_tTMVA::PDEFoam::GetNmin(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*TMVA::PDEFoam::GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tTMVA::PDEFoam::GetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*TMVA::PDEFoam::GetVariableName(Int_t idx); Double_tTMVA::PDEFoam::GetXmax(Int_t idim) const; Double_tTMVA::PDEFoam::GetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::PDEFoam::Initialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoam::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator ne",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:11104,Modifiability,variab,variables,11104,"ITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; UInt_tfTargetthe target to fill the cells with; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable ",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:11865,Modifiability,variab,variable,11865,"ell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; UInt_tfTargetthe target to fill the cells with; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamTarget(); Default constructor for streamer, user should not use it. PDEFoamTarget(const TString& , UInt_t ); User constructor. Parameters:. - name - name of PDEFoam object. - target - target number to range-search for. PDEFoamTarget(const TMVA::PDEFoamTarget& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event into the discriminant PDEFoam. The; weight 'wt' is filled into cell element 0 if the event is of; class 'fTarget', and filled into cell element 1 otherwise. void Finalize(); Calculate average cell target in every cell and save them to the; cell. Cell element 0 will contain th",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:12036,Modifiability,variab,variable,12036,"ell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; UInt_tfTargetthe target to fill the cells with; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamTarget(); Default constructor for streamer, user should not use it. PDEFoamTarget(const TString& , UInt_t ); User constructor. Parameters:. - name - name of PDEFoam object. - target - target number to range-search for. PDEFoamTarget(const TMVA::PDEFoamTarget& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event into the discriminant PDEFoam. The; weight 'wt' is filled into cell element 0 if the event is of; class 'fTarget', and filled into cell element 1 otherwise. void Finalize(); Calculate average cell target in every cell and save them to the; cell. Cell element 0 will contain th",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:12104,Modifiability,variab,variable,12104,"ell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; UInt_tfTargetthe target to fill the cells with; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamTarget(); Default constructor for streamer, user should not use it. PDEFoamTarget(const TString& , UInt_t ); User constructor. Parameters:. - name - name of PDEFoam object. - target - target number to range-search for. PDEFoamTarget(const TMVA::PDEFoamTarget& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event into the discriminant PDEFoam. The; weight 'wt' is filled into cell element 0 if the event is of; class 'fTarget', and filled into cell element 1 otherwise. void Finalize(); Calculate average cell target in every cell and save them to the; cell. Cell element 0 will contain th",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:12138,Modifiability,Inherit,Inheritance,12138,"MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; UInt_tfTargetthe target to fill the cells with; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamTarget(); Default constructor for streamer, user should not use it. PDEFoamTarget(const TString& , UInt_t ); User constructor. Parameters:. - name - name of PDEFoam object. - target - target number to range-search for. PDEFoamTarget(const TMVA::PDEFoamTarget& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event into the discriminant PDEFoam. The; weight 'wt' is filled into cell element 0 if the event is of; class 'fTarget', and filled into cell element 1 otherwise. void Finalize(); Calculate average cell target in every cell and save them to the; cell. Cell element 0 will contain the average target and cell; element 1 will contain the error on the target. Bool_t CellValueIsUndefined(TMVA::PDEFoamCell* cell); Returns true, if the target error equals -1, as set in; Finalize() in case of no events in the cell. Float_t GetCellValue(const vector<Float_t>",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:12151,Modifiability,Inherit,Inherited,12151,"MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; UInt_tfTargetthe target to fill the cells with; TMVA::Timer*TMVA::PDEFoam::fTimer! timer for graphical output; TObjArray*TMVA::PDEFoam::fVariableNamescollection of all variable names; Float_tTMVA::PDEFoam::fVolFracBACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space; Double_t*TMVA::PDEFoam::fXmax[fDim] maximum for variable transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamTarget(); Default constructor for streamer, user should not use it. PDEFoamTarget(const TString& , UInt_t ); User constructor. Parameters:. - name - name of PDEFoam object. - target - target number to range-search for. PDEFoamTarget(const TMVA::PDEFoamTarget& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event into the discriminant PDEFoam. The; weight 'wt' is filled into cell element 0 if the event is of; class 'fTarget', and filled into cell element 1 otherwise. void Finalize(); Calculate average cell target in every cell and save them to the; cell. Cell element 0 will contain the average target and cell; element 1 will contain the error on the target. Bool_t CellValueIsUndefined(TMVA::PDEFoamCell* cell); Returns true, if the target error equals -1, as set in; Finalize() in case of no events in the cell. Float_t GetCellValue(const vector<Float_t>",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:3612,Security,Hash,Hash,3612,"Base*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::GetNInActiveCells() const; UInt_tTMVA::PDEFoam::GetNmin(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*TMVA::PDEFoam::GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tTMVA::PDEFoam::GetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*TMVA::PDEFoam::GetVariableName(Int_t idx); Double_tTMVA::PDEFoam::GetXmax(Int_t idim) const; Double_tTMVA::PDEFoam::GetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::PDEFoam::Initialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoam::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delet",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:4203,Testability,Log,Log,4203,":PDEFoamCell*TMVA::PDEFoam::GetRootCell() const; virtual const char*TObject::GetTitle() const; Int_tTMVA::PDEFoam::GetTotDim() const; virtual UInt_tTObject::GetUniqueID() const; TObjString*TMVA::PDEFoam::GetVariableName(Int_t idx); Double_tTMVA::PDEFoam::GetXmax(Int_t idim) const; Double_tTMVA::PDEFoam::GetXmin(Int_t idim) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidTMVA::PDEFoam::Initialize(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; TMVA::MsgLogger&TMVA::PDEFoam::Log() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamTarget&operator=(const TMVA::PDEFoamTarget&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamTMVA::PDEFoam::PDEFoam(); TMVA::PDEFoamTMVA::PDEFoam::PDEFoam(const TString&); TMVA::PDEFoamTargetPDEFoamTarget(); TMVA::PDEFoamTargetPDEFoamTarget(const TString&, UInt_t); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voi",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:6941,Testability,Test,TestBit,6941,"Elements(); voidTMVA::PDEFoam::RootPlot2dim(const TString& filename, TString opt, Bool_t createCanvas = kTRUE, Bool_t colors = kTRUE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoam::SetDensity(TMVA::PDEFoamDensityBase* dens); voidTMVA::PDEFoam::SetDim(Int_t kDim); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::PDEFoam::SetEvPerBin(Int_t EvPerBin); voidTMVA::PDEFoam::SetInhiDiv(Int_t, Int_t); voidTMVA::PDEFoam::SetMaxDepth(UInt_t maxdepth); voidTMVA::PDEFoam::SetnBin(Int_t nBin); voidTMVA::PDEFoam::SetnCells(Long_t nCells); voidTMVA::PDEFoam::SetNmin(UInt_t val); voidTMVA::PDEFoam::SetnSampl(Long_t nSampl); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::PDEFoam::SetXmax(Int_t idim, Double_t wmax); voidTMVA::PDEFoam::SetXmin(Int_t idim, Double_t wmin); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); vector<Float_t>TMVA::PDEFoam::VarTransform(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransform(Int_t idim, Float_t x) const; vector<Float_t>TMVA::PDEFoam::VarTransformInvers(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransformInvers(Int_t idim, Float_t x) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:6980,Testability,Test,TestBits,6980,"Elements(); voidTMVA::PDEFoam::RootPlot2dim(const TString& filename, TString opt, Bool_t createCanvas = kTRUE, Bool_t colors = kTRUE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoam::SetDensity(TMVA::PDEFoamDensityBase* dens); voidTMVA::PDEFoam::SetDim(Int_t kDim); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::PDEFoam::SetEvPerBin(Int_t EvPerBin); voidTMVA::PDEFoam::SetInhiDiv(Int_t, Int_t); voidTMVA::PDEFoam::SetMaxDepth(UInt_t maxdepth); voidTMVA::PDEFoam::SetnBin(Int_t nBin); voidTMVA::PDEFoam::SetnCells(Long_t nCells); voidTMVA::PDEFoam::SetNmin(UInt_t val); voidTMVA::PDEFoam::SetnSampl(Long_t nSampl); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::PDEFoam::SetXmax(Int_t idim, Double_t wmax); voidTMVA::PDEFoam::SetXmin(Int_t idim, Double_t wmin); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); vector<Float_t>TMVA::PDEFoam::VarTransform(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransform(Int_t idim, Float_t x) const; vector<Float_t>TMVA::PDEFoam::VarTransformInvers(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransformInvers(Int_t idim, Float_t x) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:10088,Testability,log,logic,10088,"; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell;",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:10766,Testability,log,logger,10766,"Object::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 m",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTarget.html:1149,Usability,Clear,Clear,1149," virtual~PDEFoamTarget(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::PDEFoam::AddVariableName(const char* s); voidTMVA::PDEFoam::AddVariableName(TObjString* s); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int",MatchSource.WIKI,root/html604/TMVA__PDEFoamTarget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTarget.html
https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html:1471,Availability,Error,Error,1471," virtual~PDEFoamTargetDensity(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(vector<Double_t>& Xarg, Double_t& event_density); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::Fi",MatchSource.WIKI,root/html604/TMVA__PDEFoamTargetDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html
https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html:1600,Availability,error,error,1600,"Density(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(vector<Double_t>& Xarg, Double_t& event_density); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&TMVA::PDEFoamDensityBase::GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() co",MatchSource.WIKI,root/html604/TMVA__PDEFoamTargetDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html
https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html:1684,Availability,error,error,1684,"t::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(vector<Double_t>& Xarg, Double_t& event_density); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&TMVA::PDEFoamDensityBase::GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtua",MatchSource.WIKI,root/html604/TMVA__PDEFoamTargetDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html
https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html:6808,Integrability,message,message,6808,"_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger; UInt_tfTargetthe target to calculate the density for. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamTargetDensity(); {}. PDEFoamTargetDensity(vector<Double_t> box, UInt_t target); User construcor. Parameters:. - box - size of the range-searching box (n-dimensional; std::vector). - target - the target number to calculate the density for. PDEFoamTargetDensity(const TMVA::PDEFoamTargetDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is needed during the foam buildup. It returns the; average target value within the range-searching box at point; xev, divided by volume (specified by fBox). Parameters:. - xev - event vector (in [fXmin,fXmax]) to place the box at. - event_density - here the event density is stored. Returns:. Average target value in the range-searching volume at point; 'xev', divided by the box volume. virtual ",MatchSource.WIKI,root/html604/TMVA__PDEFoamTargetDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html
https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html:2704,Modifiability,Inherit,InheritsFrom,2704,"bject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&TMVA::PDEFoamDensityBase::GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TMVA__PDEFoamTargetDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html
https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html:2770,Modifiability,Inherit,InheritsFrom,2770,"TObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&TMVA::PDEFoamDensityBase::GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamTargetDensity&operator=(const TMVA::PD",MatchSource.WIKI,root/html604/TMVA__PDEFoamTargetDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html
https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html:6892,Modifiability,Inherit,Inheritance,6892,"static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger; UInt_tfTargetthe target to calculate the density for. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamTargetDensity(); {}. PDEFoamTargetDensity(vector<Double_t> box, UInt_t target); User construcor. Parameters:. - box - size of the range-searching box (n-dimensional; std::vector). - target - the target number to calculate the density for. PDEFoamTargetDensity(const TMVA::PDEFoamTargetDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is needed during the foam buildup. It returns the; average target value within the range-searching box at point; xev, divided by volume (specified by fBox). Parameters:. - xev - event vector (in [fXmin,fXmax]) to place the box at. - event_density - here the event density is stored. Returns:. Average target value in the range-searching volume at point; 'xev', divided by the box volume. virtual ~PDEFoamTargetDensity(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $Id$",MatchSource.WIKI,root/html604/TMVA__PDEFoamTargetDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html
https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html:6905,Modifiability,Inherit,Inherited,6905,"static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger; UInt_tfTargetthe target to calculate the density for. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamTargetDensity(); {}. PDEFoamTargetDensity(vector<Double_t> box, UInt_t target); User construcor. Parameters:. - box - size of the range-searching box (n-dimensional; std::vector). - target - the target number to calculate the density for. PDEFoamTargetDensity(const TMVA::PDEFoamTargetDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is needed during the foam buildup. It returns the; average target value within the range-searching box at point; xev, divided by volume (specified by fBox). Parameters:. - xev - event vector (in [fXmin,fXmax]) to place the box at. - event_density - here the event density is stored. Returns:. Average target value in the range-searching volume at point; 'xev', divided by the box volume. virtual ~PDEFoamTargetDensity(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root/tmva $Id$",MatchSource.WIKI,root/html604/TMVA__PDEFoamTargetDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html
https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html:2594,Security,Hash,Hash,2594,"_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const vector<Double_t>&TMVA::PDEFoamDensityBase::GetBox() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html604/TMVA__PDEFoamTargetDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html
https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html:5289,Testability,Test,TestBit,5289,"erator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamTargetDensity&operator=(const TMVA::PDEFoamTargetDensity&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(vector<Double_t> box); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(const TMVA::PDEFoamDensityBase&); TMVA::PDEFoamTargetDensityPDEFoamTargetDensity(); TMVA::PDEFoamTargetDensityPDEFoamTargetDensity(const TMVA::PDEFoamTargetDensity&); TMVA::PDEFoamTargetDensityPDEFoamTargetDensity(vector<Double_t> box, UInt_t target); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoamDensityBase::SetBox(vector<Double_t> box); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamTargetDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html
https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html:5328,Testability,Test,TestBits,5328,"erator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamTargetDensity&operator=(const TMVA::PDEFoamTargetDensity&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(vector<Double_t> box); TMVA::PDEFoamDensityBaseTMVA::PDEFoamDensityBase::PDEFoamDensityBase(const TMVA::PDEFoamDensityBase&); TMVA::PDEFoamTargetDensityPDEFoamTargetDensity(); TMVA::PDEFoamTargetDensityPDEFoamTargetDensity(const TMVA::PDEFoamTargetDensity&); TMVA::PDEFoamTargetDensityPDEFoamTargetDensity(vector<Double_t> box, UInt_t target); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoamDensityBase::SetBox(vector<Double_t> box); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamTargetDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html
https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html:5854,Testability,Log,Log,5854,"l_t set); voidTMVA::PDEFoamDensityBase::SetBox(vector<Double_t> box); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; TMVA::MsgLogger*TMVA:",MatchSource.WIKI,root/html604/TMVA__PDEFoamTargetDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html
https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html:6816,Testability,log,logger,6816,"_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger; UInt_tfTargetthe target to calculate the density for. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamTargetDensity(); {}. PDEFoamTargetDensity(vector<Double_t> box, UInt_t target); User construcor. Parameters:. - box - size of the range-searching box (n-dimensional; std::vector). - target - the target number to calculate the density for. PDEFoamTargetDensity(const TMVA::PDEFoamTargetDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is needed during the foam buildup. It returns the; average target value within the range-searching box at point; xev, divided by volume (specified by fBox). Parameters:. - xev - event vector (in [fXmin,fXmax]) to place the box at. - event_density - here the event density is stored. Returns:. Average target value in the range-searching volume at point; 'xev', divided by the box volume. virtual ",MatchSource.WIKI,root/html604/TMVA__PDEFoamTargetDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html
https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html:857,Usability,Clear,Clear,857," virtual~PDEFoamTargetDensity(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDensity(vector<Double_t>& Xarg, Double_t& event_density); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoamDensityBase::FillBinarySearchTree(const TMVA::Event* ev); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::Fi",MatchSource.WIKI,root/html604/TMVA__PDEFoamTargetDensity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamTargetDensity.html
https://root.cern/root/html604/TMVA__PDEFoamVect.html:1155,Availability,Error,Error,1155," virtual~PDEFoamVect(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetCoord(Int_t i) const; Int_tGetDim() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TO",MatchSource.WIKI,root/html604/TMVA__PDEFoamVect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamVect.html
https://root.cern/root/html604/TMVA__PDEFoamVect.html:1284,Availability,error,error,1284," virtual~PDEFoamVect(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetCoord(Int_t i) const; Int_tGetDim() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TO",MatchSource.WIKI,root/html604/TMVA__PDEFoamVect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamVect.html
https://root.cern/root/html604/TMVA__PDEFoamVect.html:1368,Availability,error,error,1368," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetCoord(Int_t i) const; Int_tGetDim() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::Inh",MatchSource.WIKI,root/html604/TMVA__PDEFoamVect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamVect.html
https://root.cern/root/html604/TMVA__PDEFoamVect.html:2302,Modifiability,Inherit,InheritsFrom,2302,"TObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetCoord(Int_t i) const; Int_tGetDim() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TMVA__PDEFoamVect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamVect.html
https://root.cern/root/html604/TMVA__PDEFoamVect.html:2368,Modifiability,Inherit,InheritsFrom,2368,"= 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetCoord(Int_t i) const; Int_tGetDim() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamVect&operator*=(const Double_t&); TMVA",MatchSource.WIKI,root/html604/TMVA__PDEFoamVect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamVect.html
https://root.cern/root/html604/TMVA__PDEFoamVect.html:6144,Modifiability,Inherit,Inheritance,6144,"st. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Double_t*fCoords[fDim] Coordinates; Int_tfDimDimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamVect(); Default constructor for streamer. PDEFoamVect(Int_t ); User constructor creating n-dimensional vector; and allocating dynamically array of components. PDEFoamVect(const TMVA::PDEFoamVect& ); Copy constructor. ~PDEFoamVect(); Destructor. Double_t & operator[](Int_t ); [] is for access to elements as in ordinary matrix like a[j]=b[j]; (Perhaps against some strict rules but rather practical.); Range protection is built in, consequently for substitution; one should use rather use a=b than explicit loop!. TMVA::PDEFoamVect& operator*=(const Double_t& ); unary multiplication operator *=. TMVA::PDEFoamVect& operator+=(const TMVA::PDEFoamVect& ); unary addition operator +=; adding vector c*=x,. TMVA::PDEFoamVect& operator-=(const TMVA::PDEFoamVect& ); unary subtraction operator -=. TMVA::PDEFoamVect operator+(const TMVA::PDEFoamVect& ); addition operator +; sum of 2 vectors: c=a+b, a=a+b,; NEVER USE IT, VERY SLOW!!!. TMVA::PDEFo",MatchSource.WIKI,root/html604/TMVA__PDEFoamVect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamVect.html
https://root.cern/root/html604/TMVA__PDEFoamVect.html:6157,Modifiability,Inherit,Inherited,6157,"st. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Double_t*fCoords[fDim] Coordinates; Int_tfDimDimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamVect(); Default constructor for streamer. PDEFoamVect(Int_t ); User constructor creating n-dimensional vector; and allocating dynamically array of components. PDEFoamVect(const TMVA::PDEFoamVect& ); Copy constructor. ~PDEFoamVect(); Destructor. Double_t & operator[](Int_t ); [] is for access to elements as in ordinary matrix like a[j]=b[j]; (Perhaps against some strict rules but rather practical.); Range protection is built in, consequently for substitution; one should use rather use a=b than explicit loop!. TMVA::PDEFoamVect& operator*=(const Double_t& ); unary multiplication operator *=. TMVA::PDEFoamVect& operator+=(const TMVA::PDEFoamVect& ); unary addition operator +=; adding vector c*=x,. TMVA::PDEFoamVect& operator-=(const TMVA::PDEFoamVect& ); unary subtraction operator -=. TMVA::PDEFoamVect operator+(const TMVA::PDEFoamVect& ); addition operator +; sum of 2 vectors: c=a+b, a=a+b,; NEVER USE IT, VERY SLOW!!!. TMVA::PDEFo",MatchSource.WIKI,root/html604/TMVA__PDEFoamVect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamVect.html
https://root.cern/root/html604/TMVA__PDEFoamVect.html:2192,Security,Hash,Hash,2192,"sgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetCoord(Int_t i) const; Int_tGetDim() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html604/TMVA__PDEFoamVect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamVect.html
https://root.cern/root/html604/TMVA__PDEFoamVect.html:6514,Security,access,access,6514,"TObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Double_t*fCoords[fDim] Coordinates; Int_tfDimDimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamVect(); Default constructor for streamer. PDEFoamVect(Int_t ); User constructor creating n-dimensional vector; and allocating dynamically array of components. PDEFoamVect(const TMVA::PDEFoamVect& ); Copy constructor. ~PDEFoamVect(); Destructor. Double_t & operator[](Int_t ); [] is for access to elements as in ordinary matrix like a[j]=b[j]; (Perhaps against some strict rules but rather practical.); Range protection is built in, consequently for substitution; one should use rather use a=b than explicit loop!. TMVA::PDEFoamVect& operator*=(const Double_t& ); unary multiplication operator *=. TMVA::PDEFoamVect& operator+=(const TMVA::PDEFoamVect& ); unary addition operator +=; adding vector c*=x,. TMVA::PDEFoamVect& operator-=(const TMVA::PDEFoamVect& ); unary subtraction operator -=. TMVA::PDEFoamVect operator+(const TMVA::PDEFoamVect& ); addition operator +; sum of 2 vectors: c=a+b, a=a+b,; NEVER USE IT, VERY SLOW!!!. TMVA::PDEFoamVect operator-(const TMVA::PDEFoamVect& ); subtraction operator -; difference of 2 vectors; c=a-b, a=a-b,; NEVER USE IT, VERY SLOW!!!. void Print(Option_t* option) const; Printout of all vector components. Int_t GetDim() const; { return fDim; }. Double_t GetCoord(Int_t i) const; { return fCoords[i]; }. » Author: S. Jadach, Tancredi Carli, Dominik Dannheim, Alexander Voigt » C",MatchSource.WIKI,root/html604/TMVA__PDEFoamVect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamVect.html
https://root.cern/root/html604/TMVA__PDEFoamVect.html:4810,Testability,Test,TestBit,4810,"size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamVect&operator*=(const Double_t&); TMVA::PDEFoamVectoperator+(const TMVA::PDEFoamVect&); TMVA::PDEFoamVect&operator+=(const TMVA::PDEFoamVect&); TMVA::PDEFoamVectoperator-(const TMVA::PDEFoamVect&); TMVA::PDEFoamVect&operator-=(const TMVA::PDEFoamVect&); TMVA::PDEFoamVect&operator=(const TMVA::PDEFoamVect&); TMVA::PDEFoamVect&operator=(Double_t[]); TMVA::PDEFoamVect&operator=(Double_t); Double_t&operator[](Int_t); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamVectPDEFoamVect(); TMVA::PDEFoamVectPDEFoamVect(Int_t); TMVA::PDEFoamVectPDEFoamVect(const TMVA::PDEFoamVect&); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamVect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamVect.html
https://root.cern/root/html604/TMVA__PDEFoamVect.html:4849,Testability,Test,TestBits,4849,"size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamVect&operator*=(const Double_t&); TMVA::PDEFoamVectoperator+(const TMVA::PDEFoamVect&); TMVA::PDEFoamVect&operator+=(const TMVA::PDEFoamVect&); TMVA::PDEFoamVectoperator-(const TMVA::PDEFoamVect&); TMVA::PDEFoamVect&operator-=(const TMVA::PDEFoamVect&); TMVA::PDEFoamVect&operator=(const TMVA::PDEFoamVect&); TMVA::PDEFoamVect&operator=(Double_t[]); TMVA::PDEFoamVect&operator=(Double_t); Double_t&operator[](Int_t); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamVectPDEFoamVect(); TMVA::PDEFoamVectPDEFoamVect(Int_t); TMVA::PDEFoamVectPDEFoamVect(const TMVA::PDEFoamVect&); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TMVA__PDEFoamVect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamVect.html
https://root.cern/root/html604/TMVA__PDEFoamVect.html:615,Usability,Clear,Clear,615," virtual~PDEFoamVect(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetCoord(Int_t i) const; Int_tGetDim() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TO",MatchSource.WIKI,root/html604/TMVA__PDEFoamVect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDEFoamVect.html
https://root.cern/root/html604/TMVA__PDF.html:1496,Availability,Error,Error,1496,"ual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuildPDF(const TH1* theHist); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGraph*GetGraph() const; Int_tGetHistNBins(Int_t evtNum = 0); virtual const char*TObject::GetIconName() const; Double_tGetIntegral(Double_t xmin, Double_t xmax); TMVA::PDF::EInterpolateMethodGetInterpolMethod(); virtual const char*GetName() const; Int_tGetNBins() const; TH1*GetNSmoothHist() const; virtual char",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:1625,Availability,error,error,1625,"idTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGraph*GetGraph() const; Int_tGetHistNBins(Int_t evtNum = 0); virtual const char*TObject::GetIconName() const; Double_tGetIntegral(Double_t xmin, Double_t xmax); TMVA::PDF::EInterpolateMethodGetInterpolMethod(); virtual const char*GetName() const; Int_tGetNBins() const; TH1*GetNSmoothHist() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() c",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:1709,Availability,error,error,1709,"const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGraph*GetGraph() const; Int_tGetHistNBins(Int_t evtNum = 0); virtual const char*TObject::GetIconName() const; Double_tGetIntegral(Double_t xmin, Double_t xmax); TMVA::PDF::EInterpolateMethodGetInterpolMethod(); virtual const char*GetName() const; Int_tGetNBins() const; TH1*GetNSmoothHist() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; TH1*GetOriginalHist() co",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:10471,Deployability,integrat,integration,10471,"F::EInterpolateMethodkSpline3; static TMVA::PDF::EInterpolateMethodkSpline5; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TStringfBorderMethodString; Bool_tfCheckHistcheck of source histogram; Float_tfFineFactorfine tuning factor for Adaptive KDE; TGraph*fGraph! needed to create PDF from histogram; TH1*fHistcopy of input histogram; Int_tfHistAvgEvtPerBinavg event per source hist bin; Int_tfHistDefinedNBinssource hist bin num set by user; TH1*fHistOriginalthe input histogram; TF1*fIGetValintegration interface; TMVA::PDF::EInterpolateMethodfInterpolMethodinterpolation method; TStringfInterpolateString; TMVA::KDEKernel::EKernelBorderfKDEborderThe method to take care about ""border"" effects (string); TMVA::KDEKernel::EKernelIterfKDEiterNumber of iterations (adaptive or not); TStringfKDEiterString; TMVA::KDEKernel::EKernelTypefKDEtypeKernel type to use for KDE; TStringfKDEtypeStringstrings used to read definitions; TMVA::MsgLogger*fLogger! message logger; Int_tfMaxNsmoothMax number of smoothing iterations; Int_tfMinNsmoothMin number of smoothing iterations; TH1*fNSmoothHistnumber of smooth for each bin; Bool_tfNormalizenormalize histogram (false for cumulative distribution used in GaussTranform); Int_tfNsmoothMin number of smoothing iterations; TH1*fPDFHistthe high-binned histogram corresponding to the PDF; TStringfPDFNamefor output; UInt_tfReadingVersionthe TMVA version of the weight file; TSpline*fSpline! the used spline type; TStringfSuffix! the suffix for options; Bool_tfUseHistogramspline0 uses histogram as reference; static const Double_tfgEpsilonminimum PDF return; static const Bool_tfgManualIntegrationmanual integration (sum over bins) or DGAUSS; static const Int_tfgNbin_PdfHistnumber of bins in high-binned reference histogram. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDF(const TString& name, Bool_t norm = kTRUE); default constructor needed for ROOT I/O. P",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:9067,Energy Efficiency,Adapt,Adaptive,9067,"F::EInterpolateMethodkSpline3; static TMVA::PDF::EInterpolateMethodkSpline5; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TStringfBorderMethodString; Bool_tfCheckHistcheck of source histogram; Float_tfFineFactorfine tuning factor for Adaptive KDE; TGraph*fGraph! needed to create PDF from histogram; TH1*fHistcopy of input histogram; Int_tfHistAvgEvtPerBinavg event per source hist bin; Int_tfHistDefinedNBinssource hist bin num set by user; TH1*fHistOriginalthe input histogram; TF1*fIGetValintegration interface; TMVA::PDF::EInterpolateMethodfInterpolMethodinterpolation method; TStringfInterpolateString; TMVA::KDEKernel::EKernelBorderfKDEborderThe method to take care about ""border"" effects (string); TMVA::KDEKernel::EKernelIterfKDEiterNumber of iterations (adaptive or not); TStringfKDEiterString; TMVA::KDEKernel::EKernelTypefKDEtypeKernel type to use for KDE; TStringfKDEtypeStringstrings used to read definitions; TMVA::MsgLogger*fLogger! message logger; Int_tfMaxNsmoothMax number of smoothing iterations; Int_tfMinNsmoothMin number of smoothing iterations; TH1*fNSmoothHistnumber of smooth for each bin; Bool_tfNormalizenormalize histogram (false for cumulative distribution used in GaussTranform); Int_tfNsmoothMin number of smoothing iterations; TH1*fPDFHistthe high-binned histogram corresponding to the PDF; TStringfPDFNamefor output; UInt_tfReadingVersionthe TMVA version of the weight file; TSpline*fSpline! the used spline type; TStringfSuffix! the suffix for options; Bool_tfUseHistogramspline0 uses histogram as reference; static const Double_tfgEpsilonminimum PDF return; static const Bool_tfgManualIntegrationmanual integration (sum over bins) or DGAUSS; static const Int_tfgNbin_PdfHistnumber of bins in high-binned reference histogram. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDF(const TString& name, Bool_t norm = kTRUE); default constructor needed for ROOT I/O. P",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:9596,Energy Efficiency,adapt,adaptive,9596,"F::EInterpolateMethodkSpline3; static TMVA::PDF::EInterpolateMethodkSpline5; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TStringfBorderMethodString; Bool_tfCheckHistcheck of source histogram; Float_tfFineFactorfine tuning factor for Adaptive KDE; TGraph*fGraph! needed to create PDF from histogram; TH1*fHistcopy of input histogram; Int_tfHistAvgEvtPerBinavg event per source hist bin; Int_tfHistDefinedNBinssource hist bin num set by user; TH1*fHistOriginalthe input histogram; TF1*fIGetValintegration interface; TMVA::PDF::EInterpolateMethodfInterpolMethodinterpolation method; TStringfInterpolateString; TMVA::KDEKernel::EKernelBorderfKDEborderThe method to take care about ""border"" effects (string); TMVA::KDEKernel::EKernelIterfKDEiterNumber of iterations (adaptive or not); TStringfKDEiterString; TMVA::KDEKernel::EKernelTypefKDEtypeKernel type to use for KDE; TStringfKDEtypeStringstrings used to read definitions; TMVA::MsgLogger*fLogger! message logger; Int_tfMaxNsmoothMax number of smoothing iterations; Int_tfMinNsmoothMin number of smoothing iterations; TH1*fNSmoothHistnumber of smooth for each bin; Bool_tfNormalizenormalize histogram (false for cumulative distribution used in GaussTranform); Int_tfNsmoothMin number of smoothing iterations; TH1*fPDFHistthe high-binned histogram corresponding to the PDF; TStringfPDFNamefor output; UInt_tfReadingVersionthe TMVA version of the weight file; TSpline*fSpline! the used spline type; TStringfSuffix! the suffix for options; Bool_tfUseHistogramspline0 uses histogram as reference; static const Double_tfgEpsilonminimum PDF return; static const Bool_tfgManualIntegrationmanual integration (sum over bins) or DGAUSS; static const Int_tfgNbin_PdfHistnumber of bins in high-binned reference histogram. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDF(const TString& name, Bool_t norm = kTRUE); default constructor needed for ROOT I/O. P",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:13441,Energy Efficiency,adapt,adaptive,13441,"e PDF(x). Double_t GetValInverse(Double_t y, Bool_t isMonotonouslyIncreasingFunction = kFALSE) const; returns value PDF^{-1}(y). void FindBinInverse(const TH1* histogram, Int_t& lowerBin, Int_t& higherBin, Double_t& lowerBinValue, Double_t& higherBinValue, Double_t y, Bool_t isMonotonouslyIncreasingFunction = kFALSE) const; find bin from value on ordinate. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; PDFInterpol[ivar] <string> Spline0, Spline1, Spline2 <default>, Spline3, Spline5, KDE used to interpolate reference histograms; if no variable index is given, it is valid for ALL the variables. NSmooth <int> how often the input histos are smoothed; MinNSmooth <int> min number of smoothing iterations, for bins with most data; MaxNSmooth <int> max number of smoothing iterations, for bins with least data; NAvEvtPerBin <int> minimum average number of events per PDF bin; TransformOutput <bool> transform (often strongly peaked) likelihood output through sigmoid inversion; fKDEtype <KernelType> type of the Kernel to use (1 is Gaussian); fKDEiter <KerneIter> number of iterations (1 --> ""static KDE"", 2 --> ""adaptive KDE""); fBorderMethod <KernelBorder> the method to take care about ""border"" effects (1=no treatment , 2=kernel renormalization, 3=sample mirroring). void ProcessOptions(). void AddXMLTo(void* parent); XML file writing. void ReadXML(void* pdfnode); XML file reading. TMVA::PDF* ThisPDF( void ); return global ""this"" pointer of PDF. explicit PDF(const TString& name, Bool_t norm = kTRUE). TH1* GetPDFHist() const; histogram underlying the PDF. { return fPDFHist; }. TGraph* GetGraph() const; { return fGraph; }. TH1* GetOriginalHist() const; { return fHistOriginal; }. TH1* GetSmoothedHist() const; { return fHist; }. TH1* GetNSmoothHist() const; { return fNSmoothHist; }. TSpline* GetSpline() const; accessors. { return fSpline; }. Int_t GetNBins() const; { return fHist->GetNbinsX(); }. Double_t GetXmin() const; ",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:9337,Integrability,interface,interface,9337,"F::EInterpolateMethodkSpline3; static TMVA::PDF::EInterpolateMethodkSpline5; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TStringfBorderMethodString; Bool_tfCheckHistcheck of source histogram; Float_tfFineFactorfine tuning factor for Adaptive KDE; TGraph*fGraph! needed to create PDF from histogram; TH1*fHistcopy of input histogram; Int_tfHistAvgEvtPerBinavg event per source hist bin; Int_tfHistDefinedNBinssource hist bin num set by user; TH1*fHistOriginalthe input histogram; TF1*fIGetValintegration interface; TMVA::PDF::EInterpolateMethodfInterpolMethodinterpolation method; TStringfInterpolateString; TMVA::KDEKernel::EKernelBorderfKDEborderThe method to take care about ""border"" effects (string); TMVA::KDEKernel::EKernelIterfKDEiterNumber of iterations (adaptive or not); TStringfKDEiterString; TMVA::KDEKernel::EKernelTypefKDEtypeKernel type to use for KDE; TStringfKDEtypeStringstrings used to read definitions; TMVA::MsgLogger*fLogger! message logger; Int_tfMaxNsmoothMax number of smoothing iterations; Int_tfMinNsmoothMin number of smoothing iterations; TH1*fNSmoothHistnumber of smooth for each bin; Bool_tfNormalizenormalize histogram (false for cumulative distribution used in GaussTranform); Int_tfNsmoothMin number of smoothing iterations; TH1*fPDFHistthe high-binned histogram corresponding to the PDF; TStringfPDFNamefor output; UInt_tfReadingVersionthe TMVA version of the weight file; TSpline*fSpline! the used spline type; TStringfSuffix! the suffix for options; Bool_tfUseHistogramspline0 uses histogram as reference; static const Double_tfgEpsilonminimum PDF return; static const Bool_tfgManualIntegrationmanual integration (sum over bins) or DGAUSS; static const Int_tfgNbin_PdfHistnumber of bins in high-binned reference histogram. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDF(const TString& name, Bool_t norm = kTRUE); default constructor needed for ROOT I/O. P",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:9781,Integrability,message,message,9781,"F::EInterpolateMethodkSpline3; static TMVA::PDF::EInterpolateMethodkSpline5; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TStringfBorderMethodString; Bool_tfCheckHistcheck of source histogram; Float_tfFineFactorfine tuning factor for Adaptive KDE; TGraph*fGraph! needed to create PDF from histogram; TH1*fHistcopy of input histogram; Int_tfHistAvgEvtPerBinavg event per source hist bin; Int_tfHistDefinedNBinssource hist bin num set by user; TH1*fHistOriginalthe input histogram; TF1*fIGetValintegration interface; TMVA::PDF::EInterpolateMethodfInterpolMethodinterpolation method; TStringfInterpolateString; TMVA::KDEKernel::EKernelBorderfKDEborderThe method to take care about ""border"" effects (string); TMVA::KDEKernel::EKernelIterfKDEiterNumber of iterations (adaptive or not); TStringfKDEiterString; TMVA::KDEKernel::EKernelTypefKDEtypeKernel type to use for KDE; TStringfKDEtypeStringstrings used to read definitions; TMVA::MsgLogger*fLogger! message logger; Int_tfMaxNsmoothMax number of smoothing iterations; Int_tfMinNsmoothMin number of smoothing iterations; TH1*fNSmoothHistnumber of smooth for each bin; Bool_tfNormalizenormalize histogram (false for cumulative distribution used in GaussTranform); Int_tfNsmoothMin number of smoothing iterations; TH1*fPDFHistthe high-binned histogram corresponding to the PDF; TStringfPDFNamefor output; UInt_tfReadingVersionthe TMVA version of the weight file; TSpline*fSpline! the used spline type; TStringfSuffix! the suffix for options; Bool_tfUseHistogramspline0 uses histogram as reference; static const Double_tfgEpsilonminimum PDF return; static const Bool_tfgManualIntegrationmanual integration (sum over bins) or DGAUSS; static const Int_tfgNbin_PdfHistnumber of bins in high-binned reference histogram. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDF(const TString& name, Bool_t norm = kTRUE); default constructor needed for ROOT I/O. P",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:10471,Integrability,integrat,integration,10471,"F::EInterpolateMethodkSpline3; static TMVA::PDF::EInterpolateMethodkSpline5; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TStringfBorderMethodString; Bool_tfCheckHistcheck of source histogram; Float_tfFineFactorfine tuning factor for Adaptive KDE; TGraph*fGraph! needed to create PDF from histogram; TH1*fHistcopy of input histogram; Int_tfHistAvgEvtPerBinavg event per source hist bin; Int_tfHistDefinedNBinssource hist bin num set by user; TH1*fHistOriginalthe input histogram; TF1*fIGetValintegration interface; TMVA::PDF::EInterpolateMethodfInterpolMethodinterpolation method; TStringfInterpolateString; TMVA::KDEKernel::EKernelBorderfKDEborderThe method to take care about ""border"" effects (string); TMVA::KDEKernel::EKernelIterfKDEiterNumber of iterations (adaptive or not); TStringfKDEiterString; TMVA::KDEKernel::EKernelTypefKDEtypeKernel type to use for KDE; TStringfKDEtypeStringstrings used to read definitions; TMVA::MsgLogger*fLogger! message logger; Int_tfMaxNsmoothMax number of smoothing iterations; Int_tfMinNsmoothMin number of smoothing iterations; TH1*fNSmoothHistnumber of smooth for each bin; Bool_tfNormalizenormalize histogram (false for cumulative distribution used in GaussTranform); Int_tfNsmoothMin number of smoothing iterations; TH1*fPDFHistthe high-binned histogram corresponding to the PDF; TStringfPDFNamefor output; UInt_tfReadingVersionthe TMVA version of the weight file; TSpline*fSpline! the used spline type; TStringfSuffix! the suffix for options; Bool_tfUseHistogramspline0 uses histogram as reference; static const Double_tfgEpsilonminimum PDF return; static const Bool_tfgManualIntegrationmanual integration (sum over bins) or DGAUSS; static const Int_tfgNbin_PdfHistnumber of bins in high-binned reference histogram. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDF(const TString& name, Bool_t norm = kTRUE); default constructor needed for ROOT I/O. P",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:285,Modifiability,Config,Configurable,285,". TMVA::PDF. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA; » TMVA::PDF. class TMVA::PDF: public TMVA::Configurable. Function Members (Methods); public:. virtual~PDF(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidAddXMLTo(void* parent); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuildPDF(const TH1* theHist); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMV",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:416,Modifiability,Config,Configurable,416," virtual~PDF(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidAddXMLTo(void* parent); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuildPDF(const TH1* theHist); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMV",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:636,Modifiability,Config,Configurable,636," virtual~PDF(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidAddXMLTo(void* parent); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuildPDF(const TH1* theHist); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMV",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:922,Modifiability,Config,ConfigurableTMVA,922," virtual~PDF(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidAddXMLTo(void* parent); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuildPDF(const TH1* theHist); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMV",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:940,Modifiability,Config,Configurable,940," virtual~PDF(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidAddXMLTo(void* parent); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuildPDF(const TH1* theHist); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMV",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:954,Modifiability,Config,Configurable,954," virtual~PDF(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidAddXMLTo(void* parent); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuildPDF(const TH1* theHist); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMV",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:1005,Modifiability,Config,ConfigurableTMVA,1005," virtual~PDF(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidAddXMLTo(void* parent); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuildPDF(const TH1* theHist); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMV",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:1023,Modifiability,Config,Configurable,1023," virtual~PDF(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidAddXMLTo(void* parent); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuildPDF(const TH1* theHist); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMV",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:1037,Modifiability,Config,Configurable,1037," virtual~PDF(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidAddXMLTo(void* parent); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuildPDF(const TH1* theHist); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMV",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:1062,Modifiability,Config,Configurable,1062," virtual~PDF(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidAddXMLTo(void* parent); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuildPDF(const TH1* theHist); voidTMVA::Configurable::CheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMV",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:2004,Modifiability,Config,Configurable,2004,"gurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGraph*GetGraph() const; Int_tGetHistNBins(Int_t evtNum = 0); virtual const char*TObject::GetIconName() const; Double_tGetIntegral(Double_t xmin, Double_t xmax); TMVA::PDF::EInterpolateMethodGetInterpolMethod(); virtual const char*GetName() const; Int_tGetNBins() const; TH1*GetNSmoothHist() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; TH1*GetOriginalHist() const; TH1*GetPDFHist() const; UInt_tGetReadingVersion() const; TH1*GetSmoothedHist() const; TSpline*GetSpline() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetVal(Double_t x) const; Double_tGetValInverse(Double_t y, Bool_t isMonotonouslyIn",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:2065,Modifiability,Config,Configurable,2065,"ble&); virtual voidTObject::Copy(TObject& object) const; voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGraph*GetGraph() const; Int_tGetHistNBins(Int_t evtNum = 0); virtual const char*TObject::GetIconName() const; Double_tGetIntegral(Double_t xmin, Double_t xmax); TMVA::PDF::EInterpolateMethodGetInterpolMethod(); virtual const char*GetName() const; Int_tGetNBins() const; TH1*GetNSmoothHist() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; TH1*GetOriginalHist() const; TH1*GetPDFHist() const; UInt_tGetReadingVersion() const; TH1*GetSmoothedHist() const; TSpline*GetSpline() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetVal(Double_t x) const; Double_tGetValInverse(Double_t y, Bool_t isMonotonouslyIncreasingFunction = kFALSE) const; Double_tGetXmax() const; Do",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:2654,Modifiability,Config,Configurable,2654,"ecute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGraph*GetGraph() const; Int_tGetHistNBins(Int_t evtNum = 0); virtual const char*TObject::GetIconName() const; Double_tGetIntegral(Double_t xmin, Double_t xmax); TMVA::PDF::EInterpolateMethodGetInterpolMethod(); virtual const char*GetName() const; Int_tGetNBins() const; TH1*GetNSmoothHist() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; TH1*GetOriginalHist() const; TH1*GetPDFHist() const; UInt_tGetReadingVersion() const; TH1*GetSmoothedHist() const; TSpline*GetSpline() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetVal(Double_t x) const; Double_tGetValInverse(Double_t y, Bool_t isMonotonouslyIncreasingFunction = kFALSE) const; Double_tGetXmax() const; Double_tGetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() cons",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:3280,Modifiability,Inherit,InheritsFrom,3280,"ame() const; Double_tGetIntegral(Double_t xmin, Double_t xmax); TMVA::PDF::EInterpolateMethodGetInterpolMethod(); virtual const char*GetName() const; Int_tGetNBins() const; TH1*GetNSmoothHist() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; TH1*GetOriginalHist() const; TH1*GetPDFHist() const; UInt_tGetReadingVersion() const; TH1*GetSmoothedHist() const; TSpline*GetSpline() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetVal(Double_t x) const; Double_tGetValInverse(Double_t y, Bool_t isMonotonouslyIncreasingFunction = kFALSE) const; Double_tGetXmax() const; Double_tGetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:3346,Modifiability,Inherit,InheritsFrom,3346,"VA::PDF::EInterpolateMethodGetInterpolMethod(); virtual const char*GetName() const; Int_tGetNBins() const; TH1*GetNSmoothHist() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&TMVA::Configurable::GetOptions() const; TH1*GetOriginalHist() const; TH1*GetPDFHist() const; UInt_tGetReadingVersion() const; TH1*GetSmoothedHist() const; TSpline*GetSpline() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetVal(Double_t x) const; Double_tGetValInverse(Double_t y, Bool_t isMonotonouslyIncreasingFunction = kFALSE) const; Double_tGetXmax() const; Double_tGetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDF&operator=(const TMVA::PDF&); virtual void",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:4410,Modifiability,Config,Configurable,4410,"onstMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDF&operator=(const TMVA::PDF&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); TMVA::PDFPDF(const TMVA::PDF&); TMVA::PDFPDF(const TString& name, Bool_t norm = kTRUE); TMVA::PDFPDF(const TString& name, const TString& options, const TString& suffix = """", TMVA::PDF* defaultPDF = 0, Bool_t norm = kTRUE); TMVA::PDFPDF(const TString& name, const TH1* theHist, TMVA::PDF::EInterpolateMethod method = kSpline2, Int_t minnsmooth = 0, Int_t maxnsmooth = 0, Bool_t checkHist = kFALSE, Bool_t norm = kTRUE); TMVA::PDFPDF(const TString& name, const TH1* theHist, TMVA::KDEKernel::EKernelType ktype, TMVA::KDEKernel::EKernelIter kiter, TMVA::KDEKernel::EKernelBorder kborder, Float_t FineFactor, Bool_t norm = kTRUE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; voidProcessOptions(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidReadXML(void* pdfnode); virtu",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:5162,Modifiability,Config,Configurable,5162,"bject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDF&operator=(const TMVA::PDF&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); TMVA::PDFPDF(const TMVA::PDF&); TMVA::PDFPDF(const TString& name, Bool_t norm = kTRUE); TMVA::PDFPDF(const TString& name, const TString& options, const TString& suffix = """", TMVA::PDF* defaultPDF = 0, Bool_t norm = kTRUE); TMVA::PDFPDF(const TString& name, const TH1* theHist, TMVA::PDF::EInterpolateMethod method = kSpline2, Int_t minnsmooth = 0, Int_t maxnsmooth = 0, Bool_t checkHist = kFALSE, Bool_t norm = kTRUE); TMVA::PDFPDF(const TString& name, const TH1* theHist, TMVA::KDEKernel::EKernelType ktype, TMVA::KDEKernel::EKernelIter kiter, TMVA::KDEKernel::EKernelBorder kborder, Float_t FineFactor, Bool_t norm = kTRUE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; voidProcessOptions(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidReadXML(void* pdfnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidSetReadingVersion(UInt_t rv); virtual voidTObject::S",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:5276,Modifiability,Config,Configurable,5276,"ze_t sz, void* vp); TMVA::PDF&operator=(const TMVA::PDF&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); TMVA::PDFPDF(const TMVA::PDF&); TMVA::PDFPDF(const TString& name, Bool_t norm = kTRUE); TMVA::PDFPDF(const TString& name, const TString& options, const TString& suffix = """", TMVA::PDF* defaultPDF = 0, Bool_t norm = kTRUE); TMVA::PDFPDF(const TString& name, const TH1* theHist, TMVA::PDF::EInterpolateMethod method = kSpline2, Int_t minnsmooth = 0, Int_t maxnsmooth = 0, Bool_t checkHist = kFALSE, Bool_t norm = kTRUE); TMVA::PDFPDF(const TString& name, const TH1* theHist, TMVA::KDEKernel::EKernelType ktype, TMVA::KDEKernel::EKernelIter kiter, TMVA::KDEKernel::EKernelBorder kborder, Float_t FineFactor, Bool_t norm = kTRUE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; voidProcessOptions(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidReadXML(void* pdfnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidSetReadingVersion(UInt_t rv); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voi",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:5338,Modifiability,Config,Configurable,5338,"tual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); TMVA::PDFPDF(const TMVA::PDF&); TMVA::PDFPDF(const TString& name, Bool_t norm = kTRUE); TMVA::PDFPDF(const TString& name, const TString& options, const TString& suffix = """", TMVA::PDF* defaultPDF = 0, Bool_t norm = kTRUE); TMVA::PDFPDF(const TString& name, const TH1* theHist, TMVA::PDF::EInterpolateMethod method = kSpline2, Int_t minnsmooth = 0, Int_t maxnsmooth = 0, Bool_t checkHist = kFALSE, Bool_t norm = kTRUE); TMVA::PDFPDF(const TString& name, const TH1* theHist, TMVA::KDEKernel::EKernelType ktype, TMVA::KDEKernel::EKernelIter kiter, TMVA::KDEKernel::EKernelBorder kborder, Float_t FineFactor, Bool_t norm = kTRUE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; voidProcessOptions(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidReadXML(void* pdfnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidSetReadingVersion(UInt_t rv); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtu",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:5744,Modifiability,Config,Configurable,5744,"hod = kSpline2, Int_t minnsmooth = 0, Int_t maxnsmooth = 0, Bool_t checkHist = kFALSE, Bool_t norm = kTRUE); TMVA::PDFPDF(const TString& name, const TH1* theHist, TMVA::KDEKernel::EKernelType ktype, TMVA::KDEKernel::EKernelIter kiter, TMVA::KDEKernel::EKernelBorder kborder, Float_t FineFactor, Bool_t norm = kTRUE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; voidProcessOptions(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidReadXML(void* pdfnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidSetReadingVersion(UInt_t rv); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); voidValidatePDF(TH1* original = 0) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual ",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:5805,Modifiability,Config,Configurable,5805,"ool_t checkHist = kFALSE, Bool_t norm = kTRUE); TMVA::PDFPDF(const TString& name, const TH1* theHist, TMVA::KDEKernel::EKernelType ktype, TMVA::KDEKernel::EKernelIter kiter, TMVA::KDEKernel::EKernelBorder kborder, Float_t FineFactor, Bool_t norm = kTRUE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; voidProcessOptions(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidReadXML(void* pdfnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidSetReadingVersion(UInt_t rv); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); voidValidatePDF(TH1* original = 0) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, I",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:5967,Modifiability,Config,Configurable,5967,"Kernel::EKernelType ktype, TMVA::KDEKernel::EKernelIter kiter, TMVA::KDEKernel::EKernelBorder kborder, Float_t FineFactor, Bool_t norm = kTRUE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; voidProcessOptions(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidReadXML(void* pdfnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidSetReadingVersion(UInt_t rv); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); voidValidatePDF(TH1* original = 0) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const.",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
https://root.cern/root/html604/TMVA__PDF.html:6069,Modifiability,Config,Configurable,6069,"Kernel::EKernelType ktype, TMVA::KDEKernel::EKernelIter kiter, TMVA::KDEKernel::EKernelBorder kborder, Float_t FineFactor, Bool_t norm = kTRUE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; voidProcessOptions(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidReadXML(void* pdfnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidSetReadingVersion(UInt_t rv); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); voidValidatePDF(TH1* original = 0) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const.",MatchSource.WIKI,root/html604/TMVA__PDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TMVA__PDF.html
