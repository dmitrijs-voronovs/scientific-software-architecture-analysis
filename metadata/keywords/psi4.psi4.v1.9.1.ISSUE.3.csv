id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/psi4/psi4/pull/1122:142,Integrability,interface,interface,142,"## Description; Much misc. ## Todos; - [x] Better error msg for MathOpenMP, mostly when GCC+MKL and can't find iomp5; - [x] Fix items in p4c4 interface; - [x] ccsd(t) grad in cfour v1 (came down to an unneeded `\s*`). test-suite-wise, approx works equally well with v1 or v2; - [x] DROPMO handling; - [x] backport a lot of the parsing changes from github.com/qcdb/qcdb to here; - [x] modernize Molecult.init_with_xyz(); - [ ] @JonathonMisiewicz, if you hit can't-align errors, let me know, and I'll switch it out to new mech; - [x] I forgot to obfuscate the global variable names used in pylibefp in #953, so do that here; - [x] fix [forum 1009](http://forum.psicode.org/t/nameerror-name-wfn-is-not-defined/1009/2?u=loriab); - [x] update a bunch of docs items that had accumulated; - [x] officially make python 2.7 unacceptable to the build system. ## Checklist; - [ ] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1122
https://github.com/psi4/psi4/pull/1122:565,Modifiability,variab,variable,565,"## Description; Much misc. ## Todos; - [x] Better error msg for MathOpenMP, mostly when GCC+MKL and can't find iomp5; - [x] Fix items in p4c4 interface; - [x] ccsd(t) grad in cfour v1 (came down to an unneeded `\s*`). test-suite-wise, approx works equally well with v1 or v2; - [x] DROPMO handling; - [x] backport a lot of the parsing changes from github.com/qcdb/qcdb to here; - [x] modernize Molecult.init_with_xyz(); - [ ] @JonathonMisiewicz, if you hit can't-align errors, let me know, and I'll switch it out to new mech; - [x] I forgot to obfuscate the global variable names used in pylibefp in #953, so do that here; - [x] fix [forum 1009](http://forum.psicode.org/t/nameerror-name-wfn-is-not-defined/1009/2?u=loriab); - [x] update a bunch of docs items that had accumulated; - [x] officially make python 2.7 unacceptable to the build system. ## Checklist; - [ ] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1122
https://github.com/psi4/psi4/pull/1122:218,Testability,test,test-suite-wise,218,"## Description; Much misc. ## Todos; - [x] Better error msg for MathOpenMP, mostly when GCC+MKL and can't find iomp5; - [x] Fix items in p4c4 interface; - [x] ccsd(t) grad in cfour v1 (came down to an unneeded `\s*`). test-suite-wise, approx works equally well with v1 or v2; - [x] DROPMO handling; - [x] backport a lot of the parsing changes from github.com/qcdb/qcdb to here; - [x] modernize Molecult.init_with_xyz(); - [ ] @JonathonMisiewicz, if you hit can't-align errors, let me know, and I'll switch it out to new mech; - [x] I forgot to obfuscate the global variable names used in pylibefp in #953, so do that here; - [x] fix [forum 1009](http://forum.psicode.org/t/nameerror-name-wfn-is-not-defined/1009/2?u=loriab); - [x] update a bunch of docs items that had accumulated; - [x] officially make python 2.7 unacceptable to the build system. ## Checklist; - [ ] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1122
https://github.com/psi4/psi4/pull/1122:904,Testability,test,tests,904,"## Description; Much misc. ## Todos; - [x] Better error msg for MathOpenMP, mostly when GCC+MKL and can't find iomp5; - [x] Fix items in p4c4 interface; - [x] ccsd(t) grad in cfour v1 (came down to an unneeded `\s*`). test-suite-wise, approx works equally well with v1 or v2; - [x] DROPMO handling; - [x] backport a lot of the parsing changes from github.com/qcdb/qcdb to here; - [x] modernize Molecult.init_with_xyz(); - [ ] @JonathonMisiewicz, if you hit can't-align errors, let me know, and I'll switch it out to new mech; - [x] I forgot to obfuscate the global variable names used in pylibefp in #953, so do that here; - [x] fix [forum 1009](http://forum.psicode.org/t/nameerror-name-wfn-is-not-defined/1009/2?u=loriab); - [x] update a bunch of docs items that had accumulated; - [x] officially make python 2.7 unacceptable to the build system. ## Checklist; - [ ] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1122
https://github.com/psi4/psi4/pull/1122:995,Testability,test,tests,995,"## Description; Much misc. ## Todos; - [x] Better error msg for MathOpenMP, mostly when GCC+MKL and can't find iomp5; - [x] Fix items in p4c4 interface; - [x] ccsd(t) grad in cfour v1 (came down to an unneeded `\s*`). test-suite-wise, approx works equally well with v1 or v2; - [x] DROPMO handling; - [x] backport a lot of the parsing changes from github.com/qcdb/qcdb to here; - [x] modernize Molecult.init_with_xyz(); - [ ] @JonathonMisiewicz, if you hit can't-align errors, let me know, and I'll switch it out to new mech; - [x] I forgot to obfuscate the global variable names used in pylibefp in #953, so do that here; - [x] fix [forum 1009](http://forum.psicode.org/t/nameerror-name-wfn-is-not-defined/1009/2?u=loriab); - [x] update a bunch of docs items that had accumulated; - [x] officially make python 2.7 unacceptable to the build system. ## Checklist; - [ ] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1122
https://github.com/psi4/psi4/pull/1123:56,Testability,Test,Tests,56,## Description; Completes PR #1119. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1123
https://github.com/psi4/psi4/pull/1123:130,Testability,test,tests,130,## Description; Completes PR #1119. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1123
https://github.com/psi4/psi4/pull/1123:221,Testability,test,tests,221,## Description; Completes PR #1119. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1123
https://github.com/psi4/psi4/pull/1124:179,Deployability,Update,Update,179,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update `gau2grid`; - [x] https://github.com/dgasmith/gau2grid/issues/15; - [x] https://github.com/dgasmith/gau2grid/issues/16; - [x] Update `libint`; - [x] ~~evaleev/libint#104~~; - [x] Update `libxc`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1124
https://github.com/psi4/psi4/pull/1124:312,Deployability,Update,Update,312,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update `gau2grid`; - [x] https://github.com/dgasmith/gau2grid/issues/15; - [x] https://github.com/dgasmith/gau2grid/issues/16; - [x] Update `libint`; - [x] ~~evaleev/libint#104~~; - [x] Update `libxc`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1124
https://github.com/psi4/psi4/pull/1124:365,Deployability,Update,Update,365,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update `gau2grid`; - [x] https://github.com/dgasmith/gau2grid/issues/15; - [x] https://github.com/dgasmith/gau2grid/issues/16; - [x] Update `libint`; - [x] ~~evaleev/libint#104~~; - [x] Update `libxc`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1124
https://github.com/psi4/psi4/pull/1124:403,Testability,Test,Tests,403,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update `gau2grid`; - [x] https://github.com/dgasmith/gau2grid/issues/15; - [x] https://github.com/dgasmith/gau2grid/issues/16; - [x] Update `libint`; - [x] ~~evaleev/libint#104~~; - [x] Update `libxc`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1124
https://github.com/psi4/psi4/pull/1124:479,Testability,test,tests,479,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update `gau2grid`; - [x] https://github.com/dgasmith/gau2grid/issues/15; - [x] https://github.com/dgasmith/gau2grid/issues/16; - [x] Update `libint`; - [x] ~~evaleev/libint#104~~; - [x] Update `libxc`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1124
https://github.com/psi4/psi4/pull/1124:570,Testability,test,tests,570,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update `gau2grid`; - [x] https://github.com/dgasmith/gau2grid/issues/15; - [x] https://github.com/dgasmith/gau2grid/issues/16; - [x] Update `libint`; - [x] ~~evaleev/libint#104~~; - [x] Update `libxc`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1124
https://github.com/psi4/psi4/issues/1125:205,Energy Efficiency,energy,energy,205,"The following input file:; ```; molecule fluorine {; 0 1 ; F; F 1 1.4113; }. set globals {; basis cc-pvdz; reference uhf ; scf_type pk ; e_convergence 10 ; d_convergence 10 ; stability_analysis follow; }. energy ('scf'); ```; reports a B1u eigenvalue of -0.098916 at an SCF energy of -198.685730305942 hartrees. After disabling symmetry, I found a perfectly stable wavefunction at... -198.685730305942 hartrees. So why is the use of D2h symmetry ""creating"" a negative orbital hessian eigenvalue that wasn't there when no symmetry was used?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1125
https://github.com/psi4/psi4/issues/1125:274,Energy Efficiency,energy,energy,274,"The following input file:; ```; molecule fluorine {; 0 1 ; F; F 1 1.4113; }. set globals {; basis cc-pvdz; reference uhf ; scf_type pk ; e_convergence 10 ; d_convergence 10 ; stability_analysis follow; }. energy ('scf'); ```; reports a B1u eigenvalue of -0.098916 at an SCF energy of -198.685730305942 hartrees. After disabling symmetry, I found a perfectly stable wavefunction at... -198.685730305942 hartrees. So why is the use of D2h symmetry ""creating"" a negative orbital hessian eigenvalue that wasn't there when no symmetry was used?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1125
https://github.com/psi4/psi4/issues/1126:2809,Availability,error,error,2809,"---------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analytic gradient computation. ... ==> Geometry <==. Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -3.024634427518 15.994914619560; H 0.000000000000 -0.753936469287 -2.421595936667 1.007825032070; O 0.000000000000 0.000000000000 0.097932947678 15.994914619560; H 0.000000000000 0.753936469287 -2.421595936667 1.007825032070; S 0.000000000000 0.000000000000 1.616830836315 31.972070999000; ```. Even though the step clearly lowers my symmetry to the expected Cs, I get back to C2v symmetry in my subsequent computation. _NOTE: This geometry is optimized at CCSD(T), and the method used is B3LYP. That shouldn't cause an error like this. I observe the error when I optimize with CCSD(T) via p4c4 as well, but I've lowered the method for simplicity. I also can't imagine the initial hessian mattering either, but I can supply it if helpful._",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1126
https://github.com/psi4/psi4/issues/1126:2840,Availability,error,error,2840,"---------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analytic gradient computation. ... ==> Geometry <==. Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -3.024634427518 15.994914619560; H 0.000000000000 -0.753936469287 -2.421595936667 1.007825032070; O 0.000000000000 0.000000000000 0.097932947678 15.994914619560; H 0.000000000000 0.753936469287 -2.421595936667 1.007825032070; S 0.000000000000 0.000000000000 1.616830836315 31.972070999000; ```. Even though the step clearly lowers my symmetry to the expected Cs, I get back to C2v symmetry in my subsequent computation. _NOTE: This geometry is optimized at CCSD(T), and the method used is B3LYP. That shouldn't cause an error like this. I observe the error when I optimize with CCSD(T) via p4c4 as well, but I've lowered the method for simplicity. I also can't imagine the initial hessian mattering either, but I can supply it if helpful._",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1126
https://github.com/psi4/psi4/issues/1126:757,Energy Efficiency,energy,energy,757,"The following attempt at an IRC fails. The mode I'm following lowers symmetry from C2v to Cs:; ```import os; import shutil. memory 7 gb. molecule ts {; symmetry csx; 0 3; O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. r1 = 0.966761443523761; r2 = 3.122239629907337; a1 = 51.253600445125215; d1 = 180.000000000000000; r3 = 4.641761974905505; d2 = 0.000000000000000; }. hessname = ""output.ts.{}.hess"".format(os.getpid()); shutil.copy(""FCMFINAL"",hessname). set {; opt_type irc; irc_direction backward; basis aug-cc-pV(D+d)Z; maxiter 300; g_convergence gau_verytight; geom_maxiter 1000; cart_hess_read true; dynamic_level 1; reference uhf; irc_step_size 0.01; ensure_bt_convergence true; normal_modes_write true; print_trajectory_xyz_file true; }. energy = optimize('b3lyp'); ```. The problem is in the following snippet of output:; ```; @IRC; @IRC Point Sphere Step Energy DE MAX Force RMS Force MAX Disp RMS Disp; @IRC -----------------------------------------------------------------------------------------------------------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analyti",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1126
https://github.com/psi4/psi4/issues/1126:876,Energy Efficiency,Energy,Energy,876,"The following attempt at an IRC fails. The mode I'm following lowers symmetry from C2v to Cs:; ```import os; import shutil. memory 7 gb. molecule ts {; symmetry csx; 0 3; O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. r1 = 0.966761443523761; r2 = 3.122239629907337; a1 = 51.253600445125215; d1 = 180.000000000000000; r3 = 4.641761974905505; d2 = 0.000000000000000; }. hessname = ""output.ts.{}.hess"".format(os.getpid()); shutil.copy(""FCMFINAL"",hessname). set {; opt_type irc; irc_direction backward; basis aug-cc-pV(D+d)Z; maxiter 300; g_convergence gau_verytight; geom_maxiter 1000; cart_hess_read true; dynamic_level 1; reference uhf; irc_step_size 0.01; ensure_bt_convergence true; normal_modes_write true; print_trajectory_xyz_file true; }. energy = optimize('b3lyp'); ```. The problem is in the following snippet of output:; ```; @IRC; @IRC Point Sphere Step Energy DE MAX Force RMS Force MAX Disp RMS Disp; @IRC -----------------------------------------------------------------------------------------------------------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analyti",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1126
https://github.com/psi4/psi4/issues/1126:1760,Energy Efficiency,charge,charge,1760,"y = optimize('b3lyp'); ```. The problem is in the following snippet of output:; ```; @IRC; @IRC Point Sphere Step Energy DE MAX Force RMS Force MAX Disp RMS Disp; @IRC -----------------------------------------------------------------------------------------------------------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analytic gradient computation. ... ==> Geometry <==. Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -3.024634427518 15.994914619560; H 0.000000000000 -0.753936469287 -2.421595936667 1.007825032070; O 0.000000000000 0.000000000000 0.097932947678 15.994914619560; H 0.000000000000 0.753936469287 -2.421595936667 1.007825032070; S 0.000000000000 0.000000000000 1.616830836315 31.972070999000; ```. Even though the step clearly lowers my symmetry to the expected Cs, I get back to C2v symmetry in my subsequent computation. _NOTE: This geometry is optimized at CCSD(T), and the ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1126
https://github.com/psi4/psi4/issues/1126:2121,Energy Efficiency,charge,charge,2121,"---------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analytic gradient computation. ... ==> Geometry <==. Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -3.024634427518 15.994914619560; H 0.000000000000 -0.753936469287 -2.421595936667 1.007825032070; O 0.000000000000 0.000000000000 0.097932947678 15.994914619560; H 0.000000000000 0.753936469287 -2.421595936667 1.007825032070; S 0.000000000000 0.000000000000 1.616830836315 31.972070999000; ```. Even though the step clearly lowers my symmetry to the expected Cs, I get back to C2v symmetry in my subsequent computation. _NOTE: This geometry is optimized at CCSD(T), and the method used is B3LYP. That shouldn't cause an error like this. I observe the error when I optimize with CCSD(T) via p4c4 as well, but I've lowered the method for simplicity. I also can't imagine the initial hessian mattering either, but I can supply it if helpful._",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1126
https://github.com/psi4/psi4/issues/1126:766,Performance,optimiz,optimize,766,"The following attempt at an IRC fails. The mode I'm following lowers symmetry from C2v to Cs:; ```import os; import shutil. memory 7 gb. molecule ts {; symmetry csx; 0 3; O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. r1 = 0.966761443523761; r2 = 3.122239629907337; a1 = 51.253600445125215; d1 = 180.000000000000000; r3 = 4.641761974905505; d2 = 0.000000000000000; }. hessname = ""output.ts.{}.hess"".format(os.getpid()); shutil.copy(""FCMFINAL"",hessname). set {; opt_type irc; irc_direction backward; basis aug-cc-pV(D+d)Z; maxiter 300; g_convergence gau_verytight; geom_maxiter 1000; cart_hess_read true; dynamic_level 1; reference uhf; irc_step_size 0.01; ensure_bt_convergence true; normal_modes_write true; print_trajectory_xyz_file true; }. energy = optimize('b3lyp'); ```. The problem is in the following snippet of output:; ```; @IRC; @IRC Point Sphere Step Energy DE MAX Force RMS Force MAX Disp RMS Disp; @IRC -----------------------------------------------------------------------------------------------------------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analyti",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1126
https://github.com/psi4/psi4/issues/1126:1266,Performance,optimiz,optimization,1266,"; a1 = 51.253600445125215; d1 = 180.000000000000000; r3 = 4.641761974905505; d2 = 0.000000000000000; }. hessname = ""output.ts.{}.hess"".format(os.getpid()); shutil.copy(""FCMFINAL"",hessname). set {; opt_type irc; irc_direction backward; basis aug-cc-pV(D+d)Z; maxiter 300; g_convergence gau_verytight; geom_maxiter 1000; cart_hess_read true; dynamic_level 1; reference uhf; irc_step_size 0.01; ensure_bt_convergence true; normal_modes_write true; print_trajectory_xyz_file true; }. energy = optimize('b3lyp'); ```. The problem is in the following snippet of output:; ```; @IRC; @IRC Point Sphere Step Energy DE MAX Force RMS Force MAX Disp RMS Disp; @IRC -----------------------------------------------------------------------------------------------------------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analytic gradient computation. ... ==> Geometry <==. Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.00",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1126
https://github.com/psi4/psi4/issues/1126:1986,Performance,perform,perform,1986,"-----------------------------------------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analytic gradient computation. ... ==> Geometry <==. Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -3.024634427518 15.994914619560; H 0.000000000000 -0.753936469287 -2.421595936667 1.007825032070; O 0.000000000000 0.000000000000 0.097932947678 15.994914619560; H 0.000000000000 0.753936469287 -2.421595936667 1.007825032070; S 0.000000000000 0.000000000000 1.616830836315 31.972070999000; ```. Even though the step clearly lowers my symmetry to the expected Cs, I get back to C2v symmetry in my subsequent computation. _NOTE: This geometry is optimized at CCSD(T), and the method used is B3LYP. That shouldn't cause an error like this. I observe the error when I optimize with CCSD(T) via p4c4 as well, but I've lowered the method for simplicity. I also can't imagine the initial hessian mattering either, b",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1126
https://github.com/psi4/psi4/issues/1126:2733,Performance,optimiz,optimized,2733,"---------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analytic gradient computation. ... ==> Geometry <==. Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -3.024634427518 15.994914619560; H 0.000000000000 -0.753936469287 -2.421595936667 1.007825032070; O 0.000000000000 0.000000000000 0.097932947678 15.994914619560; H 0.000000000000 0.753936469287 -2.421595936667 1.007825032070; S 0.000000000000 0.000000000000 1.616830836315 31.972070999000; ```. Even though the step clearly lowers my symmetry to the expected Cs, I get back to C2v symmetry in my subsequent computation. _NOTE: This geometry is optimized at CCSD(T), and the method used is B3LYP. That shouldn't cause an error like this. I observe the error when I optimize with CCSD(T) via p4c4 as well, but I've lowered the method for simplicity. I also can't imagine the initial hessian mattering either, but I can supply it if helpful._",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1126
https://github.com/psi4/psi4/issues/1126:2853,Performance,optimiz,optimize,2853,"---------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analytic gradient computation. ... ==> Geometry <==. Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -3.024634427518 15.994914619560; H 0.000000000000 -0.753936469287 -2.421595936667 1.007825032070; O 0.000000000000 0.000000000000 0.097932947678 15.994914619560; H 0.000000000000 0.753936469287 -2.421595936667 1.007825032070; S 0.000000000000 0.000000000000 1.616830836315 31.972070999000; ```. Even though the step clearly lowers my symmetry to the expected Cs, I get back to C2v symmetry in my subsequent computation. _NOTE: This geometry is optimized at CCSD(T), and the method used is B3LYP. That shouldn't cause an error like this. I observe the error when I optimize with CCSD(T) via p4c4 as well, but I've lowered the method for simplicity. I also can't imagine the initial hessian mattering either, but I can supply it if helpful._",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1126
https://github.com/psi4/psi4/issues/1126:2605,Usability,clear,clearly,2605,"---------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analytic gradient computation. ... ==> Geometry <==. Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -3.024634427518 15.994914619560; H 0.000000000000 -0.753936469287 -2.421595936667 1.007825032070; O 0.000000000000 0.000000000000 0.097932947678 15.994914619560; H 0.000000000000 0.753936469287 -2.421595936667 1.007825032070; S 0.000000000000 0.000000000000 1.616830836315 31.972070999000; ```. Even though the step clearly lowers my symmetry to the expected Cs, I get back to C2v symmetry in my subsequent computation. _NOTE: This geometry is optimized at CCSD(T), and the method used is B3LYP. That shouldn't cause an error like this. I observe the error when I optimize with CCSD(T) via p4c4 as well, but I've lowered the method for simplicity. I also can't imagine the initial hessian mattering either, but I can supply it if helpful._",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1126
https://github.com/psi4/psi4/issues/1126:2925,Usability,simpl,simplicity,2925,"---------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analytic gradient computation. ... ==> Geometry <==. Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -3.024634427518 15.994914619560; H 0.000000000000 -0.753936469287 -2.421595936667 1.007825032070; O 0.000000000000 0.000000000000 0.097932947678 15.994914619560; H 0.000000000000 0.753936469287 -2.421595936667 1.007825032070; S 0.000000000000 0.000000000000 1.616830836315 31.972070999000; ```. Even though the step clearly lowers my symmetry to the expected Cs, I get back to C2v symmetry in my subsequent computation. _NOTE: This geometry is optimized at CCSD(T), and the method used is B3LYP. That shouldn't cause an error like this. I observe the error when I optimize with CCSD(T) via p4c4 as well, but I've lowered the method for simplicity. I also can't imagine the initial hessian mattering either, but I can supply it if helpful._",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1126
https://github.com/psi4/psi4/pull/1127:296,Testability,Test,Tests,296,"## Description; Exposition of the function Fa_subset and Fb_subset to python. ## Todos; There really are not todos here. Beforehand it was quite cumbersome to get the F matrix in AO form. . ## Questions; - [ ] Was the API made private on purpose? If yes, reject this request. ## Checklist; - [ ] Tests added for any new features:; No tests were added.; - [ ] [All or relevant fraction of full tests run] ; ctest -L quick runs through. ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1127
https://github.com/psi4/psi4/pull/1127:334,Testability,test,tests,334,"## Description; Exposition of the function Fa_subset and Fb_subset to python. ## Todos; There really are not todos here. Beforehand it was quite cumbersome to get the F matrix in AO form. . ## Questions; - [ ] Was the API made private on purpose? If yes, reject this request. ## Checklist; - [ ] Tests added for any new features:; No tests were added.; - [ ] [All or relevant fraction of full tests run] ; ctest -L quick runs through. ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1127
https://github.com/psi4/psi4/pull/1127:393,Testability,test,tests,393,"## Description; Exposition of the function Fa_subset and Fb_subset to python. ## Todos; There really are not todos here. Beforehand it was quite cumbersome to get the F matrix in AO form. . ## Questions; - [ ] Was the API made private on purpose? If yes, reject this request. ## Checklist; - [ ] Tests added for any new features:; No tests were added.; - [ ] [All or relevant fraction of full tests run] ; ctest -L quick runs through. ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1127
https://github.com/psi4/psi4/pull/1128:440,Availability,error,errors,440,"## Description; set_Ca treats Cb_so_ incorrectly in the same orbs case.; I did not trigger the bug actively, but it looks like a clear bug to me. The bug won't have triggered in any meaningful code, because every algorithm queries same orbs and therefore only uses Ca_so_ if(same_orbs). However it should be fixed regardless. Please review carefully. ## Checklist; - [ ] Tests added for any new features; ctest -L quick ran through without errors. ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1128
https://github.com/psi4/psi4/pull/1128:371,Testability,Test,Tests,371,"## Description; set_Ca treats Cb_so_ incorrectly in the same orbs case.; I did not trigger the bug actively, but it looks like a clear bug to me. The bug won't have triggered in any meaningful code, because every algorithm queries same orbs and therefore only uses Ca_so_ if(same_orbs). However it should be fixed regardless. Please review carefully. ## Checklist; - [ ] Tests added for any new features; ctest -L quick ran through without errors. ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1128
https://github.com/psi4/psi4/pull/1128:129,Usability,clear,clear,129,"## Description; set_Ca treats Cb_so_ incorrectly in the same orbs case.; I did not trigger the bug actively, but it looks like a clear bug to me. The bug won't have triggered in any meaningful code, because every algorithm queries same orbs and therefore only uses Ca_so_ if(same_orbs). However it should be fixed regardless. Please review carefully. ## Checklist; - [ ] Tests added for any new features; ctest -L quick ran through without errors. ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1128
https://github.com/psi4/psi4/pull/1129:334,Testability,test,tests,334,## Description; Eliminates a compilation warning due to the way the copy constructor and = operator were disabled in the PKWorker class. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Use C++11 `delete` syntax . ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1129
https://github.com/psi4/psi4/pull/1129:425,Testability,test,tests,425,## Description; Eliminates a compilation warning due to the way the copy constructor and = operator were disabled in the PKWorker class. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Use C++11 `delete` syntax . ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1129
https://github.com/psi4/psi4/pull/1130:40,Availability,Error,Error,40,## Description; SCF: Add SCFConvergence Error such that the error will have the wavefunction as a member. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1130
https://github.com/psi4/psi4/pull/1130:60,Availability,error,error,60,## Description; SCF: Add SCFConvergence Error such that the error will have the wavefunction as a member. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1130
https://github.com/psi4/psi4/pull/1130:126,Testability,Test,Tests,126,## Description; SCF: Add SCFConvergence Error such that the error will have the wavefunction as a member. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1130
https://github.com/psi4/psi4/pull/1130:200,Testability,test,tests,200,## Description; SCF: Add SCFConvergence Error such that the error will have the wavefunction as a member. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1130
https://github.com/psi4/psi4/pull/1130:291,Testability,test,tests,291,## Description; SCF: Add SCFConvergence Error such that the error will have the wavefunction as a member. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1130
https://github.com/psi4/psi4/pull/1131:263,Deployability,Release,Release,263,"## Description; Add PSI_API to libmints/multipolesymmetry.h, so that it can support a version of v2rdm_casscf plugin. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1131
https://github.com/psi4/psi4/pull/1131:110,Modifiability,plugin,plugin,110,"## Description; Add PSI_API to libmints/multipolesymmetry.h, so that it can support a version of v2rdm_casscf plugin. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1131
https://github.com/psi4/psi4/pull/1131:347,Testability,Test,Tests,347,"## Description; Add PSI_API to libmints/multipolesymmetry.h, so that it can support a version of v2rdm_casscf plugin. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1131
https://github.com/psi4/psi4/pull/1131:421,Testability,test,tests,421,"## Description; Add PSI_API to libmints/multipolesymmetry.h, so that it can support a version of v2rdm_casscf plugin. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1131
https://github.com/psi4/psi4/pull/1131:512,Testability,test,tests,512,"## Description; Add PSI_API to libmints/multipolesymmetry.h, so that it can support a version of v2rdm_casscf plugin. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1131
https://github.com/psi4/psi4/issues/1132:826,Energy Efficiency,energy,energy,826,"I have two versions of Psi4: one compiled with the Intel compiler (18.0.1 20171018) and linked with MKL, the other compiled with GCC 6.4.0 and linked with system BLAS/LAPACK. Both versions use Python 3.6.4. The following input script to run MRCC through Psi4 runs fine with both:; ```python; import psi4. psi4.set_output_file('uhf_example_mrcc_h2o.dat', False); psi4.set_num_threads(1). R_ref = 0.96735; theta_ref = 102.799. mol_string = """"""; symmetry c2v; 0 1; O; H 1 {R}; H 1 {R} 2 {theta}; units angstrom; """""". basis = 'jun-cc-pVDZ'; mol = psi4.geometry(mol_string.format(R=2.0*R_ref, theta=theta_ref), name='h2o'); molname = mol.name(); psi4.set_options({; 'SCF_TYPE': 'PK',; 'BASIS': basis,; 'E_CONVERGENCE': 1e-09,; 'D_CONVERGENCE': 1e-09,; 'REFERENCE': 'UHF',; 'STABILITY_ANALYSIS': 'FOLLOW'; }); scf_e, scf_wfn = psi4.energy('scf', molecule=mol, return_wfn=True); e_psi4 = psi4.energy('ccsd', ref_wfn=scf_wfn); e_mrcc = psi4.energy('mrccsd', ref_wfn=scf_wfn, keep=True); print('CCSD from Psi4 {:20.12f}, CCSD from MRCC {:20.12f}'.format(e_psi4, e_mrcc)); psi4.core.clean_options(); psi4.core.clean(); ```. However, when setting a higher number of threads only the GCC-compiled version runs fine. The Intel version hangs right after emitting the input files for MRCC, _e.g._ after the call to [`mrcc_generate_input`](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3734) This function is bound to Python in [`core.cc`](https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L299-L302) and defined in [`mrcc.cc`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/mrcc/mrcc.cc#L677-L1003). The last sign of activity from the Intel-compiled version is the printing of the timer (invoked by the `tstop()` before `return Success` in the function in `mrcc.cc`), if I put a print statement in `proc.py` right after, nothing happens, as if the function never returns. Ideas on how to debug?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1132
https://github.com/psi4/psi4/issues/1132:886,Energy Efficiency,energy,energy,886,"I have two versions of Psi4: one compiled with the Intel compiler (18.0.1 20171018) and linked with MKL, the other compiled with GCC 6.4.0 and linked with system BLAS/LAPACK. Both versions use Python 3.6.4. The following input script to run MRCC through Psi4 runs fine with both:; ```python; import psi4. psi4.set_output_file('uhf_example_mrcc_h2o.dat', False); psi4.set_num_threads(1). R_ref = 0.96735; theta_ref = 102.799. mol_string = """"""; symmetry c2v; 0 1; O; H 1 {R}; H 1 {R} 2 {theta}; units angstrom; """""". basis = 'jun-cc-pVDZ'; mol = psi4.geometry(mol_string.format(R=2.0*R_ref, theta=theta_ref), name='h2o'); molname = mol.name(); psi4.set_options({; 'SCF_TYPE': 'PK',; 'BASIS': basis,; 'E_CONVERGENCE': 1e-09,; 'D_CONVERGENCE': 1e-09,; 'REFERENCE': 'UHF',; 'STABILITY_ANALYSIS': 'FOLLOW'; }); scf_e, scf_wfn = psi4.energy('scf', molecule=mol, return_wfn=True); e_psi4 = psi4.energy('ccsd', ref_wfn=scf_wfn); e_mrcc = psi4.energy('mrccsd', ref_wfn=scf_wfn, keep=True); print('CCSD from Psi4 {:20.12f}, CCSD from MRCC {:20.12f}'.format(e_psi4, e_mrcc)); psi4.core.clean_options(); psi4.core.clean(); ```. However, when setting a higher number of threads only the GCC-compiled version runs fine. The Intel version hangs right after emitting the input files for MRCC, _e.g._ after the call to [`mrcc_generate_input`](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3734) This function is bound to Python in [`core.cc`](https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L299-L302) and defined in [`mrcc.cc`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/mrcc/mrcc.cc#L677-L1003). The last sign of activity from the Intel-compiled version is the printing of the timer (invoked by the `tstop()` before `return Success` in the function in `mrcc.cc`), if I put a print statement in `proc.py` right after, nothing happens, as if the function never returns. Ideas on how to debug?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1132
https://github.com/psi4/psi4/issues/1132:933,Energy Efficiency,energy,energy,933,"I have two versions of Psi4: one compiled with the Intel compiler (18.0.1 20171018) and linked with MKL, the other compiled with GCC 6.4.0 and linked with system BLAS/LAPACK. Both versions use Python 3.6.4. The following input script to run MRCC through Psi4 runs fine with both:; ```python; import psi4. psi4.set_output_file('uhf_example_mrcc_h2o.dat', False); psi4.set_num_threads(1). R_ref = 0.96735; theta_ref = 102.799. mol_string = """"""; symmetry c2v; 0 1; O; H 1 {R}; H 1 {R} 2 {theta}; units angstrom; """""". basis = 'jun-cc-pVDZ'; mol = psi4.geometry(mol_string.format(R=2.0*R_ref, theta=theta_ref), name='h2o'); molname = mol.name(); psi4.set_options({; 'SCF_TYPE': 'PK',; 'BASIS': basis,; 'E_CONVERGENCE': 1e-09,; 'D_CONVERGENCE': 1e-09,; 'REFERENCE': 'UHF',; 'STABILITY_ANALYSIS': 'FOLLOW'; }); scf_e, scf_wfn = psi4.energy('scf', molecule=mol, return_wfn=True); e_psi4 = psi4.energy('ccsd', ref_wfn=scf_wfn); e_mrcc = psi4.energy('mrccsd', ref_wfn=scf_wfn, keep=True); print('CCSD from Psi4 {:20.12f}, CCSD from MRCC {:20.12f}'.format(e_psi4, e_mrcc)); psi4.core.clean_options(); psi4.core.clean(); ```. However, when setting a higher number of threads only the GCC-compiled version runs fine. The Intel version hangs right after emitting the input files for MRCC, _e.g._ after the call to [`mrcc_generate_input`](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3734) This function is bound to Python in [`core.cc`](https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L299-L302) and defined in [`mrcc.cc`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/mrcc/mrcc.cc#L677-L1003). The last sign of activity from the Intel-compiled version is the printing of the timer (invoked by the `tstop()` before `return Success` in the function in `mrcc.cc`), if I put a print statement in `proc.py` right after, nothing happens, as if the function never returns. Ideas on how to debug?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1132
https://github.com/psi4/psi4/pull/1133:2998,Availability,error,errors,2998,"class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directly without any interference from Python and C++. The reason they were split this way: ESPPropCalc and PopulationAnalysisCalc and MultipolePropCalc do not share any members or variables. Example: only MPC requires an explicit origin to be set. ## Questions; - [x] I changed a return type to const & to avoid a large copy: https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1#r30055651; - [x] The return type in compute_mo_extents is an actual vector instead of a Shared pointer. It contains maximum three elements, so I left it at that: https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e#r30055734; - [x] I could remove the Prop baseclass completely from OEProp in the future. Only one function uses something from this. ## Checklist; - [x] Tests added for any new features; The tests are all still called from OEProp. The only new thing is the in-memory grid routine.; - [x] [All or relevant fraction of full tests run]; ctest -L quick was run. No errors. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1133
https://github.com/psi4/psi4/pull/1133:1098,Energy Efficiency,charge,charges,1098,"/psi4/psi4/issues/1116 :. 1.) Split Prop into ; - - Prop: All One Electron convenience accessors and setters and getters, but no access to globals at all. Prop is now only a convenience class, which sets up a few nice accessors.; - - TaskListComputer: This class handles all the compute baseclass elements of Prop, adding, removing tasks from a task queue and computing them. It's very low complexity.; This was done to allow Prop to be easily inheritable without having to implement all the Taskqueue things, which honestly did not have a lot do with Prop itself. This commit makes using Prop inside the code a ton easier.; This was done in commit ; 528c0d7 : https://github.com/psi4/psi4/commit/528c0d719e8bb49b12652417b00db506241a4bee. 2.) Split OEProp in three distinct classes:; - - MultipolePropCalc: This class calculates all multipole properties and mo extents in commit: ; 59005ee https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e; - - PopulationAnalysisCalc: This class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directly without any interference from Python and C++. The reason t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1133
https://github.com/psi4/psi4/pull/1133:1580,Integrability,rout,routine,1580," lot do with Prop itself. This commit makes using Prop inside the code a ton easier.; This was done in commit ; 528c0d7 : https://github.com/psi4/psi4/commit/528c0d719e8bb49b12652417b00db506241a4bee. 2.) Split OEProp in three distinct classes:; - - MultipolePropCalc: This class calculates all multipole properties and mo extents in commit: ; 59005ee https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e; - - PopulationAnalysisCalc: This class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directly without any interference from Python and C++. The reason they were split this way: ESPPropCalc and PopulationAnalysisCalc and MultipolePropCalc do not share any members or variables. Example: only MPC requires an explicit origin to be set. ## Questions; - [x] I changed a return type to const & to avoid a large copy: https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1#r30055651; - [x] The return type in compute_mo_extents is an actual vector instead of a Shared pointer. It contains maximum three elements, so I left it at that: https://github.com/psi4/psi4/commit/5900",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1133
https://github.com/psi4/psi4/pull/1133:2909,Integrability,rout,routine,2909,"class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directly without any interference from Python and C++. The reason they were split this way: ESPPropCalc and PopulationAnalysisCalc and MultipolePropCalc do not share any members or variables. Example: only MPC requires an explicit origin to be set. ## Questions; - [x] I changed a return type to const & to avoid a large copy: https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1#r30055651; - [x] The return type in compute_mo_extents is an actual vector instead of a Shared pointer. It contains maximum three elements, so I left it at that: https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e#r30055734; - [x] I could remove the Prop baseclass completely from OEProp in the future. Only one function uses something from this. ## Checklist; - [x] Tests added for any new features; The tests are all still called from OEProp. The only new thing is the in-memory grid routine.; - [x] [All or relevant fraction of full tests run]; ctest -L quick was run. No errors. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1133
https://github.com/psi4/psi4/pull/1133:505,Modifiability,inherit,inheritable,505,"## Description; This pull request adresses https://github.com/psi4/psi4/issues/1116 :. 1.) Split Prop into ; - - Prop: All One Electron convenience accessors and setters and getters, but no access to globals at all. Prop is now only a convenience class, which sets up a few nice accessors.; - - TaskListComputer: This class handles all the compute baseclass elements of Prop, adding, removing tasks from a task queue and computing them. It's very low complexity.; This was done to allow Prop to be easily inheritable without having to implement all the Taskqueue things, which honestly did not have a lot do with Prop itself. This commit makes using Prop inside the code a ton easier.; This was done in commit ; 528c0d7 : https://github.com/psi4/psi4/commit/528c0d719e8bb49b12652417b00db506241a4bee. 2.) Split OEProp in three distinct classes:; - - MultipolePropCalc: This class calculates all multipole properties and mo extents in commit: ; 59005ee https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e; - - PopulationAnalysisCalc: This class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1133
https://github.com/psi4/psi4/pull/1133:1897,Modifiability,variab,variables,1897,"roperties and mo extents in commit: ; 59005ee https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e; - - PopulationAnalysisCalc: This class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directly without any interference from Python and C++. The reason they were split this way: ESPPropCalc and PopulationAnalysisCalc and MultipolePropCalc do not share any members or variables. Example: only MPC requires an explicit origin to be set. ## Questions; - [x] I changed a return type to const & to avoid a large copy: https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1#r30055651; - [x] The return type in compute_mo_extents is an actual vector instead of a Shared pointer. It contains maximum three elements, so I left it at that: https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e#r30055734; - [x] I could remove the Prop baseclass completely from OEProp in the future. Only one function uses something from this. ## Checklist; - [x] Tests added for any new features; The tests are all still called from OEProp. The only new thing is the in-memory g",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1133
https://github.com/psi4/psi4/pull/1133:2175,Modifiability,variab,variables,2175,"class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directly without any interference from Python and C++. The reason they were split this way: ESPPropCalc and PopulationAnalysisCalc and MultipolePropCalc do not share any members or variables. Example: only MPC requires an explicit origin to be set. ## Questions; - [x] I changed a return type to const & to avoid a large copy: https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1#r30055651; - [x] The return type in compute_mo_extents is an actual vector instead of a Shared pointer. It contains maximum three elements, so I left it at that: https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e#r30055734; - [x] I could remove the Prop baseclass completely from OEProp in the future. Only one function uses something from this. ## Checklist; - [x] Tests added for any new features; The tests are all still called from OEProp. The only new thing is the in-memory grid routine.; - [x] [All or relevant fraction of full tests run]; ctest -L quick was run. No errors. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1133
https://github.com/psi4/psi4/pull/1133:411,Performance,queue,queue,411,"## Description; This pull request adresses https://github.com/psi4/psi4/issues/1116 :. 1.) Split Prop into ; - - Prop: All One Electron convenience accessors and setters and getters, but no access to globals at all. Prop is now only a convenience class, which sets up a few nice accessors.; - - TaskListComputer: This class handles all the compute baseclass elements of Prop, adding, removing tasks from a task queue and computing them. It's very low complexity.; This was done to allow Prop to be easily inheritable without having to implement all the Taskqueue things, which honestly did not have a lot do with Prop itself. This commit makes using Prop inside the code a ton easier.; This was done in commit ; 528c0d7 : https://github.com/psi4/psi4/commit/528c0d719e8bb49b12652417b00db506241a4bee. 2.) Split OEProp in three distinct classes:; - - MultipolePropCalc: This class calculates all multipole properties and mo extents in commit: ; 59005ee https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e; - - PopulationAnalysisCalc: This class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1133
https://github.com/psi4/psi4/pull/1133:2301,Safety,avoid,avoid,2301,"class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directly without any interference from Python and C++. The reason they were split this way: ESPPropCalc and PopulationAnalysisCalc and MultipolePropCalc do not share any members or variables. Example: only MPC requires an explicit origin to be set. ## Questions; - [x] I changed a return type to const & to avoid a large copy: https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1#r30055651; - [x] The return type in compute_mo_extents is an actual vector instead of a Shared pointer. It contains maximum three elements, so I left it at that: https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e#r30055734; - [x] I could remove the Prop baseclass completely from OEProp in the future. Only one function uses something from this. ## Checklist; - [x] Tests added for any new features; The tests are all still called from OEProp. The only new thing is the in-memory grid routine.; - [x] [All or relevant fraction of full tests run]; ctest -L quick was run. No errors. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1133
https://github.com/psi4/psi4/pull/1133:148,Security,access,accessors,148,"## Description; This pull request adresses https://github.com/psi4/psi4/issues/1116 :. 1.) Split Prop into ; - - Prop: All One Electron convenience accessors and setters and getters, but no access to globals at all. Prop is now only a convenience class, which sets up a few nice accessors.; - - TaskListComputer: This class handles all the compute baseclass elements of Prop, adding, removing tasks from a task queue and computing them. It's very low complexity.; This was done to allow Prop to be easily inheritable without having to implement all the Taskqueue things, which honestly did not have a lot do with Prop itself. This commit makes using Prop inside the code a ton easier.; This was done in commit ; 528c0d7 : https://github.com/psi4/psi4/commit/528c0d719e8bb49b12652417b00db506241a4bee. 2.) Split OEProp in three distinct classes:; - - MultipolePropCalc: This class calculates all multipole properties and mo extents in commit: ; 59005ee https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e; - - PopulationAnalysisCalc: This class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1133
https://github.com/psi4/psi4/pull/1133:190,Security,access,access,190,"## Description; This pull request adresses https://github.com/psi4/psi4/issues/1116 :. 1.) Split Prop into ; - - Prop: All One Electron convenience accessors and setters and getters, but no access to globals at all. Prop is now only a convenience class, which sets up a few nice accessors.; - - TaskListComputer: This class handles all the compute baseclass elements of Prop, adding, removing tasks from a task queue and computing them. It's very low complexity.; This was done to allow Prop to be easily inheritable without having to implement all the Taskqueue things, which honestly did not have a lot do with Prop itself. This commit makes using Prop inside the code a ton easier.; This was done in commit ; 528c0d7 : https://github.com/psi4/psi4/commit/528c0d719e8bb49b12652417b00db506241a4bee. 2.) Split OEProp in three distinct classes:; - - MultipolePropCalc: This class calculates all multipole properties and mo extents in commit: ; 59005ee https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e; - - PopulationAnalysisCalc: This class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1133
https://github.com/psi4/psi4/pull/1133:279,Security,access,accessors,279,"## Description; This pull request adresses https://github.com/psi4/psi4/issues/1116 :. 1.) Split Prop into ; - - Prop: All One Electron convenience accessors and setters and getters, but no access to globals at all. Prop is now only a convenience class, which sets up a few nice accessors.; - - TaskListComputer: This class handles all the compute baseclass elements of Prop, adding, removing tasks from a task queue and computing them. It's very low complexity.; This was done to allow Prop to be easily inheritable without having to implement all the Taskqueue things, which honestly did not have a lot do with Prop itself. This commit makes using Prop inside the code a ton easier.; This was done in commit ; 528c0d7 : https://github.com/psi4/psi4/commit/528c0d719e8bb49b12652417b00db506241a4bee. 2.) Split OEProp in three distinct classes:; - - MultipolePropCalc: This class calculates all multipole properties and mo extents in commit: ; 59005ee https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e; - - PopulationAnalysisCalc: This class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1133
https://github.com/psi4/psi4/pull/1133:2790,Testability,Test,Tests,2790,"class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directly without any interference from Python and C++. The reason they were split this way: ESPPropCalc and PopulationAnalysisCalc and MultipolePropCalc do not share any members or variables. Example: only MPC requires an explicit origin to be set. ## Questions; - [x] I changed a return type to const & to avoid a large copy: https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1#r30055651; - [x] The return type in compute_mo_extents is an actual vector instead of a Shared pointer. It contains maximum three elements, so I left it at that: https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e#r30055734; - [x] I could remove the Prop baseclass completely from OEProp in the future. Only one function uses something from this. ## Checklist; - [x] Tests added for any new features; The tests are all still called from OEProp. The only new thing is the in-memory grid routine.; - [x] [All or relevant fraction of full tests run]; ctest -L quick was run. No errors. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1133
https://github.com/psi4/psi4/pull/1133:2828,Testability,test,tests,2828,"class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directly without any interference from Python and C++. The reason they were split this way: ESPPropCalc and PopulationAnalysisCalc and MultipolePropCalc do not share any members or variables. Example: only MPC requires an explicit origin to be set. ## Questions; - [x] I changed a return type to const & to avoid a large copy: https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1#r30055651; - [x] The return type in compute_mo_extents is an actual vector instead of a Shared pointer. It contains maximum three elements, so I left it at that: https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e#r30055734; - [x] I could remove the Prop baseclass completely from OEProp in the future. Only one function uses something from this. ## Checklist; - [x] Tests added for any new features; The tests are all still called from OEProp. The only new thing is the in-memory grid routine.; - [x] [All or relevant fraction of full tests run]; ctest -L quick was run. No errors. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1133
https://github.com/psi4/psi4/pull/1133:2959,Testability,test,tests,2959,"class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directly without any interference from Python and C++. The reason they were split this way: ESPPropCalc and PopulationAnalysisCalc and MultipolePropCalc do not share any members or variables. Example: only MPC requires an explicit origin to be set. ## Questions; - [x] I changed a return type to const & to avoid a large copy: https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1#r30055651; - [x] The return type in compute_mo_extents is an actual vector instead of a Shared pointer. It contains maximum three elements, so I left it at that: https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e#r30055734; - [x] I could remove the Prop baseclass completely from OEProp in the future. Only one function uses something from this. ## Checklist; - [x] Tests added for any new features; The tests are all still called from OEProp. The only new thing is the in-memory grid routine.; - [x] [All or relevant fraction of full tests run]; ctest -L quick was run. No errors. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1133
https://github.com/psi4/psi4/pull/1134:879,Availability,failure,failure,879,"## Description; Implements a basic . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ *] Adds a smart solver class that can easily share data with a wfn object during SCF iterations. ; - [ *] Provides a platform for quickly adding new smart solving capabilities.; - [ *] With a metric for detecting oscillation, a dynamic damping function can be turned on to limit changes in Drms to a target value. * **User-Facing for Release Notes**; - [ *] With SMART_SCF set to `true`, SOSCF is automatically turned on when trailing convergence is detected, the initial oscillations in SAD, GWH, and CORE guess are damped at 70%. ## Questions; - [ *] What can be changed about the structure of the smart_solver class for ease of readability and use?; - [ *] This code leaves out 'macroiterations', i.e. restarting the SCF upon failure with updated initial conditions and options. Do we want this functionality in this PR, or another?; ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ *] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1134
https://github.com/psi4/psi4/pull/1134:484,Deployability,Release,Release,484,"## Description; Implements a basic . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ *] Adds a smart solver class that can easily share data with a wfn object during SCF iterations. ; - [ *] Provides a platform for quickly adding new smart solving capabilities.; - [ *] With a metric for detecting oscillation, a dynamic damping function can be turned on to limit changes in Drms to a target value. * **User-Facing for Release Notes**; - [ *] With SMART_SCF set to `true`, SOSCF is automatically turned on when trailing convergence is detected, the initial oscillations in SAD, GWH, and CORE guess are damped at 70%. ## Questions; - [ *] What can be changed about the structure of the smart_solver class for ease of readability and use?; - [ *] This code leaves out 'macroiterations', i.e. restarting the SCF upon failure with updated initial conditions and options. Do we want this functionality in this PR, or another?; ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ *] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1134
https://github.com/psi4/psi4/pull/1134:892,Deployability,update,updated,892,"## Description; Implements a basic . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ *] Adds a smart solver class that can easily share data with a wfn object during SCF iterations. ; - [ *] Provides a platform for quickly adding new smart solving capabilities.; - [ *] With a metric for detecting oscillation, a dynamic damping function can be turned on to limit changes in Drms to a target value. * **User-Facing for Release Notes**; - [ *] With SMART_SCF set to `true`, SOSCF is automatically turned on when trailing convergence is detected, the initial oscillations in SAD, GWH, and CORE guess are damped at 70%. ## Questions; - [ *] What can be changed about the structure of the smart_solver class for ease of readability and use?; - [ *] This code leaves out 'macroiterations', i.e. restarting the SCF upon failure with updated initial conditions and options. Do we want this functionality in this PR, or another?; ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ *] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1134
https://github.com/psi4/psi4/pull/1134:353,Safety,detect,detecting,353,"## Description; Implements a basic . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ *] Adds a smart solver class that can easily share data with a wfn object during SCF iterations. ; - [ *] Provides a platform for quickly adding new smart solving capabilities.; - [ *] With a metric for detecting oscillation, a dynamic damping function can be turned on to limit changes in Drms to a target value. * **User-Facing for Release Notes**; - [ *] With SMART_SCF set to `true`, SOSCF is automatically turned on when trailing convergence is detected, the initial oscillations in SAD, GWH, and CORE guess are damped at 70%. ## Questions; - [ *] What can be changed about the structure of the smart_solver class for ease of readability and use?; - [ *] This code leaves out 'macroiterations', i.e. restarting the SCF upon failure with updated initial conditions and options. Do we want this functionality in this PR, or another?; ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ *] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1134
https://github.com/psi4/psi4/pull/1134:600,Safety,detect,detected,600,"## Description; Implements a basic . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ *] Adds a smart solver class that can easily share data with a wfn object during SCF iterations. ; - [ *] Provides a platform for quickly adding new smart solving capabilities.; - [ *] With a metric for detecting oscillation, a dynamic damping function can be turned on to limit changes in Drms to a target value. * **User-Facing for Release Notes**; - [ *] With SMART_SCF set to `true`, SOSCF is automatically turned on when trailing convergence is detected, the initial oscillations in SAD, GWH, and CORE guess are damped at 70%. ## Questions; - [ *] What can be changed about the structure of the smart_solver class for ease of readability and use?; - [ *] This code leaves out 'macroiterations', i.e. restarting the SCF upon failure with updated initial conditions and options. Do we want this functionality in this PR, or another?; ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ *] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1134
https://github.com/psi4/psi4/pull/1134:1007,Testability,Test,Tests,1007,"## Description; Implements a basic . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ *] Adds a smart solver class that can easily share data with a wfn object during SCF iterations. ; - [ *] Provides a platform for quickly adding new smart solving capabilities.; - [ *] With a metric for detecting oscillation, a dynamic damping function can be turned on to limit changes in Drms to a target value. * **User-Facing for Release Notes**; - [ *] With SMART_SCF set to `true`, SOSCF is automatically turned on when trailing convergence is detected, the initial oscillations in SAD, GWH, and CORE guess are damped at 70%. ## Questions; - [ *] What can be changed about the structure of the smart_solver class for ease of readability and use?; - [ *] This code leaves out 'macroiterations', i.e. restarting the SCF upon failure with updated initial conditions and options. Do we want this functionality in this PR, or another?; ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ *] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1134
https://github.com/psi4/psi4/pull/1134:1081,Testability,test,tests,1081,"## Description; Implements a basic . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ *] Adds a smart solver class that can easily share data with a wfn object during SCF iterations. ; - [ *] Provides a platform for quickly adding new smart solving capabilities.; - [ *] With a metric for detecting oscillation, a dynamic damping function can be turned on to limit changes in Drms to a target value. * **User-Facing for Release Notes**; - [ *] With SMART_SCF set to `true`, SOSCF is automatically turned on when trailing convergence is detected, the initial oscillations in SAD, GWH, and CORE guess are damped at 70%. ## Questions; - [ *] What can be changed about the structure of the smart_solver class for ease of readability and use?; - [ *] This code leaves out 'macroiterations', i.e. restarting the SCF upon failure with updated initial conditions and options. Do we want this functionality in this PR, or another?; ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ *] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1134
https://github.com/psi4/psi4/pull/1134:1172,Testability,test,tests,1172,"## Description; Implements a basic . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ *] Adds a smart solver class that can easily share data with a wfn object during SCF iterations. ; - [ *] Provides a platform for quickly adding new smart solving capabilities.; - [ *] With a metric for detecting oscillation, a dynamic damping function can be turned on to limit changes in Drms to a target value. * **User-Facing for Release Notes**; - [ *] With SMART_SCF set to `true`, SOSCF is automatically turned on when trailing convergence is detected, the initial oscillations in SAD, GWH, and CORE guess are damped at 70%. ## Questions; - [ *] What can be changed about the structure of the smart_solver class for ease of readability and use?; - [ *] This code leaves out 'macroiterations', i.e. restarting the SCF upon failure with updated initial conditions and options. Do we want this functionality in this PR, or another?; ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ *] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1134
https://github.com/psi4/psi4/pull/1135:394,Deployability,Release,Release,394,"## Description; Basic smart SCF solver. Contains a smart_solver class for easy extensibility of convergence aids. This is still WIP, just looking for feedback on my first PR!. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Adds smart_solver class that shares data with a wfn object during SCF iterations.; * **User-Facing for Release Notes**; - [ ] With SMART_SCF set to `true`, SOSCF is automatically engaged in case of trailing convergence and the initial oscillations of SAD, GWH, and CORE guesses are damped. . ## Questions; - [ ] Do we want 'macroiterations' i.e. restarting the SCF with different initial conditions to be included in this PR, or another?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [ ] Ensure SOSCF exists for current method before turning it on. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1135
https://github.com/psi4/psi4/pull/1135:750,Testability,Test,Tests,750,"## Description; Basic smart SCF solver. Contains a smart_solver class for easy extensibility of convergence aids. This is still WIP, just looking for feedback on my first PR!. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Adds smart_solver class that shares data with a wfn object during SCF iterations.; * **User-Facing for Release Notes**; - [ ] With SMART_SCF set to `true`, SOSCF is automatically engaged in case of trailing convergence and the initial oscillations of SAD, GWH, and CORE guesses are damped. . ## Questions; - [ ] Do we want 'macroiterations' i.e. restarting the SCF with different initial conditions to be included in this PR, or another?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [ ] Ensure SOSCF exists for current method before turning it on. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1135
https://github.com/psi4/psi4/pull/1135:824,Testability,test,tests,824,"## Description; Basic smart SCF solver. Contains a smart_solver class for easy extensibility of convergence aids. This is still WIP, just looking for feedback on my first PR!. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Adds smart_solver class that shares data with a wfn object during SCF iterations.; * **User-Facing for Release Notes**; - [ ] With SMART_SCF set to `true`, SOSCF is automatically engaged in case of trailing convergence and the initial oscillations of SAD, GWH, and CORE guesses are damped. . ## Questions; - [ ] Do we want 'macroiterations' i.e. restarting the SCF with different initial conditions to be included in this PR, or another?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [ ] Ensure SOSCF exists for current method before turning it on. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1135
https://github.com/psi4/psi4/pull/1135:915,Testability,test,tests,915,"## Description; Basic smart SCF solver. Contains a smart_solver class for easy extensibility of convergence aids. This is still WIP, just looking for feedback on my first PR!. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Adds smart_solver class that shares data with a wfn object during SCF iterations.; * **User-Facing for Release Notes**; - [ ] With SMART_SCF set to `true`, SOSCF is automatically engaged in case of trailing convergence and the initial oscillations of SAD, GWH, and CORE guesses are damped. . ## Questions; - [ ] Do we want 'macroiterations' i.e. restarting the SCF with different initial conditions to be included in this PR, or another?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [ ] Ensure SOSCF exists for current method before turning it on. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1135
https://github.com/psi4/psi4/pull/1135:150,Usability,feedback,feedback,150,"## Description; Basic smart SCF solver. Contains a smart_solver class for easy extensibility of convergence aids. This is still WIP, just looking for feedback on my first PR!. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Adds smart_solver class that shares data with a wfn object during SCF iterations.; * **User-Facing for Release Notes**; - [ ] With SMART_SCF set to `true`, SOSCF is automatically engaged in case of trailing convergence and the initial oscillations of SAD, GWH, and CORE guesses are damped. . ## Questions; - [ ] Do we want 'macroiterations' i.e. restarting the SCF with different initial conditions to be included in this PR, or another?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [ ] Ensure SOSCF exists for current method before turning it on. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1135
https://github.com/psi4/psi4/issues/1136:426,Energy Efficiency,Charge,Chargemol,426,"Following the discussion https://github.com/psi4/psi4/issues/1113, it'd be useful to add to the comment line of cube files (found in [libcubeprop](https://github.com/psi4/psi4/tree/master/psi4/src/psi4/libcubeprop)) info about the number of core electrons treated by ECP and _not_ to be found in the electron density of the cube file. * Note that not all types of cubes will need this (e.g., not HOMO/LUMO cubes); * Since the Chargemol input needs number of electrons and number of core electrons _per atom_, should identify which atom(s) cores belong to. (e.g., `Total core: 10 [e] from atom 4 (6) and 8 (4)`. I'm not sure where the 0-/1-indexing notice should go.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1136
https://github.com/psi4/psi4/issues/1137:223,Availability,error,error,223,"At this stage, I have a reminder to look into this, rather than a full report. We had a user on the forum [report](http://forum.psicode.org/t/question-on-oscillator-strength-calculation-using-python-api/1036/2) getting the error message that ""Must provide roots_per_irrep vector in input."" during a EOM computation via PythonAPI. The user did provide `roots_per_irrep` in `set_options`... Just as a string rather than a list. A smarter API would have either tried to coerce the string to the actual type, a list, or have raised an error that a string wasn't valid for that argument. If Psi is already supposed to do this, why didn't it? If Psi isn't already supposed to do this, which one do we want to take?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1137
https://github.com/psi4/psi4/issues/1137:531,Availability,error,error,531,"At this stage, I have a reminder to look into this, rather than a full report. We had a user on the forum [report](http://forum.psicode.org/t/question-on-oscillator-strength-calculation-using-python-api/1036/2) getting the error message that ""Must provide roots_per_irrep vector in input."" during a EOM computation via PythonAPI. The user did provide `roots_per_irrep` in `set_options`... Just as a string rather than a list. A smarter API would have either tried to coerce the string to the actual type, a list, or have raised an error that a string wasn't valid for that argument. If Psi is already supposed to do this, why didn't it? If Psi isn't already supposed to do this, which one do we want to take?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1137
https://github.com/psi4/psi4/issues/1137:229,Integrability,message,message,229,"At this stage, I have a reminder to look into this, rather than a full report. We had a user on the forum [report](http://forum.psicode.org/t/question-on-oscillator-strength-calculation-using-python-api/1036/2) getting the error message that ""Must provide roots_per_irrep vector in input."" during a EOM computation via PythonAPI. The user did provide `roots_per_irrep` in `set_options`... Just as a string rather than a list. A smarter API would have either tried to coerce the string to the actual type, a list, or have raised an error that a string wasn't valid for that argument. If Psi is already supposed to do this, why didn't it? If Psi isn't already supposed to do this, which one do we want to take?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1137
https://github.com/psi4/psi4/pull/1138:453,Deployability,Release,Release,453,"## Description; Added a couple of new features to cubeprop. The functionality seems to work, but the PR is rather unpolished. An illustration of me while writing this PR can be found here:. https://ih0.redbubble.net/image.511550362.9563/flat,1000x1000,075,f.u1.jpg. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Implements printing of ECP electrons, issue #1136 ; * **User-Facing for Release Notes**; - [x] Added keyword `""FRONTIER_ORBITALS""` to cubeprop tasks. This computes the alpha HOMO and LUMO (if nalpha == nbeta), or the highest-energy doubly occupied (DOMO), the singly occupied (SOMO) and the unoccupied (LUMO) orbitals of both spins.; - [x] Added keyword `""DUAL_DESCRIPTOR""` to cubeprop tasks. Computes (for closed shell systems) the dual descriptor function (ie. the difference of the Fukui functions) from the HOMO and LUMO. Some references: [10.1021/jp046577a](http://dx.doi.org/10.1021/jp046577a) and [10.1007/s10910-014-0437-7](http://dx.doi.org/10.1007/s10910-014-0437-7). ## Checklist; - [x] Add documentation of the new features to the manual.; - [X] Add tests; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1138
https://github.com/psi4/psi4/pull/1138:606,Energy Efficiency,energy,energy,606,"## Description; Added a couple of new features to cubeprop. The functionality seems to work, but the PR is rather unpolished. An illustration of me while writing this PR can be found here:. https://ih0.redbubble.net/image.511550362.9563/flat,1000x1000,075,f.u1.jpg. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Implements printing of ECP electrons, issue #1136 ; * **User-Facing for Release Notes**; - [x] Added keyword `""FRONTIER_ORBITALS""` to cubeprop tasks. This computes the alpha HOMO and LUMO (if nalpha == nbeta), or the highest-energy doubly occupied (DOMO), the singly occupied (SOMO) and the unoccupied (LUMO) orbitals of both spins.; - [x] Added keyword `""DUAL_DESCRIPTOR""` to cubeprop tasks. Computes (for closed shell systems) the dual descriptor function (ie. the difference of the Fukui functions) from the HOMO and LUMO. Some references: [10.1021/jp046577a](http://dx.doi.org/10.1021/jp046577a) and [10.1007/s10910-014-0437-7](http://dx.doi.org/10.1007/s10910-014-0437-7). ## Checklist; - [x] Add documentation of the new features to the manual.; - [X] Add tests; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1138
https://github.com/psi4/psi4/pull/1138:1143,Testability,test,tests,1143,"## Description; Added a couple of new features to cubeprop. The functionality seems to work, but the PR is rather unpolished. An illustration of me while writing this PR can be found here:. https://ih0.redbubble.net/image.511550362.9563/flat,1000x1000,075,f.u1.jpg. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Implements printing of ECP electrons, issue #1136 ; * **User-Facing for Release Notes**; - [x] Added keyword `""FRONTIER_ORBITALS""` to cubeprop tasks. This computes the alpha HOMO and LUMO (if nalpha == nbeta), or the highest-energy doubly occupied (DOMO), the singly occupied (SOMO) and the unoccupied (LUMO) orbitals of both spins.; - [x] Added keyword `""DUAL_DESCRIPTOR""` to cubeprop tasks. Computes (for closed shell systems) the dual descriptor function (ie. the difference of the Fukui functions) from the HOMO and LUMO. Some references: [10.1021/jp046577a](http://dx.doi.org/10.1021/jp046577a) and [10.1007/s10910-014-0437-7](http://dx.doi.org/10.1007/s10910-014-0437-7). ## Checklist; - [x] Add documentation of the new features to the manual.; - [X] Add tests; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1138
https://github.com/psi4/psi4/pull/1138:1190,Testability,test,tests,1190,"## Description; Added a couple of new features to cubeprop. The functionality seems to work, but the PR is rather unpolished. An illustration of me while writing this PR can be found here:. https://ih0.redbubble.net/image.511550362.9563/flat,1000x1000,075,f.u1.jpg. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Implements printing of ECP electrons, issue #1136 ; * **User-Facing for Release Notes**; - [x] Added keyword `""FRONTIER_ORBITALS""` to cubeprop tasks. This computes the alpha HOMO and LUMO (if nalpha == nbeta), or the highest-energy doubly occupied (DOMO), the singly occupied (SOMO) and the unoccupied (LUMO) orbitals of both spins.; - [x] Added keyword `""DUAL_DESCRIPTOR""` to cubeprop tasks. Computes (for closed shell systems) the dual descriptor function (ie. the difference of the Fukui functions) from the HOMO and LUMO. Some references: [10.1021/jp046577a](http://dx.doi.org/10.1021/jp046577a) and [10.1007/s10910-014-0437-7](http://dx.doi.org/10.1007/s10910-014-0437-7). ## Checklist; - [x] Add documentation of the new features to the manual.; - [X] Add tests; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1138
https://github.com/psi4/psi4/pull/1138:1281,Testability,test,tests,1281,"## Description; Added a couple of new features to cubeprop. The functionality seems to work, but the PR is rather unpolished. An illustration of me while writing this PR can be found here:. https://ih0.redbubble.net/image.511550362.9563/flat,1000x1000,075,f.u1.jpg. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Implements printing of ECP electrons, issue #1136 ; * **User-Facing for Release Notes**; - [x] Added keyword `""FRONTIER_ORBITALS""` to cubeprop tasks. This computes the alpha HOMO and LUMO (if nalpha == nbeta), or the highest-energy doubly occupied (DOMO), the singly occupied (SOMO) and the unoccupied (LUMO) orbitals of both spins.; - [x] Added keyword `""DUAL_DESCRIPTOR""` to cubeprop tasks. Computes (for closed shell systems) the dual descriptor function (ie. the difference of the Fukui functions) from the HOMO and LUMO. Some references: [10.1021/jp046577a](http://dx.doi.org/10.1021/jp046577a) and [10.1007/s10910-014-0437-7](http://dx.doi.org/10.1007/s10910-014-0437-7). ## Checklist; - [x] Add documentation of the new features to the manual.; - [X] Add tests; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1138
https://github.com/psi4/psi4/pull/1139:1210,Testability,test,tests,1210,"## Description; There was a bug (see conversation between myself and Andy Simmonett in Slack channel earlier today) where if you attempted to use orbital casting on a frequency computation with symmetry, the first symmetry-breaking displacement would succeed at the small basis computation but crash at the large basis computation, saying that it couldn't cast orbitals between symmetries. The code was previously set so that GUESS would be set to READ. This would cause Psi to attempt to read the last saved orbitals. As [the casting mechanism has nothing to do with reading](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1336-L1341), the last saved orbitals weren't the orbitals from the small basis computation, but the orbitals from the last geometry, which may well be of the wrong point group. As I can find no reason to have GUESS set to READ, the offending code has been removed. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a bug causing `basis_guess` to crash if the user has geometries of different symmetries, e.g., a finite difference hessian for a system with symmetry. ## Checklist; - [x] [Quicktests and cast tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Confirmed this fixes the problem I saw. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1139
https://github.com/psi4/psi4/pull/1139:1301,Testability,test,tests,1301,"## Description; There was a bug (see conversation between myself and Andy Simmonett in Slack channel earlier today) where if you attempted to use orbital casting on a frequency computation with symmetry, the first symmetry-breaking displacement would succeed at the small basis computation but crash at the large basis computation, saying that it couldn't cast orbitals between symmetries. The code was previously set so that GUESS would be set to READ. This would cause Psi to attempt to read the last saved orbitals. As [the casting mechanism has nothing to do with reading](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1336-L1341), the last saved orbitals weren't the orbitals from the small basis computation, but the orbitals from the last geometry, which may well be of the wrong point group. As I can find no reason to have GUESS set to READ, the offending code has been removed. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a bug causing `basis_guess` to crash if the user has geometries of different symmetries, e.g., a finite difference hessian for a system with symmetry. ## Checklist; - [x] [Quicktests and cast tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Confirmed this fixes the problem I saw. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1139
https://github.com/psi4/psi4/pull/1140:382,Testability,test,tests,382,## Description; Removes initialization of DFHelper object in fexch and find by having a dfh object as member data. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Circumvents recalculation of molecular integrals in the fisapt package.; - [x] Provides a corresponding speed-up . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1140
https://github.com/psi4/psi4/pull/1140:473,Testability,test,tests,473,## Description; Removes initialization of DFHelper object in fexch and find by having a dfh object as member data. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Circumvents recalculation of molecular integrals in the fisapt package.; - [x] Provides a corresponding speed-up . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1140
https://github.com/psi4/psi4/pull/1141:68,Testability,stub,stub,68,## Description; Begin reorganizing Programmers' Manual. Put in some stub pages. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1141
https://github.com/psi4/psi4/issues/1143:1086,Performance,Perform,Performing,1086,"ues of ; `E_CONVERGENCE`,`MAX_MOGRAD_CONVERGENCE`, `RMS_MOGRAD_CONVERGENCE` does not produce the expected behavior. . Rather than requiring `RMS_MOGRAD <= RMS_MOGRAD_CONVERGENCE`, `MAX_MOGRAD <= MAX_MOGRAD_CONVERGENCE`, `DE <= E_CONVERGENCE` to ALL evaluate to `True`, convergence is declared if EITHER `DE <= E_CONVERGENCE` or the MOGRAD convergence is met. . This leads to situations where tightening `MAX_MOGRAD_CONVERGENCE` has no effect on the result of the calculation, and convergence is declared when `MAX_MOGRAD` is higher than the convergence criterion. As far as I can tell, the offending lines of code are in occ_iterations.cc L279:282:; ```; if (wfn_type_ != ""DF-OLCCD"") {; if (rms_wog < tol_grad && biggest_mograd < mograd_max) break;; if (std::fabs(DE) <= tol_Eod) break;; }; ```. Removing these lines fixes my issue, but as I am unclear about the purpose of this code block perhaps that is not the best fix. With original code:; ```; ==============================================================================; ================ Performing DF-OMP2 iterations... ============================; ==============================================================================; Minimizing DF-MP2-L Functional; ------------------------------; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2; ---- --------------- ---------- ----------- ----------- ----------; 1 -76.2055179040 -1.60e-03 3.84e-04 1.53e-03 5.38e-05; 2 -76.2055243130 -6.41e-06 3.88e-05 2.04e-04 5.14e-06. ==============================================================================; ======================== DF-OMP2 ITERATIONS ARE CONVERGED ====================; ==============================================================================; ```. With lines removed/commented (EXECUTING LOOP print statements added by me during debugging, ignore them):; ```; ==============================================================================; ================ Performing DF-OMP2 iterations... ============================; ===",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1143
https://github.com/psi4/psi4/issues/1143:1973,Performance,Perform,Performing,1973," unclear about the purpose of this code block perhaps that is not the best fix. With original code:; ```; ==============================================================================; ================ Performing DF-OMP2 iterations... ============================; ==============================================================================; Minimizing DF-MP2-L Functional; ------------------------------; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2; ---- --------------- ---------- ----------- ----------- ----------; 1 -76.2055179040 -1.60e-03 3.84e-04 1.53e-03 5.38e-05; 2 -76.2055243130 -6.41e-06 3.88e-05 2.04e-04 5.14e-06. ==============================================================================; ======================== DF-OMP2 ITERATIONS ARE CONVERGED ====================; ==============================================================================; ```. With lines removed/commented (EXECUTING LOOP print statements added by me during debugging, ignore them):; ```; ==============================================================================; ================ Performing DF-OMP2 iterations... ============================; ==============================================================================; Minimizing DF-MP2-L Functional; ------------------------------; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2; ---- --------------- ---------- ----------- ----------- ----------; EXECUTING LOOP; 1 -76.2055179040 -1.60e-03 3.84e-04 1.53e-03 5.38e-05; EXECUTING LOOP; 2 -76.2055243130 -6.41e-06 3.88e-05 2.04e-04 5.14e-06; EXECUTING LOOP; 3 -76.2055243922 -7.91e-08 4.89e-06 2.97e-05 6.34e-07; EXECUTING LOOP; 4 -76.2055243935 -1.38e-09 6.15e-07 4.23e-06 8.53e-08; EXECUTING LOOP; 5 -76.2055243936 -2.45e-11 1.61e-07 7.61e-07 1.16e-08; EXECUTING LOOP; 6 -76.2055243936 -9.95e-13 1.87e-08 1.49e-07 1.92e-09. ==============================================================================; ======================== DF-OMP2 ITERATIONS ARE CONVERGED ====================; =",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1143
https://github.com/psi4/psi4/issues/1144:794,Modifiability,plugin,plugin,794,"Due to a lull in impending c-side changes, we’d like to take the opportunity to auto-format the c-side codebase according to [the existing clang-format file](https://github.com/psi4/psi4/blob/master/.clang-format). You (and we, reviewing and merging) have until Friday, 24 Aug to get code submitted for review/merged. After that, we will be making per-module PRs of formatted changes. None of these will be merged until Wed, 29 Aug. You have until then to indicate (on the PR) that this will interrupt your development. If that happens, the PR can be closed and postponed to accommodate you. Unchallenged PRs will be merged over the week. Modules to be skipped include occ/dfocc/findif/optking/interface_dmrg because of outstanding PRs, imminent demise, or need to compare easily with upstream plugin. - [x] adc #1152; - [x] ambit_interface #1172 ; - [x] ccdensity -- delay to 29 Aug #1202; - [x] ccenergy -- delay to 29 Aug #1203; - [x] cceom #1204; - [x] cchbar #1205; - [x] cclambda -- delay to 29 Aug #1206; - [x] ccresponse #1207; - [x] cctransort #1208; - [x] cctriples -- ~delay to 29 Aug (wait for #1199) #1209~ #1252 ; - [x] dcft #1154; - [x] detci #1155; - [x] dfep2 #1157 ; - [x] dfmp2 #1159; - [x] dfocc -- mostly done in #797, touch-ups in #1392; - [x] dmrg -- turning off formatting so can diff with plugin in CheMPS2 repo #1392; - ~findif~; - [x] fisapt #1175; - [x] fnocc #1158; - [x] gdma_interface #1166; - [x] lib3index ~#1169 (wait for #1200)~ #1389; - [x] libciomr #1173; - [x] libcubeprop -- delay to 29 Aug (wait for #1138) #1210 ; - [x] libdiis #1167; - [x] libdisp #1168; - [x] libdpd -- ~delay to 29 Aug (wait for #1199) #1211~ #1251 ; - [x] libfilesystem #1174; - [x] libfock ~#1164 (wait for #1224 and for @dgasmith )~ #1397; - [x] libfunctional -- ~delay to 29 Aug #1195 (wait for @dgasmith)~ #1396; - [x] libiwl #1163 ; - [x] libmints -- delay to 29 Aug #1156; - [x] libmoinfo #1165; - [x] liboptions #1187; - [x] libplugin #1190; - [x] libpsi4util #1176; - [x] libpsio #",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1144
https://github.com/psi4/psi4/issues/1144:1314,Modifiability,plugin,plugin,1314,"Wed, 29 Aug. You have until then to indicate (on the PR) that this will interrupt your development. If that happens, the PR can be closed and postponed to accommodate you. Unchallenged PRs will be merged over the week. Modules to be skipped include occ/dfocc/findif/optking/interface_dmrg because of outstanding PRs, imminent demise, or need to compare easily with upstream plugin. - [x] adc #1152; - [x] ambit_interface #1172 ; - [x] ccdensity -- delay to 29 Aug #1202; - [x] ccenergy -- delay to 29 Aug #1203; - [x] cceom #1204; - [x] cchbar #1205; - [x] cclambda -- delay to 29 Aug #1206; - [x] ccresponse #1207; - [x] cctransort #1208; - [x] cctriples -- ~delay to 29 Aug (wait for #1199) #1209~ #1252 ; - [x] dcft #1154; - [x] detci #1155; - [x] dfep2 #1157 ; - [x] dfmp2 #1159; - [x] dfocc -- mostly done in #797, touch-ups in #1392; - [x] dmrg -- turning off formatting so can diff with plugin in CheMPS2 repo #1392; - ~findif~; - [x] fisapt #1175; - [x] fnocc #1158; - [x] gdma_interface #1166; - [x] lib3index ~#1169 (wait for #1200)~ #1389; - [x] libciomr #1173; - [x] libcubeprop -- delay to 29 Aug (wait for #1138) #1210 ; - [x] libdiis #1167; - [x] libdisp #1168; - [x] libdpd -- ~delay to 29 Aug (wait for #1199) #1211~ #1251 ; - [x] libfilesystem #1174; - [x] libfock ~#1164 (wait for #1224 and for @dgasmith )~ #1397; - [x] libfunctional -- ~delay to 29 Aug #1195 (wait for @dgasmith)~ #1396; - [x] libiwl #1163 ; - [x] libmints -- delay to 29 Aug #1156; - [x] libmoinfo #1165; - [x] liboptions #1187; - [x] libplugin #1190; - [x] libpsi4util #1176; - [x] libpsio #1170; - [x] libpsipcm #1153; - [x] libqt #1186 ; - [x] libsapt_solver & sapt #1171 ; - [x] libscf_solver -- delay to 29 Aug #1194; - [x] libtrans #1162; - [x] mcscf #1189; - [x] mrcc #1161; - [x] occ #1391; - ~optking~; - [x] psimrcc #1191; - sapt (w/libsapt_solver); - [x] `psi4/src` #1192; - [x] `psi4/include` -- will probably need selective c-f disabling for headers #1193. replaced by #1223 ; - [ ] final catch-all",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1144
https://github.com/psi4/psi4/issues/1145:87,Performance,load,load,87,"If I do analytic frequency calculation with HF it seems eternally stuck (with full cpu load) - for this particular molecule at least. attached log with optimization and frequency calculation that is stuck when using analytical and full successful log with dertype=""gradient"". ```; E, wfn = optimize('HF',return_wfn=True); #E, wfn = frequencies('HF',return_wfn=True, dertype='gradient'); E, wfn = frequencies('HF',return_wfn=True). ```; [2202-HF-analytic.log](https://github.com/psi4/psi4/files/2307871/2202-HF-low-analytic.log); [2202-HF-gradient.log](https://github.com/psi4/psi4/files/2307873/2202-HF-low.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1145
https://github.com/psi4/psi4/issues/1145:152,Performance,optimiz,optimization,152,"If I do analytic frequency calculation with HF it seems eternally stuck (with full cpu load) - for this particular molecule at least. attached log with optimization and frequency calculation that is stuck when using analytical and full successful log with dertype=""gradient"". ```; E, wfn = optimize('HF',return_wfn=True); #E, wfn = frequencies('HF',return_wfn=True, dertype='gradient'); E, wfn = frequencies('HF',return_wfn=True). ```; [2202-HF-analytic.log](https://github.com/psi4/psi4/files/2307871/2202-HF-low-analytic.log); [2202-HF-gradient.log](https://github.com/psi4/psi4/files/2307873/2202-HF-low.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1145
https://github.com/psi4/psi4/issues/1145:290,Performance,optimiz,optimize,290,"If I do analytic frequency calculation with HF it seems eternally stuck (with full cpu load) - for this particular molecule at least. attached log with optimization and frequency calculation that is stuck when using analytical and full successful log with dertype=""gradient"". ```; E, wfn = optimize('HF',return_wfn=True); #E, wfn = frequencies('HF',return_wfn=True, dertype='gradient'); E, wfn = frequencies('HF',return_wfn=True). ```; [2202-HF-analytic.log](https://github.com/psi4/psi4/files/2307871/2202-HF-low-analytic.log); [2202-HF-gradient.log](https://github.com/psi4/psi4/files/2307873/2202-HF-low.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1145
https://github.com/psi4/psi4/issues/1145:143,Testability,log,log,143,"If I do analytic frequency calculation with HF it seems eternally stuck (with full cpu load) - for this particular molecule at least. attached log with optimization and frequency calculation that is stuck when using analytical and full successful log with dertype=""gradient"". ```; E, wfn = optimize('HF',return_wfn=True); #E, wfn = frequencies('HF',return_wfn=True, dertype='gradient'); E, wfn = frequencies('HF',return_wfn=True). ```; [2202-HF-analytic.log](https://github.com/psi4/psi4/files/2307871/2202-HF-low-analytic.log); [2202-HF-gradient.log](https://github.com/psi4/psi4/files/2307873/2202-HF-low.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1145
https://github.com/psi4/psi4/issues/1145:247,Testability,log,log,247,"If I do analytic frequency calculation with HF it seems eternally stuck (with full cpu load) - for this particular molecule at least. attached log with optimization and frequency calculation that is stuck when using analytical and full successful log with dertype=""gradient"". ```; E, wfn = optimize('HF',return_wfn=True); #E, wfn = frequencies('HF',return_wfn=True, dertype='gradient'); E, wfn = frequencies('HF',return_wfn=True). ```; [2202-HF-analytic.log](https://github.com/psi4/psi4/files/2307871/2202-HF-low-analytic.log); [2202-HF-gradient.log](https://github.com/psi4/psi4/files/2307873/2202-HF-low.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1145
https://github.com/psi4/psi4/issues/1145:454,Testability,log,log,454,"If I do analytic frequency calculation with HF it seems eternally stuck (with full cpu load) - for this particular molecule at least. attached log with optimization and frequency calculation that is stuck when using analytical and full successful log with dertype=""gradient"". ```; E, wfn = optimize('HF',return_wfn=True); #E, wfn = frequencies('HF',return_wfn=True, dertype='gradient'); E, wfn = frequencies('HF',return_wfn=True). ```; [2202-HF-analytic.log](https://github.com/psi4/psi4/files/2307871/2202-HF-low-analytic.log); [2202-HF-gradient.log](https://github.com/psi4/psi4/files/2307873/2202-HF-low.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1145
https://github.com/psi4/psi4/issues/1145:523,Testability,log,log,523,"If I do analytic frequency calculation with HF it seems eternally stuck (with full cpu load) - for this particular molecule at least. attached log with optimization and frequency calculation that is stuck when using analytical and full successful log with dertype=""gradient"". ```; E, wfn = optimize('HF',return_wfn=True); #E, wfn = frequencies('HF',return_wfn=True, dertype='gradient'); E, wfn = frequencies('HF',return_wfn=True). ```; [2202-HF-analytic.log](https://github.com/psi4/psi4/files/2307871/2202-HF-low-analytic.log); [2202-HF-gradient.log](https://github.com/psi4/psi4/files/2307873/2202-HF-low.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1145
https://github.com/psi4/psi4/issues/1145:547,Testability,log,log,547,"If I do analytic frequency calculation with HF it seems eternally stuck (with full cpu load) - for this particular molecule at least. attached log with optimization and frequency calculation that is stuck when using analytical and full successful log with dertype=""gradient"". ```; E, wfn = optimize('HF',return_wfn=True); #E, wfn = frequencies('HF',return_wfn=True, dertype='gradient'); E, wfn = frequencies('HF',return_wfn=True). ```; [2202-HF-analytic.log](https://github.com/psi4/psi4/files/2307871/2202-HF-low-analytic.log); [2202-HF-gradient.log](https://github.com/psi4/psi4/files/2307873/2202-HF-low.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1145
https://github.com/psi4/psi4/issues/1145:607,Testability,log,log,607,"If I do analytic frequency calculation with HF it seems eternally stuck (with full cpu load) - for this particular molecule at least. attached log with optimization and frequency calculation that is stuck when using analytical and full successful log with dertype=""gradient"". ```; E, wfn = optimize('HF',return_wfn=True); #E, wfn = frequencies('HF',return_wfn=True, dertype='gradient'); E, wfn = frequencies('HF',return_wfn=True). ```; [2202-HF-analytic.log](https://github.com/psi4/psi4/files/2307871/2202-HF-low-analytic.log); [2202-HF-gradient.log](https://github.com/psi4/psi4/files/2307873/2202-HF-low.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1145
https://github.com/psi4/psi4/pull/1147:40,Testability,stub,stub,40,"## Description; Add a couple of missing stub files from my previous PR, fixes #1146",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1147
https://github.com/psi4/psi4/issues/1148:139,Modifiability,enhance,enhancements,139,"In the spirit of _not_ keeping issues open for years just because there's something more that could be done, this is a new ticket for some enhancements to the finite difference code, now that we can play with it py-side. - [ ] instead of lists to track all the geometries and corresponding energies, use lists with a bit of metadata to facilitate workflows. discussion started [here](https://github.com/psi4/psi4/issues/884#issuecomment-360953535); - [ ] (adding mostly so we don't lose track) make sure the findif can handle a qcdb.Mol as well as a psi4.core.Mol. I believe @JonathonMisiewicz is on this one.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1148
https://github.com/psi4/psi4/issues/1149:198,Availability,avail,available,198,"If the user doesn't specify how a gradient or hessian is to be computed (difference of energies, difference of gradients, or analytically), Psi will choose to compute it by the most analytic method available to the general method. This leads to annoying crashes when that method isn't available for the more particular variant of the method requested. For instance, the following input file will crash:; ```; molecule {; O ; H 1 1.0 ; H 1 1.0 2 105 ; }. set {; reference rks ; basis sto-3g; }. gradient('wb97x-v'); ```. The error is that:; ```; Fatal Error: V: RKS cannot compute VV10 gradient contribution.; ```. But in that case, Psi shouldn't have tried to do an analytic gradient computation at all but just done finite difference of energies. I'm not familiar with how the method selection works, but I have a bad feeling that writing this would be rather painful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1149
https://github.com/psi4/psi4/issues/1149:285,Availability,avail,available,285,"If the user doesn't specify how a gradient or hessian is to be computed (difference of energies, difference of gradients, or analytically), Psi will choose to compute it by the most analytic method available to the general method. This leads to annoying crashes when that method isn't available for the more particular variant of the method requested. For instance, the following input file will crash:; ```; molecule {; O ; H 1 1.0 ; H 1 1.0 2 105 ; }. set {; reference rks ; basis sto-3g; }. gradient('wb97x-v'); ```. The error is that:; ```; Fatal Error: V: RKS cannot compute VV10 gradient contribution.; ```. But in that case, Psi shouldn't have tried to do an analytic gradient computation at all but just done finite difference of energies. I'm not familiar with how the method selection works, but I have a bad feeling that writing this would be rather painful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1149
https://github.com/psi4/psi4/issues/1149:524,Availability,error,error,524,"If the user doesn't specify how a gradient or hessian is to be computed (difference of energies, difference of gradients, or analytically), Psi will choose to compute it by the most analytic method available to the general method. This leads to annoying crashes when that method isn't available for the more particular variant of the method requested. For instance, the following input file will crash:; ```; molecule {; O ; H 1 1.0 ; H 1 1.0 2 105 ; }. set {; reference rks ; basis sto-3g; }. gradient('wb97x-v'); ```. The error is that:; ```; Fatal Error: V: RKS cannot compute VV10 gradient contribution.; ```. But in that case, Psi shouldn't have tried to do an analytic gradient computation at all but just done finite difference of energies. I'm not familiar with how the method selection works, but I have a bad feeling that writing this would be rather painful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1149
https://github.com/psi4/psi4/issues/1149:551,Availability,Error,Error,551,"If the user doesn't specify how a gradient or hessian is to be computed (difference of energies, difference of gradients, or analytically), Psi will choose to compute it by the most analytic method available to the general method. This leads to annoying crashes when that method isn't available for the more particular variant of the method requested. For instance, the following input file will crash:; ```; molecule {; O ; H 1 1.0 ; H 1 1.0 2 105 ; }. set {; reference rks ; basis sto-3g; }. gradient('wb97x-v'); ```. The error is that:; ```; Fatal Error: V: RKS cannot compute VV10 gradient contribution.; ```. But in that case, Psi shouldn't have tried to do an analytic gradient computation at all but just done finite difference of energies. I'm not familiar with how the method selection works, but I have a bad feeling that writing this would be rather painful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1149
https://github.com/psi4/psi4/pull/1151:784,Energy Efficiency,energy,energy,784,"## Description; So I wrote `run_dftd3` back in the day. Then @dgasmith unified dftd3 and libdisp handling through the `EmpiricalDispersion` class. Then @PeterKraus added the DFT dict_builder that allowed dispersion parts of a functional. Then @hokru added NL dispersion into the mix. And we were all very courteous and worked around each other's code, yet all used selected pieces from dashparam.py. The result was a tangle. This is a redesign and a backport of dftd3-running tech from qcdb. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] libdisp's -D2 made more flexible so it can use same s6/alpha6/sr6 params as Grimme's -D2. existing D2 dict defs needed filling in further; - [x] no more d2p4/d2gr. that choice now made through `energy(..., engine='dftd3|libdisp')`; - [x] _all_ dispersions served out of dashparam for dftd3/libdisp/nl. accordingly much of the metadata from EmpiricalDispersion moved to dashcoeff.; - [x] EmpiricalDispersion much reduced, sorry. On the other hand, I suspect it's now the slim unification class DGAS actually wanted, if it hadn't needed to contort around run_dftd3.; - [x] All the different combos of fctl/dash/fctl-dash/params/default-params/partial-user-params sorted out in `dashparam.from_arrays()`. This is used as the backend to everything. `qcdb.Molecule.run_dftd3()`, `psi4.core.Molecule.run_dftd3()`, `qcdb.energy('b3lyp-d3')`, `psi4.energy('b3lyp-d3')`, `EmpiricalDispersion.compute_energy()`; - [x] Use QCJson_Schema model to drive and harvest from dftd3 rather than one big function.; - [x] This passes all existing tests. However, I've devised one it doesn't pass (user-def fctl incl. disp). Working on that.; - [x] Not yet begun to trace how citations are passed around.; - [x] Yes, I need to rebase to get Jonathan's findif changes incorporated.; - [x] Bump pylibefp to 0.4 and finish its c->py transition in build paraphernalia.; - [x] current commits are rich in docstrings but actual docs need a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1151
https://github.com/psi4/psi4/pull/1151:1002,Energy Efficiency,reduce,reduced,1002,"## Description; So I wrote `run_dftd3` back in the day. Then @dgasmith unified dftd3 and libdisp handling through the `EmpiricalDispersion` class. Then @PeterKraus added the DFT dict_builder that allowed dispersion parts of a functional. Then @hokru added NL dispersion into the mix. And we were all very courteous and worked around each other's code, yet all used selected pieces from dashparam.py. The result was a tangle. This is a redesign and a backport of dftd3-running tech from qcdb. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] libdisp's -D2 made more flexible so it can use same s6/alpha6/sr6 params as Grimme's -D2. existing D2 dict defs needed filling in further; - [x] no more d2p4/d2gr. that choice now made through `energy(..., engine='dftd3|libdisp')`; - [x] _all_ dispersions served out of dashparam for dftd3/libdisp/nl. accordingly much of the metadata from EmpiricalDispersion moved to dashcoeff.; - [x] EmpiricalDispersion much reduced, sorry. On the other hand, I suspect it's now the slim unification class DGAS actually wanted, if it hadn't needed to contort around run_dftd3.; - [x] All the different combos of fctl/dash/fctl-dash/params/default-params/partial-user-params sorted out in `dashparam.from_arrays()`. This is used as the backend to everything. `qcdb.Molecule.run_dftd3()`, `psi4.core.Molecule.run_dftd3()`, `qcdb.energy('b3lyp-d3')`, `psi4.energy('b3lyp-d3')`, `EmpiricalDispersion.compute_energy()`; - [x] Use QCJson_Schema model to drive and harvest from dftd3 rather than one big function.; - [x] This passes all existing tests. However, I've devised one it doesn't pass (user-def fctl incl. disp). Working on that.; - [x] Not yet begun to trace how citations are passed around.; - [x] Yes, I need to rebase to get Jonathan's findif changes incorporated.; - [x] Bump pylibefp to 0.4 and finish its c->py transition in build paraphernalia.; - [x] current commits are rich in docstrings but actual docs need a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1151
https://github.com/psi4/psi4/pull/1151:1404,Energy Efficiency,energy,energy,1404,"tangle. This is a redesign and a backport of dftd3-running tech from qcdb. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] libdisp's -D2 made more flexible so it can use same s6/alpha6/sr6 params as Grimme's -D2. existing D2 dict defs needed filling in further; - [x] no more d2p4/d2gr. that choice now made through `energy(..., engine='dftd3|libdisp')`; - [x] _all_ dispersions served out of dashparam for dftd3/libdisp/nl. accordingly much of the metadata from EmpiricalDispersion moved to dashcoeff.; - [x] EmpiricalDispersion much reduced, sorry. On the other hand, I suspect it's now the slim unification class DGAS actually wanted, if it hadn't needed to contort around run_dftd3.; - [x] All the different combos of fctl/dash/fctl-dash/params/default-params/partial-user-params sorted out in `dashparam.from_arrays()`. This is used as the backend to everything. `qcdb.Molecule.run_dftd3()`, `psi4.core.Molecule.run_dftd3()`, `qcdb.energy('b3lyp-d3')`, `psi4.energy('b3lyp-d3')`, `EmpiricalDispersion.compute_energy()`; - [x] Use QCJson_Schema model to drive and harvest from dftd3 rather than one big function.; - [x] This passes all existing tests. However, I've devised one it doesn't pass (user-def fctl incl. disp). Working on that.; - [x] Not yet begun to trace how citations are passed around.; - [x] Yes, I need to rebase to get Jonathan's findif changes incorporated.; - [x] Bump pylibefp to 0.4 and finish its c->py transition in build paraphernalia.; - [x] current commits are rich in docstrings but actual docs need a pass. some stuff, notably DFT_DISPERSION_PARAMETERS is out of date. ## Questions; - [ ] This touches a lot of people's code. I'm fairly happy that this is a simplification and a workable design. But it's just a better starting point, and others may have new ideas and improvements. Or see holes in my logic and planning. ## Checklist; - [x] Tests added for any new features; - [x] All full tests run. ## Status; - [x",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1151
https://github.com/psi4/psi4/pull/1151:1431,Energy Efficiency,energy,energy,1431,"ckport of dftd3-running tech from qcdb. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] libdisp's -D2 made more flexible so it can use same s6/alpha6/sr6 params as Grimme's -D2. existing D2 dict defs needed filling in further; - [x] no more d2p4/d2gr. that choice now made through `energy(..., engine='dftd3|libdisp')`; - [x] _all_ dispersions served out of dashparam for dftd3/libdisp/nl. accordingly much of the metadata from EmpiricalDispersion moved to dashcoeff.; - [x] EmpiricalDispersion much reduced, sorry. On the other hand, I suspect it's now the slim unification class DGAS actually wanted, if it hadn't needed to contort around run_dftd3.; - [x] All the different combos of fctl/dash/fctl-dash/params/default-params/partial-user-params sorted out in `dashparam.from_arrays()`. This is used as the backend to everything. `qcdb.Molecule.run_dftd3()`, `psi4.core.Molecule.run_dftd3()`, `qcdb.energy('b3lyp-d3')`, `psi4.energy('b3lyp-d3')`, `EmpiricalDispersion.compute_energy()`; - [x] Use QCJson_Schema model to drive and harvest from dftd3 rather than one big function.; - [x] This passes all existing tests. However, I've devised one it doesn't pass (user-def fctl incl. disp). Working on that.; - [x] Not yet begun to trace how citations are passed around.; - [x] Yes, I need to rebase to get Jonathan's findif changes incorporated.; - [x] Bump pylibefp to 0.4 and finish its c->py transition in build paraphernalia.; - [x] current commits are rich in docstrings but actual docs need a pass. some stuff, notably DFT_DISPERSION_PARAMETERS is out of date. ## Questions; - [ ] This touches a lot of people's code. I'm fairly happy that this is a simplification and a workable design. But it's just a better starting point, and others may have new ideas and improvements. Or see holes in my logic and planning. ## Checklist; - [x] Tests added for any new features; - [x] All full tests run. ## Status; - [x] Ready for review; - [x] Ready fo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1151
https://github.com/psi4/psi4/pull/1151:614,Modifiability,flexible,flexible,614,"## Description; So I wrote `run_dftd3` back in the day. Then @dgasmith unified dftd3 and libdisp handling through the `EmpiricalDispersion` class. Then @PeterKraus added the DFT dict_builder that allowed dispersion parts of a functional. Then @hokru added NL dispersion into the mix. And we were all very courteous and worked around each other's code, yet all used selected pieces from dashparam.py. The result was a tangle. This is a redesign and a backport of dftd3-running tech from qcdb. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] libdisp's -D2 made more flexible so it can use same s6/alpha6/sr6 params as Grimme's -D2. existing D2 dict defs needed filling in further; - [x] no more d2p4/d2gr. that choice now made through `energy(..., engine='dftd3|libdisp')`; - [x] _all_ dispersions served out of dashparam for dftd3/libdisp/nl. accordingly much of the metadata from EmpiricalDispersion moved to dashcoeff.; - [x] EmpiricalDispersion much reduced, sorry. On the other hand, I suspect it's now the slim unification class DGAS actually wanted, if it hadn't needed to contort around run_dftd3.; - [x] All the different combos of fctl/dash/fctl-dash/params/default-params/partial-user-params sorted out in `dashparam.from_arrays()`. This is used as the backend to everything. `qcdb.Molecule.run_dftd3()`, `psi4.core.Molecule.run_dftd3()`, `qcdb.energy('b3lyp-d3')`, `psi4.energy('b3lyp-d3')`, `EmpiricalDispersion.compute_energy()`; - [x] Use QCJson_Schema model to drive and harvest from dftd3 rather than one big function.; - [x] This passes all existing tests. However, I've devised one it doesn't pass (user-def fctl incl. disp). Working on that.; - [x] Not yet begun to trace how citations are passed around.; - [x] Yes, I need to rebase to get Jonathan's findif changes incorporated.; - [x] Bump pylibefp to 0.4 and finish its c->py transition in build paraphernalia.; - [x] current commits are rich in docstrings but actual docs need a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1151
https://github.com/psi4/psi4/pull/1151:1616,Testability,test,tests,1616,"of dftd3-running tech from qcdb. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] libdisp's -D2 made more flexible so it can use same s6/alpha6/sr6 params as Grimme's -D2. existing D2 dict defs needed filling in further; - [x] no more d2p4/d2gr. that choice now made through `energy(..., engine='dftd3|libdisp')`; - [x] _all_ dispersions served out of dashparam for dftd3/libdisp/nl. accordingly much of the metadata from EmpiricalDispersion moved to dashcoeff.; - [x] EmpiricalDispersion much reduced, sorry. On the other hand, I suspect it's now the slim unification class DGAS actually wanted, if it hadn't needed to contort around run_dftd3.; - [x] All the different combos of fctl/dash/fctl-dash/params/default-params/partial-user-params sorted out in `dashparam.from_arrays()`. This is used as the backend to everything. `qcdb.Molecule.run_dftd3()`, `psi4.core.Molecule.run_dftd3()`, `qcdb.energy('b3lyp-d3')`, `psi4.energy('b3lyp-d3')`, `EmpiricalDispersion.compute_energy()`; - [x] Use QCJson_Schema model to drive and harvest from dftd3 rather than one big function.; - [x] This passes all existing tests. However, I've devised one it doesn't pass (user-def fctl incl. disp). Working on that.; - [x] Not yet begun to trace how citations are passed around.; - [x] Yes, I need to rebase to get Jonathan's findif changes incorporated.; - [x] Bump pylibefp to 0.4 and finish its c->py transition in build paraphernalia.; - [x] current commits are rich in docstrings but actual docs need a pass. some stuff, notably DFT_DISPERSION_PARAMETERS is out of date. ## Questions; - [ ] This touches a lot of people's code. I'm fairly happy that this is a simplification and a workable design. But it's just a better starting point, and others may have new ideas and improvements. Or see holes in my logic and planning. ## Checklist; - [x] Tests added for any new features; - [x] All full tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1151
https://github.com/psi4/psi4/pull/1151:2303,Testability,log,logic,2303,"of dftd3-running tech from qcdb. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] libdisp's -D2 made more flexible so it can use same s6/alpha6/sr6 params as Grimme's -D2. existing D2 dict defs needed filling in further; - [x] no more d2p4/d2gr. that choice now made through `energy(..., engine='dftd3|libdisp')`; - [x] _all_ dispersions served out of dashparam for dftd3/libdisp/nl. accordingly much of the metadata from EmpiricalDispersion moved to dashcoeff.; - [x] EmpiricalDispersion much reduced, sorry. On the other hand, I suspect it's now the slim unification class DGAS actually wanted, if it hadn't needed to contort around run_dftd3.; - [x] All the different combos of fctl/dash/fctl-dash/params/default-params/partial-user-params sorted out in `dashparam.from_arrays()`. This is used as the backend to everything. `qcdb.Molecule.run_dftd3()`, `psi4.core.Molecule.run_dftd3()`, `qcdb.energy('b3lyp-d3')`, `psi4.energy('b3lyp-d3')`, `EmpiricalDispersion.compute_energy()`; - [x] Use QCJson_Schema model to drive and harvest from dftd3 rather than one big function.; - [x] This passes all existing tests. However, I've devised one it doesn't pass (user-def fctl incl. disp). Working on that.; - [x] Not yet begun to trace how citations are passed around.; - [x] Yes, I need to rebase to get Jonathan's findif changes incorporated.; - [x] Bump pylibefp to 0.4 and finish its c->py transition in build paraphernalia.; - [x] current commits are rich in docstrings but actual docs need a pass. some stuff, notably DFT_DISPERSION_PARAMETERS is out of date. ## Questions; - [ ] This touches a lot of people's code. I'm fairly happy that this is a simplification and a workable design. But it's just a better starting point, and others may have new ideas and improvements. Or see holes in my logic and planning. ## Checklist; - [x] Tests added for any new features; - [x] All full tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1151
https://github.com/psi4/psi4/pull/1151:2343,Testability,Test,Tests,2343,"of dftd3-running tech from qcdb. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] libdisp's -D2 made more flexible so it can use same s6/alpha6/sr6 params as Grimme's -D2. existing D2 dict defs needed filling in further; - [x] no more d2p4/d2gr. that choice now made through `energy(..., engine='dftd3|libdisp')`; - [x] _all_ dispersions served out of dashparam for dftd3/libdisp/nl. accordingly much of the metadata from EmpiricalDispersion moved to dashcoeff.; - [x] EmpiricalDispersion much reduced, sorry. On the other hand, I suspect it's now the slim unification class DGAS actually wanted, if it hadn't needed to contort around run_dftd3.; - [x] All the different combos of fctl/dash/fctl-dash/params/default-params/partial-user-params sorted out in `dashparam.from_arrays()`. This is used as the backend to everything. `qcdb.Molecule.run_dftd3()`, `psi4.core.Molecule.run_dftd3()`, `qcdb.energy('b3lyp-d3')`, `psi4.energy('b3lyp-d3')`, `EmpiricalDispersion.compute_energy()`; - [x] Use QCJson_Schema model to drive and harvest from dftd3 rather than one big function.; - [x] This passes all existing tests. However, I've devised one it doesn't pass (user-def fctl incl. disp). Working on that.; - [x] Not yet begun to trace how citations are passed around.; - [x] Yes, I need to rebase to get Jonathan's findif changes incorporated.; - [x] Bump pylibefp to 0.4 and finish its c->py transition in build paraphernalia.; - [x] current commits are rich in docstrings but actual docs need a pass. some stuff, notably DFT_DISPERSION_PARAMETERS is out of date. ## Questions; - [ ] This touches a lot of people's code. I'm fairly happy that this is a simplification and a workable design. But it's just a better starting point, and others may have new ideas and improvements. Or see holes in my logic and planning. ## Checklist; - [x] Tests added for any new features; - [x] All full tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1151
https://github.com/psi4/psi4/pull/1151:2392,Testability,test,tests,2392,"of dftd3-running tech from qcdb. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] libdisp's -D2 made more flexible so it can use same s6/alpha6/sr6 params as Grimme's -D2. existing D2 dict defs needed filling in further; - [x] no more d2p4/d2gr. that choice now made through `energy(..., engine='dftd3|libdisp')`; - [x] _all_ dispersions served out of dashparam for dftd3/libdisp/nl. accordingly much of the metadata from EmpiricalDispersion moved to dashcoeff.; - [x] EmpiricalDispersion much reduced, sorry. On the other hand, I suspect it's now the slim unification class DGAS actually wanted, if it hadn't needed to contort around run_dftd3.; - [x] All the different combos of fctl/dash/fctl-dash/params/default-params/partial-user-params sorted out in `dashparam.from_arrays()`. This is used as the backend to everything. `qcdb.Molecule.run_dftd3()`, `psi4.core.Molecule.run_dftd3()`, `qcdb.energy('b3lyp-d3')`, `psi4.energy('b3lyp-d3')`, `EmpiricalDispersion.compute_energy()`; - [x] Use QCJson_Schema model to drive and harvest from dftd3 rather than one big function.; - [x] This passes all existing tests. However, I've devised one it doesn't pass (user-def fctl incl. disp). Working on that.; - [x] Not yet begun to trace how citations are passed around.; - [x] Yes, I need to rebase to get Jonathan's findif changes incorporated.; - [x] Bump pylibefp to 0.4 and finish its c->py transition in build paraphernalia.; - [x] current commits are rich in docstrings but actual docs need a pass. some stuff, notably DFT_DISPERSION_PARAMETERS is out of date. ## Questions; - [ ] This touches a lot of people's code. I'm fairly happy that this is a simplification and a workable design. But it's just a better starting point, and others may have new ideas and improvements. Or see holes in my logic and planning. ## Checklist; - [x] Tests added for any new features; - [x] All full tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1151
https://github.com/psi4/psi4/pull/1151:2159,Usability,simpl,simplification,2159,"of dftd3-running tech from qcdb. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] libdisp's -D2 made more flexible so it can use same s6/alpha6/sr6 params as Grimme's -D2. existing D2 dict defs needed filling in further; - [x] no more d2p4/d2gr. that choice now made through `energy(..., engine='dftd3|libdisp')`; - [x] _all_ dispersions served out of dashparam for dftd3/libdisp/nl. accordingly much of the metadata from EmpiricalDispersion moved to dashcoeff.; - [x] EmpiricalDispersion much reduced, sorry. On the other hand, I suspect it's now the slim unification class DGAS actually wanted, if it hadn't needed to contort around run_dftd3.; - [x] All the different combos of fctl/dash/fctl-dash/params/default-params/partial-user-params sorted out in `dashparam.from_arrays()`. This is used as the backend to everything. `qcdb.Molecule.run_dftd3()`, `psi4.core.Molecule.run_dftd3()`, `qcdb.energy('b3lyp-d3')`, `psi4.energy('b3lyp-d3')`, `EmpiricalDispersion.compute_energy()`; - [x] Use QCJson_Schema model to drive and harvest from dftd3 rather than one big function.; - [x] This passes all existing tests. However, I've devised one it doesn't pass (user-def fctl incl. disp). Working on that.; - [x] Not yet begun to trace how citations are passed around.; - [x] Yes, I need to rebase to get Jonathan's findif changes incorporated.; - [x] Bump pylibefp to 0.4 and finish its c->py transition in build paraphernalia.; - [x] current commits are rich in docstrings but actual docs need a pass. some stuff, notably DFT_DISPERSION_PARAMETERS is out of date. ## Questions; - [ ] This touches a lot of people's code. I'm fairly happy that this is a simplification and a workable design. But it's just a better starting point, and others may have new ideas and improvements. Or see holes in my logic and planning. ## Checklist; - [x] Tests added for any new features; - [x] All full tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1151
https://github.com/psi4/psi4/pull/1166:34,Integrability,interface,interface,34,"## Description; clang-format GDMA interface. ## Questions; - [ ] If merging this PR will hinder your research b/c you have local edits, protest here or in #1144. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1166
https://github.com/psi4/psi4/issues/1177:338,Availability,down,downloaded,338,"The correct detection of the D2h subgroup seems to depend on the orientation. In the attached input; are two different geometries at two different orienations, but both Oh symmetry. case 1 was symmetrized using the SYVA code after C1 optimization with DFT (https://www.sciencedirect.com/science/article/pii/S0010465517300310); case 2 was downloaded from a website about symmetry. (see input). input:; [oh.txt](https://github.com/psi4/psi4/files/2320825/oh.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1177
https://github.com/psi4/psi4/issues/1177:51,Integrability,depend,depend,51,"The correct detection of the D2h subgroup seems to depend on the orientation. In the attached input; are two different geometries at two different orienations, but both Oh symmetry. case 1 was symmetrized using the SYVA code after C1 optimization with DFT (https://www.sciencedirect.com/science/article/pii/S0010465517300310); case 2 was downloaded from a website about symmetry. (see input). input:; [oh.txt](https://github.com/psi4/psi4/files/2320825/oh.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1177
https://github.com/psi4/psi4/issues/1177:234,Performance,optimiz,optimization,234,"The correct detection of the D2h subgroup seems to depend on the orientation. In the attached input; are two different geometries at two different orienations, but both Oh symmetry. case 1 was symmetrized using the SYVA code after C1 optimization with DFT (https://www.sciencedirect.com/science/article/pii/S0010465517300310); case 2 was downloaded from a website about symmetry. (see input). input:; [oh.txt](https://github.com/psi4/psi4/files/2320825/oh.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1177
https://github.com/psi4/psi4/issues/1177:12,Safety,detect,detection,12,"The correct detection of the D2h subgroup seems to depend on the orientation. In the attached input; are two different geometries at two different orienations, but both Oh symmetry. case 1 was symmetrized using the SYVA code after C1 optimization with DFT (https://www.sciencedirect.com/science/article/pii/S0010465517300310); case 2 was downloaded from a website about symmetry. (see input). input:; [oh.txt](https://github.com/psi4/psi4/files/2320825/oh.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1177
https://github.com/psi4/psi4/pull/1178:2335,Availability,error,error,2335," manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:. # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****. # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, multiple basis sets can appear, as long; # as there is a [name] tag above the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.; psi4.basis_helper(""""""; #; # We start by assigning basis sets to atoms. These commands can go anywhere in the basis block; #; # First, assign DZ to all atoms; assign DZ; # Now, assign 3-21G to all carbon atoms; assign C my3-21G; # The two atoms labelled H1 get a STO-3G basis two; assign H1 sto-3g; # Carbons 3 and 5 get a STO-3G basis, too; assign C1 sto-3g; # With all these in place, the symmetry is lowered to C2v automatically; # The commands are applied in order i.e., adding a line like; # assign cc-pvtz; # here would override all of the above and assign cc-pvtz to all atoms. #; # Now we define the basis sets. N.B. Indentation does not matter; it just looks prettier.; #; [my3-21G] #This is really the standard 3-21G basis, but with a different name; cartesian; ****; H 0; S 2 1.00; 5.4471780 0.1562850; 0.8245470 0.9046910; S 1 1.00; 0.1831920 1.0000000; ****; C 0; S 3 1.00; 172.2560000 0.0617669; 25.9109000 0.3587940; 5.533",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1178
https://github.com/psi4/psi4/pull/1178:3973,Availability,avail,available,3973,"e the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.; psi4.basis_helper(""""""; #; # We start by assigning basis sets to atoms. These commands can go anywhere in the basis block; #; # First, assign DZ to all atoms; assign DZ; # Now, assign 3-21G to all carbon atoms; assign C my3-21G; # The two atoms labelled H1 get a STO-3G basis two; assign H1 sto-3g; # Carbons 3 and 5 get a STO-3G basis, too; assign C1 sto-3g; # With all these in place, the symmetry is lowered to C2v automatically; # The commands are applied in order i.e., adding a line like; # assign cc-pvtz; # here would override all of the above and assign cc-pvtz to all atoms. #; # Now we define the basis sets. N.B. Indentation does not matter; it just looks prettier.; #; [my3-21G] #This is really the standard 3-21G basis, but with a different name; cartesian; ****; H 0; S 2 1.00; 5.4471780 0.1562850; 0.8245470 0.9046910; S 1 1.00; 0.1831920 1.0000000; ****; C 0; S 3 1.00; 172.2560000 0.0617669; 25.9109000 0.3587940; 5.5333500 0.7007130; SP 2 1.00; 3.6649800 -0.3958970 0.2364600; 0.7705450 1.2158400 0.8606190; SP 1 1.00; 0.1958570 1.0000000 1.0000000; ****; [DZ]; spherical; ****; H 0 ; S 3 1.00; 19.2406000 0.0328280 ; 2.8992000 0.2312080 ; 0.6534000 0.8172380 ; S 1 1.00; 0.1776000 1.0000000 ; ****; """"""). psi4.set_options({; 'd_convergence': 11,; 'e_convergence': 11,; 'scf_type': 'pk'}); ; bz.update_geometry(); bz.print_out(); psi4.compare_strings(""c2v"", bz.schoenflies_symbol(), ""Point group"") #TEST; psi4.compare_values(refnuc, bz.nuclear_repulsion_energy(), 10, ""Nuclear repulsion energy"") #TEST; ```. ## Questions; - [ ] I've no immediate thoughts of merging this. Just wanted it to be available to others and off my computer. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1178
https://github.com/psi4/psi4/pull/1178:3867,Energy Efficiency,energy,energy,3867,"e the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.; psi4.basis_helper(""""""; #; # We start by assigning basis sets to atoms. These commands can go anywhere in the basis block; #; # First, assign DZ to all atoms; assign DZ; # Now, assign 3-21G to all carbon atoms; assign C my3-21G; # The two atoms labelled H1 get a STO-3G basis two; assign H1 sto-3g; # Carbons 3 and 5 get a STO-3G basis, too; assign C1 sto-3g; # With all these in place, the symmetry is lowered to C2v automatically; # The commands are applied in order i.e., adding a line like; # assign cc-pvtz; # here would override all of the above and assign cc-pvtz to all atoms. #; # Now we define the basis sets. N.B. Indentation does not matter; it just looks prettier.; #; [my3-21G] #This is really the standard 3-21G basis, but with a different name; cartesian; ****; H 0; S 2 1.00; 5.4471780 0.1562850; 0.8245470 0.9046910; S 1 1.00; 0.1831920 1.0000000; ****; C 0; S 3 1.00; 172.2560000 0.0617669; 25.9109000 0.3587940; 5.5333500 0.7007130; SP 2 1.00; 3.6649800 -0.3958970 0.2364600; 0.7705450 1.2158400 0.8606190; SP 1 1.00; 0.1958570 1.0000000 1.0000000; ****; [DZ]; spherical; ****; H 0 ; S 3 1.00; 19.2406000 0.0328280 ; 2.8992000 0.2312080 ; 0.6534000 0.8172380 ; S 1 1.00; 0.1776000 1.0000000 ; ****; """"""). psi4.set_options({; 'd_convergence': 11,; 'e_convergence': 11,; 'scf_type': 'pk'}); ; bz.update_geometry(); bz.print_out(); psi4.compare_strings(""c2v"", bz.schoenflies_symbol(), ""Point group"") #TEST; psi4.compare_values(refnuc, bz.nuclear_repulsion_energy(), 10, ""Nuclear repulsion energy"") #TEST; ```. ## Questions; - [ ] I've no immediate thoughts of merging this. Just wanted it to be available to others and off my computer. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1178
https://github.com/psi4/psi4/pull/1178:2341,Integrability,message,message,2341," manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:. # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****. # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, multiple basis sets can appear, as long; # as there is a [name] tag above the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.; psi4.basis_helper(""""""; #; # We start by assigning basis sets to atoms. These commands can go anywhere in the basis block; #; # First, assign DZ to all atoms; assign DZ; # Now, assign 3-21G to all carbon atoms; assign C my3-21G; # The two atoms labelled H1 get a STO-3G basis two; assign H1 sto-3g; # Carbons 3 and 5 get a STO-3G basis, too; assign C1 sto-3g; # With all these in place, the symmetry is lowered to C2v automatically; # The commands are applied in order i.e., adding a line like; # assign cc-pvtz; # here would override all of the above and assign cc-pvtz to all atoms. #; # Now we define the basis sets. N.B. Indentation does not matter; it just looks prettier.; #; [my3-21G] #This is really the standard 3-21G basis, but with a different name; cartesian; ****; H 0; S 2 1.00; 5.4471780 0.1562850; 0.8245470 0.9046910; S 1 1.00; 0.1831920 1.0000000; ****; C 0; S 3 1.00; 172.2560000 0.0617669; 25.9109000 0.3587940; 5.533",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1178
https://github.com/psi4/psi4/pull/1178:190,Modifiability,plugin,plugins,190,"## Description; This is the thinmints project that GaTech & CCQC cooked up around May. It's a smaller psi4 with libmints and libraries, no full QC capabilites. It may be useful for deriving plugins (though maybe that needs SCF?), as a basis for psi4numpy, or as a smaller codebase for new programmers. ## Todos; - [x] Unlike in May, this can build both psi4 and thinmints simultaneously. Main copied file is `core.cc` --> `thinmints.cc`.; - [x] I ended up needing to copy a truncated driver. There might be a better way around that.; - [x] Unlike in May, thinmints is now a separate module, in the `import thinmints` sense.; - [x] The test below runs (`python mints2.py`). ```; import thinmints as psi4; psi4.set_output_file(""output.dat"", True). refnuc = 204.01995737868003 #TEST; refscf = -228.95763005849557 #TEST. bz = psi4.geometry(""""""; X; X 1 RXX; X 2 RXX 1 90.0; C 3 RCC 2 90.0 1 0.0; C 3 RCC 2 90.0 1 60.0; C1@13.0 3 RCC 2 90.0 1 120.0; C 3 RCC 2 90.0 1 180.0; C1@13.0 3 RCC 2 90.0 1 240.0; C 3 RCC 2 90.0 1 300.0 # unnecessary comment; H1@2.014101779 3 RCH 2 90.0 1 0.0; H 3 RCH 2 90.0 1 60.0; H 3 RCH 2 90.0 1 120.0; H1@2.014101779 3 RCH 2 90.0 1 180.0; H 3 RCH 2 90.0 1 240.0; H 3 RCH 2 90.0 1 300.0. RCC = 1.3915; RCH = 2.4715; RXX = 1.00; """"""). # Here we specify some of the basis sets manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:. # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****. # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, mul",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1178
https://github.com/psi4/psi4/pull/1178:1415,Modifiability,variab,variable,1415,"ded up needing to copy a truncated driver. There might be a better way around that.; - [x] Unlike in May, thinmints is now a separate module, in the `import thinmints` sense.; - [x] The test below runs (`python mints2.py`). ```; import thinmints as psi4; psi4.set_output_file(""output.dat"", True). refnuc = 204.01995737868003 #TEST; refscf = -228.95763005849557 #TEST. bz = psi4.geometry(""""""; X; X 1 RXX; X 2 RXX 1 90.0; C 3 RCC 2 90.0 1 0.0; C 3 RCC 2 90.0 1 60.0; C1@13.0 3 RCC 2 90.0 1 120.0; C 3 RCC 2 90.0 1 180.0; C1@13.0 3 RCC 2 90.0 1 240.0; C 3 RCC 2 90.0 1 300.0 # unnecessary comment; H1@2.014101779 3 RCH 2 90.0 1 0.0; H 3 RCH 2 90.0 1 60.0; H 3 RCH 2 90.0 1 120.0; H1@2.014101779 3 RCH 2 90.0 1 180.0; H 3 RCH 2 90.0 1 240.0; H 3 RCH 2 90.0 1 300.0. RCC = 1.3915; RCH = 2.4715; RXX = 1.00; """"""). # Here we specify some of the basis sets manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:. # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****. # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, multiple basis sets can appear, as long; # as there is a [name] tag above the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.; psi4.basis_helper(""""""; #; # We start by assigning basis sets to atoms. These commands ca",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1178
https://github.com/psi4/psi4/pull/1178:635,Testability,test,test,635,"## Description; This is the thinmints project that GaTech & CCQC cooked up around May. It's a smaller psi4 with libmints and libraries, no full QC capabilites. It may be useful for deriving plugins (though maybe that needs SCF?), as a basis for psi4numpy, or as a smaller codebase for new programmers. ## Todos; - [x] Unlike in May, this can build both psi4 and thinmints simultaneously. Main copied file is `core.cc` --> `thinmints.cc`.; - [x] I ended up needing to copy a truncated driver. There might be a better way around that.; - [x] Unlike in May, thinmints is now a separate module, in the `import thinmints` sense.; - [x] The test below runs (`python mints2.py`). ```; import thinmints as psi4; psi4.set_output_file(""output.dat"", True). refnuc = 204.01995737868003 #TEST; refscf = -228.95763005849557 #TEST. bz = psi4.geometry(""""""; X; X 1 RXX; X 2 RXX 1 90.0; C 3 RCC 2 90.0 1 0.0; C 3 RCC 2 90.0 1 60.0; C1@13.0 3 RCC 2 90.0 1 120.0; C 3 RCC 2 90.0 1 180.0; C1@13.0 3 RCC 2 90.0 1 240.0; C 3 RCC 2 90.0 1 300.0 # unnecessary comment; H1@2.014101779 3 RCH 2 90.0 1 0.0; H 3 RCH 2 90.0 1 60.0; H 3 RCH 2 90.0 1 120.0; H1@2.014101779 3 RCH 2 90.0 1 180.0; H 3 RCH 2 90.0 1 240.0; H 3 RCH 2 90.0 1 300.0. RCC = 1.3915; RCH = 2.4715; RXX = 1.00; """"""). # Here we specify some of the basis sets manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:. # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****. # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, mul",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1178
https://github.com/psi4/psi4/pull/1178:775,Testability,TEST,TEST,775,"## Description; This is the thinmints project that GaTech & CCQC cooked up around May. It's a smaller psi4 with libmints and libraries, no full QC capabilites. It may be useful for deriving plugins (though maybe that needs SCF?), as a basis for psi4numpy, or as a smaller codebase for new programmers. ## Todos; - [x] Unlike in May, this can build both psi4 and thinmints simultaneously. Main copied file is `core.cc` --> `thinmints.cc`.; - [x] I ended up needing to copy a truncated driver. There might be a better way around that.; - [x] Unlike in May, thinmints is now a separate module, in the `import thinmints` sense.; - [x] The test below runs (`python mints2.py`). ```; import thinmints as psi4; psi4.set_output_file(""output.dat"", True). refnuc = 204.01995737868003 #TEST; refscf = -228.95763005849557 #TEST. bz = psi4.geometry(""""""; X; X 1 RXX; X 2 RXX 1 90.0; C 3 RCC 2 90.0 1 0.0; C 3 RCC 2 90.0 1 60.0; C1@13.0 3 RCC 2 90.0 1 120.0; C 3 RCC 2 90.0 1 180.0; C1@13.0 3 RCC 2 90.0 1 240.0; C 3 RCC 2 90.0 1 300.0 # unnecessary comment; H1@2.014101779 3 RCH 2 90.0 1 0.0; H 3 RCH 2 90.0 1 60.0; H 3 RCH 2 90.0 1 120.0; H1@2.014101779 3 RCH 2 90.0 1 180.0; H 3 RCH 2 90.0 1 240.0; H 3 RCH 2 90.0 1 300.0. RCC = 1.3915; RCH = 2.4715; RXX = 1.00; """"""). # Here we specify some of the basis sets manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:. # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****. # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, mul",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1178
https://github.com/psi4/psi4/pull/1178:811,Testability,TEST,TEST,811,"## Description; This is the thinmints project that GaTech & CCQC cooked up around May. It's a smaller psi4 with libmints and libraries, no full QC capabilites. It may be useful for deriving plugins (though maybe that needs SCF?), as a basis for psi4numpy, or as a smaller codebase for new programmers. ## Todos; - [x] Unlike in May, this can build both psi4 and thinmints simultaneously. Main copied file is `core.cc` --> `thinmints.cc`.; - [x] I ended up needing to copy a truncated driver. There might be a better way around that.; - [x] Unlike in May, thinmints is now a separate module, in the `import thinmints` sense.; - [x] The test below runs (`python mints2.py`). ```; import thinmints as psi4; psi4.set_output_file(""output.dat"", True). refnuc = 204.01995737868003 #TEST; refscf = -228.95763005849557 #TEST. bz = psi4.geometry(""""""; X; X 1 RXX; X 2 RXX 1 90.0; C 3 RCC 2 90.0 1 0.0; C 3 RCC 2 90.0 1 60.0; C1@13.0 3 RCC 2 90.0 1 120.0; C 3 RCC 2 90.0 1 180.0; C1@13.0 3 RCC 2 90.0 1 240.0; C 3 RCC 2 90.0 1 300.0 # unnecessary comment; H1@2.014101779 3 RCH 2 90.0 1 0.0; H 3 RCH 2 90.0 1 60.0; H 3 RCH 2 90.0 1 120.0; H1@2.014101779 3 RCH 2 90.0 1 180.0; H 3 RCH 2 90.0 1 240.0; H 3 RCH 2 90.0 1 300.0. RCC = 1.3915; RCH = 2.4715; RXX = 1.00; """"""). # Here we specify some of the basis sets manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:. # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****. # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, mul",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1178
https://github.com/psi4/psi4/pull/1178:3779,Testability,TEST,TEST,3779,"e the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.; psi4.basis_helper(""""""; #; # We start by assigning basis sets to atoms. These commands can go anywhere in the basis block; #; # First, assign DZ to all atoms; assign DZ; # Now, assign 3-21G to all carbon atoms; assign C my3-21G; # The two atoms labelled H1 get a STO-3G basis two; assign H1 sto-3g; # Carbons 3 and 5 get a STO-3G basis, too; assign C1 sto-3g; # With all these in place, the symmetry is lowered to C2v automatically; # The commands are applied in order i.e., adding a line like; # assign cc-pvtz; # here would override all of the above and assign cc-pvtz to all atoms. #; # Now we define the basis sets. N.B. Indentation does not matter; it just looks prettier.; #; [my3-21G] #This is really the standard 3-21G basis, but with a different name; cartesian; ****; H 0; S 2 1.00; 5.4471780 0.1562850; 0.8245470 0.9046910; S 1 1.00; 0.1831920 1.0000000; ****; C 0; S 3 1.00; 172.2560000 0.0617669; 25.9109000 0.3587940; 5.5333500 0.7007130; SP 2 1.00; 3.6649800 -0.3958970 0.2364600; 0.7705450 1.2158400 0.8606190; SP 1 1.00; 0.1958570 1.0000000 1.0000000; ****; [DZ]; spherical; ****; H 0 ; S 3 1.00; 19.2406000 0.0328280 ; 2.8992000 0.2312080 ; 0.6534000 0.8172380 ; S 1 1.00; 0.1776000 1.0000000 ; ****; """"""). psi4.set_options({; 'd_convergence': 11,; 'e_convergence': 11,; 'scf_type': 'pk'}); ; bz.update_geometry(); bz.print_out(); psi4.compare_strings(""c2v"", bz.schoenflies_symbol(), ""Point group"") #TEST; psi4.compare_values(refnuc, bz.nuclear_repulsion_energy(), 10, ""Nuclear repulsion energy"") #TEST; ```. ## Questions; - [ ] I've no immediate thoughts of merging this. Just wanted it to be available to others and off my computer. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1178
https://github.com/psi4/psi4/pull/1178:3877,Testability,TEST,TEST,3877,"e the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.; psi4.basis_helper(""""""; #; # We start by assigning basis sets to atoms. These commands can go anywhere in the basis block; #; # First, assign DZ to all atoms; assign DZ; # Now, assign 3-21G to all carbon atoms; assign C my3-21G; # The two atoms labelled H1 get a STO-3G basis two; assign H1 sto-3g; # Carbons 3 and 5 get a STO-3G basis, too; assign C1 sto-3g; # With all these in place, the symmetry is lowered to C2v automatically; # The commands are applied in order i.e., adding a line like; # assign cc-pvtz; # here would override all of the above and assign cc-pvtz to all atoms. #; # Now we define the basis sets. N.B. Indentation does not matter; it just looks prettier.; #; [my3-21G] #This is really the standard 3-21G basis, but with a different name; cartesian; ****; H 0; S 2 1.00; 5.4471780 0.1562850; 0.8245470 0.9046910; S 1 1.00; 0.1831920 1.0000000; ****; C 0; S 3 1.00; 172.2560000 0.0617669; 25.9109000 0.3587940; 5.5333500 0.7007130; SP 2 1.00; 3.6649800 -0.3958970 0.2364600; 0.7705450 1.2158400 0.8606190; SP 1 1.00; 0.1958570 1.0000000 1.0000000; ****; [DZ]; spherical; ****; H 0 ; S 3 1.00; 19.2406000 0.0328280 ; 2.8992000 0.2312080 ; 0.6534000 0.8172380 ; S 1 1.00; 0.1776000 1.0000000 ; ****; """"""). psi4.set_options({; 'd_convergence': 11,; 'e_convergence': 11,; 'scf_type': 'pk'}); ; bz.update_geometry(); bz.print_out(); psi4.compare_strings(""c2v"", bz.schoenflies_symbol(), ""Point group"") #TEST; psi4.compare_values(refnuc, bz.nuclear_repulsion_energy(), 10, ""Nuclear repulsion energy"") #TEST; ```. ## Questions; - [ ] I've no immediate thoughts of merging this. Just wanted it to be available to others and off my computer. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1178
https://github.com/psi4/psi4/pull/1179:251,Testability,Test,Tests,251,## Description. This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `psi::CharacterTable` assignment operator to copy `bits_`. . ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1179
https://github.com/psi4/psi4/pull/1179:327,Testability,test,tests,327,## Description. This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `psi::CharacterTable` assignment operator to copy `bits_`. . ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1179
https://github.com/psi4/psi4/pull/1179:418,Testability,test,tests,418,## Description. This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `psi::CharacterTable` assignment operator to copy `bits_`. . ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1179
https://github.com/psi4/psi4/pull/1180:191,Deployability,Update,Update,191,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Replace `os.unlink`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1180
https://github.com/psi4/psi4/pull/1180:214,Testability,test,tests,214,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Replace `os.unlink`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1180
https://github.com/psi4/psi4/pull/1180:243,Testability,Test,Tests,243,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Replace `os.unlink`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1180
https://github.com/psi4/psi4/pull/1180:319,Testability,test,tests,319,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Replace `os.unlink`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1180
https://github.com/psi4/psi4/pull/1180:410,Testability,test,tests,410,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Replace `os.unlink`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1180
https://github.com/psi4/psi4/pull/1181:218,Testability,Test,Tests,218,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add missing `PSI_API` in fnocc. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1181
https://github.com/psi4/psi4/pull/1181:294,Testability,test,tests,294,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add missing `PSI_API` in fnocc. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1181
https://github.com/psi4/psi4/pull/1181:385,Testability,test,tests,385,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add missing `PSI_API` in fnocc. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1181
https://github.com/psi4/psi4/pull/1182:359,Testability,Test,Tests,359,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add MSVC-specific compiler definitions (`/D_USE_MATH_DEFINES` and `/EHsc`); - [x] Add MSVC-specific compiler options (`/bigobj`); - [x] Disable PyBind C++ standard on MSVC. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1182
https://github.com/psi4/psi4/pull/1182:435,Testability,test,tests,435,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add MSVC-specific compiler definitions (`/D_USE_MATH_DEFINES` and `/EHsc`); - [x] Add MSVC-specific compiler options (`/bigobj`); - [x] Disable PyBind C++ standard on MSVC. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1182
https://github.com/psi4/psi4/pull/1182:526,Testability,test,tests,526,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add MSVC-specific compiler definitions (`/D_USE_MATH_DEFINES` and `/EHsc`); - [x] Add MSVC-specific compiler options (`/bigobj`); - [x] Disable PyBind C++ standard on MSVC. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1182
https://github.com/psi4/psi4/pull/1183:221,Testability,Test,Tests,221,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] set Python interpreter explicitly. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1183
https://github.com/psi4/psi4/pull/1183:297,Testability,test,tests,297,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] set Python interpreter explicitly. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1183
https://github.com/psi4/psi4/pull/1183:388,Testability,test,tests,388,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] set Python interpreter explicitly. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1183
https://github.com/psi4/psi4/pull/1185:175,Deployability,configurat,configuration,175,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add Appveyor configuration to compile and tests on Windows. Appveyor has to be activated on the repository to work (https://www.appveyor.com/docs/).; - [x] #1181 has to merged before; - [x] #1182 has to merged before; - [x] #1183 has to merged before. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1185
https://github.com/psi4/psi4/pull/1185:175,Modifiability,config,configuration,175,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add Appveyor configuration to compile and tests on Windows. Appveyor has to be activated on the repository to work (https://www.appveyor.com/docs/).; - [x] #1181 has to merged before; - [x] #1182 has to merged before; - [x] #1183 has to merged before. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1185
https://github.com/psi4/psi4/pull/1185:204,Testability,test,tests,204,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add Appveyor configuration to compile and tests on Windows. Appveyor has to be activated on the repository to work (https://www.appveyor.com/docs/).; - [x] #1181 has to merged before; - [x] #1182 has to merged before; - [x] #1183 has to merged before. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1185
https://github.com/psi4/psi4/pull/1185:436,Testability,Test,Tests,436,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add Appveyor configuration to compile and tests on Windows. Appveyor has to be activated on the repository to work (https://www.appveyor.com/docs/).; - [x] #1181 has to merged before; - [x] #1182 has to merged before; - [x] #1183 has to merged before. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1185
https://github.com/psi4/psi4/pull/1185:512,Testability,test,tests,512,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add Appveyor configuration to compile and tests on Windows. Appveyor has to be activated on the repository to work (https://www.appveyor.com/docs/).; - [x] #1181 has to merged before; - [x] #1182 has to merged before; - [x] #1183 has to merged before. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1185
https://github.com/psi4/psi4/pull/1185:603,Testability,test,tests,603,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add Appveyor configuration to compile and tests on Windows. Appveyor has to be activated on the repository to work (https://www.appveyor.com/docs/).; - [x] #1181 has to merged before; - [x] #1182 has to merged before; - [x] #1183 has to merged before. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1185
https://github.com/psi4/psi4/issues/1188:266,Energy Efficiency,energy,energy,266,"```; molecule custom {; 0 1; AR 0.00000000 0.00000000 0.00000000; }. set basis def2-SVP; set DFT_VV10_B 4.0; pbe0 = {; ""name"": ""my_PBE0"",; ""x_functionals"": {""GGA_X_PBE"": {""alpha"": 0.75}},; ""x_hf"": {""alpha"": 0.25},; ""c_functionals"": {""GGA_C_PBE"": {}}; }; func_call = energy('SCF', dft_functional=pbe0); ```. Logic check for `isinstance(name, dict)` is missing, i think? I wasn't fully aware of how it works.; https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/dft_funcs/superfuncs.py#L113",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1188
https://github.com/psi4/psi4/issues/1188:307,Testability,Log,Logic,307,"```; molecule custom {; 0 1; AR 0.00000000 0.00000000 0.00000000; }. set basis def2-SVP; set DFT_VV10_B 4.0; pbe0 = {; ""name"": ""my_PBE0"",; ""x_functionals"": {""GGA_X_PBE"": {""alpha"": 0.75}},; ""x_hf"": {""alpha"": 0.25},; ""c_functionals"": {""GGA_C_PBE"": {}}; }; func_call = energy('SCF', dft_functional=pbe0); ```. Logic check for `isinstance(name, dict)` is missing, i think? I wasn't fully aware of how it works.; https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/dft_funcs/superfuncs.py#L113",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1188
https://github.com/psi4/psi4/issues/1196:75,Availability,error,error-module-exec-content,75,"Inspired by a recent [forum post](http://forum.psicode.org/t/psi4-run-time-error-module-exec-content/1064/2). If there's an error in the user's input file, the traceback could be much clearer. In particular:. -; ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 30, in <module>; ```; is not a good indicator that the problem is input file side.; - When the problem is input file side, we give the user the line number of the post-processed input file. To see the post-processed input file the line number corresponds to, the user needs to supply the -v flag.; - The line numbering doesn't match up, according to my demo. See the forum topic for details, but Psi told me I had a line 30 error when there was no line 30. (The error was instead by line 29.). This is a ""put this up so I don't forget about it"" issue, not a thorough detailing of what should be done. As I recall, this was brought up at WWDC last November, but an issue was never posted.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1196
https://github.com/psi4/psi4/issues/1196:124,Availability,error,error,124,"Inspired by a recent [forum post](http://forum.psicode.org/t/psi4-run-time-error-module-exec-content/1064/2). If there's an error in the user's input file, the traceback could be much clearer. In particular:. -; ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 30, in <module>; ```; is not a good indicator that the problem is input file side.; - When the problem is input file side, we give the user the line number of the post-processed input file. To see the post-processed input file the line number corresponds to, the user needs to supply the -v flag.; - The line numbering doesn't match up, according to my demo. See the forum topic for details, but Psi told me I had a line 30 error when there was no line 30. (The error was instead by line 29.). This is a ""put this up so I don't forget about it"" issue, not a thorough detailing of what should be done. As I recall, this was brought up at WWDC last November, but an issue was never posted.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1196
https://github.com/psi4/psi4/issues/1196:848,Availability,error,error,848,"Inspired by a recent [forum post](http://forum.psicode.org/t/psi4-run-time-error-module-exec-content/1064/2). If there's an error in the user's input file, the traceback could be much clearer. In particular:. -; ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 30, in <module>; ```; is not a good indicator that the problem is input file side.; - When the problem is input file side, we give the user the line number of the post-processed input file. To see the post-processed input file the line number corresponds to, the user needs to supply the -v flag.; - The line numbering doesn't match up, according to my demo. See the forum topic for details, but Psi told me I had a line 30 error when there was no line 30. (The error was instead by line 29.). This is a ""put this up so I don't forget about it"" issue, not a thorough detailing of what should be done. As I recall, this was brought up at WWDC last November, but an issue was never posted.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1196
https://github.com/psi4/psi4/issues/1196:886,Availability,error,error,886,"Inspired by a recent [forum post](http://forum.psicode.org/t/psi4-run-time-error-module-exec-content/1064/2). If there's an error in the user's input file, the traceback could be much clearer. In particular:. -; ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 30, in <module>; ```; is not a good indicator that the problem is input file side.; - When the problem is input file side, we give the user the line number of the post-processed input file. To see the post-processed input file the line number corresponds to, the user needs to supply the -v flag.; - The line numbering doesn't match up, according to my demo. See the forum topic for details, but Psi told me I had a line 30 error when there was no line 30. (The error was instead by line 29.). This is a ""put this up so I don't forget about it"" issue, not a thorough detailing of what should be done. As I recall, this was brought up at WWDC last November, but an issue was never posted.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1196
https://github.com/psi4/psi4/issues/1196:184,Usability,clear,clearer,184,"Inspired by a recent [forum post](http://forum.psicode.org/t/psi4-run-time-error-module-exec-content/1064/2). If there's an error in the user's input file, the traceback could be much clearer. In particular:. -; ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 30, in <module>; ```; is not a good indicator that the problem is input file side.; - When the problem is input file side, we give the user the line number of the post-processed input file. To see the post-processed input file the line number corresponds to, the user needs to supply the -v flag.; - The line numbering doesn't match up, according to my demo. See the forum topic for details, but Psi told me I had a line 30 error when there was no line 30. (The error was instead by line 29.). This is a ""put this up so I don't forget about it"" issue, not a thorough detailing of what should be done. As I recall, this was brought up at WWDC last November, but an issue was never posted.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1196
https://github.com/psi4/psi4/pull/1197:210,Testability,Test,Tests,210,## Description; try to fix travis. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1197
https://github.com/psi4/psi4/pull/1197:284,Testability,test,tests,284,## Description; try to fix travis. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1197
https://github.com/psi4/psi4/pull/1197:375,Testability,test,tests,375,## Description; try to fix travis. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1197
https://github.com/psi4/psi4/pull/1199:447,Deployability,install,install,447,"## Description; This is part of *Psi4* porting to Windows (#933). `cctriples` and `libdpd` use `pthread` directly, but its port to Windows (`pthread-win32`) is a bit questionable quality. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Make libdpd to use OpenMP instead of `pthread`; - [x] Make cctriples to use OpenMP instead of `pthread`; - [x] Do not link to `pthread` explicitly; - [x] Do not install `pthread-win32` on Appveyor. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1199
https://github.com/psi4/psi4/pull/1199:506,Testability,Test,Tests,506,"## Description; This is part of *Psi4* porting to Windows (#933). `cctriples` and `libdpd` use `pthread` directly, but its port to Windows (`pthread-win32`) is a bit questionable quality. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Make libdpd to use OpenMP instead of `pthread`; - [x] Make cctriples to use OpenMP instead of `pthread`; - [x] Do not link to `pthread` explicitly; - [x] Do not install `pthread-win32` on Appveyor. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1199
https://github.com/psi4/psi4/pull/1199:582,Testability,test,tests,582,"## Description; This is part of *Psi4* porting to Windows (#933). `cctriples` and `libdpd` use `pthread` directly, but its port to Windows (`pthread-win32`) is a bit questionable quality. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Make libdpd to use OpenMP instead of `pthread`; - [x] Make cctriples to use OpenMP instead of `pthread`; - [x] Do not link to `pthread` explicitly; - [x] Do not install `pthread-win32` on Appveyor. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1199
https://github.com/psi4/psi4/pull/1199:673,Testability,test,tests,673,"## Description; This is part of *Psi4* porting to Windows (#933). `cctriples` and `libdpd` use `pthread` directly, but its port to Windows (`pthread-win32`) is a bit questionable quality. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Make libdpd to use OpenMP instead of `pthread`; - [x] Make cctriples to use OpenMP instead of `pthread`; - [x] Do not link to `pthread` explicitly; - [x] Do not install `pthread-win32` on Appveyor. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1199
https://github.com/psi4/psi4/pull/1200:851,Testability,Test,Tests,851,"## Description; This is part of *Psi4* porting to Windows (#933). ~~MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts.~~. *clang-cl* supports OpenMP 4.5!. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Clean up OpenMP directives; - ~~Make threaded loop indices signed~~; - ~~Conditional compilation for `simd`~~; - [x] Add missing `for` clauses; - ~~Replace `max` reduction~~. ## Questions; - ~~In some cases `size_t` (`unsigned long int`) are replaced with `int`. Do I need to use `long` to prevent potential overflows in any case? --> Keep `size_t` or change to `long`~~; - [x] In some cases `omp_get_thread_num()` is called in a loop, which is inefficient. --> Insignificant; - [x] Some OpenMP blocks seems to be missing `for` clause. --> Add the clauses. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1200
https://github.com/psi4/psi4/pull/1200:927,Testability,test,tests,927,"## Description; This is part of *Psi4* porting to Windows (#933). ~~MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts.~~. *clang-cl* supports OpenMP 4.5!. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Clean up OpenMP directives; - ~~Make threaded loop indices signed~~; - ~~Conditional compilation for `simd`~~; - [x] Add missing `for` clauses; - ~~Replace `max` reduction~~. ## Questions; - ~~In some cases `size_t` (`unsigned long int`) are replaced with `int`. Do I need to use `long` to prevent potential overflows in any case? --> Keep `size_t` or change to `long`~~; - [x] In some cases `omp_get_thread_num()` is called in a loop, which is inefficient. --> Insignificant; - [x] Some OpenMP blocks seems to be missing `for` clause. --> Add the clauses. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1200
https://github.com/psi4/psi4/pull/1200:1018,Testability,test,tests,1018,"## Description; This is part of *Psi4* porting to Windows (#933). ~~MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts.~~. *clang-cl* supports OpenMP 4.5!. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Clean up OpenMP directives; - ~~Make threaded loop indices signed~~; - ~~Conditional compilation for `simd`~~; - [x] Add missing `for` clauses; - ~~Replace `max` reduction~~. ## Questions; - ~~In some cases `size_t` (`unsigned long int`) are replaced with `int`. Do I need to use `long` to prevent potential overflows in any case? --> Keep `size_t` or change to `long`~~; - [x] In some cases `omp_get_thread_num()` is called in a loop, which is inefficient. --> Insignificant; - [x] Some OpenMP blocks seems to be missing `for` clause. --> Add the clauses. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1200
https://github.com/psi4/psi4/pull/1201:237,Modifiability,inherit,inherit,237,"## Description; Since we [say we're returning the dimer wfn](https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L505-L507), let's return the dimer wfn for fisapt. currently returning a `psi4.core.FISAPT` object that does not inherit from Wfn. Hence no way to drive OEPROP on a sapt calc. ## Checklist; - [x] I checked that the dipole/quadrupole from running oeprop on this returned wfn matches a forced quadrupole in the early scf_helper; - [x] ran all the sapt tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1201
https://github.com/psi4/psi4/pull/1201:474,Testability,test,tests,474,"## Description; Since we [say we're returning the dimer wfn](https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L505-L507), let's return the dimer wfn for fisapt. currently returning a `psi4.core.FISAPT` object that does not inherit from Wfn. Hence no way to drive OEPROP on a sapt calc. ## Checklist; - [x] I checked that the dipole/quadrupole from running oeprop on this returned wfn matches a forced quadrupole in the early scf_helper; - [x] ran all the sapt tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1201
https://github.com/psi4/psi4/pull/1212:250,Modifiability,plugin,plugins,250,"## Description; Added PSI_API macro to libqt/reorder_qt.cc functions and corresponding libqt/qt.h. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - Exposes libqt/reorder_qt() and libqt/reorder_qt_uhf() to plugins. ## Checklist; - [X] All or relevant fraction of full tests run. ## Status; - [X] Ready for review; - [X] Ready for merge. ## Comment; This seems pretty trivial, but I haven't made a PR in a long, long time...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1212
https://github.com/psi4/psi4/pull/1212:193,Security,Expose,Exposes,193,"## Description; Added PSI_API macro to libqt/reorder_qt.cc functions and corresponding libqt/qt.h. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - Exposes libqt/reorder_qt() and libqt/reorder_qt_uhf() to plugins. ## Checklist; - [X] All or relevant fraction of full tests run. ## Status; - [X] Ready for review; - [X] Ready for merge. ## Comment; This seems pretty trivial, but I haven't made a PR in a long, long time...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1212
https://github.com/psi4/psi4/pull/1212:312,Testability,test,tests,312,"## Description; Added PSI_API macro to libqt/reorder_qt.cc functions and corresponding libqt/qt.h. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - Exposes libqt/reorder_qt() and libqt/reorder_qt_uhf() to plugins. ## Checklist; - [X] All or relevant fraction of full tests run. ## Status; - [X] Ready for review; - [X] Ready for merge. ## Comment; This seems pretty trivial, but I haven't made a PR in a long, long time...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1212
https://github.com/psi4/psi4/pull/1213:584,Deployability,update,updated,584,"## Description. #### background; We keep needing periodic table and physical constants data upstream of psi4 (psi4 Molecule, pyoptking, mol parsing, common driver, etc.), so it makes little sense that the Source of Truth is c-side Psi4 headers, `masses.h` and `physconst.h`. Nowadays, physical constants are in psi three times (c-side, py-side, qcdb) and masses are twice but of the 4 arrays in `masses.h`, only one, `an2masses` is ever called in theory, and I don't see it called in practice. #### solution; Move these aspects into their own [lightweight python module that's easily updated](https://github.com/qcdb/qcelemental). That module can write psi4 header files, which are what's copied here. #### stages; - [x] c-side `physconst.h` updated here CODATA 2010 (Andy c.2012) --> CODATA 2014; - [x] py-side `psi4.driver.constants.physconst.py` updated here, through autogeneration from c-side; - [x] qcdb-side `psi4.driver.qcdb.physconst.py` updated here, through copying and prefixing from py-side; - [x] c-side `masses.h` updated here from undated NIST document (that includes through element 117, so it can't be too old). changing this alone has no effect on the tests.; - [ ] py-side `psi4.driver.qcdb.periodictable` NOT updated here. (so effectively masses are unchanged in this PR.) Later, py-side psi4 will import this new module to get its periodictable data.; - [x] Implications to the test suite:; - [x] lots of nuclear repulsion energies wanted changing. I took them at their word; - [x] wherever we tested SCF or SCF+ to 9+ decimals, comparisons failed. I've copied in the new values. energy figures tended to be good beyond 6 decimals. #### PT changes; * Main major change is to Krypton, where the generic (non-isotope) element had been assigned to the wrong isotope. Then there's lots of unstable elements that had the same thing wrong, so the below generic elements differ by 1–13 [u]. Only other element to differ by > 1.e-5 is Darmstadtium.; ```; Checking z2el vs. Psi4 ... Check",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1213
https://github.com/psi4/psi4/pull/1213:742,Deployability,update,updated,742,"## Description. #### background; We keep needing periodic table and physical constants data upstream of psi4 (psi4 Molecule, pyoptking, mol parsing, common driver, etc.), so it makes little sense that the Source of Truth is c-side Psi4 headers, `masses.h` and `physconst.h`. Nowadays, physical constants are in psi three times (c-side, py-side, qcdb) and masses are twice but of the 4 arrays in `masses.h`, only one, `an2masses` is ever called in theory, and I don't see it called in practice. #### solution; Move these aspects into their own [lightweight python module that's easily updated](https://github.com/qcdb/qcelemental). That module can write psi4 header files, which are what's copied here. #### stages; - [x] c-side `physconst.h` updated here CODATA 2010 (Andy c.2012) --> CODATA 2014; - [x] py-side `psi4.driver.constants.physconst.py` updated here, through autogeneration from c-side; - [x] qcdb-side `psi4.driver.qcdb.physconst.py` updated here, through copying and prefixing from py-side; - [x] c-side `masses.h` updated here from undated NIST document (that includes through element 117, so it can't be too old). changing this alone has no effect on the tests.; - [ ] py-side `psi4.driver.qcdb.periodictable` NOT updated here. (so effectively masses are unchanged in this PR.) Later, py-side psi4 will import this new module to get its periodictable data.; - [x] Implications to the test suite:; - [x] lots of nuclear repulsion energies wanted changing. I took them at their word; - [x] wherever we tested SCF or SCF+ to 9+ decimals, comparisons failed. I've copied in the new values. energy figures tended to be good beyond 6 decimals. #### PT changes; * Main major change is to Krypton, where the generic (non-isotope) element had been assigned to the wrong isotope. Then there's lots of unstable elements that had the same thing wrong, so the below generic elements differ by 1–13 [u]. Only other element to differ by > 1.e-5 is Darmstadtium.; ```; Checking z2el vs. Psi4 ... Check",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1213
https://github.com/psi4/psi4/pull/1213:849,Deployability,update,updated,849,"## Description. #### background; We keep needing periodic table and physical constants data upstream of psi4 (psi4 Molecule, pyoptking, mol parsing, common driver, etc.), so it makes little sense that the Source of Truth is c-side Psi4 headers, `masses.h` and `physconst.h`. Nowadays, physical constants are in psi three times (c-side, py-side, qcdb) and masses are twice but of the 4 arrays in `masses.h`, only one, `an2masses` is ever called in theory, and I don't see it called in practice. #### solution; Move these aspects into their own [lightweight python module that's easily updated](https://github.com/qcdb/qcelemental). That module can write psi4 header files, which are what's copied here. #### stages; - [x] c-side `physconst.h` updated here CODATA 2010 (Andy c.2012) --> CODATA 2014; - [x] py-side `psi4.driver.constants.physconst.py` updated here, through autogeneration from c-side; - [x] qcdb-side `psi4.driver.qcdb.physconst.py` updated here, through copying and prefixing from py-side; - [x] c-side `masses.h` updated here from undated NIST document (that includes through element 117, so it can't be too old). changing this alone has no effect on the tests.; - [ ] py-side `psi4.driver.qcdb.periodictable` NOT updated here. (so effectively masses are unchanged in this PR.) Later, py-side psi4 will import this new module to get its periodictable data.; - [x] Implications to the test suite:; - [x] lots of nuclear repulsion energies wanted changing. I took them at their word; - [x] wherever we tested SCF or SCF+ to 9+ decimals, comparisons failed. I've copied in the new values. energy figures tended to be good beyond 6 decimals. #### PT changes; * Main major change is to Krypton, where the generic (non-isotope) element had been assigned to the wrong isotope. Then there's lots of unstable elements that had the same thing wrong, so the below generic elements differ by 1–13 [u]. Only other element to differ by > 1.e-5 is Darmstadtium.; ```; Checking z2el vs. Psi4 ... Check",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1213
https://github.com/psi4/psi4/pull/1213:947,Deployability,update,updated,947,"## Description. #### background; We keep needing periodic table and physical constants data upstream of psi4 (psi4 Molecule, pyoptking, mol parsing, common driver, etc.), so it makes little sense that the Source of Truth is c-side Psi4 headers, `masses.h` and `physconst.h`. Nowadays, physical constants are in psi three times (c-side, py-side, qcdb) and masses are twice but of the 4 arrays in `masses.h`, only one, `an2masses` is ever called in theory, and I don't see it called in practice. #### solution; Move these aspects into their own [lightweight python module that's easily updated](https://github.com/qcdb/qcelemental). That module can write psi4 header files, which are what's copied here. #### stages; - [x] c-side `physconst.h` updated here CODATA 2010 (Andy c.2012) --> CODATA 2014; - [x] py-side `psi4.driver.constants.physconst.py` updated here, through autogeneration from c-side; - [x] qcdb-side `psi4.driver.qcdb.physconst.py` updated here, through copying and prefixing from py-side; - [x] c-side `masses.h` updated here from undated NIST document (that includes through element 117, so it can't be too old). changing this alone has no effect on the tests.; - [ ] py-side `psi4.driver.qcdb.periodictable` NOT updated here. (so effectively masses are unchanged in this PR.) Later, py-side psi4 will import this new module to get its periodictable data.; - [x] Implications to the test suite:; - [x] lots of nuclear repulsion energies wanted changing. I took them at their word; - [x] wherever we tested SCF or SCF+ to 9+ decimals, comparisons failed. I've copied in the new values. energy figures tended to be good beyond 6 decimals. #### PT changes; * Main major change is to Krypton, where the generic (non-isotope) element had been assigned to the wrong isotope. Then there's lots of unstable elements that had the same thing wrong, so the below generic elements differ by 1–13 [u]. Only other element to differ by > 1.e-5 is Darmstadtium.; ```; Checking z2el vs. Psi4 ... Check",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1213
https://github.com/psi4/psi4/pull/1213:1029,Deployability,update,updated,1029,"constants data upstream of psi4 (psi4 Molecule, pyoptking, mol parsing, common driver, etc.), so it makes little sense that the Source of Truth is c-side Psi4 headers, `masses.h` and `physconst.h`. Nowadays, physical constants are in psi three times (c-side, py-side, qcdb) and masses are twice but of the 4 arrays in `masses.h`, only one, `an2masses` is ever called in theory, and I don't see it called in practice. #### solution; Move these aspects into their own [lightweight python module that's easily updated](https://github.com/qcdb/qcelemental). That module can write psi4 header files, which are what's copied here. #### stages; - [x] c-side `physconst.h` updated here CODATA 2010 (Andy c.2012) --> CODATA 2014; - [x] py-side `psi4.driver.constants.physconst.py` updated here, through autogeneration from c-side; - [x] qcdb-side `psi4.driver.qcdb.physconst.py` updated here, through copying and prefixing from py-side; - [x] c-side `masses.h` updated here from undated NIST document (that includes through element 117, so it can't be too old). changing this alone has no effect on the tests.; - [ ] py-side `psi4.driver.qcdb.periodictable` NOT updated here. (so effectively masses are unchanged in this PR.) Later, py-side psi4 will import this new module to get its periodictable data.; - [x] Implications to the test suite:; - [x] lots of nuclear repulsion energies wanted changing. I took them at their word; - [x] wherever we tested SCF or SCF+ to 9+ decimals, comparisons failed. I've copied in the new values. energy figures tended to be good beyond 6 decimals. #### PT changes; * Main major change is to Krypton, where the generic (non-isotope) element had been assigned to the wrong isotope. Then there's lots of unstable elements that had the same thing wrong, so the below generic elements differ by 1–13 [u]. Only other element to differ by > 1.e-5 is Darmstadtium.; ```; Checking z2el vs. Psi4 ... Checking el2z vs. Psi4 ... Checking (1e-05) el2mass vs. Psi4 ...; Element Kr diffe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1213
https://github.com/psi4/psi4/pull/1213:1230,Deployability,update,updated,1230,"ide Psi4 headers, `masses.h` and `physconst.h`. Nowadays, physical constants are in psi three times (c-side, py-side, qcdb) and masses are twice but of the 4 arrays in `masses.h`, only one, `an2masses` is ever called in theory, and I don't see it called in practice. #### solution; Move these aspects into their own [lightweight python module that's easily updated](https://github.com/qcdb/qcelemental). That module can write psi4 header files, which are what's copied here. #### stages; - [x] c-side `physconst.h` updated here CODATA 2010 (Andy c.2012) --> CODATA 2014; - [x] py-side `psi4.driver.constants.physconst.py` updated here, through autogeneration from c-side; - [x] qcdb-side `psi4.driver.qcdb.physconst.py` updated here, through copying and prefixing from py-side; - [x] c-side `masses.h` updated here from undated NIST document (that includes through element 117, so it can't be too old). changing this alone has no effect on the tests.; - [ ] py-side `psi4.driver.qcdb.periodictable` NOT updated here. (so effectively masses are unchanged in this PR.) Later, py-side psi4 will import this new module to get its periodictable data.; - [x] Implications to the test suite:; - [x] lots of nuclear repulsion energies wanted changing. I took them at their word; - [x] wherever we tested SCF or SCF+ to 9+ decimals, comparisons failed. I've copied in the new values. energy figures tended to be good beyond 6 decimals. #### PT changes; * Main major change is to Krypton, where the generic (non-isotope) element had been assigned to the wrong isotope. Then there's lots of unstable elements that had the same thing wrong, so the below generic elements differ by 1–13 [u]. Only other element to differ by > 1.e-5 is Darmstadtium.; ```; Checking z2el vs. Psi4 ... Checking el2z vs. Psi4 ... Checking (1e-05) el2mass vs. Psi4 ...; Element Kr differs by 1.99911300: 83.9114977282 (this) vs 85.910610729 (psi); Element Tc differs by 0.99904235: 97.9072124 (this) vs 98.906254747 (psi); Element At d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1213
https://github.com/psi4/psi4/pull/1213:1602,Energy Efficiency,energy,energy,1602,"l). That module can write psi4 header files, which are what's copied here. #### stages; - [x] c-side `physconst.h` updated here CODATA 2010 (Andy c.2012) --> CODATA 2014; - [x] py-side `psi4.driver.constants.physconst.py` updated here, through autogeneration from c-side; - [x] qcdb-side `psi4.driver.qcdb.physconst.py` updated here, through copying and prefixing from py-side; - [x] c-side `masses.h` updated here from undated NIST document (that includes through element 117, so it can't be too old). changing this alone has no effect on the tests.; - [ ] py-side `psi4.driver.qcdb.periodictable` NOT updated here. (so effectively masses are unchanged in this PR.) Later, py-side psi4 will import this new module to get its periodictable data.; - [x] Implications to the test suite:; - [x] lots of nuclear repulsion energies wanted changing. I took them at their word; - [x] wherever we tested SCF or SCF+ to 9+ decimals, comparisons failed. I've copied in the new values. energy figures tended to be good beyond 6 decimals. #### PT changes; * Main major change is to Krypton, where the generic (non-isotope) element had been assigned to the wrong isotope. Then there's lots of unstable elements that had the same thing wrong, so the below generic elements differ by 1–13 [u]. Only other element to differ by > 1.e-5 is Darmstadtium.; ```; Checking z2el vs. Psi4 ... Checking el2z vs. Psi4 ... Checking (1e-05) el2mass vs. Psi4 ...; Element Kr differs by 1.99911300: 83.9114977282 (this) vs 85.910610729 (psi); Element Tc differs by 0.99904235: 97.9072124 (this) vs 98.906254747 (psi); Element At differs by 1.00034837: 209.9871479 (this) vs 210.987496271 (psi); Element Fr differs by 1.00218427: 223.0197360 (this) vs 222.01755173 (psi); Element Ra differs by 2.00565999: 226.0254103 (this) vs 228.031070292 (psi); Element Pu differs by 2.00546269: 244.0642053 (this) vs 242.058742611 (psi); Element No differs by 4.00778887: 259.10103 (this) vs 255.093241131 (psi); Element Lr differs by 6.014326",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1213
https://github.com/psi4/psi4/pull/1213:1171,Testability,test,tests,1171,"on driver, etc.), so it makes little sense that the Source of Truth is c-side Psi4 headers, `masses.h` and `physconst.h`. Nowadays, physical constants are in psi three times (c-side, py-side, qcdb) and masses are twice but of the 4 arrays in `masses.h`, only one, `an2masses` is ever called in theory, and I don't see it called in practice. #### solution; Move these aspects into their own [lightweight python module that's easily updated](https://github.com/qcdb/qcelemental). That module can write psi4 header files, which are what's copied here. #### stages; - [x] c-side `physconst.h` updated here CODATA 2010 (Andy c.2012) --> CODATA 2014; - [x] py-side `psi4.driver.constants.physconst.py` updated here, through autogeneration from c-side; - [x] qcdb-side `psi4.driver.qcdb.physconst.py` updated here, through copying and prefixing from py-side; - [x] c-side `masses.h` updated here from undated NIST document (that includes through element 117, so it can't be too old). changing this alone has no effect on the tests.; - [ ] py-side `psi4.driver.qcdb.periodictable` NOT updated here. (so effectively masses are unchanged in this PR.) Later, py-side psi4 will import this new module to get its periodictable data.; - [x] Implications to the test suite:; - [x] lots of nuclear repulsion energies wanted changing. I took them at their word; - [x] wherever we tested SCF or SCF+ to 9+ decimals, comparisons failed. I've copied in the new values. energy figures tended to be good beyond 6 decimals. #### PT changes; * Main major change is to Krypton, where the generic (non-isotope) element had been assigned to the wrong isotope. Then there's lots of unstable elements that had the same thing wrong, so the below generic elements differ by 1–13 [u]. Only other element to differ by > 1.e-5 is Darmstadtium.; ```; Checking z2el vs. Psi4 ... Checking el2z vs. Psi4 ... Checking (1e-05) el2mass vs. Psi4 ...; Element Kr differs by 1.99911300: 83.9114977282 (this) vs 85.910610729 (psi); Element Tc di",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1213
https://github.com/psi4/psi4/pull/1213:1400,Testability,test,test,1400,"masses` is ever called in theory, and I don't see it called in practice. #### solution; Move these aspects into their own [lightweight python module that's easily updated](https://github.com/qcdb/qcelemental). That module can write psi4 header files, which are what's copied here. #### stages; - [x] c-side `physconst.h` updated here CODATA 2010 (Andy c.2012) --> CODATA 2014; - [x] py-side `psi4.driver.constants.physconst.py` updated here, through autogeneration from c-side; - [x] qcdb-side `psi4.driver.qcdb.physconst.py` updated here, through copying and prefixing from py-side; - [x] c-side `masses.h` updated here from undated NIST document (that includes through element 117, so it can't be too old). changing this alone has no effect on the tests.; - [ ] py-side `psi4.driver.qcdb.periodictable` NOT updated here. (so effectively masses are unchanged in this PR.) Later, py-side psi4 will import this new module to get its periodictable data.; - [x] Implications to the test suite:; - [x] lots of nuclear repulsion energies wanted changing. I took them at their word; - [x] wherever we tested SCF or SCF+ to 9+ decimals, comparisons failed. I've copied in the new values. energy figures tended to be good beyond 6 decimals. #### PT changes; * Main major change is to Krypton, where the generic (non-isotope) element had been assigned to the wrong isotope. Then there's lots of unstable elements that had the same thing wrong, so the below generic elements differ by 1–13 [u]. Only other element to differ by > 1.e-5 is Darmstadtium.; ```; Checking z2el vs. Psi4 ... Checking el2z vs. Psi4 ... Checking (1e-05) el2mass vs. Psi4 ...; Element Kr differs by 1.99911300: 83.9114977282 (this) vs 85.910610729 (psi); Element Tc differs by 0.99904235: 97.9072124 (this) vs 98.906254747 (psi); Element At differs by 1.00034837: 209.9871479 (this) vs 210.987496271 (psi); Element Fr differs by 1.00218427: 223.0197360 (this) vs 222.01755173 (psi); Element Ra differs by 2.00565999: 226.0254103 (this) ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1213
https://github.com/psi4/psi4/pull/1213:1516,Testability,test,tested,1516,"aspects into their own [lightweight python module that's easily updated](https://github.com/qcdb/qcelemental). That module can write psi4 header files, which are what's copied here. #### stages; - [x] c-side `physconst.h` updated here CODATA 2010 (Andy c.2012) --> CODATA 2014; - [x] py-side `psi4.driver.constants.physconst.py` updated here, through autogeneration from c-side; - [x] qcdb-side `psi4.driver.qcdb.physconst.py` updated here, through copying and prefixing from py-side; - [x] c-side `masses.h` updated here from undated NIST document (that includes through element 117, so it can't be too old). changing this alone has no effect on the tests.; - [ ] py-side `psi4.driver.qcdb.periodictable` NOT updated here. (so effectively masses are unchanged in this PR.) Later, py-side psi4 will import this new module to get its periodictable data.; - [x] Implications to the test suite:; - [x] lots of nuclear repulsion energies wanted changing. I took them at their word; - [x] wherever we tested SCF or SCF+ to 9+ decimals, comparisons failed. I've copied in the new values. energy figures tended to be good beyond 6 decimals. #### PT changes; * Main major change is to Krypton, where the generic (non-isotope) element had been assigned to the wrong isotope. Then there's lots of unstable elements that had the same thing wrong, so the below generic elements differ by 1–13 [u]. Only other element to differ by > 1.e-5 is Darmstadtium.; ```; Checking z2el vs. Psi4 ... Checking el2z vs. Psi4 ... Checking (1e-05) el2mass vs. Psi4 ...; Element Kr differs by 1.99911300: 83.9114977282 (this) vs 85.910610729 (psi); Element Tc differs by 0.99904235: 97.9072124 (this) vs 98.906254747 (psi); Element At differs by 1.00034837: 209.9871479 (this) vs 210.987496271 (psi); Element Fr differs by 1.00218427: 223.0197360 (this) vs 222.01755173 (psi); Element Ra differs by 2.00565999: 226.0254103 (this) vs 228.031070292 (psi); Element Pu differs by 2.00546269: 244.0642053 (this) vs 242.058742611 (psi)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1213
https://github.com/psi4/psi4/pull/1213:21792,Testability,test,test,21792," ratio differs by 0.00000009: 2.541746451895026 (this) vs 2.54174623 (psi); Physical Constant dipmom_au2si ratio differs by 0.00000009: 8.478353552e-30 (this) vs 8.47835281e-30 (psi); Physical Constant h ratio differs by 0.00000016: 6.62607004e-34 (this) vs 6.62606896e-34 (psi); Physical Constant hartree2J ratio differs by 0.00000015: 4.35974465e-18 (this) vs 4.359744e-18 (psi); Physical Constant hartree2MHz ratio differs by 0.00000001: 6579683920.711 (this) vs 6579684000.0 (psi); Physical Constant hartree2aJ ratio differs by 0.00000015: 4.35974465 (this) vs 4.359744 (psi); Physical Constant hartree2ev ratio differs by 0.00000022: 27.21138602 (this) vs 27.21138 (psi); Physical Constant hartree2kJmol ratio differs by 0.00000014: 2625.4996382852164 (this) vs 2625.5 (psi); Physical Constant hartree2kcalmol ratio differs by 0.00000004: 627.5094737775374 (this) vs 627.5095 (psi); Physical Constant hartree2wavenumbers ratio differs by 0.00000014: 219474.6313702 (this) vs 219474.6 (psi); Physical Constant kb ratio differs by 0.00000136: 1.38064852e-23 (this) vs 1.3806504e-23 (psi); Physical Constant kcalmol2wavenumbers ratio differs by 0.00000003: 349.7550882318032 (this) vs 349.7551 (psi); Physical Constant me ratio differs by 0.00000015: 9.10938356e-31 (this) vs 9.10938215e-31 (psi); Physical Constant na ratio differs by 0.00000015: 6.022140857e+23 (this) vs 6.02214179e+23 (psi); ```. ## Questions; - [x] mints3 uses external ref files. I wanted to make sure this wasn't something that was supposed to be indifferent to physconst changes. @jturney ; - [x] psithon1 is the diatomic test. There's a lot of digits in the ref values, so I wanted to check before changing them. @andysim ; - [x] dft-bench-ionization may be going crazy. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1213
https://github.com/psi4/psi4/pull/1213:21963,Testability,Test,Tests,21963," ratio differs by 0.00000009: 2.541746451895026 (this) vs 2.54174623 (psi); Physical Constant dipmom_au2si ratio differs by 0.00000009: 8.478353552e-30 (this) vs 8.47835281e-30 (psi); Physical Constant h ratio differs by 0.00000016: 6.62607004e-34 (this) vs 6.62606896e-34 (psi); Physical Constant hartree2J ratio differs by 0.00000015: 4.35974465e-18 (this) vs 4.359744e-18 (psi); Physical Constant hartree2MHz ratio differs by 0.00000001: 6579683920.711 (this) vs 6579684000.0 (psi); Physical Constant hartree2aJ ratio differs by 0.00000015: 4.35974465 (this) vs 4.359744 (psi); Physical Constant hartree2ev ratio differs by 0.00000022: 27.21138602 (this) vs 27.21138 (psi); Physical Constant hartree2kJmol ratio differs by 0.00000014: 2625.4996382852164 (this) vs 2625.5 (psi); Physical Constant hartree2kcalmol ratio differs by 0.00000004: 627.5094737775374 (this) vs 627.5095 (psi); Physical Constant hartree2wavenumbers ratio differs by 0.00000014: 219474.6313702 (this) vs 219474.6 (psi); Physical Constant kb ratio differs by 0.00000136: 1.38064852e-23 (this) vs 1.3806504e-23 (psi); Physical Constant kcalmol2wavenumbers ratio differs by 0.00000003: 349.7550882318032 (this) vs 349.7551 (psi); Physical Constant me ratio differs by 0.00000015: 9.10938356e-31 (this) vs 9.10938215e-31 (psi); Physical Constant na ratio differs by 0.00000015: 6.022140857e+23 (this) vs 6.02214179e+23 (psi); ```. ## Questions; - [x] mints3 uses external ref files. I wanted to make sure this wasn't something that was supposed to be indifferent to physconst changes. @jturney ; - [x] psithon1 is the diatomic test. There's a lot of digits in the ref values, so I wanted to check before changing them. @andysim ; - [x] dft-bench-ionization may be going crazy. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1213
https://github.com/psi4/psi4/pull/1213:22038,Testability,test,tests,22038," ratio differs by 0.00000009: 2.541746451895026 (this) vs 2.54174623 (psi); Physical Constant dipmom_au2si ratio differs by 0.00000009: 8.478353552e-30 (this) vs 8.47835281e-30 (psi); Physical Constant h ratio differs by 0.00000016: 6.62607004e-34 (this) vs 6.62606896e-34 (psi); Physical Constant hartree2J ratio differs by 0.00000015: 4.35974465e-18 (this) vs 4.359744e-18 (psi); Physical Constant hartree2MHz ratio differs by 0.00000001: 6579683920.711 (this) vs 6579684000.0 (psi); Physical Constant hartree2aJ ratio differs by 0.00000015: 4.35974465 (this) vs 4.359744 (psi); Physical Constant hartree2ev ratio differs by 0.00000022: 27.21138602 (this) vs 27.21138 (psi); Physical Constant hartree2kJmol ratio differs by 0.00000014: 2625.4996382852164 (this) vs 2625.5 (psi); Physical Constant hartree2kcalmol ratio differs by 0.00000004: 627.5094737775374 (this) vs 627.5095 (psi); Physical Constant hartree2wavenumbers ratio differs by 0.00000014: 219474.6313702 (this) vs 219474.6 (psi); Physical Constant kb ratio differs by 0.00000136: 1.38064852e-23 (this) vs 1.3806504e-23 (psi); Physical Constant kcalmol2wavenumbers ratio differs by 0.00000003: 349.7550882318032 (this) vs 349.7551 (psi); Physical Constant me ratio differs by 0.00000015: 9.10938356e-31 (this) vs 9.10938215e-31 (psi); Physical Constant na ratio differs by 0.00000015: 6.022140857e+23 (this) vs 6.02214179e+23 (psi); ```. ## Questions; - [x] mints3 uses external ref files. I wanted to make sure this wasn't something that was supposed to be indifferent to physconst changes. @jturney ; - [x] psithon1 is the diatomic test. There's a lot of digits in the ref values, so I wanted to check before changing them. @andysim ; - [x] dft-bench-ionization may be going crazy. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1213
https://github.com/psi4/psi4/pull/1213:22129,Testability,test,tests,22129," ratio differs by 0.00000009: 2.541746451895026 (this) vs 2.54174623 (psi); Physical Constant dipmom_au2si ratio differs by 0.00000009: 8.478353552e-30 (this) vs 8.47835281e-30 (psi); Physical Constant h ratio differs by 0.00000016: 6.62607004e-34 (this) vs 6.62606896e-34 (psi); Physical Constant hartree2J ratio differs by 0.00000015: 4.35974465e-18 (this) vs 4.359744e-18 (psi); Physical Constant hartree2MHz ratio differs by 0.00000001: 6579683920.711 (this) vs 6579684000.0 (psi); Physical Constant hartree2aJ ratio differs by 0.00000015: 4.35974465 (this) vs 4.359744 (psi); Physical Constant hartree2ev ratio differs by 0.00000022: 27.21138602 (this) vs 27.21138 (psi); Physical Constant hartree2kJmol ratio differs by 0.00000014: 2625.4996382852164 (this) vs 2625.5 (psi); Physical Constant hartree2kcalmol ratio differs by 0.00000004: 627.5094737775374 (this) vs 627.5095 (psi); Physical Constant hartree2wavenumbers ratio differs by 0.00000014: 219474.6313702 (this) vs 219474.6 (psi); Physical Constant kb ratio differs by 0.00000136: 1.38064852e-23 (this) vs 1.3806504e-23 (psi); Physical Constant kcalmol2wavenumbers ratio differs by 0.00000003: 349.7550882318032 (this) vs 349.7551 (psi); Physical Constant me ratio differs by 0.00000015: 9.10938356e-31 (this) vs 9.10938215e-31 (psi); Physical Constant na ratio differs by 0.00000015: 6.022140857e+23 (this) vs 6.02214179e+23 (psi); ```. ## Questions; - [x] mints3 uses external ref files. I wanted to make sure this wasn't something that was supposed to be indifferent to physconst changes. @jturney ; - [x] psithon1 is the diatomic test. There's a lot of digits in the ref values, so I wanted to check before changing them. @andysim ; - [x] dft-bench-ionization may be going crazy. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1213
https://github.com/psi4/psi4/pull/1214:1159,Availability,error,error,1159,"Fixes #1196. As an example, the following input file:; ```; memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). foo = [1, 2]; print(foo[3]); ```. ...now prints the following upon termination... ```; *** tstop() called on Jonathons-MacBook-Pro.local at Tue Sep 4 13:22:51 2018; Module time:; user time = 0.52 seconds = 0.01 minutes; system time = 0.05 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.52 seconds = 0.01 minutes; system time = 0.05 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdirfindif/stage/usr/local/psi4/bin/psi4"", line 270, in <module>; exec(content); File ""<string>"", line 30, in <module>. IndexError: list index out of range. Printing out the relevant lines from the post-processed input file:; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pVDZ""); energy('scf'); foo = [1, 2]; --> print(foo[3]). Psi4 stopped on: Tuesday, 04 September 2018 01:22PM; Psi4 wall time for execution: 0:00:00.78. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. ## Todos; - [x] Fixes #1196 - if an error occurs Py-side, the post-processed line of output that called it is displayed, plus five back and forwards, for context. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1214
https://github.com/psi4/psi4/pull/1214:1286,Availability,error,error,1286,"Fixes #1196. As an example, the following input file:; ```; memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). foo = [1, 2]; print(foo[3]); ```. ...now prints the following upon termination... ```; *** tstop() called on Jonathons-MacBook-Pro.local at Tue Sep 4 13:22:51 2018; Module time:; user time = 0.52 seconds = 0.01 minutes; system time = 0.05 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.52 seconds = 0.01 minutes; system time = 0.05 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdirfindif/stage/usr/local/psi4/bin/psi4"", line 270, in <module>; exec(content); File ""<string>"", line 30, in <module>. IndexError: list index out of range. Printing out the relevant lines from the post-processed input file:; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pVDZ""); energy('scf'); foo = [1, 2]; --> print(foo[3]). Psi4 stopped on: Tuesday, 04 September 2018 01:22PM; Psi4 wall time for execution: 0:00:00.78. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. ## Todos; - [x] Fixes #1196 - if an error occurs Py-side, the post-processed line of output that called it is displayed, plus five back and forwards, for context. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1214
https://github.com/psi4/psi4/pull/1214:145,Energy Efficiency,energy,energy,145,"Fixes #1196. As an example, the following input file:; ```; memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). foo = [1, 2]; print(foo[3]); ```. ...now prints the following upon termination... ```; *** tstop() called on Jonathons-MacBook-Pro.local at Tue Sep 4 13:22:51 2018; Module time:; user time = 0.52 seconds = 0.01 minutes; system time = 0.05 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.52 seconds = 0.01 minutes; system time = 0.05 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdirfindif/stage/usr/local/psi4/bin/psi4"", line 270, in <module>; exec(content); File ""<string>"", line 30, in <module>. IndexError: list index out of range. Printing out the relevant lines from the post-processed input file:; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pVDZ""); energy('scf'); foo = [1, 2]; --> print(foo[3]). Psi4 stopped on: Tuesday, 04 September 2018 01:22PM; Psi4 wall time for execution: 0:00:00.78. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. ## Todos; - [x] Fixes #1196 - if an error occurs Py-side, the post-processed line of output that called it is displayed, plus five back and forwards, for context. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1214
https://github.com/psi4/psi4/pull/1214:992,Energy Efficiency,energy,energy,992,"Fixes #1196. As an example, the following input file:; ```; memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). foo = [1, 2]; print(foo[3]); ```. ...now prints the following upon termination... ```; *** tstop() called on Jonathons-MacBook-Pro.local at Tue Sep 4 13:22:51 2018; Module time:; user time = 0.52 seconds = 0.01 minutes; system time = 0.05 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.52 seconds = 0.01 minutes; system time = 0.05 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdirfindif/stage/usr/local/psi4/bin/psi4"", line 270, in <module>; exec(content); File ""<string>"", line 30, in <module>. IndexError: list index out of range. Printing out the relevant lines from the post-processed input file:; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pVDZ""); energy('scf'); foo = [1, 2]; --> print(foo[3]). Psi4 stopped on: Tuesday, 04 September 2018 01:22PM; Psi4 wall time for execution: 0:00:00.78. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. ## Todos; - [x] Fixes #1196 - if an error occurs Py-side, the post-processed line of output that called it is displayed, plus five back and forwards, for context. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1214
https://github.com/psi4/psi4/pull/1214:1467,Testability,test,tests,1467,"Fixes #1196. As an example, the following input file:; ```; memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). foo = [1, 2]; print(foo[3]); ```. ...now prints the following upon termination... ```; *** tstop() called on Jonathons-MacBook-Pro.local at Tue Sep 4 13:22:51 2018; Module time:; user time = 0.52 seconds = 0.01 minutes; system time = 0.05 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.52 seconds = 0.01 minutes; system time = 0.05 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdirfindif/stage/usr/local/psi4/bin/psi4"", line 270, in <module>; exec(content); File ""<string>"", line 30, in <module>. IndexError: list index out of range. Printing out the relevant lines from the post-processed input file:; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pVDZ""); energy('scf'); foo = [1, 2]; --> print(foo[3]). Psi4 stopped on: Tuesday, 04 September 2018 01:22PM; Psi4 wall time for execution: 0:00:00.78. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. ## Todos; - [x] Fixes #1196 - if an error occurs Py-side, the post-processed line of output that called it is displayed, plus five back and forwards, for context. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1214
https://github.com/psi4/psi4/pull/1214:1558,Testability,test,tests,1558,"Fixes #1196. As an example, the following input file:; ```; memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). foo = [1, 2]; print(foo[3]); ```. ...now prints the following upon termination... ```; *** tstop() called on Jonathons-MacBook-Pro.local at Tue Sep 4 13:22:51 2018; Module time:; user time = 0.52 seconds = 0.01 minutes; system time = 0.05 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.52 seconds = 0.01 minutes; system time = 0.05 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdirfindif/stage/usr/local/psi4/bin/psi4"", line 270, in <module>; exec(content); File ""<string>"", line 30, in <module>. IndexError: list index out of range. Printing out the relevant lines from the post-processed input file:; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pVDZ""); energy('scf'); foo = [1, 2]; --> print(foo[3]). Psi4 stopped on: Tuesday, 04 September 2018 01:22PM; Psi4 wall time for execution: 0:00:00.78. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. ## Todos; - [x] Fixes #1196 - if an error occurs Py-side, the post-processed line of output that called it is displayed, plus five back and forwards, for context. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1214
https://github.com/psi4/psi4/pull/1216:81,Deployability,patch,patch-,81,"## Description; No need for appveyor to be building temp branches (e.g., `loriab-patch-3`) _and_ PRs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1216
https://github.com/psi4/psi4/pull/1217:63,Deployability,patch,patch,63,"## Description; Compiler gave me warnings below, so I tried to patch 'em up.; ```; [ 8%] Building CXX object src/psi4/libmints/CMakeFiles/mints.dir/oeprop.cc.o; /home/psilocaluser/gits/hrw-release/psi4/src/psi4/libmints/oeprop.cc(1047): warning #161: unrecognized #pragma; #pragma openmp parallel for; ^. /home/psilocaluser/gits/hrw-release/psi4/src/psi4/libmints/oeprop.cc(1063): warning #823: reference is to variable ""i"" (declared at line 1048) -- under old for-init scoping rules it would have been variable ""i"" (declared at line 1057); (*output)[i] = Vtot;; ^; ```. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1217
https://github.com/psi4/psi4/pull/1217:189,Deployability,release,release,189,"## Description; Compiler gave me warnings below, so I tried to patch 'em up.; ```; [ 8%] Building CXX object src/psi4/libmints/CMakeFiles/mints.dir/oeprop.cc.o; /home/psilocaluser/gits/hrw-release/psi4/src/psi4/libmints/oeprop.cc(1047): warning #161: unrecognized #pragma; #pragma openmp parallel for; ^. /home/psilocaluser/gits/hrw-release/psi4/src/psi4/libmints/oeprop.cc(1063): warning #823: reference is to variable ""i"" (declared at line 1048) -- under old for-init scoping rules it would have been variable ""i"" (declared at line 1057); (*output)[i] = Vtot;; ^; ```. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1217
https://github.com/psi4/psi4/pull/1217:333,Deployability,release,release,333,"## Description; Compiler gave me warnings below, so I tried to patch 'em up.; ```; [ 8%] Building CXX object src/psi4/libmints/CMakeFiles/mints.dir/oeprop.cc.o; /home/psilocaluser/gits/hrw-release/psi4/src/psi4/libmints/oeprop.cc(1047): warning #161: unrecognized #pragma; #pragma openmp parallel for; ^. /home/psilocaluser/gits/hrw-release/psi4/src/psi4/libmints/oeprop.cc(1063): warning #823: reference is to variable ""i"" (declared at line 1048) -- under old for-init scoping rules it would have been variable ""i"" (declared at line 1057); (*output)[i] = Vtot;; ^; ```. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1217
https://github.com/psi4/psi4/pull/1217:411,Modifiability,variab,variable,411,"## Description; Compiler gave me warnings below, so I tried to patch 'em up.; ```; [ 8%] Building CXX object src/psi4/libmints/CMakeFiles/mints.dir/oeprop.cc.o; /home/psilocaluser/gits/hrw-release/psi4/src/psi4/libmints/oeprop.cc(1047): warning #161: unrecognized #pragma; #pragma openmp parallel for; ^. /home/psilocaluser/gits/hrw-release/psi4/src/psi4/libmints/oeprop.cc(1063): warning #823: reference is to variable ""i"" (declared at line 1048) -- under old for-init scoping rules it would have been variable ""i"" (declared at line 1057); (*output)[i] = Vtot;; ^; ```. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1217
https://github.com/psi4/psi4/pull/1217:503,Modifiability,variab,variable,503,"## Description; Compiler gave me warnings below, so I tried to patch 'em up.; ```; [ 8%] Building CXX object src/psi4/libmints/CMakeFiles/mints.dir/oeprop.cc.o; /home/psilocaluser/gits/hrw-release/psi4/src/psi4/libmints/oeprop.cc(1047): warning #161: unrecognized #pragma; #pragma openmp parallel for; ^. /home/psilocaluser/gits/hrw-release/psi4/src/psi4/libmints/oeprop.cc(1063): warning #823: reference is to variable ""i"" (declared at line 1048) -- under old for-init scoping rules it would have been variable ""i"" (declared at line 1057); (*output)[i] = Vtot;; ^; ```. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1217
https://github.com/psi4/psi4/pull/1219:218,Deployability,Update,Update,218,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix undefine variable in `psi::CIvect::dcalc2`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1219
https://github.com/psi4/psi4/pull/1219:177,Modifiability,variab,variable,177,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix undefine variable in `psi::CIvect::dcalc2`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1219
https://github.com/psi4/psi4/pull/1219:241,Testability,test,tests,241,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix undefine variable in `psi::CIvect::dcalc2`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1219
https://github.com/psi4/psi4/pull/1219:270,Testability,Test,Tests,270,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix undefine variable in `psi::CIvect::dcalc2`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1219
https://github.com/psi4/psi4/pull/1219:346,Testability,test,tests,346,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix undefine variable in `psi::CIvect::dcalc2`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1219
https://github.com/psi4/psi4/pull/1219:437,Testability,test,tests,437,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix undefine variable in `psi::CIvect::dcalc2`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1219
https://github.com/psi4/psi4/pull/1220:184,Availability,error,error,184,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix vector indexing error in `psi::IntegralTransform::process_spaces`; - [x] Update passing Windows tests. ## Questions; - [x] The offending line is commented out. Does a more sophisticated fix is need here? --> @andysim will find a better fix. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1220
https://github.com/psi4/psi4/pull/1220:241,Deployability,Update,Update,241,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix vector indexing error in `psi::IntegralTransform::process_spaces`; - [x] Update passing Windows tests. ## Questions; - [x] The offending line is commented out. Does a more sophisticated fix is need here? --> @andysim will find a better fix. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1220
https://github.com/psi4/psi4/pull/1220:264,Testability,test,tests,264,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix vector indexing error in `psi::IntegralTransform::process_spaces`; - [x] Update passing Windows tests. ## Questions; - [x] The offending line is commented out. Does a more sophisticated fix is need here? --> @andysim will find a better fix. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1220
https://github.com/psi4/psi4/pull/1220:431,Testability,Test,Tests,431,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix vector indexing error in `psi::IntegralTransform::process_spaces`; - [x] Update passing Windows tests. ## Questions; - [x] The offending line is commented out. Does a more sophisticated fix is need here? --> @andysim will find a better fix. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1220
https://github.com/psi4/psi4/pull/1220:507,Testability,test,tests,507,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix vector indexing error in `psi::IntegralTransform::process_spaces`; - [x] Update passing Windows tests. ## Questions; - [x] The offending line is commented out. Does a more sophisticated fix is need here? --> @andysim will find a better fix. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1220
https://github.com/psi4/psi4/pull/1220:598,Testability,test,tests,598,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix vector indexing error in `psi::IntegralTransform::process_spaces`; - [x] Update passing Windows tests. ## Questions; - [x] The offending line is commented out. Does a more sophisticated fix is need here? --> @andysim will find a better fix. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1220
https://github.com/psi4/psi4/pull/1221:225,Deployability,Update,Update,225,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix list decrement in `psi::DFHelper::identify_order`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1221
https://github.com/psi4/psi4/pull/1221:248,Testability,test,tests,248,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix list decrement in `psi::DFHelper::identify_order`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1221
https://github.com/psi4/psi4/pull/1221:277,Testability,Test,Tests,277,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix list decrement in `psi::DFHelper::identify_order`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1221
https://github.com/psi4/psi4/pull/1221:353,Testability,test,tests,353,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix list decrement in `psi::DFHelper::identify_order`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1221
https://github.com/psi4/psi4/pull/1221:444,Testability,test,tests,444,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix list decrement in `psi::DFHelper::identify_order`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1221
https://github.com/psi4/psi4/pull/1224:291,Deployability,update,update,291,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Remove `update` from OpenMP atomic, as it is default behaviour. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1224
https://github.com/psi4/psi4/pull/1224:369,Testability,Test,Tests,369,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Remove `update` from OpenMP atomic, as it is default behaviour. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1224
https://github.com/psi4/psi4/pull/1224:445,Testability,test,tests,445,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Remove `update` from OpenMP atomic, as it is default behaviour. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1224
https://github.com/psi4/psi4/pull/1224:536,Testability,test,tests,536,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Remove `update` from OpenMP atomic, as it is default behaviour. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1224
https://github.com/psi4/psi4/pull/1225:299,Testability,Test,Tests,299,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1225
https://github.com/psi4/psi4/pull/1225:375,Testability,test,tests,375,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1225
https://github.com/psi4/psi4/pull/1225:466,Testability,test,tests,466,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1225
https://github.com/psi4/psi4/pull/1226:290,Deployability,update,update,290,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some part. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Remove `update` from OpenMP atomic; - [x] Conditional compilation for `simd`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1226
https://github.com/psi4/psi4/pull/1226:382,Testability,Test,Tests,382,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some part. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Remove `update` from OpenMP atomic; - [x] Conditional compilation for `simd`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1226
https://github.com/psi4/psi4/pull/1226:458,Testability,test,tests,458,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some part. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Remove `update` from OpenMP atomic; - [x] Conditional compilation for `simd`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1226
https://github.com/psi4/psi4/pull/1226:549,Testability,test,tests,549,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some part. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Remove `update` from OpenMP atomic; - [x] Conditional compilation for `simd`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1226
https://github.com/psi4/psi4/pull/1227:200,Deployability,Update,Update,200,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `psi::PSIO::rename_file`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1227
https://github.com/psi4/psi4/pull/1227:223,Testability,test,tests,223,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `psi::PSIO::rename_file`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1227
https://github.com/psi4/psi4/pull/1227:252,Testability,Test,Tests,252,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `psi::PSIO::rename_file`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1227
https://github.com/psi4/psi4/pull/1227:328,Testability,test,tests,328,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `psi::PSIO::rename_file`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1227
https://github.com/psi4/psi4/pull/1227:419,Testability,test,tests,419,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `psi::PSIO::rename_file`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1227
https://github.com/psi4/psi4/pull/1228:299,Testability,Test,Tests,299,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1228
https://github.com/psi4/psi4/pull/1228:375,Testability,test,tests,375,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1228
https://github.com/psi4/psi4/pull/1228:466,Testability,test,tests,466,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1228
https://github.com/psi4/psi4/pull/1229:399,Testability,Test,Tests,399,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Conditional compilation of `simd` clause; - [x] Conditional compilation of `collapse` clause. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1229
https://github.com/psi4/psi4/pull/1229:475,Testability,test,tests,475,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Conditional compilation of `simd` clause; - [x] Conditional compilation of `collapse` clause. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1229
https://github.com/psi4/psi4/pull/1229:566,Testability,test,tests,566,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Conditional compilation of `simd` clause; - [x] Conditional compilation of `collapse` clause. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1229
https://github.com/psi4/psi4/pull/1230:351,Testability,Test,Tests,351,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Conditional compilation of `collapse` clause. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1230
https://github.com/psi4/psi4/pull/1230:427,Testability,test,tests,427,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Conditional compilation of `collapse` clause. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1230
https://github.com/psi4/psi4/pull/1230:518,Testability,test,tests,518,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Conditional compilation of `collapse` clause. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1230
https://github.com/psi4/psi4/pull/1231:347,Testability,Test,Tests,347,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Conditional compilation of `simd` clause. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1231
https://github.com/psi4/psi4/pull/1231:423,Testability,test,tests,423,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Conditional compilation of `simd` clause. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1231
https://github.com/psi4/psi4/pull/1231:514,Testability,test,tests,514,"## Description; This is part of *Psi4* porting to Windows (#933). MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change `size_t` to `long` in OpenMP loops; - [x] Conditional compilation of `simd` clause. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1231
https://github.com/psi4/psi4/pull/1233:664,Availability,avail,available,664,"## Description; This PR is intended to implement VV10 gradients and cache collocation matrices to prevent reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/bui",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1233
https://github.com/psi4/psi4/pull/1233:515,Energy Efficiency,energy,energy,515,"## Description; This PR is intended to implement VV10 gradients and cache collocation matrices to prevent reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/bui",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1233
https://github.com/psi4/psi4/pull/1233:492,Integrability,depend,dependance,492,"## Description; This PR is intended to implement VV10 gradients and cache collocation matrices to prevent reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/bui",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1233
https://github.com/psi4/psi4/pull/1233:1575,Integrability,depend,depends,1575," reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1233
https://github.com/psi4/psi4/pull/1233:68,Performance,cache,cache,68,"## Description; This PR is intended to implement VV10 gradients and cache collocation matrices to prevent reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/bui",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1233
https://github.com/psi4/psi4/pull/1233:539,Performance,Cache,Cache,539,"## Description; This PR is intended to implement VV10 gradients and cache collocation matrices to prevent reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/bui",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1233
https://github.com/psi4/psi4/pull/1233:580,Performance,bottleneck,bottleneck,580,"## Description; This PR is intended to implement VV10 gradients and cache collocation matrices to prevent reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/bui",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1233
https://github.com/psi4/psi4/pull/1233:1016,Performance,cache,cache,1016,"R is intended to implement VV10 gradients and cache collocation matrices to prevent reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1233
https://github.com/psi4/psi4/pull/1233:1257,Performance,cache,cache,1257," reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1233
https://github.com/psi4/psi4/pull/1233:1611,Performance,Cache,Cache,1611," reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1233
https://github.com/psi4/psi4/pull/1233:1784,Performance,cache,cache,1784," reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1233
https://github.com/psi4/psi4/pull/1233:1876,Testability,Test,Tests,1876," reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1233
https://github.com/psi4/psi4/pull/1233:1950,Testability,test,tests,1950," reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1233
https://github.com/psi4/psi4/pull/1233:2041,Testability,test,tests,2041," reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1233
https://github.com/psi4/psi4/pull/1234:843,Deployability,install,install,843,"## Description; This follows (and includes #1213), so that one should be merged and this one rebased for a smaller PR to examine. Whereas that one switches out physconst py-side and c-side (big effect) and periodictable c-side (no effect), this one deletes all physconst and periodictable sources py-side and starts pulling from qcelemental. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] driver-side physconst --> no change; - [x] driver-side psifiles --> `psi4.driver.constants.PSIF_` --> `psi4.driver.psif.PSIF_`; - [x] psiapi --> can't `from psi4.driver.constants import c`, instead `psi4.driver.constants.c` or `c = psi4.driver.constants.c`; - [x] psithon --> no change; - [x] qcdb --> `psi_c` --> `qcel.constants.c`; - [x] put in a basic connection to cmake. it'll clone it for you and install next to psi (which means pythonpath picks it up). ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1234
https://github.com/psi4/psi4/pull/1234:922,Testability,Test,Tests,922,"## Description; This follows (and includes #1213), so that one should be merged and this one rebased for a smaller PR to examine. Whereas that one switches out physconst py-side and c-side (big effect) and periodictable c-side (no effect), this one deletes all physconst and periodictable sources py-side and starts pulling from qcelemental. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] driver-side physconst --> no change; - [x] driver-side psifiles --> `psi4.driver.constants.PSIF_` --> `psi4.driver.psif.PSIF_`; - [x] psiapi --> can't `from psi4.driver.constants import c`, instead `psi4.driver.constants.c` or `c = psi4.driver.constants.c`; - [x] psithon --> no change; - [x] qcdb --> `psi_c` --> `qcel.constants.c`; - [x] put in a basic connection to cmake. it'll clone it for you and install next to psi (which means pythonpath picks it up). ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1234
https://github.com/psi4/psi4/pull/1234:997,Testability,test,tests,997,"## Description; This follows (and includes #1213), so that one should be merged and this one rebased for a smaller PR to examine. Whereas that one switches out physconst py-side and c-side (big effect) and periodictable c-side (no effect), this one deletes all physconst and periodictable sources py-side and starts pulling from qcelemental. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] driver-side physconst --> no change; - [x] driver-side psifiles --> `psi4.driver.constants.PSIF_` --> `psi4.driver.psif.PSIF_`; - [x] psiapi --> can't `from psi4.driver.constants import c`, instead `psi4.driver.constants.c` or `c = psi4.driver.constants.c`; - [x] psithon --> no change; - [x] qcdb --> `psi_c` --> `qcel.constants.c`; - [x] put in a basic connection to cmake. it'll clone it for you and install next to psi (which means pythonpath picks it up). ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1234
https://github.com/psi4/psi4/pull/1234:1088,Testability,test,tests,1088,"## Description; This follows (and includes #1213), so that one should be merged and this one rebased for a smaller PR to examine. Whereas that one switches out physconst py-side and c-side (big effect) and periodictable c-side (no effect), this one deletes all physconst and periodictable sources py-side and starts pulling from qcelemental. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] driver-side physconst --> no change; - [x] driver-side psifiles --> `psi4.driver.constants.PSIF_` --> `psi4.driver.psif.PSIF_`; - [x] psiapi --> can't `from psi4.driver.constants import c`, instead `psi4.driver.constants.c` or `c = psi4.driver.constants.c`; - [x] psithon --> no change; - [x] qcdb --> `psi_c` --> `qcel.constants.c`; - [x] put in a basic connection to cmake. it'll clone it for you and install next to psi (which means pythonpath picks it up). ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1234
https://github.com/psi4/psi4/pull/1235:180,Energy Efficiency,energy,energy,180,"## Description; The general idea is to allow more flexible definition of CBS functions, and clean up the `cbs()` function a little. The goal is to allow further corrections to the energy into CBS, eg differences of basis sets (eg. `\Delta E_{diff} = E(aug-cc-pvtz) - E(cc-pvtz)`) or frozen core corrections (`\Delta E_{ae} = E(freeze_core True) - E(freeze_core False)` or DKH ... Added `frequency` to cbs-compatible calls. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Simple, dict-based interface to CBS.; - [x] Handling of an arbitrary number of correction functions.; - [x] Support for passing of arbitrary options (such as `freeze_core`). ; - [x] Fix `pywrap-cbs1` which fails on `cbs_number` checks.; - [x] Documentation.; - [x] Frequency calculations via cbs are now possible. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1235
https://github.com/psi4/psi4/pull/1235:540,Integrability,interface,interface,540,"## Description; The general idea is to allow more flexible definition of CBS functions, and clean up the `cbs()` function a little. The goal is to allow further corrections to the energy into CBS, eg differences of basis sets (eg. `\Delta E_{diff} = E(aug-cc-pvtz) - E(cc-pvtz)`) or frozen core corrections (`\Delta E_{ae} = E(freeze_core True) - E(freeze_core False)` or DKH ... Added `frequency` to cbs-compatible calls. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Simple, dict-based interface to CBS.; - [x] Handling of an arbitrary number of correction functions.; - [x] Support for passing of arbitrary options (such as `freeze_core`). ; - [x] Fix `pywrap-cbs1` which fails on `cbs_number` checks.; - [x] Documentation.; - [x] Frequency calculations via cbs are now possible. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1235
https://github.com/psi4/psi4/pull/1235:50,Modifiability,flexible,flexible,50,"## Description; The general idea is to allow more flexible definition of CBS functions, and clean up the `cbs()` function a little. The goal is to allow further corrections to the energy into CBS, eg differences of basis sets (eg. `\Delta E_{diff} = E(aug-cc-pvtz) - E(cc-pvtz)`) or frozen core corrections (`\Delta E_{ae} = E(freeze_core True) - E(freeze_core False)` or DKH ... Added `frequency` to cbs-compatible calls. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Simple, dict-based interface to CBS.; - [x] Handling of an arbitrary number of correction functions.; - [x] Support for passing of arbitrary options (such as `freeze_core`). ; - [x] Fix `pywrap-cbs1` which fails on `cbs_number` checks.; - [x] Documentation.; - [x] Frequency calculations via cbs are now possible. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1235
https://github.com/psi4/psi4/pull/1235:855,Testability,Test,Tests,855,"## Description; The general idea is to allow more flexible definition of CBS functions, and clean up the `cbs()` function a little. The goal is to allow further corrections to the energy into CBS, eg differences of basis sets (eg. `\Delta E_{diff} = E(aug-cc-pvtz) - E(cc-pvtz)`) or frozen core corrections (`\Delta E_{ae} = E(freeze_core True) - E(freeze_core False)` or DKH ... Added `frequency` to cbs-compatible calls. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Simple, dict-based interface to CBS.; - [x] Handling of an arbitrary number of correction functions.; - [x] Support for passing of arbitrary options (such as `freeze_core`). ; - [x] Fix `pywrap-cbs1` which fails on `cbs_number` checks.; - [x] Documentation.; - [x] Frequency calculations via cbs are now possible. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1235
https://github.com/psi4/psi4/pull/1235:929,Testability,test,tests,929,"## Description; The general idea is to allow more flexible definition of CBS functions, and clean up the `cbs()` function a little. The goal is to allow further corrections to the energy into CBS, eg differences of basis sets (eg. `\Delta E_{diff} = E(aug-cc-pvtz) - E(cc-pvtz)`) or frozen core corrections (`\Delta E_{ae} = E(freeze_core True) - E(freeze_core False)` or DKH ... Added `frequency` to cbs-compatible calls. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Simple, dict-based interface to CBS.; - [x] Handling of an arbitrary number of correction functions.; - [x] Support for passing of arbitrary options (such as `freeze_core`). ; - [x] Fix `pywrap-cbs1` which fails on `cbs_number` checks.; - [x] Documentation.; - [x] Frequency calculations via cbs are now possible. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1235
https://github.com/psi4/psi4/pull/1235:1020,Testability,test,tests,1020,"## Description; The general idea is to allow more flexible definition of CBS functions, and clean up the `cbs()` function a little. The goal is to allow further corrections to the energy into CBS, eg differences of basis sets (eg. `\Delta E_{diff} = E(aug-cc-pvtz) - E(cc-pvtz)`) or frozen core corrections (`\Delta E_{ae} = E(freeze_core True) - E(freeze_core False)` or DKH ... Added `frequency` to cbs-compatible calls. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Simple, dict-based interface to CBS.; - [x] Handling of an arbitrary number of correction functions.; - [x] Support for passing of arbitrary options (such as `freeze_core`). ; - [x] Fix `pywrap-cbs1` which fails on `cbs_number` checks.; - [x] Documentation.; - [x] Frequency calculations via cbs are now possible. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1235
https://github.com/psi4/psi4/pull/1235:521,Usability,Simpl,Simple,521,"## Description; The general idea is to allow more flexible definition of CBS functions, and clean up the `cbs()` function a little. The goal is to allow further corrections to the energy into CBS, eg differences of basis sets (eg. `\Delta E_{diff} = E(aug-cc-pvtz) - E(cc-pvtz)`) or frozen core corrections (`\Delta E_{ae} = E(freeze_core True) - E(freeze_core False)` or DKH ... Added `frequency` to cbs-compatible calls. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Simple, dict-based interface to CBS.; - [x] Handling of an arbitrary number of correction functions.; - [x] Support for passing of arbitrary options (such as `freeze_core`). ; - [x] Fix `pywrap-cbs1` which fails on `cbs_number` checks.; - [x] Documentation.; - [x] Frequency calculations via cbs are now possible. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1235
https://github.com/psi4/psi4/pull/1237:184,Availability,error,error,184,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix vector indexing error in `psi::PKMgrDisk::batch_sizing`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1237
https://github.com/psi4/psi4/pull/1237:231,Deployability,Update,Update,231,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix vector indexing error in `psi::PKMgrDisk::batch_sizing`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1237
https://github.com/psi4/psi4/pull/1237:254,Testability,test,tests,254,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix vector indexing error in `psi::PKMgrDisk::batch_sizing`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1237
https://github.com/psi4/psi4/pull/1237:283,Testability,Test,Tests,283,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix vector indexing error in `psi::PKMgrDisk::batch_sizing`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1237
https://github.com/psi4/psi4/pull/1237:359,Testability,test,tests,359,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix vector indexing error in `psi::PKMgrDisk::batch_sizing`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1237
https://github.com/psi4/psi4/pull/1237:450,Testability,test,tests,450,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix vector indexing error in `psi::PKMgrDisk::batch_sizing`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1237
https://github.com/psi4/psi4/pull/1238:175,Availability,error,error,175,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fix memory error in `psi::sapt::SAPTDFInts`; - [ ] Fix memory error in `psi::sapt::Iterator`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1238
https://github.com/psi4/psi4/pull/1238:226,Availability,error,error,226,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fix memory error in `psi::sapt::SAPTDFInts`; - [ ] Fix memory error in `psi::sapt::Iterator`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1238
https://github.com/psi4/psi4/pull/1238:264,Deployability,Update,Update,264,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fix memory error in `psi::sapt::SAPTDFInts`; - [ ] Fix memory error in `psi::sapt::Iterator`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1238
https://github.com/psi4/psi4/pull/1238:287,Testability,test,tests,287,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fix memory error in `psi::sapt::SAPTDFInts`; - [ ] Fix memory error in `psi::sapt::Iterator`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1238
https://github.com/psi4/psi4/pull/1238:316,Testability,Test,Tests,316,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fix memory error in `psi::sapt::SAPTDFInts`; - [ ] Fix memory error in `psi::sapt::Iterator`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1238
https://github.com/psi4/psi4/pull/1238:392,Testability,test,tests,392,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fix memory error in `psi::sapt::SAPTDFInts`; - [ ] Fix memory error in `psi::sapt::Iterator`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1238
https://github.com/psi4/psi4/pull/1238:483,Testability,test,tests,483,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fix memory error in `psi::sapt::SAPTDFInts`; - [ ] Fix memory error in `psi::sapt::Iterator`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1238
https://github.com/psi4/psi4/pull/1239:243,Deployability,Update,Update,243,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove hard-code paths; - [x] Replace `os.system` with `subprocess.run`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1239
https://github.com/psi4/psi4/pull/1239:266,Testability,test,tests,266,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove hard-code paths; - [x] Replace `os.system` with `subprocess.run`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1239
https://github.com/psi4/psi4/pull/1239:295,Testability,Test,Tests,295,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove hard-code paths; - [x] Replace `os.system` with `subprocess.run`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1239
https://github.com/psi4/psi4/pull/1239:371,Testability,test,tests,371,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove hard-code paths; - [x] Replace `os.system` with `subprocess.run`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1239
https://github.com/psi4/psi4/pull/1239:462,Testability,test,tests,462,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove hard-code paths; - [x] Replace `os.system` with `subprocess.run`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1239
https://github.com/psi4/psi4/pull/1240:134,Safety,detect,detected,134,"## Description; This is part of *Psi4* porting to Windows (#933). Appveyor is falling, because the new version (2019.0) of MKL is not detected. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Lock MKL version. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1240
https://github.com/psi4/psi4/pull/1240:282,Testability,Test,Tests,282,"## Description; This is part of *Psi4* porting to Windows (#933). Appveyor is falling, because the new version (2019.0) of MKL is not detected. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Lock MKL version. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1240
https://github.com/psi4/psi4/pull/1240:358,Testability,test,tests,358,"## Description; This is part of *Psi4* porting to Windows (#933). Appveyor is falling, because the new version (2019.0) of MKL is not detected. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Lock MKL version. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1240
https://github.com/psi4/psi4/pull/1240:449,Testability,test,tests,449,"## Description; This is part of *Psi4* porting to Windows (#933). Appveyor is falling, because the new version (2019.0) of MKL is not detected. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Lock MKL version. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1240
https://github.com/psi4/psi4/pull/1241:16,Modifiability,Enhance,Enhances,16,## Description; Enhances user experience for DF-CCSD(T) gradients. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] timings for DF-(T) gradient (copied from fnocc module); - [x] corrects ijk count for gradient (full combination instead of unique pairs). ## Checklist; - [x] relevant tests run (dfccsd-t-grad1). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1241
https://github.com/psi4/psi4/pull/1241:332,Testability,test,tests,332,## Description; Enhances user experience for DF-CCSD(T) gradients. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] timings for DF-(T) gradient (copied from fnocc module); - [x] corrects ijk count for gradient (full combination instead of unique pairs). ## Checklist; - [x] relevant tests run (dfccsd-t-grad1). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1241
https://github.com/psi4/psi4/pull/1241:25,Usability,user experience,user experience,25,## Description; Enhances user experience for DF-CCSD(T) gradients. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] timings for DF-(T) gradient (copied from fnocc module); - [x] corrects ijk count for gradient (full combination instead of unique pairs). ## Checklist; - [x] relevant tests run (dfccsd-t-grad1). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1241
https://github.com/psi4/psi4/issues/1242:12,Integrability,interface,interface,12,"The CheMPS2 interface is missing support for an additional input value for the parameter `DMRG_SCF_ACTIVE_SPACE`. According to [Psi4 documentation](http://www.psicode.org/psi4manual/1.2/autodoc_glossary_options_c.html#term-dmrg-scf-active-space-dmrg) it can be `INPUT`, `NO` and `LOC`, which map to `0`, `1` and `2` respectively for the variable `WhichActiveSpace_in` in [CheMPS2](https://sebwouters.github.io/CheMPS2/dmrgscfcalcs.html). However, `WhichActiveSpace_in` accepts an additional value of `3` for reordering orbitals without localization. This feature seems to have been introduced in https://github.com/SebWouters/CheMPS2/commit/79fb7c6f2b4cc2d628e5593fc8aa548c572a9e83.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1242
https://github.com/psi4/psi4/issues/1242:337,Modifiability,variab,variable,337,"The CheMPS2 interface is missing support for an additional input value for the parameter `DMRG_SCF_ACTIVE_SPACE`. According to [Psi4 documentation](http://www.psicode.org/psi4manual/1.2/autodoc_glossary_options_c.html#term-dmrg-scf-active-space-dmrg) it can be `INPUT`, `NO` and `LOC`, which map to `0`, `1` and `2` respectively for the variable `WhichActiveSpace_in` in [CheMPS2](https://sebwouters.github.io/CheMPS2/dmrgscfcalcs.html). However, `WhichActiveSpace_in` accepts an additional value of `3` for reordering orbitals without localization. This feature seems to have been introduced in https://github.com/SebWouters/CheMPS2/commit/79fb7c6f2b4cc2d628e5593fc8aa548c572a9e83.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1242
https://github.com/psi4/psi4/pull/1243:83,Availability,avail,available,83,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. We are preparing a more thoroughly motivated outline of the changes we propose, which will be posted as an issue. In the meantime, this PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder.; - [x] Cherry-picked some of the changes by @tomspur; * Changes suggested by valgrind and cppcheck; * Matrix CTOR from `dpdbuf4` @amjames could you check that setting `symmetry_` is done correctly?. Aesthetics; - [x] Run `clang-format` on `ccenergy`. Supersedes #1203, see #1144 ; - [x] Run `clang-format` on `ccdensity`. Supersedes #1202, see #1144 ; - [x] Run `clang-format` on `cclambda`. Supersedes #1206, see #1144 ; - [x] Run `clang-format` on `cctriples`. Supersedes #1209, see #1144 ; - [x] Remove `void` from function argument lists in the `cc*` folders. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1243
https://github.com/psi4/psi4/pull/1243:911,Energy Efficiency,energy,energy,911,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. We are preparing a more thoroughly motivated outline of the changes we propose, which will be posted as an issue. In the meantime, this PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder.; - [x] Cherry-picked some of the changes by @tomspur; * Changes suggested by valgrind and cppcheck; * Matrix CTOR from `dpdbuf4` @amjames could you check that setting `symmetry_` is done correctly?. Aesthetics; - [x] Run `clang-format` on `ccenergy`. Supersedes #1203, see #1144 ; - [x] Run `clang-format` on `ccdensity`. Supersedes #1202, see #1144 ; - [x] Run `clang-format` on `cclambda`. Supersedes #1206, see #1144 ; - [x] Run `clang-format` on `cctriples`. Supersedes #1209, see #1144 ; - [x] Remove `void` from function argument lists in the `cc*` folders. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1243
https://github.com/psi4/psi4/pull/1243:338,Modifiability,rewrite,rewrite,338,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. We are preparing a more thoroughly motivated outline of the changes we propose, which will be posted as an issue. In the meantime, this PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder.; - [x] Cherry-picked some of the changes by @tomspur; * Changes suggested by valgrind and cppcheck; * Matrix CTOR from `dpdbuf4` @amjames could you check that setting `symmetry_` is done correctly?. Aesthetics; - [x] Run `clang-format` on `ccenergy`. Supersedes #1203, see #1144 ; - [x] Run `clang-format` on `ccdensity`. Supersedes #1202, see #1144 ; - [x] Run `clang-format` on `cclambda`. Supersedes #1206, see #1144 ; - [x] Run `clang-format` on `cctriples`. Supersedes #1209, see #1144 ; - [x] Remove `void` from function argument lists in the `cc*` folders. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1243
https://github.com/psi4/psi4/pull/1243:734,Safety,avoid,avoids,734,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. We are preparing a more thoroughly motivated outline of the changes we propose, which will be posted as an issue. In the meantime, this PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder.; - [x] Cherry-picked some of the changes by @tomspur; * Changes suggested by valgrind and cppcheck; * Matrix CTOR from `dpdbuf4` @amjames could you check that setting `symmetry_` is done correctly?. Aesthetics; - [x] Run `clang-format` on `ccenergy`. Supersedes #1203, see #1144 ; - [x] Run `clang-format` on `ccdensity`. Supersedes #1202, see #1144 ; - [x] Run `clang-format` on `cclambda`. Supersedes #1206, see #1144 ; - [x] Run `clang-format` on `cctriples`. Supersedes #1209, see #1144 ; - [x] Remove `void` from function argument lists in the `cc*` folders. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1243
https://github.com/psi4/psi4/pull/1243:1618,Testability,Test,Tests,1618,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. We are preparing a more thoroughly motivated outline of the changes we propose, which will be posted as an issue. In the meantime, this PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder.; - [x] Cherry-picked some of the changes by @tomspur; * Changes suggested by valgrind and cppcheck; * Matrix CTOR from `dpdbuf4` @amjames could you check that setting `symmetry_` is done correctly?. Aesthetics; - [x] Run `clang-format` on `ccenergy`. Supersedes #1203, see #1144 ; - [x] Run `clang-format` on `ccdensity`. Supersedes #1202, see #1144 ; - [x] Run `clang-format` on `cclambda`. Supersedes #1206, see #1144 ; - [x] Run `clang-format` on `cctriples`. Supersedes #1209, see #1144 ; - [x] Remove `void` from function argument lists in the `cc*` folders. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1243
https://github.com/psi4/psi4/pull/1243:1692,Testability,test,tests,1692,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. We are preparing a more thoroughly motivated outline of the changes we propose, which will be posted as an issue. In the meantime, this PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder.; - [x] Cherry-picked some of the changes by @tomspur; * Changes suggested by valgrind and cppcheck; * Matrix CTOR from `dpdbuf4` @amjames could you check that setting `symmetry_` is done correctly?. Aesthetics; - [x] Run `clang-format` on `ccenergy`. Supersedes #1203, see #1144 ; - [x] Run `clang-format` on `ccdensity`. Supersedes #1202, see #1144 ; - [x] Run `clang-format` on `cclambda`. Supersedes #1206, see #1144 ; - [x] Run `clang-format` on `cctriples`. Supersedes #1209, see #1144 ; - [x] Remove `void` from function argument lists in the `cc*` folders. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1243
https://github.com/psi4/psi4/pull/1243:1783,Testability,test,tests,1783,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. We are preparing a more thoroughly motivated outline of the changes we propose, which will be posted as an issue. In the meantime, this PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder.; - [x] Cherry-picked some of the changes by @tomspur; * Changes suggested by valgrind and cppcheck; * Matrix CTOR from `dpdbuf4` @amjames could you check that setting `symmetry_` is done correctly?. Aesthetics; - [x] Run `clang-format` on `ccenergy`. Supersedes #1203, see #1144 ; - [x] Run `clang-format` on `ccdensity`. Supersedes #1202, see #1144 ; - [x] Run `clang-format` on `cclambda`. Supersedes #1206, see #1144 ; - [x] Run `clang-format` on `cctriples`. Supersedes #1209, see #1144 ; - [x] Remove `void` from function argument lists in the `cc*` folders. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1243
https://github.com/psi4/psi4/pull/1244:313,Testability,test,tests,313,## Description; Memory estimation for the amplitudes now recognize frozen_core settings. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes #898 ; - [x] check code for same problem in CD algorithm variant. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1244
https://github.com/psi4/psi4/pull/1244:404,Testability,test,tests,404,## Description; Memory estimation for the amplitudes now recognize frozen_core settings. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes #898 ; - [x] check code for same problem in CD algorithm variant. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1244
https://github.com/psi4/psi4/pull/1245:74,Availability,down,down,74,Switches off Py35 Travis until the fail on PyTest exit bug can be tracked down. This bug does not appear to affect areas besides Travis as far as we know. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1245
https://github.com/psi4/psi4/pull/1246:276,Deployability,Update,Update,276,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory leak; - [x] Fix invalid deallocation (`new` allocations have to be deallocated with `delete`); - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1246
https://github.com/psi4/psi4/pull/1246:299,Testability,test,tests,299,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory leak; - [x] Fix invalid deallocation (`new` allocations have to be deallocated with `delete`); - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1246
https://github.com/psi4/psi4/pull/1246:328,Testability,Test,Tests,328,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory leak; - [x] Fix invalid deallocation (`new` allocations have to be deallocated with `delete`); - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1246
https://github.com/psi4/psi4/pull/1246:404,Testability,test,tests,404,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory leak; - [x] Fix invalid deallocation (`new` allocations have to be deallocated with `delete`); - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1246
https://github.com/psi4/psi4/pull/1246:495,Testability,test,tests,495,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory leak; - [x] Fix invalid deallocation (`new` allocations have to be deallocated with `delete`); - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1246
https://github.com/psi4/psi4/issues/1247:252,Availability,avail,available,252,"We (@amjames and @robertodr) propose a partial rewrite of the coupled cluster and DPD functionalities in Psi4.; The main motivation is to make the pending [PR #1061, Expose wavefunction and amplitudes to python](https://github.com/psi4/psi4/pull/1061) available satisfying the constraints and comments offered by @dgasmith and @amjames.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:; - It will be possible to experiment with these quantities easily.; - Writing and reading amplitudes to file ([HDF5](https://portal.hdfgroup.org/display/support), [Zarr](https://zarr.readthedocs.io/en/stable/), or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; - Restart capabilities.; ## Summary of proposed changes (incomplete); ### cc* modules; - Create a single `cc` folder where all the other `cc*` folders will live as subfolders.; - Provide a top-level `CCWavefunction` class, partly modeled on the existing `CIWavefunction` class to overtake the whole implementation of the CC functionality.; - The class will manage `MOInfo`,` Params`, `DPD` as local data members. This will ensure that the lifetime of these objects is tied to a particular instance of a CC calculation.; - The class will contain the various steps in a CC calculation as methods. ; - Move from tstart-tstop to the new timers timer_on-timer_off; ### DPD Library ; - Remove use of static global machinery from DPD member functions. ; - Implement proper copy/move assign/construct for the DPD object. ; - Implement internal structs with proper constructors as needed.; - Replace c-style arrays/raw pointers with appropriate smart pointer/containers ; - Refactor shared state (shared by multiple DPD instances, currently dpd_gbl struct) into singleton(s). ; - **Note**: Memory tracking in its current form is not thread safe and relies on the client code properly locking calls to function that need to perform alloca",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1247
https://github.com/psi4/psi4/issues/1247:47,Modifiability,rewrite,rewrite,47,"We (@amjames and @robertodr) propose a partial rewrite of the coupled cluster and DPD functionalities in Psi4.; The main motivation is to make the pending [PR #1061, Expose wavefunction and amplitudes to python](https://github.com/psi4/psi4/pull/1061) available satisfying the constraints and comments offered by @dgasmith and @amjames.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:; - It will be possible to experiment with these quantities easily.; - Writing and reading amplitudes to file ([HDF5](https://portal.hdfgroup.org/display/support), [Zarr](https://zarr.readthedocs.io/en/stable/), or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; - Restart capabilities.; ## Summary of proposed changes (incomplete); ### cc* modules; - Create a single `cc` folder where all the other `cc*` folders will live as subfolders.; - Provide a top-level `CCWavefunction` class, partly modeled on the existing `CIWavefunction` class to overtake the whole implementation of the CC functionality.; - The class will manage `MOInfo`,` Params`, `DPD` as local data members. This will ensure that the lifetime of these objects is tied to a particular instance of a CC calculation.; - The class will contain the various steps in a CC calculation as methods. ; - Move from tstart-tstop to the new timers timer_on-timer_off; ### DPD Library ; - Remove use of static global machinery from DPD member functions. ; - Implement proper copy/move assign/construct for the DPD object. ; - Implement internal structs with proper constructors as needed.; - Replace c-style arrays/raw pointers with appropriate smart pointer/containers ; - Refactor shared state (shared by multiple DPD instances, currently dpd_gbl struct) into singleton(s). ; - **Note**: Memory tracking in its current form is not thread safe and relies on the client code properly locking calls to function that need to perform alloca",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1247
https://github.com/psi4/psi4/issues/1247:1738,Modifiability,Refactor,Refactor,1738,"d amplitudes to python](https://github.com/psi4/psi4/pull/1061) available satisfying the constraints and comments offered by @dgasmith and @amjames.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:; - It will be possible to experiment with these quantities easily.; - Writing and reading amplitudes to file ([HDF5](https://portal.hdfgroup.org/display/support), [Zarr](https://zarr.readthedocs.io/en/stable/), or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; - Restart capabilities.; ## Summary of proposed changes (incomplete); ### cc* modules; - Create a single `cc` folder where all the other `cc*` folders will live as subfolders.; - Provide a top-level `CCWavefunction` class, partly modeled on the existing `CIWavefunction` class to overtake the whole implementation of the CC functionality.; - The class will manage `MOInfo`,` Params`, `DPD` as local data members. This will ensure that the lifetime of these objects is tied to a particular instance of a CC calculation.; - The class will contain the various steps in a CC calculation as methods. ; - Move from tstart-tstop to the new timers timer_on-timer_off; ### DPD Library ; - Remove use of static global machinery from DPD member functions. ; - Implement proper copy/move assign/construct for the DPD object. ; - Implement internal structs with proper constructors as needed.; - Replace c-style arrays/raw pointers with appropriate smart pointer/containers ; - Refactor shared state (shared by multiple DPD instances, currently dpd_gbl struct) into singleton(s). ; - **Note**: Memory tracking in its current form is not thread safe and relies on the client code properly locking calls to function that need to perform allocations with a mutex.; - DPD will handle opening/closing of psio files instead of requiring the user to do so. For visibility: @lothian @CDSherrill @andysim @jturney @fevangelista @dgasmith",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1247
https://github.com/psi4/psi4/issues/1247:1987,Performance,perform,perform,1987,"d amplitudes to python](https://github.com/psi4/psi4/pull/1061) available satisfying the constraints and comments offered by @dgasmith and @amjames.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:; - It will be possible to experiment with these quantities easily.; - Writing and reading amplitudes to file ([HDF5](https://portal.hdfgroup.org/display/support), [Zarr](https://zarr.readthedocs.io/en/stable/), or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; - Restart capabilities.; ## Summary of proposed changes (incomplete); ### cc* modules; - Create a single `cc` folder where all the other `cc*` folders will live as subfolders.; - Provide a top-level `CCWavefunction` class, partly modeled on the existing `CIWavefunction` class to overtake the whole implementation of the CC functionality.; - The class will manage `MOInfo`,` Params`, `DPD` as local data members. This will ensure that the lifetime of these objects is tied to a particular instance of a CC calculation.; - The class will contain the various steps in a CC calculation as methods. ; - Move from tstart-tstop to the new timers timer_on-timer_off; ### DPD Library ; - Remove use of static global machinery from DPD member functions. ; - Implement proper copy/move assign/construct for the DPD object. ; - Implement internal structs with proper constructors as needed.; - Replace c-style arrays/raw pointers with appropriate smart pointer/containers ; - Refactor shared state (shared by multiple DPD instances, currently dpd_gbl struct) into singleton(s). ; - **Note**: Memory tracking in its current form is not thread safe and relies on the client code properly locking calls to function that need to perform allocations with a mutex.; - DPD will handle opening/closing of psio files instead of requiring the user to do so. For visibility: @lothian @CDSherrill @andysim @jturney @fevangelista @dgasmith",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1247
https://github.com/psi4/psi4/issues/1247:1904,Safety,safe,safe,1904,"d amplitudes to python](https://github.com/psi4/psi4/pull/1061) available satisfying the constraints and comments offered by @dgasmith and @amjames.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:; - It will be possible to experiment with these quantities easily.; - Writing and reading amplitudes to file ([HDF5](https://portal.hdfgroup.org/display/support), [Zarr](https://zarr.readthedocs.io/en/stable/), or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; - Restart capabilities.; ## Summary of proposed changes (incomplete); ### cc* modules; - Create a single `cc` folder where all the other `cc*` folders will live as subfolders.; - Provide a top-level `CCWavefunction` class, partly modeled on the existing `CIWavefunction` class to overtake the whole implementation of the CC functionality.; - The class will manage `MOInfo`,` Params`, `DPD` as local data members. This will ensure that the lifetime of these objects is tied to a particular instance of a CC calculation.; - The class will contain the various steps in a CC calculation as methods. ; - Move from tstart-tstop to the new timers timer_on-timer_off; ### DPD Library ; - Remove use of static global machinery from DPD member functions. ; - Implement proper copy/move assign/construct for the DPD object. ; - Implement internal structs with proper constructors as needed.; - Replace c-style arrays/raw pointers with appropriate smart pointer/containers ; - Refactor shared state (shared by multiple DPD instances, currently dpd_gbl struct) into singleton(s). ; - **Note**: Memory tracking in its current form is not thread safe and relies on the client code properly locking calls to function that need to perform allocations with a mutex.; - DPD will handle opening/closing of psio files instead of requiring the user to do so. For visibility: @lothian @CDSherrill @andysim @jturney @fevangelista @dgasmith",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1247
https://github.com/psi4/psi4/issues/1247:166,Security,Expose,Expose,166,"We (@amjames and @robertodr) propose a partial rewrite of the coupled cluster and DPD functionalities in Psi4.; The main motivation is to make the pending [PR #1061, Expose wavefunction and amplitudes to python](https://github.com/psi4/psi4/pull/1061) available satisfying the constraints and comments offered by @dgasmith and @amjames.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:; - It will be possible to experiment with these quantities easily.; - Writing and reading amplitudes to file ([HDF5](https://portal.hdfgroup.org/display/support), [Zarr](https://zarr.readthedocs.io/en/stable/), or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; - Restart capabilities.; ## Summary of proposed changes (incomplete); ### cc* modules; - Create a single `cc` folder where all the other `cc*` folders will live as subfolders.; - Provide a top-level `CCWavefunction` class, partly modeled on the existing `CIWavefunction` class to overtake the whole implementation of the CC functionality.; - The class will manage `MOInfo`,` Params`, `DPD` as local data members. This will ensure that the lifetime of these objects is tied to a particular instance of a CC calculation.; - The class will contain the various steps in a CC calculation as methods. ; - Move from tstart-tstop to the new timers timer_on-timer_off; ### DPD Library ; - Remove use of static global machinery from DPD member functions. ; - Implement proper copy/move assign/construct for the DPD object. ; - Implement internal structs with proper constructors as needed.; - Replace c-style arrays/raw pointers with appropriate smart pointer/containers ; - Refactor shared state (shared by multiple DPD instances, currently dpd_gbl struct) into singleton(s). ; - **Note**: Memory tracking in its current form is not thread safe and relies on the client code properly locking calls to function that need to perform alloca",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1247
https://github.com/psi4/psi4/pull/1248:284,Testability,Test,Tests,284,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Match `malloc` with `free`; - [x] Match `new` with `delete`; - [x] Match `new[]` with `delete[]`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1248
https://github.com/psi4/psi4/pull/1248:360,Testability,test,tests,360,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Match `malloc` with `free`; - [x] Match `new` with `delete`; - [x] Match `new[]` with `delete[]`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1248
https://github.com/psi4/psi4/pull/1248:451,Testability,test,tests,451,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Match `malloc` with `free`; - [x] Match `new` with `delete`; - [x] Match `new[]` with `delete[]`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1248
https://github.com/psi4/psi4/pull/1249:164,Energy Efficiency,Reduce,Reduce,164,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Reduce the number of tests on Appveyor to reduce timeouts. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1249
https://github.com/psi4/psi4/pull/1249:206,Energy Efficiency,reduce,reduce,206,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Reduce the number of tests on Appveyor to reduce timeouts. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1249
https://github.com/psi4/psi4/pull/1249:213,Safety,timeout,timeouts,213,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Reduce the number of tests on Appveyor to reduce timeouts. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1249
https://github.com/psi4/psi4/pull/1249:185,Testability,test,tests,185,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Reduce the number of tests on Appveyor to reduce timeouts. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1249
https://github.com/psi4/psi4/pull/1249:245,Testability,Test,Tests,245,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Reduce the number of tests on Appveyor to reduce timeouts. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1249
https://github.com/psi4/psi4/pull/1249:321,Testability,test,tests,321,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Reduce the number of tests on Appveyor to reduce timeouts. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1249
https://github.com/psi4/psi4/pull/1249:412,Testability,test,tests,412,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Reduce the number of tests on Appveyor to reduce timeouts. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1249
https://github.com/psi4/psi4/pull/1250:244,Testability,Test,Tests,244,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Match `malloc` with `free`. `free_block` uses `delete[]`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1250
https://github.com/psi4/psi4/pull/1250:320,Testability,test,tests,320,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Match `malloc` with `free`. `free_block` uses `delete[]`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1250
https://github.com/psi4/psi4/pull/1250:411,Testability,test,tests,411,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Match `malloc` with `free`. `free_block` uses `delete[]`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1250
https://github.com/psi4/psi4/pull/1253:83,Availability,avail,available,83,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. See also #1247 . This PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ~Hold off merging until #1203, #1206, #1251, and #1252 are in. I'll keep rebasing this one accordingly.~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1253
https://github.com/psi4/psi4/pull/1253:903,Energy Efficiency,energy,energy,903,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. See also #1247 . This PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ~Hold off merging until #1203, #1206, #1251, and #1252 are in. I'll keep rebasing this one accordingly.~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1253
https://github.com/psi4/psi4/pull/1253:338,Modifiability,rewrite,rewrite,338,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. See also #1247 . This PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ~Hold off merging until #1203, #1206, #1251, and #1252 are in. I'll keep rebasing this one accordingly.~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1253
https://github.com/psi4/psi4/pull/1253:620,Safety,avoid,avoids,620,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. See also #1247 . This PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ~Hold off merging until #1203, #1206, #1251, and #1252 are in. I'll keep rebasing this one accordingly.~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1253
https://github.com/psi4/psi4/pull/1253:1046,Testability,Test,Tests,1046,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. See also #1247 . This PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ~Hold off merging until #1203, #1206, #1251, and #1252 are in. I'll keep rebasing this one accordingly.~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1253
https://github.com/psi4/psi4/pull/1253:1120,Testability,test,tests,1120,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. See also #1247 . This PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ~Hold off merging until #1203, #1206, #1251, and #1252 are in. I'll keep rebasing this one accordingly.~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1253
https://github.com/psi4/psi4/pull/1253:1211,Testability,test,tests,1211,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. See also #1247 . This PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ~Hold off merging until #1203, #1206, #1251, and #1252 are in. I'll keep rebasing this one accordingly.~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1253
https://github.com/psi4/psi4/pull/1254:86,Testability,Test,Tests,86,## Description; This PR removes the `dpd.gbl` file from `libdpd`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1254
https://github.com/psi4/psi4/pull/1254:160,Testability,test,tests,160,## Description; This PR removes the `dpd.gbl` file from `libdpd`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1254
https://github.com/psi4/psi4/pull/1254:251,Testability,test,tests,251,## Description; This PR removes the `dpd.gbl` file from `libdpd`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1254
https://github.com/psi4/psi4/issues/1255:292,Deployability,update,updated,292,"The -D_GLIBCXX_ASSERTIONS has been added to the standard Fedora build flags starting from Fedora 28. This turns on cheap range checks for C++ arrays, vectors, and strings, see; https://fedoraproject.org/wiki/Changes/HardeningFlags28. After a lot of work, I was able to get the Fedora package updated to psi4 1.2.1 and package its new dependencies. However, the new, stringent build flags reveal some broken code in psi4. Could you build the code with -D_GLIBCXX_ASSERTIONS and fix all the crashing code?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1255
https://github.com/psi4/psi4/issues/1255:334,Integrability,depend,dependencies,334,"The -D_GLIBCXX_ASSERTIONS has been added to the standard Fedora build flags starting from Fedora 28. This turns on cheap range checks for C++ arrays, vectors, and strings, see; https://fedoraproject.org/wiki/Changes/HardeningFlags28. After a lot of work, I was able to get the Fedora package updated to psi4 1.2.1 and package its new dependencies. However, the new, stringent build flags reveal some broken code in psi4. Could you build the code with -D_GLIBCXX_ASSERTIONS and fix all the crashing code?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1255
https://github.com/psi4/psi4/issues/1256:3534,Availability,error,error,3534," with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_u, self_t, undefined_t> op(const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:140:1: note: in expansion of macro ‘PYBIND11_UNARY_OPERATOR’; PYBIND11_UNARY_OPERATOR(pos, operator+, +l); ^~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; /home/work/psi4/psi4/psi4/src/core.cc:998:16: error: expected constructor, destructor, or type conversion before ‘(’ token; PYBIND11_MODULE(core, core) {; ^; make[5]: *** [src/CMakeFiles/core.dir/build.make:284: src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[4]: *** [CMakeFiles/Makefile2:166: src/CMakeFiles/core.dir/all] Error 2; make[4]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[3]: *** [Makefile:130: all] Error 2; make[3]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:113: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[2]: Leaving directory '/home/work/psi4/psi4/objdir'; make[1]: *** [CMakeFiles/Makefile2:647: CMakeFiles/psi4-core.dir/all] Error 2; make[1]: Leaving directory '/home/work/psi4/psi4/objdir'; make: *** [Makefile:141: all] Error 2; ```. I configured psi4 with; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBR",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:3735,Availability,Error,Error,3735,"_UNARY_OPERATOR’; PYBIND11_UNARY_OPERATOR(pos, operator+, +l); ^~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; /home/work/psi4/psi4/psi4/src/core.cc:998:16: error: expected constructor, destructor, or type conversion before ‘(’ token; PYBIND11_MODULE(core, core) {; ^; make[5]: *** [src/CMakeFiles/core.dir/build.make:284: src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[4]: *** [CMakeFiles/Makefile2:166: src/CMakeFiles/core.dir/all] Error 2; make[4]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[3]: *** [Makefile:130: all] Error 2; make[3]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:113: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[2]: Leaving directory '/home/work/psi4/psi4/objdir'; make[1]: *** [CMakeFiles/Makefile2:647: CMakeFiles/psi4-core.dir/all] Error 2; make[1]: Leaving directory '/home/work/psi4/psi4/objdir'; make: *** [Makefile:141: all] Error 2; ```. I configured psi4 with; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DC",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:3908,Availability,Error,Error,3908,"/home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; /home/work/psi4/psi4/psi4/src/core.cc:998:16: error: expected constructor, destructor, or type conversion before ‘(’ token; PYBIND11_MODULE(core, core) {; ^; make[5]: *** [src/CMakeFiles/core.dir/build.make:284: src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[4]: *** [CMakeFiles/Makefile2:166: src/CMakeFiles/core.dir/all] Error 2; make[4]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[3]: *** [Makefile:130: all] Error 2; make[3]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:113: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[2]: Leaving directory '/home/work/psi4/psi4/objdir'; make[1]: *** [CMakeFiles/Makefile2:647: CMakeFiles/psi4-core.dir/all] Error 2; make[1]: Leaving directory '/home/work/psi4/psi4/objdir'; make: *** [Makefile:141: all] Error 2; ```. I configured psi4 with; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ```; and started with a clean build directory. I am on the current master, commit 42016c2a4462b6d7e9f030df4e75e7d81b50b9a8. This is on Fedora 28 with; ```; $ gcc --version; gcc (GCC) 8.1.1 20",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:4045,Availability,Error,Error,4045,"/home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; /home/work/psi4/psi4/psi4/src/core.cc:998:16: error: expected constructor, destructor, or type conversion before ‘(’ token; PYBIND11_MODULE(core, core) {; ^; make[5]: *** [src/CMakeFiles/core.dir/build.make:284: src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[4]: *** [CMakeFiles/Makefile2:166: src/CMakeFiles/core.dir/all] Error 2; make[4]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[3]: *** [Makefile:130: all] Error 2; make[3]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:113: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[2]: Leaving directory '/home/work/psi4/psi4/objdir'; make[1]: *** [CMakeFiles/Makefile2:647: CMakeFiles/psi4-core.dir/all] Error 2; make[1]: Leaving directory '/home/work/psi4/psi4/objdir'; make: *** [Makefile:141: all] Error 2; ```. I configured psi4 with; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ```; and started with a clean build directory. I am on the current master, commit 42016c2a4462b6d7e9f030df4e75e7d81b50b9a8. This is on Fedora 28 with; ```; $ gcc --version; gcc (GCC) 8.1.1 20",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:4258,Availability,Error,Error,4258,"ous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; /home/work/psi4/psi4/psi4/src/core.cc:998:16: error: expected constructor, destructor, or type conversion before ‘(’ token; PYBIND11_MODULE(core, core) {; ^; make[5]: *** [src/CMakeFiles/core.dir/build.make:284: src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[4]: *** [CMakeFiles/Makefile2:166: src/CMakeFiles/core.dir/all] Error 2; make[4]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[3]: *** [Makefile:130: all] Error 2; make[3]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:113: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[2]: Leaving directory '/home/work/psi4/psi4/objdir'; make[1]: *** [CMakeFiles/Makefile2:647: CMakeFiles/psi4-core.dir/all] Error 2; make[1]: Leaving directory '/home/work/psi4/psi4/objdir'; make: *** [Makefile:141: all] Error 2; ```. I configured psi4 with; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ```; and started with a clean build directory. I am on the current master, commit 42016c2a4462b6d7e9f030df4e75e7d81b50b9a8. This is on Fedora 28 with; ```; $ gcc --version; gcc (GCC) 8.1.1 20180712 (Red Hat 8.1.1-5); Copyright (C) 2018 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:4395,Availability,Error,Error,4395,"ous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; /home/work/psi4/psi4/psi4/src/core.cc:998:16: error: expected constructor, destructor, or type conversion before ‘(’ token; PYBIND11_MODULE(core, core) {; ^; make[5]: *** [src/CMakeFiles/core.dir/build.make:284: src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[4]: *** [CMakeFiles/Makefile2:166: src/CMakeFiles/core.dir/all] Error 2; make[4]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[3]: *** [Makefile:130: all] Error 2; make[3]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:113: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[2]: Leaving directory '/home/work/psi4/psi4/objdir'; make[1]: *** [CMakeFiles/Makefile2:647: CMakeFiles/psi4-core.dir/all] Error 2; make[1]: Leaving directory '/home/work/psi4/psi4/objdir'; make: *** [Makefile:141: all] Error 2; ```. I configured psi4 with; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ```; and started with a clean build directory. I am on the current master, commit 42016c2a4462b6d7e9f030df4e75e7d81b50b9a8. This is on Fedora 28 with; ```; $ gcc --version; gcc (GCC) 8.1.1 20180712 (Red Hat 8.1.1-5); Copyright (C) 2018 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:4492,Availability,Error,Error,4492,"ous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; /home/work/psi4/psi4/psi4/src/core.cc:998:16: error: expected constructor, destructor, or type conversion before ‘(’ token; PYBIND11_MODULE(core, core) {; ^; make[5]: *** [src/CMakeFiles/core.dir/build.make:284: src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[4]: *** [CMakeFiles/Makefile2:166: src/CMakeFiles/core.dir/all] Error 2; make[4]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[3]: *** [Makefile:130: all] Error 2; make[3]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:113: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[2]: Leaving directory '/home/work/psi4/psi4/objdir'; make[1]: *** [CMakeFiles/Makefile2:647: CMakeFiles/psi4-core.dir/all] Error 2; make[1]: Leaving directory '/home/work/psi4/psi4/objdir'; make: *** [Makefile:141: all] Error 2; ```. I configured psi4 with; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ```; and started with a clean build directory. I am on the current master, commit 42016c2a4462b6d7e9f030df4e75e7d81b50b9a8. This is on Fedora 28 with; ```; $ gcc --version; gcc (GCC) 8.1.1 20180712 (Red Hat 8.1.1-5); Copyright (C) 2018 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:456,Deployability,install,install,456,"Related to #1255, I tried to compile psi4 by hand to get an up to date version. However, the compilation fails; ```; [ 98%] Building CXX object src/CMakeFiles/core.dir/core.cc.o; cd /home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/src && /usr/lib64/ccache/c++ -DUSING_CheMPS2 -DUSING_dkh -Dcore_EXPORTS -I/home/work/psi4/psi4/psi4/include -I/home/work/psi4/psi4/psi4/src -isystem /home/work/psi4/psi4/objdir/stage/include -I/home/work/psi4/install/include -isystem /usr/include/python3.6m -march=native -O2 -g -DNDEBUG -fPIC -fopenmp -fvisibility=hidden -std=c++11 -std=c++11 -o CMakeFiles/core.dir/core.cc.o -c /home/work/psi4/psi4/psi4/src/core.cc; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:78:76: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)0, (pybind11::detail::op_type)0, pybind11::detail::self_t, pybind11::detail::self_t> pybind11::detail::operator+(const pybind11::detail::self_t&, const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_l, self_t, self_t> op(const self_t &, const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:109:1: note: in expansion of macro ‘PYBIND11_BINARY_OPERATOR’; PYBIND11_BINARY_OPERATOR(add, radd, operator+, l + r); ^~~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detai",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:705,Deployability,install,install,705,"Related to #1255, I tried to compile psi4 by hand to get an up to date version. However, the compilation fails; ```; [ 98%] Building CXX object src/CMakeFiles/core.dir/core.cc.o; cd /home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/src && /usr/lib64/ccache/c++ -DUSING_CheMPS2 -DUSING_dkh -Dcore_EXPORTS -I/home/work/psi4/psi4/psi4/include -I/home/work/psi4/psi4/psi4/src -isystem /home/work/psi4/psi4/objdir/stage/include -I/home/work/psi4/install/include -isystem /usr/include/python3.6m -march=native -O2 -g -DNDEBUG -fPIC -fopenmp -fvisibility=hidden -std=c++11 -std=c++11 -o CMakeFiles/core.dir/core.cc.o -c /home/work/psi4/psi4/psi4/src/core.cc; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:78:76: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)0, (pybind11::detail::op_type)0, pybind11::detail::self_t, pybind11::detail::self_t> pybind11::detail::operator+(const pybind11::detail::self_t&, const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_l, self_t, self_t> op(const self_t &, const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:109:1: note: in expansion of macro ‘PYBIND11_BINARY_OPERATOR’; PYBIND11_BINARY_OPERATOR(add, radd, operator+, l + r); ^~~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detai",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:870,Deployability,install,install,870,"Related to #1255, I tried to compile psi4 by hand to get an up to date version. However, the compilation fails; ```; [ 98%] Building CXX object src/CMakeFiles/core.dir/core.cc.o; cd /home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/src && /usr/lib64/ccache/c++ -DUSING_CheMPS2 -DUSING_dkh -Dcore_EXPORTS -I/home/work/psi4/psi4/psi4/include -I/home/work/psi4/psi4/psi4/src -isystem /home/work/psi4/psi4/objdir/stage/include -I/home/work/psi4/install/include -isystem /usr/include/python3.6m -march=native -O2 -g -DNDEBUG -fPIC -fopenmp -fvisibility=hidden -std=c++11 -std=c++11 -o CMakeFiles/core.dir/core.cc.o -c /home/work/psi4/psi4/psi4/src/core.cc; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:78:76: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)0, (pybind11::detail::op_type)0, pybind11::detail::self_t, pybind11::detail::self_t> pybind11::detail::operator+(const pybind11::detail::self_t&, const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_l, self_t, self_t> op(const self_t &, const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:109:1: note: in expansion of macro ‘PYBIND11_BINARY_OPERATOR’; PYBIND11_BINARY_OPERATOR(add, radd, operator+, l + r); ^~~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detai",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:1336,Deployability,install,install,1336,"bject src/CMakeFiles/core.dir/core.cc.o; cd /home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/src && /usr/lib64/ccache/c++ -DUSING_CheMPS2 -DUSING_dkh -Dcore_EXPORTS -I/home/work/psi4/psi4/psi4/include -I/home/work/psi4/psi4/psi4/src -isystem /home/work/psi4/psi4/objdir/stage/include -I/home/work/psi4/install/include -isystem /usr/include/python3.6m -march=native -O2 -g -DNDEBUG -fPIC -fopenmp -fvisibility=hidden -std=c++11 -std=c++11 -o CMakeFiles/core.dir/core.cc.o -c /home/work/psi4/psi4/psi4/src/core.cc; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:78:76: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)0, (pybind11::detail::op_type)0, pybind11::detail::self_t, pybind11::detail::self_t> pybind11::detail::operator+(const pybind11::detail::self_t&, const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_l, self_t, self_t> op(const self_t &, const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:109:1: note: in expansion of macro ‘PYBIND11_BINARY_OPERATOR’; PYBIND11_BINARY_OPERATOR(add, radd, operator+, l + r); ^~~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; In file included from /home/work/psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:1555,Deployability,install,install,1555,"em /usr/include/python3.6m -march=native -O2 -g -DNDEBUG -fPIC -fopenmp -fvisibility=hidden -std=c++11 -std=c++11 -o CMakeFiles/core.dir/core.cc.o -c /home/work/psi4/psi4/psi4/src/core.cc; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:78:76: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)0, (pybind11::detail::op_type)0, pybind11::detail::self_t, pybind11::detail::self_t> pybind11::detail::operator+(const pybind11::detail::self_t&, const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_l, self_t, self_t> op(const self_t &, const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:109:1: note: in expansion of macro ‘PYBIND11_BINARY_OPERATOR’; PYBIND11_BINARY_OPERATOR(add, radd, operator+, l + r); ^~~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:104:65: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)13, (pybind11::detail::op_type)2, pybind11::detai",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:1613,Deployability,install,install,1613,"/core.cc.o -c /home/work/psi4/psi4/psi4/src/core.cc; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:78:76: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)0, (pybind11::detail::op_type)0, pybind11::detail::self_t, pybind11::detail::self_t> pybind11::detail::operator+(const pybind11::detail::self_t&, const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_l, self_t, self_t> op(const self_t &, const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:109:1: note: in expansion of macro ‘PYBIND11_BINARY_OPERATOR’; PYBIND11_BINARY_OPERATOR(add, radd, operator+, l + r); ^~~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:104:65: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)13, (pybind11::detail::op_type)2, pybind11::detail::self_t, pybind11::detail::undefined_t> pybind11::detail::operator+(const pybind11::detail::self_t&)’ follows declaration with attribu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:1671,Deployability,install,install,1671," included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:78:76: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)0, (pybind11::detail::op_type)0, pybind11::detail::self_t, pybind11::detail::self_t> pybind11::detail::operator+(const pybind11::detail::self_t&, const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_l, self_t, self_t> op(const self_t &, const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:109:1: note: in expansion of macro ‘PYBIND11_BINARY_OPERATOR’; PYBIND11_BINARY_OPERATOR(add, radd, operator+, l + r); ^~~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:104:65: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)13, (pybind11::detail::op_type)2, pybind11::detail::self_t, pybind11::detail::undefined_t> pybind11::detail::operator+(const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_u, self",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:1836,Deployability,install,install,1836,"c/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:78:76: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)0, (pybind11::detail::op_type)0, pybind11::detail::self_t, pybind11::detail::self_t> pybind11::detail::operator+(const pybind11::detail::self_t&, const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_l, self_t, self_t> op(const self_t &, const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:109:1: note: in expansion of macro ‘PYBIND11_BINARY_OPERATOR’; PYBIND11_BINARY_OPERATOR(add, radd, operator+, l + r); ^~~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:104:65: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)13, (pybind11::detail::op_type)2, pybind11::detail::self_t, pybind11::detail::undefined_t> pybind11::detail::operator+(const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_u, self_t, undefined_t> op(const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:140:1: note: in expansion of macro ‘PYBIND11_UNARY_OPERATOR’; PYBIND1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:2140,Deployability,install,install,2140,"pe)0, pybind11::detail::self_t, pybind11::detail::self_t> pybind11::detail::operator+(const pybind11::detail::self_t&, const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_l, self_t, self_t> op(const self_t &, const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:109:1: note: in expansion of macro ‘PYBIND11_BINARY_OPERATOR’; PYBIND11_BINARY_OPERATOR(add, radd, operator+, l + r); ^~~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:104:65: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)13, (pybind11::detail::op_type)2, pybind11::detail::self_t, pybind11::detail::undefined_t> pybind11::detail::operator+(const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_u, self_t, undefined_t> op(const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:140:1: note: in expansion of macro ‘PYBIND11_UNARY_OPERATOR’; PYBIND11_UNARY_OPERATOR(pos, operator+, +l); ^~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:2305,Deployability,install,install,2305,") { \; ^; /home/work/psi4/install/include/pybind11/operators.h:109:1: note: in expansion of macro ‘PYBIND11_BINARY_OPERATOR’; PYBIND11_BINARY_OPERATOR(add, radd, operator+, l + r); ^~~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:104:65: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)13, (pybind11::detail::op_type)2, pybind11::detail::self_t, pybind11::detail::undefined_t> pybind11::detail::operator+(const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_u, self_t, undefined_t> op(const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:140:1: note: in expansion of macro ‘PYBIND11_UNARY_OPERATOR’; PYBIND11_UNARY_OPERATOR(pos, operator+, +l); ^~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:2734,Deployability,install,install,2734,"/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:104:65: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)13, (pybind11::detail::op_type)2, pybind11::detail::self_t, pybind11::detail::undefined_t> pybind11::detail::operator+(const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_u, self_t, undefined_t> op(const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:140:1: note: in expansion of macro ‘PYBIND11_UNARY_OPERATOR’; PYBIND11_UNARY_OPERATOR(pos, operator+, +l); ^~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; /home/work/psi4/psi4/psi4/src/core.cc:998:16: error: expected const",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:2941,Deployability,install,install,2941,"16:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:104:65: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)13, (pybind11::detail::op_type)2, pybind11::detail::self_t, pybind11::detail::undefined_t> pybind11::detail::operator+(const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_u, self_t, undefined_t> op(const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:140:1: note: in expansion of macro ‘PYBIND11_UNARY_OPERATOR’; PYBIND11_UNARY_OPERATOR(pos, operator+, +l); ^~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; /home/work/psi4/psi4/psi4/src/core.cc:998:16: error: expected constructor, destructor, or type conversion before ‘(’ token; PYBIND11_MODULE(core, core) {; ^; make[5]: *** [src/CMakeFiles/core.dir/build.make:284: src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[4]: *** [CMakeFiles/Makefi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:2999,Deployability,install,install,2999,"il::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:104:65: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)13, (pybind11::detail::op_type)2, pybind11::detail::self_t, pybind11::detail::undefined_t> pybind11::detail::operator+(const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_u, self_t, undefined_t> op(const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:140:1: note: in expansion of macro ‘PYBIND11_UNARY_OPERATOR’; PYBIND11_UNARY_OPERATOR(pos, operator+, +l); ^~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; /home/work/psi4/psi4/psi4/src/core.cc:998:16: error: expected constructor, destructor, or type conversion before ‘(’ token; PYBIND11_MODULE(core, core) {; ^; make[5]: *** [src/CMakeFiles/core.dir/build.make:284: src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[4]: *** [CMakeFiles/Makefile2:166: src/CMakeFiles/core.dir/all] Error 2; make[4]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:3057,Deployability,install,install,3057,"tor+(descr &&d1, descr &&d2) {; ^~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:104:65: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)13, (pybind11::detail::op_type)2, pybind11::detail::self_t, pybind11::detail::undefined_t> pybind11::detail::operator+(const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_u, self_t, undefined_t> op(const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:140:1: note: in expansion of macro ‘PYBIND11_UNARY_OPERATOR’; PYBIND11_UNARY_OPERATOR(pos, operator+, +l); ^~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; /home/work/psi4/psi4/psi4/src/core.cc:998:16: error: expected constructor, destructor, or type conversion before ‘(’ token; PYBIND11_MODULE(core, core) {; ^; make[5]: *** [src/CMakeFiles/core.dir/build.make:284: src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[4]: *** [CMakeFiles/Makefile2:166: src/CMakeFiles/core.dir/all] Error 2; make[4]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[3]: *** [Makefile:130: all] Error 2; make[3",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:3222,Deployability,install,install,3222,"pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:104:65: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)13, (pybind11::detail::op_type)2, pybind11::detail::self_t, pybind11::detail::undefined_t> pybind11::detail::operator+(const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_u, self_t, undefined_t> op(const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:140:1: note: in expansion of macro ‘PYBIND11_UNARY_OPERATOR’; PYBIND11_UNARY_OPERATOR(pos, operator+, +l); ^~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; /home/work/psi4/psi4/psi4/src/core.cc:998:16: error: expected constructor, destructor, or type conversion before ‘(’ token; PYBIND11_MODULE(core, core) {; ^; make[5]: *** [src/CMakeFiles/core.dir/build.make:284: src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[4]: *** [CMakeFiles/Makefile2:166: src/CMakeFiles/core.dir/all] Error 2; make[4]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[3]: *** [Makefile:130: all] Error 2; make[3]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:113: psi4-core-prefix/src/p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:4739,Deployability,install,install,4739,"ous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; /home/work/psi4/psi4/psi4/src/core.cc:998:16: error: expected constructor, destructor, or type conversion before ‘(’ token; PYBIND11_MODULE(core, core) {; ^; make[5]: *** [src/CMakeFiles/core.dir/build.make:284: src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[4]: *** [CMakeFiles/Makefile2:166: src/CMakeFiles/core.dir/all] Error 2; make[4]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[3]: *** [Makefile:130: all] Error 2; make[3]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:113: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[2]: Leaving directory '/home/work/psi4/psi4/objdir'; make[1]: *** [CMakeFiles/Makefile2:647: CMakeFiles/psi4-core.dir/all] Error 2; make[1]: Leaving directory '/home/work/psi4/psi4/objdir'; make: *** [Makefile:141: all] Error 2; ```. I configured psi4 with; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ```; and started with a clean build directory. I am on the current master, commit 42016c2a4462b6d7e9f030df4e75e7d81b50b9a8. This is on Fedora 28 with; ```; $ gcc --version; gcc (GCC) 8.1.1 20180712 (Red Hat 8.1.1-5); Copyright (C) 2018 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:1221,Energy Efficiency,Watt,Wattributes,1221,"bject src/CMakeFiles/core.dir/core.cc.o; cd /home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/src && /usr/lib64/ccache/c++ -DUSING_CheMPS2 -DUSING_dkh -Dcore_EXPORTS -I/home/work/psi4/psi4/psi4/include -I/home/work/psi4/psi4/psi4/src -isystem /home/work/psi4/psi4/objdir/stage/include -I/home/work/psi4/install/include -isystem /usr/include/python3.6m -march=native -O2 -g -DNDEBUG -fPIC -fopenmp -fvisibility=hidden -std=c++11 -std=c++11 -o CMakeFiles/core.dir/core.cc.o -c /home/work/psi4/psi4/psi4/src/core.cc; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:78:76: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)0, (pybind11::detail::op_type)0, pybind11::detail::self_t, pybind11::detail::self_t> pybind11::detail::operator+(const pybind11::detail::self_t&, const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_l, self_t, self_t> op(const self_t &, const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:109:1: note: in expansion of macro ‘PYBIND11_BINARY_OPERATOR’; PYBIND11_BINARY_OPERATOR(add, radd, operator+, l + r); ^~~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; In file included from /home/work/psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:2630,Energy Efficiency,Watt,Wattributes,2630,"/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:104:65: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)13, (pybind11::detail::op_type)2, pybind11::detail::self_t, pybind11::detail::undefined_t> pybind11::detail::operator+(const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_u, self_t, undefined_t> op(const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:140:1: note: in expansion of macro ‘PYBIND11_UNARY_OPERATOR’; PYBIND11_UNARY_OPERATOR(pos, operator+, +l); ^~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; /home/work/psi4/psi4/psi4/src/core.cc:998:16: error: expected const",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/issues/1256:4508,Modifiability,config,configured,4508,"ous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; /home/work/psi4/psi4/psi4/src/core.cc:998:16: error: expected constructor, destructor, or type conversion before ‘(’ token; PYBIND11_MODULE(core, core) {; ^; make[5]: *** [src/CMakeFiles/core.dir/build.make:284: src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[4]: *** [CMakeFiles/Makefile2:166: src/CMakeFiles/core.dir/all] Error 2; make[4]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[3]: *** [Makefile:130: all] Error 2; make[3]: Leaving directory '/home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build'; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:113: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[2]: Leaving directory '/home/work/psi4/psi4/objdir'; make[1]: *** [CMakeFiles/Makefile2:647: CMakeFiles/psi4-core.dir/all] Error 2; make[1]: Leaving directory '/home/work/psi4/psi4/objdir'; make: *** [Makefile:141: all] Error 2; ```. I configured psi4 with; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ```; and started with a clean build directory. I am on the current master, commit 42016c2a4462b6d7e9f030df4e75e7d81b50b9a8. This is on Fedora 28 with; ```; $ gcc --version; gcc (GCC) 8.1.1 20180712 (Red Hat 8.1.1-5); Copyright (C) 2018 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1256
https://github.com/psi4/psi4/pull/1257:0,Modifiability,Inherit,Inherit,0,"Inherit CCLambdaWavefunction from CCEnergyWavefunction and further; build a class around CCLambdaWavefunction. ## Description; This PR just contains the inheritance of the CCLambdaWavefunction from the CCEnergyWavefunction, but no other functional changes or features.; The main motivation for this was so that this can be merged before the clang-format of the cclambda module in #1206 that seems to be happening before #1061. It would be nice to have these changes in before the formatting. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1257
https://github.com/psi4/psi4/pull/1257:153,Modifiability,inherit,inheritance,153,"Inherit CCLambdaWavefunction from CCEnergyWavefunction and further; build a class around CCLambdaWavefunction. ## Description; This PR just contains the inheritance of the CCLambdaWavefunction from the CCEnergyWavefunction, but no other functional changes or features.; The main motivation for this was so that this can be merged before the clang-format of the cclambda module in #1206 that seems to be happening before #1061. It would be nice to have these changes in before the formatting. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1257
https://github.com/psi4/psi4/pull/1257:512,Testability,Test,Tests,512,"Inherit CCLambdaWavefunction from CCEnergyWavefunction and further; build a class around CCLambdaWavefunction. ## Description; This PR just contains the inheritance of the CCLambdaWavefunction from the CCEnergyWavefunction, but no other functional changes or features.; The main motivation for this was so that this can be merged before the clang-format of the cclambda module in #1206 that seems to be happening before #1061. It would be nice to have these changes in before the formatting. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1257
https://github.com/psi4/psi4/pull/1257:586,Testability,test,tests,586,"Inherit CCLambdaWavefunction from CCEnergyWavefunction and further; build a class around CCLambdaWavefunction. ## Description; This PR just contains the inheritance of the CCLambdaWavefunction from the CCEnergyWavefunction, but no other functional changes or features.; The main motivation for this was so that this can be merged before the clang-format of the cclambda module in #1206 that seems to be happening before #1061. It would be nice to have these changes in before the formatting. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1257
https://github.com/psi4/psi4/pull/1257:677,Testability,test,tests,677,"Inherit CCLambdaWavefunction from CCEnergyWavefunction and further; build a class around CCLambdaWavefunction. ## Description; This PR just contains the inheritance of the CCLambdaWavefunction from the CCEnergyWavefunction, but no other functional changes or features.; The main motivation for this was so that this can be merged before the clang-format of the cclambda module in #1206 that seems to be happening before #1061. It would be nice to have these changes in before the formatting. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1257
https://github.com/psi4/psi4/issues/1258:49,Integrability,interface,interface,49,"I was just looking through the code in the libxc interface, and I noticed the following in LibXCfunctional.cc; ```; if (xc_functional_->info->flags & XC_FLAGS_HYB_CAM) rangesep++;; if (xc_functional_->info->flags & XC_FLAGS_HYB_CAMY) rangesep++;; if (xc_functional_->info->flags & XC_FLAGS_HYB_LC) rangesep++;; if (xc_functional_->info->flags & XC_FLAGS_HYB_LCY) rangesep++;; ```. While this is correct, per se, the thing is that the four cases refer to different kinds of range separation kernels. The case ```XC_FLAGS_HYB_CAM``` is the most common one, and appears to be the only one supported by Psi4. The other cases should crash, as they will give an incorrect result.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1258
https://github.com/psi4/psi4/pull/1260:44,Integrability,interface,interface,44,"## Description; This PR clarifies the libxc interface code and function descriptions as to the meaning of the alpha and beta parameters in psi4 vs libxc. See #1258 . Also, the definition of wPBE0 is fixed. See #1259 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1260
https://github.com/psi4/psi4/pull/1260:377,Testability,Test,Tests,377,"## Description; This PR clarifies the libxc interface code and function descriptions as to the meaning of the alpha and beta parameters in psi4 vs libxc. See #1258 . Also, the definition of wPBE0 is fixed. See #1259 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1260
https://github.com/psi4/psi4/pull/1260:451,Testability,test,tests,451,"## Description; This PR clarifies the libxc interface code and function descriptions as to the meaning of the alpha and beta parameters in psi4 vs libxc. See #1258 . Also, the definition of wPBE0 is fixed. See #1259 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1260
https://github.com/psi4/psi4/pull/1260:542,Testability,test,tests,542,"## Description; This PR clarifies the libxc interface code and function descriptions as to the meaning of the alpha and beta parameters in psi4 vs libxc. See #1258 . Also, the definition of wPBE0 is fixed. See #1259 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1260
https://github.com/psi4/psi4/pull/1261:602,Availability,error,error,602,"## Description; **work in progress**; Enables basic linear algebra in single-precision (FP32).; For now rather a rough proof-of-principle implementation for perturbative triples correction in single-precision. Any help is welcome and perhaps even needed for clean C++ and/or smart implementations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Most of BLAS in single-precision; - [x] SharedTensor analogues for FP32 in `dfocc` module; - [x] basic version of (T)-correction in FP32 for `dfocc` module working. (50% faster on my workstation over FP64, error below 1e-11 for benzene-methane complex at VTZ); - [ ] tidy up; - [ ] template for double-to-float conversion of SharedTensor (currently manual loops); - [ ] documentation; - [ ] ... ## Questions/Notes; - general comments and directions welcome! Also on general conventions. . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1261
https://github.com/psi4/psi4/pull/1261:905,Testability,Test,Tests,905,"## Description; **work in progress**; Enables basic linear algebra in single-precision (FP32).; For now rather a rough proof-of-principle implementation for perturbative triples correction in single-precision. Any help is welcome and perhaps even needed for clean C++ and/or smart implementations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Most of BLAS in single-precision; - [x] SharedTensor analogues for FP32 in `dfocc` module; - [x] basic version of (T)-correction in FP32 for `dfocc` module working. (50% faster on my workstation over FP64, error below 1e-11 for benzene-methane complex at VTZ); - [ ] tidy up; - [ ] template for double-to-float conversion of SharedTensor (currently manual loops); - [ ] documentation; - [ ] ... ## Questions/Notes; - general comments and directions welcome! Also on general conventions. . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1261
https://github.com/psi4/psi4/pull/1261:979,Testability,test,tests,979,"## Description; **work in progress**; Enables basic linear algebra in single-precision (FP32).; For now rather a rough proof-of-principle implementation for perturbative triples correction in single-precision. Any help is welcome and perhaps even needed for clean C++ and/or smart implementations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Most of BLAS in single-precision; - [x] SharedTensor analogues for FP32 in `dfocc` module; - [x] basic version of (T)-correction in FP32 for `dfocc` module working. (50% faster on my workstation over FP64, error below 1e-11 for benzene-methane complex at VTZ); - [ ] tidy up; - [ ] template for double-to-float conversion of SharedTensor (currently manual loops); - [ ] documentation; - [ ] ... ## Questions/Notes; - general comments and directions welcome! Also on general conventions. . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1261
https://github.com/psi4/psi4/pull/1261:1070,Testability,test,tests,1070,"## Description; **work in progress**; Enables basic linear algebra in single-precision (FP32).; For now rather a rough proof-of-principle implementation for perturbative triples correction in single-precision. Any help is welcome and perhaps even needed for clean C++ and/or smart implementations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Most of BLAS in single-precision; - [x] SharedTensor analogues for FP32 in `dfocc` module; - [x] basic version of (T)-correction in FP32 for `dfocc` module working. (50% faster on my workstation over FP64, error below 1e-11 for benzene-methane complex at VTZ); - [ ] tidy up; - [ ] template for double-to-float conversion of SharedTensor (currently manual loops); - [ ] documentation; - [ ] ... ## Questions/Notes; - general comments and directions welcome! Also on general conventions. . ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1261
https://github.com/psi4/psi4/pull/1264:212,Availability,error,errors,212,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Switch MSVC to LLVM compiler; - [x] Fix linkage errors; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1264
https://github.com/psi4/psi4/pull/1264:226,Deployability,Update,Update,226,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Switch MSVC to LLVM compiler; - [x] Fix linkage errors; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1264
https://github.com/psi4/psi4/pull/1264:249,Testability,test,tests,249,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Switch MSVC to LLVM compiler; - [x] Fix linkage errors; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1264
https://github.com/psi4/psi4/pull/1264:278,Testability,Test,Tests,278,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Switch MSVC to LLVM compiler; - [x] Fix linkage errors; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1264
https://github.com/psi4/psi4/pull/1264:354,Testability,test,tests,354,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Switch MSVC to LLVM compiler; - [x] Fix linkage errors; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1264
https://github.com/psi4/psi4/pull/1264:445,Testability,test,tests,445,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Switch MSVC to LLVM compiler; - [x] Fix linkage errors; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1264
https://github.com/psi4/psi4/issues/1265:486,Availability,error,error,486,"I have installed the latest Psi4 using anaconda:; `conda create -n p4env psi4 python=3.6 -c psi4/label/dev -c psi4`; Then; `source activate p4env`; But even a simple calculation like this one:; ```; molecule PCl5 {; 0 1; P -0.001250 0.001863 -0.000253; Cl -0.017313 2.126472 -0.026384; Cl -0.005958 -2.126884 0.029666; Cl 0.991147 -0.031176 -1.764481; Cl -2.029231 -0.007514 0.039738; Cl 1.062458 0.037458 1.721684; }; set basis def2-tzvp. optimize(""b3lyp""); ```; Is crashing with this error message:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3 4 5 6; 	 2 : 1; 	 3 : 1; 	 4 : 1; 	 5 : 1; 	 6 : 1. 	---Fragment 1 Geometry and Gradient---; 	 P -0.0023608120 0.0035185828 -0.0004777490; 	 CL -0.0327154829 4.0184477322 -0.0498581826; 	 CL -0.0112576427 -4.0192302534 0.0560609672; 	 CL 1.8729977331 -0.0589160789 -3.3343855050; 	 CL -3.8346895047 -0.0142013792 0.0750942888; 	 CL 2.0077559933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1265
https://github.com/psi4/psi4/issues/1265:3677,Availability,error,error,3677,"	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 2.124830 0.072797 0.020582 2.145412; 	 2 R(1,3) = 2.128962 0.068599 0.020146 2.149109; 	 3 R(1,4) = 2.024461 0.069553 17.524433 19.548895; 	 4 R(1,5) = 2.028397 0.066233 17.556204 19.584601; 	 5 R(1,6) = 2.024305 0.070720 17.517231 19.541535; 	 6 L(2,1,3) = 179.431194 0.000053 -1.744105 177.687089; 	 7 l(2,1,3) = 180.000000 -0.000770 0.000000 180.000000; 	 8 B(2,1,4) = 90.533252 -0.000595 -1.113535 89.419717; 	 9 B(2,1,5) = 89.845687 -0.000107 -1.005547 88.840140; 	 10 B(2,1,6) = 89.819597 0.000658 1.944389 91.763985; 	 11 B(3,1,4) = 89.828837 -0.000257 2.088415 91.917251; 	 12 B(3,1,5) = 89.592600 -0.000007 -0.737452 88.855147; 	 13 B(3,1,6) = 90.389033 0.000309 -1.148076 89.240958; 	 14 B(4,1,5) = 120.478052 -0.000026 0.003564 120.481615; 	 15 B(4,1,6) = 118.946205 0.000056 0.000429 118.946634; 	 16 B(5,1,6) = 120.575361 -0.000030 -0.003611 120.571750; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F4BEF0B510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F4C029A7FB0 Unknown Unknown Unknown; libc-2.27.so 00007F4C0260DEAB gsignal Unknown Unknown; libc-2.27.so 00007F4C025F85B9 abort Unknown Unknown; core.cpython-36m- 00007F4BF2B2E25A Unknown Unknown Unknown; core.cpython-36m- 00007F4BF15542FD Unknown Unknown Unknown; core.cpython-36m- 00007F4BF1570541 Unknown Unknown Unknown; core.cpython-36m- 00007F4BF0FFE806 Unknown Unknown Unknown; python3.6 0000556FBA8799E4 _PyCFunction_Fast Unknown Unknown; python3.6 0000556FBA906DFC Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA900206 Unknown Unknown Unknown; python3.6 0000556FBA9011CF Unknown Unknown Unknown; python3.6 0000556FBA906ED5 Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA901CB9 PyEval_EvalCodeEx Unknown Unknown; python3.6 0000556FBA902A4C PyEval_Eval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1265
https://github.com/psi4/psi4/issues/1265:7,Deployability,install,installed,7,"I have installed the latest Psi4 using anaconda:; `conda create -n p4env psi4 python=3.6 -c psi4/label/dev -c psi4`; Then; `source activate p4env`; But even a simple calculation like this one:; ```; molecule PCl5 {; 0 1; P -0.001250 0.001863 -0.000253; Cl -0.017313 2.126472 -0.026384; Cl -0.005958 -2.126884 0.029666; Cl 0.991147 -0.031176 -1.764481; Cl -2.029231 -0.007514 0.039738; Cl 1.062458 0.037458 1.721684; }; set basis def2-tzvp. optimize(""b3lyp""); ```; Is crashing with this error message:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3 4 5 6; 	 2 : 1; 	 3 : 1; 	 4 : 1; 	 5 : 1; 	 6 : 1. 	---Fragment 1 Geometry and Gradient---; 	 P -0.0023608120 0.0035185828 -0.0004777490; 	 CL -0.0327154829 4.0184477322 -0.0498581826; 	 CL -0.0112576427 -4.0192302534 0.0560609672; 	 CL 1.8729977331 -0.0589160789 -3.3343855050; 	 CL -3.8346895047 -0.0142013792 0.0750942888; 	 CL 2.0077559933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1265
https://github.com/psi4/psi4/issues/1265:2162,Energy Efficiency,energy,energy,2162,"59933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686	 89.592600; 	 B(3,1,6) = 1.577586	 90.389033; 	 B(4,1,5) = 2.102739	 120.478052; 	 B(4,1,6) = 2.076003	 118.946205; 	 B(5,1,6) = 2.104437	 120.575361. 	Current energy : -2642.5785393886. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1.; 	Norm of target step-size 0.09446; 	Projected energy change by RFO approximation: -0.0037947424. 	Back-transformation to cartesian coordinates...; 	Could not converge backtransformation.; 	Using first guess instead. 	--- Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---; 	 ---------------------------------------------------------------------------; 	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 2.124830 0.072797 0.020582 2.145412; 	 2 R(1,3) = 2.128962 0.068599 0.020146 2.149109; 	 3 R(1,4) = 2.024461 0.069553 17.524433 19.548895; 	 4 R(1,5) = 2.028397 0.066233 17.556204 19.584601; 	 5 R(1,6) = 2.024305 0.070720 17.517231 19.541535; 	 6 L(2,1,3) = 179.431194 0.000053 -1.744105 177.687089; 	 7 l(2,1,3) = 180.000000 -0.000770 0.000000 180.000000; 	 8 B(",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1265
https://github.com/psi4/psi4/issues/1265:2388,Energy Efficiency,energy,energy,2388,"60 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686	 89.592600; 	 B(3,1,6) = 1.577586	 90.389033; 	 B(4,1,5) = 2.102739	 120.478052; 	 B(4,1,6) = 2.076003	 118.946205; 	 B(5,1,6) = 2.104437	 120.575361. 	Current energy : -2642.5785393886. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1.; 	Norm of target step-size 0.09446; 	Projected energy change by RFO approximation: -0.0037947424. 	Back-transformation to cartesian coordinates...; 	Could not converge backtransformation.; 	Using first guess instead. 	--- Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---; 	 ---------------------------------------------------------------------------; 	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 2.124830 0.072797 0.020582 2.145412; 	 2 R(1,3) = 2.128962 0.068599 0.020146 2.149109; 	 3 R(1,4) = 2.024461 0.069553 17.524433 19.548895; 	 4 R(1,5) = 2.028397 0.066233 17.556204 19.584601; 	 5 R(1,6) = 2.024305 0.070720 17.517231 19.541535; 	 6 L(2,1,3) = 179.431194 0.000053 -1.744105 177.687089; 	 7 l(2,1,3) = 180.000000 -0.000770 0.000000 180.000000; 	 8 B(2,1,4) = 90.533252 -0.000595 -1.113535 89.419717; 	 9 B(2,1,5) = 89.845687 -0.000107 -1.005547 88.840140; 	 10 B(2,1,6) = 89.819597 0.000658 1.944389 91.763985; 	 11 B(3,1,4) = 89.828837 -0.000257 2.088415 91.917251; 	 12 B(3,1,5) = 8",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1265
https://github.com/psi4/psi4/issues/1265:492,Integrability,message,message,492,"I have installed the latest Psi4 using anaconda:; `conda create -n p4env psi4 python=3.6 -c psi4/label/dev -c psi4`; Then; `source activate p4env`; But even a simple calculation like this one:; ```; molecule PCl5 {; 0 1; P -0.001250 0.001863 -0.000253; Cl -0.017313 2.126472 -0.026384; Cl -0.005958 -2.126884 0.029666; Cl 0.991147 -0.031176 -1.764481; Cl -2.029231 -0.007514 0.039738; Cl 1.062458 0.037458 1.721684; }; set basis def2-tzvp. optimize(""b3lyp""); ```; Is crashing with this error message:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3 4 5 6; 	 2 : 1; 	 3 : 1; 	 4 : 1; 	 5 : 1; 	 6 : 1. 	---Fragment 1 Geometry and Gradient---; 	 P -0.0023608120 0.0035185828 -0.0004777490; 	 CL -0.0327154829 4.0184477322 -0.0498581826; 	 CL -0.0112576427 -4.0192302534 0.0560609672; 	 CL 1.8729977331 -0.0589160789 -3.3343855050; 	 CL -3.8346895047 -0.0142013792 0.0750942888; 	 CL 2.0077559933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1265
https://github.com/psi4/psi4/issues/1265:3717,Integrability,Rout,Routine,3717,"	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 2.124830 0.072797 0.020582 2.145412; 	 2 R(1,3) = 2.128962 0.068599 0.020146 2.149109; 	 3 R(1,4) = 2.024461 0.069553 17.524433 19.548895; 	 4 R(1,5) = 2.028397 0.066233 17.556204 19.584601; 	 5 R(1,6) = 2.024305 0.070720 17.517231 19.541535; 	 6 L(2,1,3) = 179.431194 0.000053 -1.744105 177.687089; 	 7 l(2,1,3) = 180.000000 -0.000770 0.000000 180.000000; 	 8 B(2,1,4) = 90.533252 -0.000595 -1.113535 89.419717; 	 9 B(2,1,5) = 89.845687 -0.000107 -1.005547 88.840140; 	 10 B(2,1,6) = 89.819597 0.000658 1.944389 91.763985; 	 11 B(3,1,4) = 89.828837 -0.000257 2.088415 91.917251; 	 12 B(3,1,5) = 89.592600 -0.000007 -0.737452 88.855147; 	 13 B(3,1,6) = 90.389033 0.000309 -1.148076 89.240958; 	 14 B(4,1,5) = 120.478052 -0.000026 0.003564 120.481615; 	 15 B(4,1,6) = 118.946205 0.000056 0.000429 118.946634; 	 16 B(5,1,6) = 120.575361 -0.000030 -0.003611 120.571750; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F4BEF0B510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F4C029A7FB0 Unknown Unknown Unknown; libc-2.27.so 00007F4C0260DEAB gsignal Unknown Unknown; libc-2.27.so 00007F4C025F85B9 abort Unknown Unknown; core.cpython-36m- 00007F4BF2B2E25A Unknown Unknown Unknown; core.cpython-36m- 00007F4BF15542FD Unknown Unknown Unknown; core.cpython-36m- 00007F4BF1570541 Unknown Unknown Unknown; core.cpython-36m- 00007F4BF0FFE806 Unknown Unknown Unknown; python3.6 0000556FBA8799E4 _PyCFunction_Fast Unknown Unknown; python3.6 0000556FBA906DFC Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA900206 Unknown Unknown Unknown; python3.6 0000556FBA9011CF Unknown Unknown Unknown; python3.6 0000556FBA906ED5 Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA901CB9 PyEval_EvalCodeEx Unknown Unknown; python3.6 0000556FBA902A4C PyEval_Eval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1265
https://github.com/psi4/psi4/issues/1265:440,Performance,optimiz,optimize,440,"I have installed the latest Psi4 using anaconda:; `conda create -n p4env psi4 python=3.6 -c psi4/label/dev -c psi4`; Then; `source activate p4env`; But even a simple calculation like this one:; ```; molecule PCl5 {; 0 1; P -0.001250 0.001863 -0.000253; Cl -0.017313 2.126472 -0.026384; Cl -0.005958 -2.126884 0.029666; Cl 0.991147 -0.031176 -1.764481; Cl -2.029231 -0.007514 0.039738; Cl 1.062458 0.037458 1.721684; }; set basis def2-tzvp. optimize(""b3lyp""); ```; Is crashing with this error message:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3 4 5 6; 	 2 : 1; 	 3 : 1; 	 4 : 1; 	 5 : 1; 	 6 : 1. 	---Fragment 1 Geometry and Gradient---; 	 P -0.0023608120 0.0035185828 -0.0004777490; 	 CL -0.0327154829 4.0184477322 -0.0498581826; 	 CL -0.0112576427 -4.0192302534 0.0560609672; 	 CL 1.8729977331 -0.0589160789 -3.3343855050; 	 CL -3.8346895047 -0.0142013792 0.0750942888; 	 CL 2.0077559933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1265
https://github.com/psi4/psi4/issues/1265:583,Performance,optimiz,optimizations,583,"I have installed the latest Psi4 using anaconda:; `conda create -n p4env psi4 python=3.6 -c psi4/label/dev -c psi4`; Then; `source activate p4env`; But even a simple calculation like this one:; ```; molecule PCl5 {; 0 1; P -0.001250 0.001863 -0.000253; Cl -0.017313 2.126472 -0.026384; Cl -0.005958 -2.126884 0.029666; Cl 0.991147 -0.031176 -1.764481; Cl -2.029231 -0.007514 0.039738; Cl 1.062458 0.037458 1.721684; }; set basis def2-tzvp. optimize(""b3lyp""); ```; Is crashing with this error message:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3 4 5 6; 	 2 : 1; 	 3 : 1; 	 4 : 1; 	 5 : 1; 	 6 : 1. 	---Fragment 1 Geometry and Gradient---; 	 P -0.0023608120 0.0035185828 -0.0004777490; 	 CL -0.0327154829 4.0184477322 -0.0498581826; 	 CL -0.0112576427 -4.0192302534 0.0560609672; 	 CL 1.8729977331 -0.0589160789 -3.3343855050; 	 CL -3.8346895047 -0.0142013792 0.0750942888; 	 CL 2.0077559933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1265
https://github.com/psi4/psi4/issues/1265:1470,Performance,optimiz,optimization,1470,"this error message:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3 4 5 6; 	 2 : 1; 	 3 : 1; 	 4 : 1; 	 5 : 1; 	 6 : 1. 	---Fragment 1 Geometry and Gradient---; 	 P -0.0023608120 0.0035185828 -0.0004777490; 	 CL -0.0327154829 4.0184477322 -0.0498581826; 	 CL -0.0112576427 -4.0192302534 0.0560609672; 	 CL 1.8729977331 -0.0589160789 -3.3343855050; 	 CL -3.8346895047 -0.0142013792 0.0750942888; 	 CL 2.0077559933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686	 89.592600; 	 B(3,1,6) = 1.577586	 90.389033; 	 B(4,1,5) = 2.102739	 120.478052; 	 B(4,1,6) = 2.076003	 118.946205; 	 B(5,1,6) = 2.104437	 120.575361. 	Current energy : -2642.5785393886. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1.; 	Norm of target step-size 0.09446; 	Projected energy change by RFO approximation: -0.0037947424. 	Back-transformation to cartesian coordina",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1265
https://github.com/psi4/psi4/issues/1265:1517,Performance,optimiz,optimization,1517,"-----------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3 4 5 6; 	 2 : 1; 	 3 : 1; 	 4 : 1; 	 5 : 1; 	 6 : 1. 	---Fragment 1 Geometry and Gradient---; 	 P -0.0023608120 0.0035185828 -0.0004777490; 	 CL -0.0327154829 4.0184477322 -0.0498581826; 	 CL -0.0112576427 -4.0192302534 0.0560609672; 	 CL 1.8729977331 -0.0589160789 -3.3343855050; 	 CL -3.8346895047 -0.0142013792 0.0750942888; 	 CL 2.0077559933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686	 89.592600; 	 B(3,1,6) = 1.577586	 90.389033; 	 B(4,1,5) = 2.102739	 120.478052; 	 B(4,1,6) = 2.076003	 118.946205; 	 B(5,1,6) = 2.104437	 120.575361. 	Current energy : -2642.5785393886. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1.; 	Norm of target step-size 0.09446; 	Projected energy change by RFO approximation: -0.0037947424. 	Back-transformation to cartesian coordinates...; 	Could not converge backtran",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1265
https://github.com/psi4/psi4/issues/1265:2266,Performance,optimiz,optimization,2266,"6 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686	 89.592600; 	 B(3,1,6) = 1.577586	 90.389033; 	 B(4,1,5) = 2.102739	 120.478052; 	 B(4,1,6) = 2.076003	 118.946205; 	 B(5,1,6) = 2.104437	 120.575361. 	Current energy : -2642.5785393886. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1.; 	Norm of target step-size 0.09446; 	Projected energy change by RFO approximation: -0.0037947424. 	Back-transformation to cartesian coordinates...; 	Could not converge backtransformation.; 	Using first guess instead. 	--- Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---; 	 ---------------------------------------------------------------------------; 	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 2.124830 0.072797 0.020582 2.145412; 	 2 R(1,3) = 2.128962 0.068599 0.020146 2.149109; 	 3 R(1,4) = 2.024461 0.069553 17.524433 19.548895; 	 4 R(1,5) = 2.028397 0.066233 17.556204 19.584601; 	 5 R(1,6) = 2.024305 0.070720 17.517231 19.541535; 	 6 L(2,1,3) = 179.431194 0.000053 -1.744105 177.687089; 	 7 l(2,1,3) = 180.000000 -0.000770 0.000000 180.000000; 	 8 B(2,1,4) = 90.533252 -0.000595 -1.113535 89.419717; 	 9 B(2,1,5) = 89.845687 -0.000107 -1.005547 88.84014",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1265
https://github.com/psi4/psi4/issues/1265:737,Safety,Detect,Detected,737,"I have installed the latest Psi4 using anaconda:; `conda create -n p4env psi4 python=3.6 -c psi4/label/dev -c psi4`; Then; `source activate p4env`; But even a simple calculation like this one:; ```; molecule PCl5 {; 0 1; P -0.001250 0.001863 -0.000253; Cl -0.017313 2.126472 -0.026384; Cl -0.005958 -2.126884 0.029666; Cl 0.991147 -0.031176 -1.764481; Cl -2.029231 -0.007514 0.039738; Cl 1.062458 0.037458 1.721684; }; set basis def2-tzvp. optimize(""b3lyp""); ```; Is crashing with this error message:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3 4 5 6; 	 2 : 1; 	 3 : 1; 	 4 : 1; 	 5 : 1; 	 6 : 1. 	---Fragment 1 Geometry and Gradient---; 	 P -0.0023608120 0.0035185828 -0.0004777490; 	 CL -0.0327154829 4.0184477322 -0.0498581826; 	 CL -0.0112576427 -4.0192302534 0.0560609672; 	 CL 1.8729977331 -0.0589160789 -3.3343855050; 	 CL -3.8346895047 -0.0142013792 0.0750942888; 	 CL 2.0077559933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1265
https://github.com/psi4/psi4/issues/1265:3689,Safety,Abort,Abort,3689,"	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 2.124830 0.072797 0.020582 2.145412; 	 2 R(1,3) = 2.128962 0.068599 0.020146 2.149109; 	 3 R(1,4) = 2.024461 0.069553 17.524433 19.548895; 	 4 R(1,5) = 2.028397 0.066233 17.556204 19.584601; 	 5 R(1,6) = 2.024305 0.070720 17.517231 19.541535; 	 6 L(2,1,3) = 179.431194 0.000053 -1.744105 177.687089; 	 7 l(2,1,3) = 180.000000 -0.000770 0.000000 180.000000; 	 8 B(2,1,4) = 90.533252 -0.000595 -1.113535 89.419717; 	 9 B(2,1,5) = 89.845687 -0.000107 -1.005547 88.840140; 	 10 B(2,1,6) = 89.819597 0.000658 1.944389 91.763985; 	 11 B(3,1,4) = 89.828837 -0.000257 2.088415 91.917251; 	 12 B(3,1,5) = 89.592600 -0.000007 -0.737452 88.855147; 	 13 B(3,1,6) = 90.389033 0.000309 -1.148076 89.240958; 	 14 B(4,1,5) = 120.478052 -0.000026 0.003564 120.481615; 	 15 B(4,1,6) = 118.946205 0.000056 0.000429 118.946634; 	 16 B(5,1,6) = 120.575361 -0.000030 -0.003611 120.571750; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F4BEF0B510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F4C029A7FB0 Unknown Unknown Unknown; libc-2.27.so 00007F4C0260DEAB gsignal Unknown Unknown; libc-2.27.so 00007F4C025F85B9 abort Unknown Unknown; core.cpython-36m- 00007F4BF2B2E25A Unknown Unknown Unknown; core.cpython-36m- 00007F4BF15542FD Unknown Unknown Unknown; core.cpython-36m- 00007F4BF1570541 Unknown Unknown Unknown; core.cpython-36m- 00007F4BF0FFE806 Unknown Unknown Unknown; python3.6 0000556FBA8799E4 _PyCFunction_Fast Unknown Unknown; python3.6 0000556FBA906DFC Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA900206 Unknown Unknown Unknown; python3.6 0000556FBA9011CF Unknown Unknown Unknown; python3.6 0000556FBA906ED5 Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA901CB9 PyEval_EvalCodeEx Unknown Unknown; python3.6 0000556FBA902A4C PyEval_Eval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1265
https://github.com/psi4/psi4/issues/1265:3947,Safety,abort,abort,3947," = 2.028397 0.066233 17.556204 19.584601; 	 5 R(1,6) = 2.024305 0.070720 17.517231 19.541535; 	 6 L(2,1,3) = 179.431194 0.000053 -1.744105 177.687089; 	 7 l(2,1,3) = 180.000000 -0.000770 0.000000 180.000000; 	 8 B(2,1,4) = 90.533252 -0.000595 -1.113535 89.419717; 	 9 B(2,1,5) = 89.845687 -0.000107 -1.005547 88.840140; 	 10 B(2,1,6) = 89.819597 0.000658 1.944389 91.763985; 	 11 B(3,1,4) = 89.828837 -0.000257 2.088415 91.917251; 	 12 B(3,1,5) = 89.592600 -0.000007 -0.737452 88.855147; 	 13 B(3,1,6) = 90.389033 0.000309 -1.148076 89.240958; 	 14 B(4,1,5) = 120.478052 -0.000026 0.003564 120.481615; 	 15 B(4,1,6) = 118.946205 0.000056 0.000429 118.946634; 	 16 B(5,1,6) = 120.575361 -0.000030 -0.003611 120.571750; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F4BEF0B510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F4C029A7FB0 Unknown Unknown Unknown; libc-2.27.so 00007F4C0260DEAB gsignal Unknown Unknown; libc-2.27.so 00007F4C025F85B9 abort Unknown Unknown; core.cpython-36m- 00007F4BF2B2E25A Unknown Unknown Unknown; core.cpython-36m- 00007F4BF15542FD Unknown Unknown Unknown; core.cpython-36m- 00007F4BF1570541 Unknown Unknown Unknown; core.cpython-36m- 00007F4BF0FFE806 Unknown Unknown Unknown; python3.6 0000556FBA8799E4 _PyCFunction_Fast Unknown Unknown; python3.6 0000556FBA906DFC Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA900206 Unknown Unknown Unknown; python3.6 0000556FBA9011CF Unknown Unknown Unknown; python3.6 0000556FBA906ED5 Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA901CB9 PyEval_EvalCodeEx Unknown Unknown; python3.6 0000556FBA902A4C PyEval_EvalCode Unknown Unknown; python3.6 0000556FBA97EC44 Unknown Unknown Unknown; python3.6 0000556FBA97ECDD PyRun_StringFlags Unknown Unknown; python3.6 0000556FBA929312 Unknown Unknown Unknown; python3.6 0000556FBA879921 _PyCFunction_Fast Unknown Unknow",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1265
https://github.com/psi4/psi4/issues/1265:5593,Safety,Abort,Aborted,5593,30 -0.003611 120.571750; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F4BEF0B510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F4C029A7FB0 Unknown Unknown Unknown; libc-2.27.so 00007F4C0260DEAB gsignal Unknown Unknown; libc-2.27.so 00007F4C025F85B9 abort Unknown Unknown; core.cpython-36m- 00007F4BF2B2E25A Unknown Unknown Unknown; core.cpython-36m- 00007F4BF15542FD Unknown Unknown Unknown; core.cpython-36m- 00007F4BF1570541 Unknown Unknown Unknown; core.cpython-36m- 00007F4BF0FFE806 Unknown Unknown Unknown; python3.6 0000556FBA8799E4 _PyCFunction_Fast Unknown Unknown; python3.6 0000556FBA906DFC Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA900206 Unknown Unknown Unknown; python3.6 0000556FBA9011CF Unknown Unknown Unknown; python3.6 0000556FBA906ED5 Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA901CB9 PyEval_EvalCodeEx Unknown Unknown; python3.6 0000556FBA902A4C PyEval_EvalCode Unknown Unknown; python3.6 0000556FBA97EC44 Unknown Unknown Unknown; python3.6 0000556FBA97ECDD PyRun_StringFlags Unknown Unknown; python3.6 0000556FBA929312 Unknown Unknown Unknown; python3.6 0000556FBA879921 _PyCFunction_Fast Unknown Unknown; python3.6 0000556FBA906DFC Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA901CB9 PyEval_EvalCodeEx Unknown Unknown; python3.6 0000556FBA902A4C PyEval_EvalCode Unknown Unknown; python3.6 0000556FBA97EC44 Unknown Unknown Unknown; python3.6 0000556FBA97F041 PyRun_FileExFlags Unknown Unknown; python3.6 0000556FBA97F244 PyRun_SimpleFileE Unknown Unknown; python3.6 0000556FBA982D24 Py_Main Unknown Unknown; python3.6 0000556FBA84A75E main Unknown Unknown; libc-2.27.so 00007F4C025FA11B __libc_start_main Unknown Unknown; python3.6 0000556FBA93247B Unknown Unknown Unknown; ^C; [1]+ Aborted (imagem do núcleo gravada)psi4 PCl5.in; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1265
https://github.com/psi4/psi4/issues/1265:159,Usability,simpl,simple,159,"I have installed the latest Psi4 using anaconda:; `conda create -n p4env psi4 python=3.6 -c psi4/label/dev -c psi4`; Then; `source activate p4env`; But even a simple calculation like this one:; ```; molecule PCl5 {; 0 1; P -0.001250 0.001863 -0.000253; Cl -0.017313 2.126472 -0.026384; Cl -0.005958 -2.126884 0.029666; Cl 0.991147 -0.031176 -1.764481; Cl -2.029231 -0.007514 0.039738; Cl 1.062458 0.037458 1.721684; }; set basis def2-tzvp. optimize(""b3lyp""); ```; Is crashing with this error message:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3 4 5 6; 	 2 : 1; 	 3 : 1; 	 4 : 1; 	 5 : 1; 	 6 : 1. 	---Fragment 1 Geometry and Gradient---; 	 P -0.0023608120 0.0035185828 -0.0004777490; 	 CL -0.0327154829 4.0184477322 -0.0498581826; 	 CL -0.0112576427 -4.0192302534 0.0560609672; 	 CL 1.8729977331 -0.0589160789 -3.3343855050; 	 CL -3.8346895047 -0.0142013792 0.0750942888; 	 CL 2.0077559933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1265
https://github.com/psi4/psi4/issues/1266:1504,Availability,down,down,1504,"As @PeterKraus points out we have the following missing tests:. ```; missing = ['B1WC', 'B2GPPLYP', 'B2PLYP', 'B3LYPs', 'B86B95', 'B86BPBE', ; 'B96B95', 'B97-1p', 'B97-GGA1', 'BHandH', 'BHandHLYP', 'CAMY-B3LYP', ; 'CAMY-BLYP', 'CAP0', 'CORE-DSD-BLYP', 'DSD-BLYP', 'DSD-PBEB95', 'DSD-PBEP86', ; 'DSD-PBEPBE', 'HCTH407P', 'HCTHP14', 'HF', 'HJS-B97X', 'HJS-PBE', 'HJS-PBE-SOL',; 'HPBEINT', 'HSE03', 'HSE06', 'KSDT', 'KT2', 'LCY-BLYP', 'LCY-PBE', 'LRC-WPBE', ; 'MB3LYP-RC04', 'MN15', 'MOHLYP', 'MOHLYP2', 'OP-PBE', 'PBE0-13', 'PBE0-2', ; 'PBE0-DH', 'PBE1W', 'PBELYP1W', 'PTPSS', 'PW86B95', 'PW86PBE', 'PWPB95', ; 'RPBE', 'SB98-1a', 'SB98-1b', 'SB98-1c', 'SB98-2a', 'SB98-2b', 'SB98-2c', 'SVWN', ; 'TETER93', 'TH-FC', 'TH-FCFO', 'TH-FCO', 'TH-FL', 'TH1', 'TH2', 'TH3', 'TH4', ; 'TPSSLYP1W', 'TUNED-CAM-B3LYP', 'XLYP', 'ZLP', ; 'mPW1PW', 'mPW3LYP', 'mPW3PW', 'mPWLYP1', 'mPWLYP1M', ; 'mPWLYP1W', 'mPWPW', 'revB3LYP', 'wPBE', 'wPBE0', ""X1B95"", ""XB1K""]. skip = [""HCTHP76"", # scf fail; ""HJS-B88"", # C_DSYEV failed; ""FT97"", # C_DSYEV failed; ]; ```. Several functionals like B2PLYP are tested outside `dft-bench-*` tests and are covered. In general, we have good coverage of the different runs of functionals at this point and we should rely somewhat that LibXC tests individual functionals well. So functionals purely defined by LibXC should be fine in general. The primary concerning points above are the `*wPBE*` series and `SVWN` are not well tested and are curated by us. This issue will be closed by hunting down references and adding tests for the above. FT97 and co have historically been problematic for us. I would be curious if this is due to instabilities in FT97 or something on our end.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1266
https://github.com/psi4/psi4/issues/1266:787,Performance,TUNE,TUNED-CAM-,787,"As @PeterKraus points out we have the following missing tests:. ```; missing = ['B1WC', 'B2GPPLYP', 'B2PLYP', 'B3LYPs', 'B86B95', 'B86BPBE', ; 'B96B95', 'B97-1p', 'B97-GGA1', 'BHandH', 'BHandHLYP', 'CAMY-B3LYP', ; 'CAMY-BLYP', 'CAP0', 'CORE-DSD-BLYP', 'DSD-BLYP', 'DSD-PBEB95', 'DSD-PBEP86', ; 'DSD-PBEPBE', 'HCTH407P', 'HCTHP14', 'HF', 'HJS-B97X', 'HJS-PBE', 'HJS-PBE-SOL',; 'HPBEINT', 'HSE03', 'HSE06', 'KSDT', 'KT2', 'LCY-BLYP', 'LCY-PBE', 'LRC-WPBE', ; 'MB3LYP-RC04', 'MN15', 'MOHLYP', 'MOHLYP2', 'OP-PBE', 'PBE0-13', 'PBE0-2', ; 'PBE0-DH', 'PBE1W', 'PBELYP1W', 'PTPSS', 'PW86B95', 'PW86PBE', 'PWPB95', ; 'RPBE', 'SB98-1a', 'SB98-1b', 'SB98-1c', 'SB98-2a', 'SB98-2b', 'SB98-2c', 'SVWN', ; 'TETER93', 'TH-FC', 'TH-FCFO', 'TH-FCO', 'TH-FL', 'TH1', 'TH2', 'TH3', 'TH4', ; 'TPSSLYP1W', 'TUNED-CAM-B3LYP', 'XLYP', 'ZLP', ; 'mPW1PW', 'mPW3LYP', 'mPW3PW', 'mPWLYP1', 'mPWLYP1M', ; 'mPWLYP1W', 'mPWPW', 'revB3LYP', 'wPBE', 'wPBE0', ""X1B95"", ""XB1K""]. skip = [""HCTHP76"", # scf fail; ""HJS-B88"", # C_DSYEV failed; ""FT97"", # C_DSYEV failed; ]; ```. Several functionals like B2PLYP are tested outside `dft-bench-*` tests and are covered. In general, we have good coverage of the different runs of functionals at this point and we should rely somewhat that LibXC tests individual functionals well. So functionals purely defined by LibXC should be fine in general. The primary concerning points above are the `*wPBE*` series and `SVWN` are not well tested and are curated by us. This issue will be closed by hunting down references and adding tests for the above. FT97 and co have historically been problematic for us. I would be curious if this is due to instabilities in FT97 or something on our end.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1266
https://github.com/psi4/psi4/issues/1266:56,Testability,test,tests,56,"As @PeterKraus points out we have the following missing tests:. ```; missing = ['B1WC', 'B2GPPLYP', 'B2PLYP', 'B3LYPs', 'B86B95', 'B86BPBE', ; 'B96B95', 'B97-1p', 'B97-GGA1', 'BHandH', 'BHandHLYP', 'CAMY-B3LYP', ; 'CAMY-BLYP', 'CAP0', 'CORE-DSD-BLYP', 'DSD-BLYP', 'DSD-PBEB95', 'DSD-PBEP86', ; 'DSD-PBEPBE', 'HCTH407P', 'HCTHP14', 'HF', 'HJS-B97X', 'HJS-PBE', 'HJS-PBE-SOL',; 'HPBEINT', 'HSE03', 'HSE06', 'KSDT', 'KT2', 'LCY-BLYP', 'LCY-PBE', 'LRC-WPBE', ; 'MB3LYP-RC04', 'MN15', 'MOHLYP', 'MOHLYP2', 'OP-PBE', 'PBE0-13', 'PBE0-2', ; 'PBE0-DH', 'PBE1W', 'PBELYP1W', 'PTPSS', 'PW86B95', 'PW86PBE', 'PWPB95', ; 'RPBE', 'SB98-1a', 'SB98-1b', 'SB98-1c', 'SB98-2a', 'SB98-2b', 'SB98-2c', 'SVWN', ; 'TETER93', 'TH-FC', 'TH-FCFO', 'TH-FCO', 'TH-FL', 'TH1', 'TH2', 'TH3', 'TH4', ; 'TPSSLYP1W', 'TUNED-CAM-B3LYP', 'XLYP', 'ZLP', ; 'mPW1PW', 'mPW3LYP', 'mPW3PW', 'mPWLYP1', 'mPWLYP1M', ; 'mPWLYP1W', 'mPWPW', 'revB3LYP', 'wPBE', 'wPBE0', ""X1B95"", ""XB1K""]. skip = [""HCTHP76"", # scf fail; ""HJS-B88"", # C_DSYEV failed; ""FT97"", # C_DSYEV failed; ]; ```. Several functionals like B2PLYP are tested outside `dft-bench-*` tests and are covered. In general, we have good coverage of the different runs of functionals at this point and we should rely somewhat that LibXC tests individual functionals well. So functionals purely defined by LibXC should be fine in general. The primary concerning points above are the `*wPBE*` series and `SVWN` are not well tested and are curated by us. This issue will be closed by hunting down references and adding tests for the above. FT97 and co have historically been problematic for us. I would be curious if this is due to instabilities in FT97 or something on our end.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1266
https://github.com/psi4/psi4/issues/1266:1076,Testability,test,tested,1076,"As @PeterKraus points out we have the following missing tests:. ```; missing = ['B1WC', 'B2GPPLYP', 'B2PLYP', 'B3LYPs', 'B86B95', 'B86BPBE', ; 'B96B95', 'B97-1p', 'B97-GGA1', 'BHandH', 'BHandHLYP', 'CAMY-B3LYP', ; 'CAMY-BLYP', 'CAP0', 'CORE-DSD-BLYP', 'DSD-BLYP', 'DSD-PBEB95', 'DSD-PBEP86', ; 'DSD-PBEPBE', 'HCTH407P', 'HCTHP14', 'HF', 'HJS-B97X', 'HJS-PBE', 'HJS-PBE-SOL',; 'HPBEINT', 'HSE03', 'HSE06', 'KSDT', 'KT2', 'LCY-BLYP', 'LCY-PBE', 'LRC-WPBE', ; 'MB3LYP-RC04', 'MN15', 'MOHLYP', 'MOHLYP2', 'OP-PBE', 'PBE0-13', 'PBE0-2', ; 'PBE0-DH', 'PBE1W', 'PBELYP1W', 'PTPSS', 'PW86B95', 'PW86PBE', 'PWPB95', ; 'RPBE', 'SB98-1a', 'SB98-1b', 'SB98-1c', 'SB98-2a', 'SB98-2b', 'SB98-2c', 'SVWN', ; 'TETER93', 'TH-FC', 'TH-FCFO', 'TH-FCO', 'TH-FL', 'TH1', 'TH2', 'TH3', 'TH4', ; 'TPSSLYP1W', 'TUNED-CAM-B3LYP', 'XLYP', 'ZLP', ; 'mPW1PW', 'mPW3LYP', 'mPW3PW', 'mPWLYP1', 'mPWLYP1M', ; 'mPWLYP1W', 'mPWPW', 'revB3LYP', 'wPBE', 'wPBE0', ""X1B95"", ""XB1K""]. skip = [""HCTHP76"", # scf fail; ""HJS-B88"", # C_DSYEV failed; ""FT97"", # C_DSYEV failed; ]; ```. Several functionals like B2PLYP are tested outside `dft-bench-*` tests and are covered. In general, we have good coverage of the different runs of functionals at this point and we should rely somewhat that LibXC tests individual functionals well. So functionals purely defined by LibXC should be fine in general. The primary concerning points above are the `*wPBE*` series and `SVWN` are not well tested and are curated by us. This issue will be closed by hunting down references and adding tests for the above. FT97 and co have historically been problematic for us. I would be curious if this is due to instabilities in FT97 or something on our end.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1266
https://github.com/psi4/psi4/issues/1266:1105,Testability,test,tests,1105,"As @PeterKraus points out we have the following missing tests:. ```; missing = ['B1WC', 'B2GPPLYP', 'B2PLYP', 'B3LYPs', 'B86B95', 'B86BPBE', ; 'B96B95', 'B97-1p', 'B97-GGA1', 'BHandH', 'BHandHLYP', 'CAMY-B3LYP', ; 'CAMY-BLYP', 'CAP0', 'CORE-DSD-BLYP', 'DSD-BLYP', 'DSD-PBEB95', 'DSD-PBEP86', ; 'DSD-PBEPBE', 'HCTH407P', 'HCTHP14', 'HF', 'HJS-B97X', 'HJS-PBE', 'HJS-PBE-SOL',; 'HPBEINT', 'HSE03', 'HSE06', 'KSDT', 'KT2', 'LCY-BLYP', 'LCY-PBE', 'LRC-WPBE', ; 'MB3LYP-RC04', 'MN15', 'MOHLYP', 'MOHLYP2', 'OP-PBE', 'PBE0-13', 'PBE0-2', ; 'PBE0-DH', 'PBE1W', 'PBELYP1W', 'PTPSS', 'PW86B95', 'PW86PBE', 'PWPB95', ; 'RPBE', 'SB98-1a', 'SB98-1b', 'SB98-1c', 'SB98-2a', 'SB98-2b', 'SB98-2c', 'SVWN', ; 'TETER93', 'TH-FC', 'TH-FCFO', 'TH-FCO', 'TH-FL', 'TH1', 'TH2', 'TH3', 'TH4', ; 'TPSSLYP1W', 'TUNED-CAM-B3LYP', 'XLYP', 'ZLP', ; 'mPW1PW', 'mPW3LYP', 'mPW3PW', 'mPWLYP1', 'mPWLYP1M', ; 'mPWLYP1W', 'mPWPW', 'revB3LYP', 'wPBE', 'wPBE0', ""X1B95"", ""XB1K""]. skip = [""HCTHP76"", # scf fail; ""HJS-B88"", # C_DSYEV failed; ""FT97"", # C_DSYEV failed; ]; ```. Several functionals like B2PLYP are tested outside `dft-bench-*` tests and are covered. In general, we have good coverage of the different runs of functionals at this point and we should rely somewhat that LibXC tests individual functionals well. So functionals purely defined by LibXC should be fine in general. The primary concerning points above are the `*wPBE*` series and `SVWN` are not well tested and are curated by us. This issue will be closed by hunting down references and adding tests for the above. FT97 and co have historically been problematic for us. I would be curious if this is due to instabilities in FT97 or something on our end.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1266
https://github.com/psi4/psi4/issues/1266:1252,Testability,test,tests,1252,"As @PeterKraus points out we have the following missing tests:. ```; missing = ['B1WC', 'B2GPPLYP', 'B2PLYP', 'B3LYPs', 'B86B95', 'B86BPBE', ; 'B96B95', 'B97-1p', 'B97-GGA1', 'BHandH', 'BHandHLYP', 'CAMY-B3LYP', ; 'CAMY-BLYP', 'CAP0', 'CORE-DSD-BLYP', 'DSD-BLYP', 'DSD-PBEB95', 'DSD-PBEP86', ; 'DSD-PBEPBE', 'HCTH407P', 'HCTHP14', 'HF', 'HJS-B97X', 'HJS-PBE', 'HJS-PBE-SOL',; 'HPBEINT', 'HSE03', 'HSE06', 'KSDT', 'KT2', 'LCY-BLYP', 'LCY-PBE', 'LRC-WPBE', ; 'MB3LYP-RC04', 'MN15', 'MOHLYP', 'MOHLYP2', 'OP-PBE', 'PBE0-13', 'PBE0-2', ; 'PBE0-DH', 'PBE1W', 'PBELYP1W', 'PTPSS', 'PW86B95', 'PW86PBE', 'PWPB95', ; 'RPBE', 'SB98-1a', 'SB98-1b', 'SB98-1c', 'SB98-2a', 'SB98-2b', 'SB98-2c', 'SVWN', ; 'TETER93', 'TH-FC', 'TH-FCFO', 'TH-FCO', 'TH-FL', 'TH1', 'TH2', 'TH3', 'TH4', ; 'TPSSLYP1W', 'TUNED-CAM-B3LYP', 'XLYP', 'ZLP', ; 'mPW1PW', 'mPW3LYP', 'mPW3PW', 'mPWLYP1', 'mPWLYP1M', ; 'mPWLYP1W', 'mPWPW', 'revB3LYP', 'wPBE', 'wPBE0', ""X1B95"", ""XB1K""]. skip = [""HCTHP76"", # scf fail; ""HJS-B88"", # C_DSYEV failed; ""FT97"", # C_DSYEV failed; ]; ```. Several functionals like B2PLYP are tested outside `dft-bench-*` tests and are covered. In general, we have good coverage of the different runs of functionals at this point and we should rely somewhat that LibXC tests individual functionals well. So functionals purely defined by LibXC should be fine in general. The primary concerning points above are the `*wPBE*` series and `SVWN` are not well tested and are curated by us. This issue will be closed by hunting down references and adding tests for the above. FT97 and co have historically been problematic for us. I would be curious if this is due to instabilities in FT97 or something on our end.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1266
https://github.com/psi4/psi4/issues/1266:1437,Testability,test,tested,1437,"As @PeterKraus points out we have the following missing tests:. ```; missing = ['B1WC', 'B2GPPLYP', 'B2PLYP', 'B3LYPs', 'B86B95', 'B86BPBE', ; 'B96B95', 'B97-1p', 'B97-GGA1', 'BHandH', 'BHandHLYP', 'CAMY-B3LYP', ; 'CAMY-BLYP', 'CAP0', 'CORE-DSD-BLYP', 'DSD-BLYP', 'DSD-PBEB95', 'DSD-PBEP86', ; 'DSD-PBEPBE', 'HCTH407P', 'HCTHP14', 'HF', 'HJS-B97X', 'HJS-PBE', 'HJS-PBE-SOL',; 'HPBEINT', 'HSE03', 'HSE06', 'KSDT', 'KT2', 'LCY-BLYP', 'LCY-PBE', 'LRC-WPBE', ; 'MB3LYP-RC04', 'MN15', 'MOHLYP', 'MOHLYP2', 'OP-PBE', 'PBE0-13', 'PBE0-2', ; 'PBE0-DH', 'PBE1W', 'PBELYP1W', 'PTPSS', 'PW86B95', 'PW86PBE', 'PWPB95', ; 'RPBE', 'SB98-1a', 'SB98-1b', 'SB98-1c', 'SB98-2a', 'SB98-2b', 'SB98-2c', 'SVWN', ; 'TETER93', 'TH-FC', 'TH-FCFO', 'TH-FCO', 'TH-FL', 'TH1', 'TH2', 'TH3', 'TH4', ; 'TPSSLYP1W', 'TUNED-CAM-B3LYP', 'XLYP', 'ZLP', ; 'mPW1PW', 'mPW3LYP', 'mPW3PW', 'mPWLYP1', 'mPWLYP1M', ; 'mPWLYP1W', 'mPWPW', 'revB3LYP', 'wPBE', 'wPBE0', ""X1B95"", ""XB1K""]. skip = [""HCTHP76"", # scf fail; ""HJS-B88"", # C_DSYEV failed; ""FT97"", # C_DSYEV failed; ]; ```. Several functionals like B2PLYP are tested outside `dft-bench-*` tests and are covered. In general, we have good coverage of the different runs of functionals at this point and we should rely somewhat that LibXC tests individual functionals well. So functionals purely defined by LibXC should be fine in general. The primary concerning points above are the `*wPBE*` series and `SVWN` are not well tested and are curated by us. This issue will be closed by hunting down references and adding tests for the above. FT97 and co have historically been problematic for us. I would be curious if this is due to instabilities in FT97 or something on our end.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1266
https://github.com/psi4/psi4/issues/1266:1531,Testability,test,tests,1531,"As @PeterKraus points out we have the following missing tests:. ```; missing = ['B1WC', 'B2GPPLYP', 'B2PLYP', 'B3LYPs', 'B86B95', 'B86BPBE', ; 'B96B95', 'B97-1p', 'B97-GGA1', 'BHandH', 'BHandHLYP', 'CAMY-B3LYP', ; 'CAMY-BLYP', 'CAP0', 'CORE-DSD-BLYP', 'DSD-BLYP', 'DSD-PBEB95', 'DSD-PBEP86', ; 'DSD-PBEPBE', 'HCTH407P', 'HCTHP14', 'HF', 'HJS-B97X', 'HJS-PBE', 'HJS-PBE-SOL',; 'HPBEINT', 'HSE03', 'HSE06', 'KSDT', 'KT2', 'LCY-BLYP', 'LCY-PBE', 'LRC-WPBE', ; 'MB3LYP-RC04', 'MN15', 'MOHLYP', 'MOHLYP2', 'OP-PBE', 'PBE0-13', 'PBE0-2', ; 'PBE0-DH', 'PBE1W', 'PBELYP1W', 'PTPSS', 'PW86B95', 'PW86PBE', 'PWPB95', ; 'RPBE', 'SB98-1a', 'SB98-1b', 'SB98-1c', 'SB98-2a', 'SB98-2b', 'SB98-2c', 'SVWN', ; 'TETER93', 'TH-FC', 'TH-FCFO', 'TH-FCO', 'TH-FL', 'TH1', 'TH2', 'TH3', 'TH4', ; 'TPSSLYP1W', 'TUNED-CAM-B3LYP', 'XLYP', 'ZLP', ; 'mPW1PW', 'mPW3LYP', 'mPW3PW', 'mPWLYP1', 'mPWLYP1M', ; 'mPWLYP1W', 'mPWPW', 'revB3LYP', 'wPBE', 'wPBE0', ""X1B95"", ""XB1K""]. skip = [""HCTHP76"", # scf fail; ""HJS-B88"", # C_DSYEV failed; ""FT97"", # C_DSYEV failed; ]; ```. Several functionals like B2PLYP are tested outside `dft-bench-*` tests and are covered. In general, we have good coverage of the different runs of functionals at this point and we should rely somewhat that LibXC tests individual functionals well. So functionals purely defined by LibXC should be fine in general. The primary concerning points above are the `*wPBE*` series and `SVWN` are not well tested and are curated by us. This issue will be closed by hunting down references and adding tests for the above. FT97 and co have historically been problematic for us. I would be curious if this is due to instabilities in FT97 or something on our end.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1266
https://github.com/psi4/psi4/pull/1267:80,Testability,Test,Tests,80,## Description; Some minor fixes cherry-picked from #1061 . ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1267
https://github.com/psi4/psi4/pull/1267:154,Testability,test,tests,154,## Description; Some minor fixes cherry-picked from #1061 . ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1267
https://github.com/psi4/psi4/pull/1267:245,Testability,test,tests,245,## Description; Some minor fixes cherry-picked from #1061 . ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1267
https://github.com/psi4/psi4/pull/1268:296,Testability,Test,Tests,296,## Description; Switches times in CC modules from `tstart`/`tstop` to `timer_on`/`timer_off`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `timer_on`/`timer_off` in CC modules; - [x] Remove `void` from argument lists . ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1268
https://github.com/psi4/psi4/pull/1268:370,Testability,test,tests,370,## Description; Switches times in CC modules from `tstart`/`tstop` to `timer_on`/`timer_off`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `timer_on`/`timer_off` in CC modules; - [x] Remove `void` from argument lists . ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1268
https://github.com/psi4/psi4/pull/1268:461,Testability,test,tests,461,## Description; Switches times in CC modules from `tstart`/`tstop` to `timer_on`/`timer_off`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `timer_on`/`timer_off` in CC modules; - [x] Remove `void` from argument lists . ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1268
https://github.com/psi4/psi4/pull/1269:260,Modifiability,variab,variables,260,"## Description; Some C++ style fixes for files in the `ccenergy` folder. . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove `return;` where useless; - [x] Remove unused `ioff_` array; - [x] Localize loop variables, use `auto`; - [x] Switch to `std::` data structures. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1269
https://github.com/psi4/psi4/pull/1269:344,Testability,Test,Tests,344,"## Description; Some C++ style fixes for files in the `ccenergy` folder. . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove `return;` where useless; - [x] Remove unused `ioff_` array; - [x] Localize loop variables, use `auto`; - [x] Switch to `std::` data structures. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1269
https://github.com/psi4/psi4/pull/1269:418,Testability,test,tests,418,"## Description; Some C++ style fixes for files in the `ccenergy` folder. . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove `return;` where useless; - [x] Remove unused `ioff_` array; - [x] Localize loop variables, use `auto`; - [x] Switch to `std::` data structures. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1269
https://github.com/psi4/psi4/pull/1269:509,Testability,test,tests,509,"## Description; Some C++ style fixes for files in the `ccenergy` folder. . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove `return;` where useless; - [x] Remove unused `ioff_` array; - [x] Localize loop variables, use `auto`; - [x] Switch to `std::` data structures. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1269
https://github.com/psi4/psi4/issues/1270:573,Deployability,install,install,573,"The following input; ```; molecule {; 0 1; Li; Li 1 1.63; }. basis {; spherical; ****; Li 1; S 1 1.0; 20.0 1.0; S 1 1.0; 2.0 1.0; ****; Li 2; S 1 1.0; 10.0 1.0; S 1 1.0; 1.0 1.0; ****; }. energy('scf'); ```; should give me the first basis set on atom 1 and the second basis set on atom 2. What I get instead is. ```; $ psi4 . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8452ca2a. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 48, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1266, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 115, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 77, in pybuild_basis; return_atomlist=return_atomlist); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 683, in pyconstruct; verbose=verbose); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 902, in construct; (at + 1, key, text2)). BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/cr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1270
https://github.com/psi4/psi4/issues/1270:690,Deployability,install,install,690,"The following input; ```; molecule {; 0 1; Li; Li 1 1.63; }. basis {; spherical; ****; Li 1; S 1 1.0; 20.0 1.0; S 1 1.0; 2.0 1.0; ****; Li 2; S 1 1.0; 10.0 1.0; S 1 1.0; 1.0 1.0; ****; }. energy('scf'); ```; should give me the first basis set on atom 1 and the second basis set on atom 2. What I get instead is. ```; $ psi4 . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8452ca2a. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 48, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1266, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 115, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 77, in pybuild_basis; return_atomlist=return_atomlist); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 683, in pyconstruct; verbose=verbose); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 902, in construct; (at + 1, key, text2)). BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/cr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1270
https://github.com/psi4/psi4/issues/1270:808,Deployability,install,install,808,"The following input; ```; molecule {; 0 1; Li; Li 1 1.63; }. basis {; spherical; ****; Li 1; S 1 1.0; 20.0 1.0; S 1 1.0; 2.0 1.0; ****; Li 2; S 1 1.0; 10.0 1.0; S 1 1.0; 1.0 1.0; ****; }. energy('scf'); ```; should give me the first basis set on atom 1 and the second basis set on atom 2. What I get instead is. ```; $ psi4 . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8452ca2a. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 48, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1266, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 115, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 77, in pybuild_basis; return_atomlist=return_atomlist); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 683, in pyconstruct; verbose=verbose); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 902, in construct; (at + 1, key, text2)). BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/cr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1270
https://github.com/psi4/psi4/issues/1270:966,Deployability,install,install,966,"The following input; ```; molecule {; 0 1; Li; Li 1 1.63; }. basis {; spherical; ****; Li 1; S 1 1.0; 20.0 1.0; S 1 1.0; 2.0 1.0; ****; Li 2; S 1 1.0; 10.0 1.0; S 1 1.0; 1.0 1.0; ****; }. energy('scf'); ```; should give me the first basis set on atom 1 and the second basis set on atom 2. What I get instead is. ```; $ psi4 . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8452ca2a. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 48, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1266, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 115, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 77, in pybuild_basis; return_atomlist=return_atomlist); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 683, in pyconstruct; verbose=verbose); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 902, in construct; (at + 1, key, text2)). BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/cr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1270
https://github.com/psi4/psi4/issues/1270:1111,Deployability,install,install,1111,"; ****; Li 1; S 1 1.0; 20.0 1.0; S 1 1.0; 2.0 1.0; ****; Li 2; S 1 1.0; 10.0 1.0; S 1 1.0; 1.0 1.0; ****; }. energy('scf'); ```; should give me the first basis set on atom 1 and the second basis set on atom 2. What I get instead is. ```; $ psi4 . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8452ca2a. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 48, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1266, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 115, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 77, in pybuild_basis; return_atomlist=return_atomlist); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 683, in pyconstruct; verbose=verbose); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 902, in construct; (at + 1, key, text2)). BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1270
https://github.com/psi4/psi4/issues/1270:1288,Deployability,install,install,1288," S 1 1.0; 20.0 1.0; S 1 1.0; 2.0 1.0; ****; Li 2; S 1 1.0; 10.0 1.0; S 1 1.0; 1.0 1.0; ****; }. energy('scf'); ```; should give me the first basis set on atom 1 and the second basis set on atom 2. What I get instead is. ```; $ psi4 . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8452ca2a. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 48, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1266, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 115, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 77, in pybuild_basis; return_atomlist=return_atomlist); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 683, in pyconstruct; verbose=verbose); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 902, in construct; (at + 1, key, text2)). BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8452ca2a; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1270
https://github.com/psi4/psi4/issues/1270:1448,Deployability,install,install,1448," S 1 1.0; 20.0 1.0; S 1 1.0; 2.0 1.0; ****; Li 2; S 1 1.0; 10.0 1.0; S 1 1.0; 1.0 1.0; ****; }. energy('scf'); ```; should give me the first basis set on atom 1 and the second basis set on atom 2. What I get instead is. ```; $ psi4 . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8452ca2a. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 48, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1266, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 115, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 77, in pybuild_basis; return_atomlist=return_atomlist); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 683, in pyconstruct; verbose=verbose); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 902, in construct; (at + 1, key, text2)). BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8452ca2a; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1270
https://github.com/psi4/psi4/issues/1270:1582,Deployability,install,install,1582," S 1 1.0; 20.0 1.0; S 1 1.0; 2.0 1.0; ****; Li 2; S 1 1.0; 10.0 1.0; S 1 1.0; 1.0 1.0; ****; }. energy('scf'); ```; should give me the first basis set on atom 1 and the second basis set on atom 2. What I get instead is. ```; $ psi4 . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8452ca2a. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 48, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1266, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 115, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 77, in pybuild_basis; return_atomlist=return_atomlist); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 683, in pyconstruct; verbose=verbose); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 902, in construct; (at + 1, key, text2)). BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8452ca2a; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1270
https://github.com/psi4/psi4/issues/1270:1699,Deployability,install,install,1699," S 1 1.0; 20.0 1.0; S 1 1.0; 2.0 1.0; ****; Li 2; S 1 1.0; 10.0 1.0; S 1 1.0; 1.0 1.0; ****; }. energy('scf'); ```; should give me the first basis set on atom 1 and the second basis set on atom 2. What I get instead is. ```; $ psi4 . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8452ca2a. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 48, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1266, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 115, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 77, in pybuild_basis; return_atomlist=return_atomlist); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 683, in pyconstruct; verbose=verbose); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 902, in construct; (at + 1, key, text2)). BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8452ca2a; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1270
https://github.com/psi4/psi4/issues/1270:2030,Deployability,install,install,2030," S 1 1.0; 20.0 1.0; S 1 1.0; 2.0 1.0; ****; Li 2; S 1 1.0; 10.0 1.0; S 1 1.0; 1.0 1.0; ****; }. energy('scf'); ```; should give me the first basis set on atom 1 and the second basis set on atom 2. What I get instead is. ```; $ psi4 . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8452ca2a. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 48, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1266, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 115, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 77, in pybuild_basis; return_atomlist=return_atomlist); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 683, in pyconstruct; verbose=verbose); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 902, in construct; (at + 1, key, text2)). BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8452ca2a; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1270
https://github.com/psi4/psi4/issues/1270:188,Energy Efficiency,energy,energy,188,"The following input; ```; molecule {; 0 1; Li; Li 1 1.63; }. basis {; spherical; ****; Li 1; S 1 1.0; 20.0 1.0; S 1 1.0; 2.0 1.0; ****; Li 2; S 1 1.0; 10.0 1.0; S 1 1.0; 1.0 1.0; ****; }. energy('scf'); ```; should give me the first basis set on atom 1 and the second basis set on atom 2. What I get instead is. ```; $ psi4 . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8452ca2a. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 48, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1266, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 115, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 77, in pybuild_basis; return_atomlist=return_atomlist); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 683, in pyconstruct; verbose=verbose); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 902, in construct; (at + 1, key, text2)). BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/cr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1270
https://github.com/psi4/psi4/issues/1270:857,Energy Efficiency,energy,energy,857,"The following input; ```; molecule {; 0 1; Li; Li 1 1.63; }. basis {; spherical; ****; Li 1; S 1 1.0; 20.0 1.0; S 1 1.0; 2.0 1.0; ****; Li 2; S 1 1.0; 10.0 1.0; S 1 1.0; 1.0 1.0; ****; }. energy('scf'); ```; should give me the first basis set on atom 1 and the second basis set on atom 2. What I get instead is. ```; $ psi4 . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8452ca2a. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 48, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1266, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 115, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 77, in pybuild_basis; return_atomlist=return_atomlist); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 683, in pyconstruct; verbose=verbose); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 902, in construct; (at + 1, key, text2)). BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/cr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1270
https://github.com/psi4/psi4/issues/1270:883,Energy Efficiency,energy,energy,883,"The following input; ```; molecule {; 0 1; Li; Li 1 1.63; }. basis {; spherical; ****; Li 1; S 1 1.0; 20.0 1.0; S 1 1.0; 2.0 1.0; ****; Li 2; S 1 1.0; 10.0 1.0; S 1 1.0; 1.0 1.0; ****; }. energy('scf'); ```; should give me the first basis set on atom 1 and the second basis set on atom 2. What I get instead is. ```; $ psi4 . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8452ca2a. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 48, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1266, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 115, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 77, in pybuild_basis; return_atomlist=return_atomlist); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 683, in pyconstruct; verbose=verbose); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 902, in construct; (at + 1, key, text2)). BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/cr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1270
https://github.com/psi4/psi4/issues/1271:145,Availability,fault,fault,145,"Reposted from forum with modification. The following attempt at open-shell SAPT fails with segfault `forrtl: severe (174): SIGSEGV, segmentation fault occurred`. Original reporter concluded it was a problem with Calcium, as modifying it to Chlorine (along with the charges) resulted in a successful computation. The example molecule is reduced from the original report, for ease of reproduction. 40 GB is (hopefully) enough to indicate this is not a problem of needing more memory. ```memory 40 gb; molecule {; 0 1; H -0.803001 1.098737 0.000360; H -0.919454 -1.089722 0.000521; O -0.035537 -0.067631 0.000218; --; 2 1; Ca 2.281447 -0.004247 -0.000154; units angstrom; no_reorient; symmetry c1; }. set globals {; scf_type df; FREEZE_CORE true; }. basis {; assign aug-cc-pVTZ; assign Ca def2-TZVPP; }. df_basis_scf {; assign aug-cc-pVTZ-jkfit; assign Ca def2-TZVPP-jkfit; }. df_basis_sapt {; assign aug-cc-pVTZ-RI; assign Ca def2-TZVPP-ri; }. energy('sapt0')```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1271
https://github.com/psi4/psi4/issues/1271:265,Energy Efficiency,charge,charges,265,"Reposted from forum with modification. The following attempt at open-shell SAPT fails with segfault `forrtl: severe (174): SIGSEGV, segmentation fault occurred`. Original reporter concluded it was a problem with Calcium, as modifying it to Chlorine (along with the charges) resulted in a successful computation. The example molecule is reduced from the original report, for ease of reproduction. 40 GB is (hopefully) enough to indicate this is not a problem of needing more memory. ```memory 40 gb; molecule {; 0 1; H -0.803001 1.098737 0.000360; H -0.919454 -1.089722 0.000521; O -0.035537 -0.067631 0.000218; --; 2 1; Ca 2.281447 -0.004247 -0.000154; units angstrom; no_reorient; symmetry c1; }. set globals {; scf_type df; FREEZE_CORE true; }. basis {; assign aug-cc-pVTZ; assign Ca def2-TZVPP; }. df_basis_scf {; assign aug-cc-pVTZ-jkfit; assign Ca def2-TZVPP-jkfit; }. df_basis_sapt {; assign aug-cc-pVTZ-RI; assign Ca def2-TZVPP-ri; }. energy('sapt0')```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1271
https://github.com/psi4/psi4/issues/1271:336,Energy Efficiency,reduce,reduced,336,"Reposted from forum with modification. The following attempt at open-shell SAPT fails with segfault `forrtl: severe (174): SIGSEGV, segmentation fault occurred`. Original reporter concluded it was a problem with Calcium, as modifying it to Chlorine (along with the charges) resulted in a successful computation. The example molecule is reduced from the original report, for ease of reproduction. 40 GB is (hopefully) enough to indicate this is not a problem of needing more memory. ```memory 40 gb; molecule {; 0 1; H -0.803001 1.098737 0.000360; H -0.919454 -1.089722 0.000521; O -0.035537 -0.067631 0.000218; --; 2 1; Ca 2.281447 -0.004247 -0.000154; units angstrom; no_reorient; symmetry c1; }. set globals {; scf_type df; FREEZE_CORE true; }. basis {; assign aug-cc-pVTZ; assign Ca def2-TZVPP; }. df_basis_scf {; assign aug-cc-pVTZ-jkfit; assign Ca def2-TZVPP-jkfit; }. df_basis_sapt {; assign aug-cc-pVTZ-RI; assign Ca def2-TZVPP-ri; }. energy('sapt0')```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1271
https://github.com/psi4/psi4/issues/1271:942,Energy Efficiency,energy,energy,942,"Reposted from forum with modification. The following attempt at open-shell SAPT fails with segfault `forrtl: severe (174): SIGSEGV, segmentation fault occurred`. Original reporter concluded it was a problem with Calcium, as modifying it to Chlorine (along with the charges) resulted in a successful computation. The example molecule is reduced from the original report, for ease of reproduction. 40 GB is (hopefully) enough to indicate this is not a problem of needing more memory. ```memory 40 gb; molecule {; 0 1; H -0.803001 1.098737 0.000360; H -0.919454 -1.089722 0.000521; O -0.035537 -0.067631 0.000218; --; 2 1; Ca 2.281447 -0.004247 -0.000154; units angstrom; no_reorient; symmetry c1; }. set globals {; scf_type df; FREEZE_CORE true; }. basis {; assign aug-cc-pVTZ; assign Ca def2-TZVPP; }. df_basis_scf {; assign aug-cc-pVTZ-jkfit; assign Ca def2-TZVPP-jkfit; }. df_basis_sapt {; assign aug-cc-pVTZ-RI; assign Ca def2-TZVPP-ri; }. energy('sapt0')```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1271
https://github.com/psi4/psi4/issues/1272:282,Energy Efficiency,energy,energy,282,"Reposted from the forum. I can't investigate this myself, due to being banned by Gaussian. 1. The MO and Density blocks are being mislabeled, for all levels of theory as far as I can tell. This prevents 3rd party apps from parsing the files correctly. The labels for the MO orbital energy and coefficients blocks should always be as follows:. Alpha Orbital Energies; Alpha MO Coefficients; Beta Orbital Energies; Beta MO Coefficients. Title case is important. The Density blocks should be labeled according to the level of theory as follows:. Total SCF Density (this should be the label for both HF and DFT); Total MP2 Density (don’t prepend ‘DF’ to any methods when using density-fitting); Total MP3 Density; Total MP4 Density; Total CC Density; Total CI Density. Spin Density should be labeled similarly:. Spin SCF Density (this should be the label for HF, DFT, and CASSCF); Spin MP2 Density; Spin MP3 Density; Spin MP4 Density; Spin CC Density; Spin CI Density. 2. Don’t write the Beta blocks for RHF jobs, as their presence makes 3rd party apps think that the level of theory is UHF, and that in turn leads to unnecessarily expensive calcs. 3. If canonical orbitals have been removed from the basis due to S_TOLERANCE, then the “number of independent functions” in the .fchk file should be the resulting number of canonical orbitals. Currently the “number of independent functions” always seems to be equal to the “number of basis functions”, which screws up parsing because the matrices aren’t nbasis x nbasis in this case. 4. This wasn’t happening in v1.1, but in v1.2, writing the .fchk file triggers printing of the MOs to the output file, which bloats the file tremendously. I can’t figure out how to turn this off, but it is undesirable as a default behavior.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1272
https://github.com/psi4/psi4/pull/1273:16,Modifiability,Rewrite,Rewrite,16,## Description; Rewrite of the CC wavefunction as per #1247 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1273
https://github.com/psi4/psi4/pull/1273:237,Testability,Test,Tests,237,## Description; Rewrite of the CC wavefunction as per #1247 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1273
https://github.com/psi4/psi4/pull/1273:311,Testability,test,tests,311,## Description; Rewrite of the CC wavefunction as per #1247 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1273
https://github.com/psi4/psi4/pull/1273:402,Testability,test,tests,402,## Description; Rewrite of the CC wavefunction as per #1247 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1273
https://github.com/psi4/psi4/pull/1275:862,Deployability,install,install,862,"## Description; Third in the qcelemental series, following #1234 (no use reviewing this one until that one goes through and this one's rebased. This moves molecule parsing out of `driver/qcdb/molparse` and into `qcelemental.molparse`. Since the latter are files copied from the former last week, no real concern about different behavior. EDIT: now with an actual unique commit!. EDIT: Skipping #1234 as intermediate, so copying that checklist to here.; - [x] driver-side physconst --> no change; - [x] driver-side psifiles --> `psi4.driver.constants.PSIF_` --> `psi4.driver.psif.PSIF_`; - [x] psiapi --> can't `from psi4.driver.constants import c`, instead `psi4.driver.constants.c` or `c = psi4.driver.constants.c`; - [x] psithon --> no change; - [x] qcdb --> `psi_c` --> `qcel.constants.c`; - [x] put in a basic connection to cmake. it'll clone it for you and install next to psi (which means pythonpath picks it up). ## Checklist; - [ ] ~Tests added for any new features~; - [x] full test suite run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1275
https://github.com/psi4/psi4/pull/1275:941,Testability,Test,Tests,941,"## Description; Third in the qcelemental series, following #1234 (no use reviewing this one until that one goes through and this one's rebased. This moves molecule parsing out of `driver/qcdb/molparse` and into `qcelemental.molparse`. Since the latter are files copied from the former last week, no real concern about different behavior. EDIT: now with an actual unique commit!. EDIT: Skipping #1234 as intermediate, so copying that checklist to here.; - [x] driver-side physconst --> no change; - [x] driver-side psifiles --> `psi4.driver.constants.PSIF_` --> `psi4.driver.psif.PSIF_`; - [x] psiapi --> can't `from psi4.driver.constants import c`, instead `psi4.driver.constants.c` or `c = psi4.driver.constants.c`; - [x] psithon --> no change; - [x] qcdb --> `psi_c` --> `qcel.constants.c`; - [x] put in a basic connection to cmake. it'll clone it for you and install next to psi (which means pythonpath picks it up). ## Checklist; - [ ] ~Tests added for any new features~; - [x] full test suite run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1275
https://github.com/psi4/psi4/pull/1275:987,Testability,test,test,987,"## Description; Third in the qcelemental series, following #1234 (no use reviewing this one until that one goes through and this one's rebased. This moves molecule parsing out of `driver/qcdb/molparse` and into `qcelemental.molparse`. Since the latter are files copied from the former last week, no real concern about different behavior. EDIT: now with an actual unique commit!. EDIT: Skipping #1234 as intermediate, so copying that checklist to here.; - [x] driver-side physconst --> no change; - [x] driver-side psifiles --> `psi4.driver.constants.PSIF_` --> `psi4.driver.psif.PSIF_`; - [x] psiapi --> can't `from psi4.driver.constants import c`, instead `psi4.driver.constants.c` or `c = psi4.driver.constants.c`; - [x] psithon --> no change; - [x] qcdb --> `psi_c` --> `qcel.constants.c`; - [x] put in a basic connection to cmake. it'll clone it for you and install next to psi (which means pythonpath picks it up). ## Checklist; - [ ] ~Tests added for any new features~; - [x] full test suite run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1275
https://github.com/psi4/psi4/pull/1276:221,Deployability,Update,Update,221,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `pytest_output.dat` deleting in `tear_down()`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1276
https://github.com/psi4/psi4/pull/1276:244,Testability,test,tests,244,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `pytest_output.dat` deleting in `tear_down()`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1276
https://github.com/psi4/psi4/pull/1276:273,Testability,Test,Tests,273,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `pytest_output.dat` deleting in `tear_down()`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1276
https://github.com/psi4/psi4/pull/1276:349,Testability,test,tests,349,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `pytest_output.dat` deleting in `tear_down()`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1276
https://github.com/psi4/psi4/pull/1276:440,Testability,test,tests,440,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `pytest_output.dat` deleting in `tear_down()`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1276
https://github.com/psi4/psi4/pull/1277:119,Performance,perform,performs,119,## Description; Adds a constructor to `Wavefunction` taking a reference wavefunction as argument. The body of the CTOR performs:; ```; shallow_copy(reference_wavefunction);; set_reference_wavefunction(reference_wavefunction);; ```; which seemed to be otherwise copy-pasted in correlated wavefunction CTORs. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add CTOR from `SharedWavefunction` in `Wavefunction` class ; - [x] Rework CTOR in `CIWavefunction` to use the new CTOR in the base class.; - [x] Mark one-parameter CTOR for `CIWavefunction` as `explicit`; - [x] Use delegating CTOR for one-parameter CTOR of `CIWavefunction`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1277
https://github.com/psi4/psi4/pull/1277:700,Testability,Test,Tests,700,## Description; Adds a constructor to `Wavefunction` taking a reference wavefunction as argument. The body of the CTOR performs:; ```; shallow_copy(reference_wavefunction);; set_reference_wavefunction(reference_wavefunction);; ```; which seemed to be otherwise copy-pasted in correlated wavefunction CTORs. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add CTOR from `SharedWavefunction` in `Wavefunction` class ; - [x] Rework CTOR in `CIWavefunction` to use the new CTOR in the base class.; - [x] Mark one-parameter CTOR for `CIWavefunction` as `explicit`; - [x] Use delegating CTOR for one-parameter CTOR of `CIWavefunction`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1277
https://github.com/psi4/psi4/pull/1277:774,Testability,test,tests,774,## Description; Adds a constructor to `Wavefunction` taking a reference wavefunction as argument. The body of the CTOR performs:; ```; shallow_copy(reference_wavefunction);; set_reference_wavefunction(reference_wavefunction);; ```; which seemed to be otherwise copy-pasted in correlated wavefunction CTORs. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add CTOR from `SharedWavefunction` in `Wavefunction` class ; - [x] Rework CTOR in `CIWavefunction` to use the new CTOR in the base class.; - [x] Mark one-parameter CTOR for `CIWavefunction` as `explicit`; - [x] Use delegating CTOR for one-parameter CTOR of `CIWavefunction`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1277
https://github.com/psi4/psi4/pull/1277:865,Testability,test,tests,865,## Description; Adds a constructor to `Wavefunction` taking a reference wavefunction as argument. The body of the CTOR performs:; ```; shallow_copy(reference_wavefunction);; set_reference_wavefunction(reference_wavefunction);; ```; which seemed to be otherwise copy-pasted in correlated wavefunction CTORs. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add CTOR from `SharedWavefunction` in `Wavefunction` class ; - [x] Rework CTOR in `CIWavefunction` to use the new CTOR in the base class.; - [x] Mark one-parameter CTOR for `CIWavefunction` as `explicit`; - [x] Use delegating CTOR for one-parameter CTOR of `CIWavefunction`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1277
https://github.com/psi4/psi4/pull/1278:344,Testability,Test,Tests,344,"## Description; This is part of *Psi4* porting to Windows (#933). *Appveyor* is switching to Python 3.7 by default, but some package are not yet ready. So stay with Python 3.6 for a while. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use Python 3.6 for Windows builds. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1278
https://github.com/psi4/psi4/pull/1278:420,Testability,test,tests,420,"## Description; This is part of *Psi4* porting to Windows (#933). *Appveyor* is switching to Python 3.7 by default, but some package are not yet ready. So stay with Python 3.6 for a while. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use Python 3.6 for Windows builds. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1278
https://github.com/psi4/psi4/pull/1278:511,Testability,test,tests,511,"## Description; This is part of *Psi4* porting to Windows (#933). *Appveyor* is switching to Python 3.7 by default, but some package are not yet ready. So stay with Python 3.6 for a while. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use Python 3.6 for Windows builds. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1278
https://github.com/psi4/psi4/issues/1279:1276,Deployability,install,install,1276,"55PM; Psi4 wall time for execution: 0:00:50.18. *** Psi4 exiting successfully. Buy a developer a beer!; ecution: 0:00:50.91. *** Psi4 exiting successfully. Buy a developer a beer!; ```. The worst output was that one time I got two summaries for CBS energies at the end of the file, and the results were different. ```; ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -0.15577370 xtpl_highest_1; total CBS -1011.27544804; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 2, 4, 6, 14, 16, 18 entry C line 90 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 03:03PM; Psi4 wall time for execution: 1 day, 4:22:27.10. *** Psi4 exiting successfully. Buy a developer a beer!; --------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1279
https://github.com/psi4/psi4/issues/1279:1415,Deployability,install,install,1415," developer a beer!; ```. The worst output was that one time I got two summaries for CBS energies at the end of the file, and the results were different. ```; ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -0.15577370 xtpl_highest_1; total CBS -1011.27544804; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 2, 4, 6, 14, 16, 18 entry C line 90 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 03:03PM; Psi4 wall time for execution: 1 day, 4:22:27.10. *** Psi4 exiting successfully. Buy a developer a beer!; --------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -4.79308051 xtpl_highest_1; total CBS -1015.91275485; ----------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1279
https://github.com/psi4/psi4/issues/1279:1556,Deployability,install,install,1556,"e different. ```; ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -0.15577370 xtpl_highest_1; total CBS -1011.27544804; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 2, 4, 6, 14, 16, 18 entry C line 90 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 03:03PM; Psi4 wall time for execution: 1 day, 4:22:27.10. *** Psi4 exiting successfully. Buy a developer a beer!; --------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -4.79308051 xtpl_highest_1; total CBS -1015.91275485; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1279
https://github.com/psi4/psi4/issues/1279:1697,Deployability,install,install,1697,"asis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -0.15577370 xtpl_highest_1; total CBS -1011.27544804; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 2, 4, 6, 14, 16, 18 entry C line 90 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 03:03PM; Psi4 wall time for execution: 1 day, 4:22:27.10. *** Psi4 exiting successfully. Buy a developer a beer!; --------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -4.79308051 xtpl_highest_1; total CBS -1015.91275485; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.g",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1279
https://github.com/psi4/psi4/issues/1279:2626,Deployability,install,install,2626,"e/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 03:03PM; Psi4 wall time for execution: 1 day, 4:22:27.10. *** Psi4 exiting successfully. Buy a developer a beer!; --------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -4.79308051 xtpl_highest_1; total CBS -1015.91275485; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 2, 4, 6, 14, 16, 18 entry C line 90 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 01:43PM; Psi4 wall time for execution: 1 day, 3:02:31.40. *** Psi4 exiting successfully. Buy a developer a beer!; ```. Note that the latter output, which is wrong, supposedly finished before the former. I have seen this behavior when running 6-core jobs in various different machines and for various Psi4 versions, including `Psi4 1.2.1 release, Git: Rev {HEAD} 406f4de`, `Psi4 1.3a1.dev315, Git: Rev {HEAD} 28d97e1 dirty`, `Psi4 1.2a1.dev",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1279
https://github.com/psi4/psi4/issues/1279:2765,Deployability,install,install,2765,"p.gbs. Psi4 stopped on: Tuesday, 18 September 2018 03:03PM; Psi4 wall time for execution: 1 day, 4:22:27.10. *** Psi4 exiting successfully. Buy a developer a beer!; --------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -4.79308051 xtpl_highest_1; total CBS -1015.91275485; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 2, 4, 6, 14, 16, 18 entry C line 90 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 01:43PM; Psi4 wall time for execution: 1 day, 3:02:31.40. *** Psi4 exiting successfully. Buy a developer a beer!; ```. Note that the latter output, which is wrong, supposedly finished before the former. I have seen this behavior when running 6-core jobs in various different machines and for various Psi4 versions, including `Psi4 1.2.1 release, Git: Rev {HEAD} 406f4de`, `Psi4 1.3a1.dev315, Git: Rev {HEAD} 28d97e1 dirty`, `Psi4 1.2a1.dev829, Git: Rev {HEAD} 43b5ac2 dirty` and `Psi4 1.2.1 release, Git: Rev {HEAD} 406f4de`. Also, I found this problem for CBS calculations as well as for some MP2/au",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1279
https://github.com/psi4/psi4/issues/1279:2906,Deployability,install,install,2906,"y, 4:22:27.10. *** Psi4 exiting successfully. Buy a developer a beer!; --------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -4.79308051 xtpl_highest_1; total CBS -1015.91275485; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 2, 4, 6, 14, 16, 18 entry C line 90 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 01:43PM; Psi4 wall time for execution: 1 day, 3:02:31.40. *** Psi4 exiting successfully. Buy a developer a beer!; ```. Note that the latter output, which is wrong, supposedly finished before the former. I have seen this behavior when running 6-core jobs in various different machines and for various Psi4 versions, including `Psi4 1.2.1 release, Git: Rev {HEAD} 406f4de`, `Psi4 1.3a1.dev315, Git: Rev {HEAD} 28d97e1 dirty`, `Psi4 1.2a1.dev829, Git: Rev {HEAD} 43b5ac2 dirty` and `Psi4 1.2.1 release, Git: Rev {HEAD} 406f4de`. Also, I found this problem for CBS calculations as well as for some MP2/aug-cc-pvdz. This happened only a handful of times out of thousands of calculations that I ran.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1279
https://github.com/psi4/psi4/issues/1279:3047,Deployability,install,install,3047,"y, 4:22:27.10. *** Psi4 exiting successfully. Buy a developer a beer!; --------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -4.79308051 xtpl_highest_1; total CBS -1015.91275485; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 2, 4, 6, 14, 16, 18 entry C line 90 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 01:43PM; Psi4 wall time for execution: 1 day, 3:02:31.40. *** Psi4 exiting successfully. Buy a developer a beer!; ```. Note that the latter output, which is wrong, supposedly finished before the former. I have seen this behavior when running 6-core jobs in various different machines and for various Psi4 versions, including `Psi4 1.2.1 release, Git: Rev {HEAD} 406f4de`, `Psi4 1.3a1.dev315, Git: Rev {HEAD} 28d97e1 dirty`, `Psi4 1.2a1.dev829, Git: Rev {HEAD} 43b5ac2 dirty` and `Psi4 1.2.1 release, Git: Rev {HEAD} 406f4de`. Also, I found this problem for CBS calculations as well as for some MP2/aug-cc-pvdz. This happened only a handful of times out of thousands of calculations that I ran.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1279
https://github.com/psi4/psi4/issues/1279:3492,Deployability,release,release,3492,"y, 4:22:27.10. *** Psi4 exiting successfully. Buy a developer a beer!; --------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -4.79308051 xtpl_highest_1; total CBS -1015.91275485; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 2, 4, 6, 14, 16, 18 entry C line 90 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 01:43PM; Psi4 wall time for execution: 1 day, 3:02:31.40. *** Psi4 exiting successfully. Buy a developer a beer!; ```. Note that the latter output, which is wrong, supposedly finished before the former. I have seen this behavior when running 6-core jobs in various different machines and for various Psi4 versions, including `Psi4 1.2.1 release, Git: Rev {HEAD} 406f4de`, `Psi4 1.3a1.dev315, Git: Rev {HEAD} 28d97e1 dirty`, `Psi4 1.2a1.dev829, Git: Rev {HEAD} 43b5ac2 dirty` and `Psi4 1.2.1 release, Git: Rev {HEAD} 406f4de`. Also, I found this problem for CBS calculations as well as for some MP2/aug-cc-pvdz. This happened only a handful of times out of thousands of calculations that I ran.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1279
https://github.com/psi4/psi4/issues/1279:3646,Deployability,release,release,3646,"y, 4:22:27.10. *** Psi4 exiting successfully. Buy a developer a beer!; --------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -4.79308051 xtpl_highest_1; total CBS -1015.91275485; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 2, 4, 6, 14, 16, 18 entry C line 90 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 01:43PM; Psi4 wall time for execution: 1 day, 3:02:31.40. *** Psi4 exiting successfully. Buy a developer a beer!; ```. Note that the latter output, which is wrong, supposedly finished before the former. I have seen this behavior when running 6-core jobs in various different machines and for various Psi4 versions, including `Psi4 1.2.1 release, Git: Rev {HEAD} 406f4de`, `Psi4 1.3a1.dev315, Git: Rev {HEAD} 28d97e1 dirty`, `Psi4 1.2a1.dev829, Git: Rev {HEAD} 43b5ac2 dirty` and `Psi4 1.2.1 release, Git: Rev {HEAD} 406f4de`. Also, I found this problem for CBS calculations as well as for some MP2/aug-cc-pvdz. This happened only a handful of times out of thousands of calculations that I ran.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1279
https://github.com/psi4/psi4/issues/1279:690,Energy Efficiency,Energy,Energy,690,"I have recently noticed a weird problem for a handful of Psi4 output. Psi4 occasionally terminates the output file with two consecutive ""Buy a developer a beer!"" statements as you can see here:. ```; Psi4 stopped on: Sunday, 12 August 2018 05:55PM; Psi4 wall time for execution: 0:00:50.18. *** Psi4 exiting successfully. Buy a developer a beer!; ecution: 0:00:50.91. *** Psi4 exiting successfully. Buy a developer a beer!; ```. The worst output was that one time I got two summaries for CBS energies at the end of the file, and the results were different. ```; ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -0.15577370 xtpl_highest_1; total CBS -1011.27544804; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 2, 4, 6, 14, 16, 18 entry C line 90 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 03:03PM; Psi4 wall time for execution: 1 day, 4:22:27.10. *** Psi4 exiting successfully. Buy a developer a beer!; ----------------------------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1279
https://github.com/psi4/psi4/issues/1279:2040,Energy Efficiency,Energy,Energy,2040,"-----------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 2, 4, 6, 14, 16, 18 entry C line 90 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 03:03PM; Psi4 wall time for execution: 1 day, 4:22:27.10. *** Psi4 exiting successfully. Buy a developer a beer!; --------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -4.79308051 xtpl_highest_1; total CBS -1015.91275485; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 2, 4, 6, 14, 16, 18 entry C line 90 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1279
https://github.com/psi4/psi4/issues/1279:1131,Performance,Load,Loading,1131,"onally terminates the output file with two consecutive ""Buy a developer a beer!"" statements as you can see here:. ```; Psi4 stopped on: Sunday, 12 August 2018 05:55PM; Psi4 wall time for execution: 0:00:50.18. *** Psi4 exiting successfully. Buy a developer a beer!; ecution: 0:00:50.91. *** Psi4 exiting successfully. Buy a developer a beer!; ```. The worst output was that one time I got two summaries for CBS energies at the end of the file, and the results were different. ```; ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -0.15577370 xtpl_highest_1; total CBS -1011.27544804; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 2, 4, 6, 14, 16, 18 entry C line 90 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 03:03PM; Psi4 wall time for execution: 1 day, 4:22:27.10. *** Psi4 exiting successfully. Buy a developer a beer!; --------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ----------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1279
https://github.com/psi4/psi4/issues/1279:2481,Performance,Load,Loading,2481,"up-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 03:03PM; Psi4 wall time for execution: 1 day, 4:22:27.10. *** Psi4 exiting successfully. Buy a developer a beer!; --------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -4.79308051 xtpl_highest_1; total CBS -1015.91275485; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 2, 4, 6, 14, 16, 18 entry C line 90 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 01:43PM; Psi4 wall time for execution: 1 day, 3:02:31.40. *** Psi4 exiting successfully. Buy a developer a beer!; ```. Note that the latter output, which is wrong, supposedly finished before the former. I have seen this behavior when running 6-core jobs in various different ma",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1279
https://github.com/psi4/psi4/issues/1280:283,Performance,bottleneck,bottleneck,283,"As written on psi4 forum, me and other users experience bad scaling of Pcm calculations. http://forum.psicode.org/t/pcmsolver-parallelisation/817/4. I agree that the actual calculation by pcm solver is only a small fraction of the total time used by psi4, so I currently believe the bottleneck must be on psi4 side. example input and logs and timer for acetic acid with pbe/def2-tzvppd (named pcm and scf accordingly):; [acetic_acid.zip](https://github.com/psi4/psi4/files/2451532/acetic_acid.zip). pcm_4thr:; ```; Total time:; 	user time = 205.49 seconds = 3.42 minutes; 	system time = 1.18 seconds = 0.02 minutes; 	total time = 150 seconds = 2.50 minutes; ```; pcm_1thr:; ```; Total time:; 	user time = 157.73 seconds = 2.63 minutes; 	system time = 0.41 seconds = 0.01 minutes; 	total time = 158 seconds = 2.63 minutes; ```; scf_4thr:; ```; Total time:; 	user time = 66.19 seconds = 1.10 minutes; 	system time = 0.58 seconds = 0.01 minutes; 	total time = 18 seconds = 0.30 minutes; ```; scf_1thr:; ```; Total time:; 	user time = 28.61 seconds = 0.48 minutes; 	system time = 0.25 seconds = 0.00 minutes; 	total time = 29 seconds = 0.48 minutes; ```; standalone pcmsolver call for same pcm input (yes done 10 times in the scf iteration, but no where near of being the bottleneck):; ```; real	0m0.462s; user	0m0.190s; sys	0m0.097s; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1280
https://github.com/psi4/psi4/issues/1280:1268,Performance,bottleneck,bottleneck,1268,"As written on psi4 forum, me and other users experience bad scaling of Pcm calculations. http://forum.psicode.org/t/pcmsolver-parallelisation/817/4. I agree that the actual calculation by pcm solver is only a small fraction of the total time used by psi4, so I currently believe the bottleneck must be on psi4 side. example input and logs and timer for acetic acid with pbe/def2-tzvppd (named pcm and scf accordingly):; [acetic_acid.zip](https://github.com/psi4/psi4/files/2451532/acetic_acid.zip). pcm_4thr:; ```; Total time:; 	user time = 205.49 seconds = 3.42 minutes; 	system time = 1.18 seconds = 0.02 minutes; 	total time = 150 seconds = 2.50 minutes; ```; pcm_1thr:; ```; Total time:; 	user time = 157.73 seconds = 2.63 minutes; 	system time = 0.41 seconds = 0.01 minutes; 	total time = 158 seconds = 2.63 minutes; ```; scf_4thr:; ```; Total time:; 	user time = 66.19 seconds = 1.10 minutes; 	system time = 0.58 seconds = 0.01 minutes; 	total time = 18 seconds = 0.30 minutes; ```; scf_1thr:; ```; Total time:; 	user time = 28.61 seconds = 0.48 minutes; 	system time = 0.25 seconds = 0.00 minutes; 	total time = 29 seconds = 0.48 minutes; ```; standalone pcmsolver call for same pcm input (yes done 10 times in the scf iteration, but no where near of being the bottleneck):; ```; real	0m0.462s; user	0m0.190s; sys	0m0.097s; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1280
https://github.com/psi4/psi4/issues/1280:334,Testability,log,logs,334,"As written on psi4 forum, me and other users experience bad scaling of Pcm calculations. http://forum.psicode.org/t/pcmsolver-parallelisation/817/4. I agree that the actual calculation by pcm solver is only a small fraction of the total time used by psi4, so I currently believe the bottleneck must be on psi4 side. example input and logs and timer for acetic acid with pbe/def2-tzvppd (named pcm and scf accordingly):; [acetic_acid.zip](https://github.com/psi4/psi4/files/2451532/acetic_acid.zip). pcm_4thr:; ```; Total time:; 	user time = 205.49 seconds = 3.42 minutes; 	system time = 1.18 seconds = 0.02 minutes; 	total time = 150 seconds = 2.50 minutes; ```; pcm_1thr:; ```; Total time:; 	user time = 157.73 seconds = 2.63 minutes; 	system time = 0.41 seconds = 0.01 minutes; 	total time = 158 seconds = 2.63 minutes; ```; scf_4thr:; ```; Total time:; 	user time = 66.19 seconds = 1.10 minutes; 	system time = 0.58 seconds = 0.01 minutes; 	total time = 18 seconds = 0.30 minutes; ```; scf_1thr:; ```; Total time:; 	user time = 28.61 seconds = 0.48 minutes; 	system time = 0.25 seconds = 0.00 minutes; 	total time = 29 seconds = 0.48 minutes; ```; standalone pcmsolver call for same pcm input (yes done 10 times in the scf iteration, but no where near of being the bottleneck):; ```; real	0m0.462s; user	0m0.190s; sys	0m0.097s; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1280
https://github.com/psi4/psi4/issues/1281:166,Energy Efficiency,energy,energy,166,"Hi everyone,. When I run the following input I get different energies depending on the diag_method. While RSP gives the correct zeroth root of H0 as the ground state energy, the default one gives the first root energy as the ground state energy. With RSP Total CI energy = -149.601664883615285; with the default one Total CI energy = -149.577513236489096. İnput:; ```; molecule {; 0 1; O; O 1 1.2156; symmetry c1; }. set {; basis 6-311++G(d); reference rohf; frozen_docc [7]; frozen_uocc [35]; diag_method rsp; }; energy('detci'); ```; @dgasmith @CDSherrill",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1281
https://github.com/psi4/psi4/issues/1281:211,Energy Efficiency,energy,energy,211,"Hi everyone,. When I run the following input I get different energies depending on the diag_method. While RSP gives the correct zeroth root of H0 as the ground state energy, the default one gives the first root energy as the ground state energy. With RSP Total CI energy = -149.601664883615285; with the default one Total CI energy = -149.577513236489096. İnput:; ```; molecule {; 0 1; O; O 1 1.2156; symmetry c1; }. set {; basis 6-311++G(d); reference rohf; frozen_docc [7]; frozen_uocc [35]; diag_method rsp; }; energy('detci'); ```; @dgasmith @CDSherrill",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1281
https://github.com/psi4/psi4/issues/1281:238,Energy Efficiency,energy,energy,238,"Hi everyone,. When I run the following input I get different energies depending on the diag_method. While RSP gives the correct zeroth root of H0 as the ground state energy, the default one gives the first root energy as the ground state energy. With RSP Total CI energy = -149.601664883615285; with the default one Total CI energy = -149.577513236489096. İnput:; ```; molecule {; 0 1; O; O 1 1.2156; symmetry c1; }. set {; basis 6-311++G(d); reference rohf; frozen_docc [7]; frozen_uocc [35]; diag_method rsp; }; energy('detci'); ```; @dgasmith @CDSherrill",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1281
https://github.com/psi4/psi4/issues/1281:264,Energy Efficiency,energy,energy,264,"Hi everyone,. When I run the following input I get different energies depending on the diag_method. While RSP gives the correct zeroth root of H0 as the ground state energy, the default one gives the first root energy as the ground state energy. With RSP Total CI energy = -149.601664883615285; with the default one Total CI energy = -149.577513236489096. İnput:; ```; molecule {; 0 1; O; O 1 1.2156; symmetry c1; }. set {; basis 6-311++G(d); reference rohf; frozen_docc [7]; frozen_uocc [35]; diag_method rsp; }; energy('detci'); ```; @dgasmith @CDSherrill",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1281
https://github.com/psi4/psi4/issues/1281:325,Energy Efficiency,energy,energy,325,"Hi everyone,. When I run the following input I get different energies depending on the diag_method. While RSP gives the correct zeroth root of H0 as the ground state energy, the default one gives the first root energy as the ground state energy. With RSP Total CI energy = -149.601664883615285; with the default one Total CI energy = -149.577513236489096. İnput:; ```; molecule {; 0 1; O; O 1 1.2156; symmetry c1; }. set {; basis 6-311++G(d); reference rohf; frozen_docc [7]; frozen_uocc [35]; diag_method rsp; }; energy('detci'); ```; @dgasmith @CDSherrill",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1281
https://github.com/psi4/psi4/issues/1281:514,Energy Efficiency,energy,energy,514,"Hi everyone,. When I run the following input I get different energies depending on the diag_method. While RSP gives the correct zeroth root of H0 as the ground state energy, the default one gives the first root energy as the ground state energy. With RSP Total CI energy = -149.601664883615285; with the default one Total CI energy = -149.577513236489096. İnput:; ```; molecule {; 0 1; O; O 1 1.2156; symmetry c1; }. set {; basis 6-311++G(d); reference rohf; frozen_docc [7]; frozen_uocc [35]; diag_method rsp; }; energy('detci'); ```; @dgasmith @CDSherrill",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1281
https://github.com/psi4/psi4/issues/1281:70,Integrability,depend,depending,70,"Hi everyone,. When I run the following input I get different energies depending on the diag_method. While RSP gives the correct zeroth root of H0 as the ground state energy, the default one gives the first root energy as the ground state energy. With RSP Total CI energy = -149.601664883615285; with the default one Total CI energy = -149.577513236489096. İnput:; ```; molecule {; 0 1; O; O 1 1.2156; symmetry c1; }. set {; basis 6-311++G(d); reference rohf; frozen_docc [7]; frozen_uocc [35]; diag_method rsp; }; energy('detci'); ```; @dgasmith @CDSherrill",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1281
https://github.com/psi4/psi4/issues/1282:1578,Energy Efficiency,energy,energy,1578,"; optimize('scf', dertype='gradient'); freq('scf', dertype='gradient'). #grep '~' hess0.out; 1 -75.93350508 -7.59e+01 1.35e-01 1.14e-01 o 3.44e-01 2.89e-01 o ~; 2 -76.01434847 -8.08e-02 6.88e-02 5.91e-02 o 2.89e-01 2.51e-01 o ~; 3 -76.00936003 4.99e-03 1.27e-01 1.04e-01 o 1.83e-01 1.51e-01 o ~; 4 -76.02647334 -1.71e-02 1.62e-02 1.35e-02 o 4.78e-02 4.32e-02 o ~; 5 -76.02694403 -4.71e-04 6.79e-03 5.64e-03 o 1.47e-02 1.11e-02 o ~; 6 -76.02702784 -8.38e-05 1.73e-03 1.43e-03 o 2.89e-03 2.48e-03 o ~; 7 -76.02703276 -4.93e-06 1.05e-04 * 8.74e-05 o 1.63e-04 * 1.45e-04 o ~. #grep -A1 'post-proj all' hess0.out; post-proj all modes:['0.0000i' '0.0000i' '0.0000i' '1103.2728' '1246.1842' '1310.1099'; '1334.3071' '1578.1703' '1760.1248']; post-proj all modes:['0.0000i' '0.0000i' '0.0000i' '0.0000i' '0.0000' '0.0001' '1776.3032'; '4112.4185' '4210.8898']. Now, we calculate the Hessian at every step (full_hess_every 1). The; minimization does not converge after 15 steps. The energy printed at; each step is always the initial energy. The frequencies obtained at each; step are always the initial frequencies. #input: hess1.in; ...; set full_hess_every 1; ... #grep '~' hess1.out; 1 -75.93350508 -7.59e+01 1.35e-01 1.14e-01 o 3.44e-01 2.89e-01 o ~; 2 -75.93350508 5.68e-14 * 6.88e-02 5.91e-02 o 3.43e-01 2.89e-01 o ~; 3 -75.93350508 0.00e+00 * 1.90e-01 1.55e-01 o 8.83e-02 7.22e-02 o ~; 4 -75.93350508 0.00e+00 * 9.14e-02 7.47e-02 o 2.21e-02 1.80e-02 o ~; 5 -75.93350508 -1.42e-14 * 7.13e-02 5.82e-02 o 5.52e-03 4.51e-03 o ~; 6 -75.93350508 1.42e-14 * 6.65e-02 5.43e-02 o 5.52e-03 4.51e-03 o ~; 7 -75.93350508 0.00e+00 * 6.18e-02 5.05e-02 o 1.38e-03 1.13e-03 o ~; 8 -75.93350508 -1.42e-14 * 6.06e-02 4.95e-02 o 7.08e-04 * 5.78e-04 o ~; 9 -75.93350508 -5.68e-14 * 6.00e-02 4.90e-02 o 7.08e-04 * 5.78e-04 o ~; 10 -75.93350508 2.84e-14 * 5.94e-02 4.85e-02 o 7.08e-04 * 5.78e-04 o ~; 11 -75.93350508 2.84e-14 * 5.88e-02 4.81e-02 o 7.08e-04 * 5.78e-04 o ~; 12 -75.93350508 1.42e-14 * 5.83e-02 4.76e-02 o 7.08",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1282
https://github.com/psi4/psi4/issues/1282:1629,Energy Efficiency,energy,energy,1629,"; optimize('scf', dertype='gradient'); freq('scf', dertype='gradient'). #grep '~' hess0.out; 1 -75.93350508 -7.59e+01 1.35e-01 1.14e-01 o 3.44e-01 2.89e-01 o ~; 2 -76.01434847 -8.08e-02 6.88e-02 5.91e-02 o 2.89e-01 2.51e-01 o ~; 3 -76.00936003 4.99e-03 1.27e-01 1.04e-01 o 1.83e-01 1.51e-01 o ~; 4 -76.02647334 -1.71e-02 1.62e-02 1.35e-02 o 4.78e-02 4.32e-02 o ~; 5 -76.02694403 -4.71e-04 6.79e-03 5.64e-03 o 1.47e-02 1.11e-02 o ~; 6 -76.02702784 -8.38e-05 1.73e-03 1.43e-03 o 2.89e-03 2.48e-03 o ~; 7 -76.02703276 -4.93e-06 1.05e-04 * 8.74e-05 o 1.63e-04 * 1.45e-04 o ~. #grep -A1 'post-proj all' hess0.out; post-proj all modes:['0.0000i' '0.0000i' '0.0000i' '1103.2728' '1246.1842' '1310.1099'; '1334.3071' '1578.1703' '1760.1248']; post-proj all modes:['0.0000i' '0.0000i' '0.0000i' '0.0000i' '0.0000' '0.0001' '1776.3032'; '4112.4185' '4210.8898']. Now, we calculate the Hessian at every step (full_hess_every 1). The; minimization does not converge after 15 steps. The energy printed at; each step is always the initial energy. The frequencies obtained at each; step are always the initial frequencies. #input: hess1.in; ...; set full_hess_every 1; ... #grep '~' hess1.out; 1 -75.93350508 -7.59e+01 1.35e-01 1.14e-01 o 3.44e-01 2.89e-01 o ~; 2 -75.93350508 5.68e-14 * 6.88e-02 5.91e-02 o 3.43e-01 2.89e-01 o ~; 3 -75.93350508 0.00e+00 * 1.90e-01 1.55e-01 o 8.83e-02 7.22e-02 o ~; 4 -75.93350508 0.00e+00 * 9.14e-02 7.47e-02 o 2.21e-02 1.80e-02 o ~; 5 -75.93350508 -1.42e-14 * 7.13e-02 5.82e-02 o 5.52e-03 4.51e-03 o ~; 6 -75.93350508 1.42e-14 * 6.65e-02 5.43e-02 o 5.52e-03 4.51e-03 o ~; 7 -75.93350508 0.00e+00 * 6.18e-02 5.05e-02 o 1.38e-03 1.13e-03 o ~; 8 -75.93350508 -1.42e-14 * 6.06e-02 4.95e-02 o 7.08e-04 * 5.78e-04 o ~; 9 -75.93350508 -5.68e-14 * 6.00e-02 4.90e-02 o 7.08e-04 * 5.78e-04 o ~; 10 -75.93350508 2.84e-14 * 5.94e-02 4.85e-02 o 7.08e-04 * 5.78e-04 o ~; 11 -75.93350508 2.84e-14 * 5.88e-02 4.81e-02 o 7.08e-04 * 5.78e-04 o ~; 12 -75.93350508 1.42e-14 * 5.83e-02 4.76e-02 o 7.08",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1282
https://github.com/psi4/psi4/issues/1282:116,Performance,optimiz,optimization,116,"Dear Psi4 developers,. The 'full_hess_every N' functionality, used to compute the full Hessian; every N steps in an optimization, does not work as expected for N > 0:; the Hessian is always recalculated on the initial structure instead of; the current one. This can be tested as follows. First, we only calculate the Hessian initially (full_hess_every 0). The; minimization converges in 7 steps to an R=0.95, B=104.6 geometry. The; frequencies obtained are 1776, 4112, 4211. #input: hess0.in; molecule h2o {; symmetry c1; O; H 1 R; H 1 R 2 B; R = 1.2; B = 120; }; set basis cc-pVDZ; set full_hess_every 0; optimize('scf', dertype='gradient'); freq('scf', dertype='gradient'). #grep '~' hess0.out; 1 -75.93350508 -7.59e+01 1.35e-01 1.14e-01 o 3.44e-01 2.89e-01 o ~; 2 -76.01434847 -8.08e-02 6.88e-02 5.91e-02 o 2.89e-01 2.51e-01 o ~; 3 -76.00936003 4.99e-03 1.27e-01 1.04e-01 o 1.83e-01 1.51e-01 o ~; 4 -76.02647334 -1.71e-02 1.62e-02 1.35e-02 o 4.78e-02 4.32e-02 o ~; 5 -76.02694403 -4.71e-04 6.79e-03 5.64e-03 o 1.47e-02 1.11e-02 o ~; 6 -76.02702784 -8.38e-05 1.73e-03 1.43e-03 o 2.89e-03 2.48e-03 o ~; 7 -76.02703276 -4.93e-06 1.05e-04 * 8.74e-05 o 1.63e-04 * 1.45e-04 o ~. #grep -A1 'post-proj all' hess0.out; post-proj all modes:['0.0000i' '0.0000i' '0.0000i' '1103.2728' '1246.1842' '1310.1099'; '1334.3071' '1578.1703' '1760.1248']; post-proj all modes:['0.0000i' '0.0000i' '0.0000i' '0.0000i' '0.0000' '0.0001' '1776.3032'; '4112.4185' '4210.8898']. Now, we calculate the Hessian at every step (full_hess_every 1). The; minimization does not converge after 15 steps. The energy printed at; each step is always the initial energy. The frequencies obtained at each; step are always the initial frequencies. #input: hess1.in; ...; set full_hess_every 1; ... #grep '~' hess1.out; 1 -75.93350508 -7.59e+01 1.35e-01 1.14e-01 o 3.44e-01 2.89e-01 o ~; 2 -75.93350508 5.68e-14 * 6.88e-02 5.91e-02 o 3.43e-01 2.89e-01 o ~; 3 -75.93350508 0.00e+00 * 1.90e-01 1.55e-01 o 8.83e-02 7.22e-02 o ~; 4 -75.933505",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1282
https://github.com/psi4/psi4/issues/1282:606,Performance,optimiz,optimize,606,"Dear Psi4 developers,. The 'full_hess_every N' functionality, used to compute the full Hessian; every N steps in an optimization, does not work as expected for N > 0:; the Hessian is always recalculated on the initial structure instead of; the current one. This can be tested as follows. First, we only calculate the Hessian initially (full_hess_every 0). The; minimization converges in 7 steps to an R=0.95, B=104.6 geometry. The; frequencies obtained are 1776, 4112, 4211. #input: hess0.in; molecule h2o {; symmetry c1; O; H 1 R; H 1 R 2 B; R = 1.2; B = 120; }; set basis cc-pVDZ; set full_hess_every 0; optimize('scf', dertype='gradient'); freq('scf', dertype='gradient'). #grep '~' hess0.out; 1 -75.93350508 -7.59e+01 1.35e-01 1.14e-01 o 3.44e-01 2.89e-01 o ~; 2 -76.01434847 -8.08e-02 6.88e-02 5.91e-02 o 2.89e-01 2.51e-01 o ~; 3 -76.00936003 4.99e-03 1.27e-01 1.04e-01 o 1.83e-01 1.51e-01 o ~; 4 -76.02647334 -1.71e-02 1.62e-02 1.35e-02 o 4.78e-02 4.32e-02 o ~; 5 -76.02694403 -4.71e-04 6.79e-03 5.64e-03 o 1.47e-02 1.11e-02 o ~; 6 -76.02702784 -8.38e-05 1.73e-03 1.43e-03 o 2.89e-03 2.48e-03 o ~; 7 -76.02703276 -4.93e-06 1.05e-04 * 8.74e-05 o 1.63e-04 * 1.45e-04 o ~. #grep -A1 'post-proj all' hess0.out; post-proj all modes:['0.0000i' '0.0000i' '0.0000i' '1103.2728' '1246.1842' '1310.1099'; '1334.3071' '1578.1703' '1760.1248']; post-proj all modes:['0.0000i' '0.0000i' '0.0000i' '0.0000i' '0.0000' '0.0001' '1776.3032'; '4112.4185' '4210.8898']. Now, we calculate the Hessian at every step (full_hess_every 1). The; minimization does not converge after 15 steps. The energy printed at; each step is always the initial energy. The frequencies obtained at each; step are always the initial frequencies. #input: hess1.in; ...; set full_hess_every 1; ... #grep '~' hess1.out; 1 -75.93350508 -7.59e+01 1.35e-01 1.14e-01 o 3.44e-01 2.89e-01 o ~; 2 -75.93350508 5.68e-14 * 6.88e-02 5.91e-02 o 3.43e-01 2.89e-01 o ~; 3 -75.93350508 0.00e+00 * 1.90e-01 1.55e-01 o 8.83e-02 7.22e-02 o ~; 4 -75.933505",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1282
https://github.com/psi4/psi4/issues/1282:269,Testability,test,tested,269,"Dear Psi4 developers,. The 'full_hess_every N' functionality, used to compute the full Hessian; every N steps in an optimization, does not work as expected for N > 0:; the Hessian is always recalculated on the initial structure instead of; the current one. This can be tested as follows. First, we only calculate the Hessian initially (full_hess_every 0). The; minimization converges in 7 steps to an R=0.95, B=104.6 geometry. The; frequencies obtained are 1776, 4112, 4211. #input: hess0.in; molecule h2o {; symmetry c1; O; H 1 R; H 1 R 2 B; R = 1.2; B = 120; }; set basis cc-pVDZ; set full_hess_every 0; optimize('scf', dertype='gradient'); freq('scf', dertype='gradient'). #grep '~' hess0.out; 1 -75.93350508 -7.59e+01 1.35e-01 1.14e-01 o 3.44e-01 2.89e-01 o ~; 2 -76.01434847 -8.08e-02 6.88e-02 5.91e-02 o 2.89e-01 2.51e-01 o ~; 3 -76.00936003 4.99e-03 1.27e-01 1.04e-01 o 1.83e-01 1.51e-01 o ~; 4 -76.02647334 -1.71e-02 1.62e-02 1.35e-02 o 4.78e-02 4.32e-02 o ~; 5 -76.02694403 -4.71e-04 6.79e-03 5.64e-03 o 1.47e-02 1.11e-02 o ~; 6 -76.02702784 -8.38e-05 1.73e-03 1.43e-03 o 2.89e-03 2.48e-03 o ~; 7 -76.02703276 -4.93e-06 1.05e-04 * 8.74e-05 o 1.63e-04 * 1.45e-04 o ~. #grep -A1 'post-proj all' hess0.out; post-proj all modes:['0.0000i' '0.0000i' '0.0000i' '1103.2728' '1246.1842' '1310.1099'; '1334.3071' '1578.1703' '1760.1248']; post-proj all modes:['0.0000i' '0.0000i' '0.0000i' '0.0000i' '0.0000' '0.0001' '1776.3032'; '4112.4185' '4210.8898']. Now, we calculate the Hessian at every step (full_hess_every 1). The; minimization does not converge after 15 steps. The energy printed at; each step is always the initial energy. The frequencies obtained at each; step are always the initial frequencies. #input: hess1.in; ...; set full_hess_every 1; ... #grep '~' hess1.out; 1 -75.93350508 -7.59e+01 1.35e-01 1.14e-01 o 3.44e-01 2.89e-01 o ~; 2 -75.93350508 5.68e-14 * 6.88e-02 5.91e-02 o 3.43e-01 2.89e-01 o ~; 3 -75.93350508 0.00e+00 * 1.90e-01 1.55e-01 o 8.83e-02 7.22e-02 o ~; 4 -75.933505",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1282
https://github.com/psi4/psi4/issues/1283:343,Availability,error,error,343,"After #1233 removed memory padding, test case opt13 started failing b/c it was borderline in-core/disk and chose ... poorly. See details https://github.com/psi4/psi4/pull/1233#issuecomment-428754862. First stage question is: Are we willing to have more jobs pass through the in-core/disk choice stage with a false negative and instead hit the error further on? I'm thinking that's not good. This particular case is readily fixed by upping the memory user-side or (as @dgasmith suggests) adding in another buffer `required += naux_ * naux_;` [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/dfhelper.cc#L228-L232). But there's a lot of estimates, and it'd be good to centralize memory apportionment.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1283
https://github.com/psi4/psi4/issues/1283:36,Testability,test,test,36,"After #1233 removed memory padding, test case opt13 started failing b/c it was borderline in-core/disk and chose ... poorly. See details https://github.com/psi4/psi4/pull/1233#issuecomment-428754862. First stage question is: Are we willing to have more jobs pass through the in-core/disk choice stage with a false negative and instead hit the error further on? I'm thinking that's not good. This particular case is readily fixed by upping the memory user-side or (as @dgasmith suggests) adding in another buffer `required += naux_ * naux_;` [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/dfhelper.cc#L228-L232). But there's a lot of estimates, and it'd be good to centralize memory apportionment.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1283
https://github.com/psi4/psi4/issues/1284:305,Energy Efficiency,energy,energy,305,"[Psi4 1.3a2.dev48 Git: Rev {master} cb34149]. Can anybody confirm or deny that SCF iterations are no longer printed as they finish, but instead only in bulk when everything is done (like a buffered output). . For testing if needed:; ```; molecule benzene {; symmetry c1; pubchem:benzene; }. memory 1 GiB; energy('hf/def2-QZVP'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1284
https://github.com/psi4/psi4/issues/1284:213,Testability,test,testing,213,"[Psi4 1.3a2.dev48 Git: Rev {master} cb34149]. Can anybody confirm or deny that SCF iterations are no longer printed as they finish, but instead only in bulk when everything is done (like a buffered output). . For testing if needed:; ```; molecule benzene {; symmetry c1; pubchem:benzene; }. memory 1 GiB; energy('hf/def2-QZVP'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1284
https://github.com/psi4/psi4/issues/1288:304,Availability,error,error,304,"The following input file; ```; molecule mol {; 0 1 ; units bohr; O 0 0 -0.143225816552; H 0 1.638036840407 1.136548822547; H 0 -1.638036840407 1.136548822547; }. set {; reference uhf ; basis sto-3g; scf_type pk; mp2_type conv; dcft_functional odc-12; }. energy('omp2'); energy('dcft'); ```; crashes with error; ```; PSIO_ERROR: Attempt to write into next entry: 61, MO Ints (OO|OV); PSIO_ERROR: unit = 61, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1479, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:; ```; Modifying the input file showed the following:. - The error resolves when changing the reference from UHF to RHF; - Both ODC-06 and ODC-12 will trigger the error, but neither DC-06 nor DC-12 will; - Both OMP2 and OLCCD before the ODC will trigger the error, but neither MP2 nor LCCD will",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1288
https://github.com/psi4/psi4/issues/1288:979,Availability,Error,Error,979,"The following input file; ```; molecule mol {; 0 1 ; units bohr; O 0 0 -0.143225816552; H 0 1.638036840407 1.136548822547; H 0 -1.638036840407 1.136548822547; }. set {; reference uhf ; basis sto-3g; scf_type pk; mp2_type conv; dcft_functional odc-12; }. energy('omp2'); energy('dcft'); ```; crashes with error; ```; PSIO_ERROR: Attempt to write into next entry: 61, MO Ints (OO|OV); PSIO_ERROR: unit = 61, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1479, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:; ```; Modifying the input file showed the following:. - The error resolves when changing the reference from UHF to RHF; - Both ODC-06 and ODC-12 will trigger the error, but neither DC-06 nor DC-12 will; - Both OMP2 and OLCCD before the ODC will trigger the error, but neither MP2 nor LCCD will",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1288
https://github.com/psi4/psi4/issues/1288:991,Availability,Error,Error,991,"The following input file; ```; molecule mol {; 0 1 ; units bohr; O 0 0 -0.143225816552; H 0 1.638036840407 1.136548822547; H 0 -1.638036840407 1.136548822547; }. set {; reference uhf ; basis sto-3g; scf_type pk; mp2_type conv; dcft_functional odc-12; }. energy('omp2'); energy('dcft'); ```; crashes with error; ```; PSIO_ERROR: Attempt to write into next entry: 61, MO Ints (OO|OV); PSIO_ERROR: unit = 61, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1479, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:; ```; Modifying the input file showed the following:. - The error resolves when changing the reference from UHF to RHF; - Both ODC-06 and ODC-12 will trigger the error, but neither DC-06 nor DC-12 will; - Both OMP2 and OLCCD before the ODC will trigger the error, but neither MP2 nor LCCD will",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1288
https://github.com/psi4/psi4/issues/1288:998,Availability,Error,Error,998,"The following input file; ```; molecule mol {; 0 1 ; units bohr; O 0 0 -0.143225816552; H 0 1.638036840407 1.136548822547; H 0 -1.638036840407 1.136548822547; }. set {; reference uhf ; basis sto-3g; scf_type pk; mp2_type conv; dcft_functional odc-12; }. energy('omp2'); energy('dcft'); ```; crashes with error; ```; PSIO_ERROR: Attempt to write into next entry: 61, MO Ints (OO|OV); PSIO_ERROR: unit = 61, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1479, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:; ```; Modifying the input file showed the following:. - The error resolves when changing the reference from UHF to RHF; - Both ODC-06 and ODC-12 will trigger the error, but neither DC-06 nor DC-12 will; - Both OMP2 and OLCCD before the ODC will trigger the error, but neither MP2 nor LCCD will",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1288
https://github.com/psi4/psi4/issues/1288:1074,Availability,error,error,1074,"The following input file; ```; molecule mol {; 0 1 ; units bohr; O 0 0 -0.143225816552; H 0 1.638036840407 1.136548822547; H 0 -1.638036840407 1.136548822547; }. set {; reference uhf ; basis sto-3g; scf_type pk; mp2_type conv; dcft_functional odc-12; }. energy('omp2'); energy('dcft'); ```; crashes with error; ```; PSIO_ERROR: Attempt to write into next entry: 61, MO Ints (OO|OV); PSIO_ERROR: unit = 61, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1479, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:; ```; Modifying the input file showed the following:. - The error resolves when changing the reference from UHF to RHF; - Both ODC-06 and ODC-12 will trigger the error, but neither DC-06 nor DC-12 will; - Both OMP2 and OLCCD before the ODC will trigger the error, but neither MP2 nor LCCD will",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1288
https://github.com/psi4/psi4/issues/1288:1196,Availability,error,error,1196,"The following input file; ```; molecule mol {; 0 1 ; units bohr; O 0 0 -0.143225816552; H 0 1.638036840407 1.136548822547; H 0 -1.638036840407 1.136548822547; }. set {; reference uhf ; basis sto-3g; scf_type pk; mp2_type conv; dcft_functional odc-12; }. energy('omp2'); energy('dcft'); ```; crashes with error; ```; PSIO_ERROR: Attempt to write into next entry: 61, MO Ints (OO|OV); PSIO_ERROR: unit = 61, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1479, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:; ```; Modifying the input file showed the following:. - The error resolves when changing the reference from UHF to RHF; - Both ODC-06 and ODC-12 will trigger the error, but neither DC-06 nor DC-12 will; - Both OMP2 and OLCCD before the ODC will trigger the error, but neither MP2 nor LCCD will",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1288
https://github.com/psi4/psi4/issues/1288:1298,Availability,error,error,1298,"The following input file; ```; molecule mol {; 0 1 ; units bohr; O 0 0 -0.143225816552; H 0 1.638036840407 1.136548822547; H 0 -1.638036840407 1.136548822547; }. set {; reference uhf ; basis sto-3g; scf_type pk; mp2_type conv; dcft_functional odc-12; }. energy('omp2'); energy('dcft'); ```; crashes with error; ```; PSIO_ERROR: Attempt to write into next entry: 61, MO Ints (OO|OV); PSIO_ERROR: unit = 61, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1479, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:; ```; Modifying the input file showed the following:. - The error resolves when changing the reference from UHF to RHF; - Both ODC-06 and ODC-12 will trigger the error, but neither DC-06 nor DC-12 will; - Both OMP2 and OLCCD before the ODC will trigger the error, but neither MP2 nor LCCD will",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1288
https://github.com/psi4/psi4/issues/1288:1393,Availability,error,error,1393,"The following input file; ```; molecule mol {; 0 1 ; units bohr; O 0 0 -0.143225816552; H 0 1.638036840407 1.136548822547; H 0 -1.638036840407 1.136548822547; }. set {; reference uhf ; basis sto-3g; scf_type pk; mp2_type conv; dcft_functional odc-12; }. energy('omp2'); energy('dcft'); ```; crashes with error; ```; PSIO_ERROR: Attempt to write into next entry: 61, MO Ints (OO|OV); PSIO_ERROR: unit = 61, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1479, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:; ```; Modifying the input file showed the following:. - The error resolves when changing the reference from UHF to RHF; - Both ODC-06 and ODC-12 will trigger the error, but neither DC-06 nor DC-12 will; - Both OMP2 and OLCCD before the ODC will trigger the error, but neither MP2 nor LCCD will",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1288
https://github.com/psi4/psi4/issues/1288:254,Energy Efficiency,energy,energy,254,"The following input file; ```; molecule mol {; 0 1 ; units bohr; O 0 0 -0.143225816552; H 0 1.638036840407 1.136548822547; H 0 -1.638036840407 1.136548822547; }. set {; reference uhf ; basis sto-3g; scf_type pk; mp2_type conv; dcft_functional odc-12; }. energy('omp2'); energy('dcft'); ```; crashes with error; ```; PSIO_ERROR: Attempt to write into next entry: 61, MO Ints (OO|OV); PSIO_ERROR: unit = 61, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1479, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:; ```; Modifying the input file showed the following:. - The error resolves when changing the reference from UHF to RHF; - Both ODC-06 and ODC-12 will trigger the error, but neither DC-06 nor DC-12 will; - Both OMP2 and OLCCD before the ODC will trigger the error, but neither MP2 nor LCCD will",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1288
https://github.com/psi4/psi4/issues/1288:270,Energy Efficiency,energy,energy,270,"The following input file; ```; molecule mol {; 0 1 ; units bohr; O 0 0 -0.143225816552; H 0 1.638036840407 1.136548822547; H 0 -1.638036840407 1.136548822547; }. set {; reference uhf ; basis sto-3g; scf_type pk; mp2_type conv; dcft_functional odc-12; }. energy('omp2'); energy('dcft'); ```; crashes with error; ```; PSIO_ERROR: Attempt to write into next entry: 61, MO Ints (OO|OV); PSIO_ERROR: unit = 61, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1479, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:; ```; Modifying the input file showed the following:. - The error resolves when changing the reference from UHF to RHF; - Both ODC-06 and ODC-12 will trigger the error, but neither DC-06 nor DC-12 will; - Both OMP2 and OLCCD before the ODC will trigger the error, but neither MP2 nor LCCD will",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1288
https://github.com/psi4/psi4/issues/1288:728,Energy Efficiency,energy,energy,728,"The following input file; ```; molecule mol {; 0 1 ; units bohr; O 0 0 -0.143225816552; H 0 1.638036840407 1.136548822547; H 0 -1.638036840407 1.136548822547; }. set {; reference uhf ; basis sto-3g; scf_type pk; mp2_type conv; dcft_functional odc-12; }. energy('omp2'); energy('dcft'); ```; crashes with error; ```; PSIO_ERROR: Attempt to write into next entry: 61, MO Ints (OO|OV); PSIO_ERROR: unit = 61, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1479, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:; ```; Modifying the input file showed the following:. - The error resolves when changing the reference from UHF to RHF; - Both ODC-06 and ODC-12 will trigger the error, but neither DC-06 nor DC-12 will; - Both OMP2 and OLCCD before the ODC will trigger the error, but neither MP2 nor LCCD will",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1288
https://github.com/psi4/psi4/issues/1288:754,Energy Efficiency,energy,energy,754,"The following input file; ```; molecule mol {; 0 1 ; units bohr; O 0 0 -0.143225816552; H 0 1.638036840407 1.136548822547; H 0 -1.638036840407 1.136548822547; }. set {; reference uhf ; basis sto-3g; scf_type pk; mp2_type conv; dcft_functional odc-12; }. energy('omp2'); energy('dcft'); ```; crashes with error; ```; PSIO_ERROR: Attempt to write into next entry: 61, MO Ints (OO|OV); PSIO_ERROR: unit = 61, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1479, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:; ```; Modifying the input file showed the following:. - The error resolves when changing the reference from UHF to RHF; - Both ODC-06 and ODC-12 will trigger the error, but neither DC-06 nor DC-12 will; - Both OMP2 and OLCCD before the ODC will trigger the error, but neither MP2 nor LCCD will",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1288
https://github.com/psi4/psi4/pull/1289:581,Integrability,depend,depend,581,"## Description; Change of FINDIF to be metadata based per #1148, task one, and qcdb molecule compatibility per #1148, task two. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change finite difference code to use metadata.; - [x] Fixes bugs #1296 and #1306.; - [x] Reap/Sow code removed. ## Questions; - [x] How should I document that a functions takes as an argument or returns the metadata dictionary? That needs to be specified somewhere.; - [x] Are we all agreed on the metadata style? The things I've left undone are going to depend heavily on any additional metadata changes. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Implement the changes to all four finite difference functions: empirical dispersion, hessian by gradients, hessian by energies, gradient by energies.; - [x] Polish the resulting code. In particular, there are a few variables taken from the initialization `data` that should probably be taken from `metadict` instead. For the compute functions, it should only need the barest skeleton of the current initialization call. Depending on other revisions, I may want to create a separate initialization function for the compute functions.; - [x] Modify the reap/sow cookbooks to work.; - [x] Make this compatible with QCDB molecules. To do this _correctly_, we need CdSalc tech reproduced in QCDB. Better to just coerce the QCDB molecule for now.; - [x] Remove the optimization side reap/sow code. ## Status; - [x] Ready for review; - [x] Ready for merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1289
https://github.com/psi4/psi4/pull/1289:1211,Integrability,Depend,Depending,1211,"## Description; Change of FINDIF to be metadata based per #1148, task one, and qcdb molecule compatibility per #1148, task two. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change finite difference code to use metadata.; - [x] Fixes bugs #1296 and #1306.; - [x] Reap/Sow code removed. ## Questions; - [x] How should I document that a functions takes as an argument or returns the metadata dictionary? That needs to be specified somewhere.; - [x] Are we all agreed on the metadata style? The things I've left undone are going to depend heavily on any additional metadata changes. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Implement the changes to all four finite difference functions: empirical dispersion, hessian by gradients, hessian by energies, gradient by energies.; - [x] Polish the resulting code. In particular, there are a few variables taken from the initialization `data` that should probably be taken from `metadict` instead. For the compute functions, it should only need the barest skeleton of the current initialization call. Depending on other revisions, I may want to create a separate initialization function for the compute functions.; - [x] Modify the reap/sow cookbooks to work.; - [x] Make this compatible with QCDB molecules. To do this _correctly_, we need CdSalc tech reproduced in QCDB. Better to just coerce the QCDB molecule for now.; - [x] Remove the optimization side reap/sow code. ## Status; - [x] Ready for review; - [x] Ready for merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1289
https://github.com/psi4/psi4/pull/1289:1006,Modifiability,variab,variables,1006,"## Description; Change of FINDIF to be metadata based per #1148, task one, and qcdb molecule compatibility per #1148, task two. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change finite difference code to use metadata.; - [x] Fixes bugs #1296 and #1306.; - [x] Reap/Sow code removed. ## Questions; - [x] How should I document that a functions takes as an argument or returns the metadata dictionary? That needs to be specified somewhere.; - [x] Are we all agreed on the metadata style? The things I've left undone are going to depend heavily on any additional metadata changes. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Implement the changes to all four finite difference functions: empirical dispersion, hessian by gradients, hessian by energies, gradient by energies.; - [x] Polish the resulting code. In particular, there are a few variables taken from the initialization `data` that should probably be taken from `metadict` instead. For the compute functions, it should only need the barest skeleton of the current initialization call. Depending on other revisions, I may want to create a separate initialization function for the compute functions.; - [x] Modify the reap/sow cookbooks to work.; - [x] Make this compatible with QCDB molecules. To do this _correctly_, we need CdSalc tech reproduced in QCDB. Better to just coerce the QCDB molecule for now.; - [x] Remove the optimization side reap/sow code. ## Status; - [x] Ready for review; - [x] Ready for merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1289
https://github.com/psi4/psi4/pull/1289:1550,Performance,optimiz,optimization,1550,"## Description; Change of FINDIF to be metadata based per #1148, task one, and qcdb molecule compatibility per #1148, task two. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change finite difference code to use metadata.; - [x] Fixes bugs #1296 and #1306.; - [x] Reap/Sow code removed. ## Questions; - [x] How should I document that a functions takes as an argument or returns the metadata dictionary? That needs to be specified somewhere.; - [x] Are we all agreed on the metadata style? The things I've left undone are going to depend heavily on any additional metadata changes. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Implement the changes to all four finite difference functions: empirical dispersion, hessian by gradients, hessian by energies, gradient by energies.; - [x] Polish the resulting code. In particular, there are a few variables taken from the initialization `data` that should probably be taken from `metadict` instead. For the compute functions, it should only need the barest skeleton of the current initialization call. Depending on other revisions, I may want to create a separate initialization function for the compute functions.; - [x] Modify the reap/sow cookbooks to work.; - [x] Make this compatible with QCDB molecules. To do this _correctly_, we need CdSalc tech reproduced in QCDB. Better to just coerce the QCDB molecule for now.; - [x] Remove the optimization side reap/sow code. ## Status; - [x] Ready for review; - [x] Ready for merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1289
https://github.com/psi4/psi4/pull/1289:686,Testability,test,tests,686,"## Description; Change of FINDIF to be metadata based per #1148, task one, and qcdb molecule compatibility per #1148, task two. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change finite difference code to use metadata.; - [x] Fixes bugs #1296 and #1306.; - [x] Reap/Sow code removed. ## Questions; - [x] How should I document that a functions takes as an argument or returns the metadata dictionary? That needs to be specified somewhere.; - [x] Are we all agreed on the metadata style? The things I've left undone are going to depend heavily on any additional metadata changes. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Implement the changes to all four finite difference functions: empirical dispersion, hessian by gradients, hessian by energies, gradient by energies.; - [x] Polish the resulting code. In particular, there are a few variables taken from the initialization `data` that should probably be taken from `metadict` instead. For the compute functions, it should only need the barest skeleton of the current initialization call. Depending on other revisions, I may want to create a separate initialization function for the compute functions.; - [x] Modify the reap/sow cookbooks to work.; - [x] Make this compatible with QCDB molecules. To do this _correctly_, we need CdSalc tech reproduced in QCDB. Better to just coerce the QCDB molecule for now.; - [x] Remove the optimization side reap/sow code. ## Status; - [x] Ready for review; - [x] Ready for merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1289
https://github.com/psi4/psi4/pull/1289:777,Testability,test,tests,777,"## Description; Change of FINDIF to be metadata based per #1148, task one, and qcdb molecule compatibility per #1148, task two. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change finite difference code to use metadata.; - [x] Fixes bugs #1296 and #1306.; - [x] Reap/Sow code removed. ## Questions; - [x] How should I document that a functions takes as an argument or returns the metadata dictionary? That needs to be specified somewhere.; - [x] Are we all agreed on the metadata style? The things I've left undone are going to depend heavily on any additional metadata changes. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Implement the changes to all four finite difference functions: empirical dispersion, hessian by gradients, hessian by energies, gradient by energies.; - [x] Polish the resulting code. In particular, there are a few variables taken from the initialization `data` that should probably be taken from `metadict` instead. For the compute functions, it should only need the barest skeleton of the current initialization call. Depending on other revisions, I may want to create a separate initialization function for the compute functions.; - [x] Modify the reap/sow cookbooks to work.; - [x] Make this compatible with QCDB molecules. To do this _correctly_, we need CdSalc tech reproduced in QCDB. Better to just coerce the QCDB molecule for now.; - [x] Remove the optimization side reap/sow code. ## Status; - [x] Ready for review; - [x] Ready for merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1289
https://github.com/psi4/psi4/pull/1289:561,Usability,undo,undone,561,"## Description; Change of FINDIF to be metadata based per #1148, task one, and qcdb molecule compatibility per #1148, task two. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change finite difference code to use metadata.; - [x] Fixes bugs #1296 and #1306.; - [x] Reap/Sow code removed. ## Questions; - [x] How should I document that a functions takes as an argument or returns the metadata dictionary? That needs to be specified somewhere.; - [x] Are we all agreed on the metadata style? The things I've left undone are going to depend heavily on any additional metadata changes. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Implement the changes to all four finite difference functions: empirical dispersion, hessian by gradients, hessian by energies, gradient by energies.; - [x] Polish the resulting code. In particular, there are a few variables taken from the initialization `data` that should probably be taken from `metadict` instead. For the compute functions, it should only need the barest skeleton of the current initialization call. Depending on other revisions, I may want to create a separate initialization function for the compute functions.; - [x] Modify the reap/sow cookbooks to work.; - [x] Make this compatible with QCDB molecules. To do this _correctly_, we need CdSalc tech reproduced in QCDB. Better to just coerce the QCDB molecule for now.; - [x] Remove the optimization side reap/sow code. ## Status; - [x] Ready for review; - [x] Ready for merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1289
https://github.com/psi4/psi4/issues/1290:25,Integrability,rout,routine,25,"**psi4** uses the LAPACK routine `dtzrqf`. However, at least in the current LAPACK 3.8.0, the routine `dtzrqf` is marked as deprecated, the [suggested alternative](http://www.netlib.org/lapack/explore-html/da/dba/group__double_o_t_h_e_rcomputational_ga2d309addf953bcdd497d58608a7f7935.html) being `dtzrzf`. As a result, the default build of LAPACK 3.8.0 (<del>as well as of OpenBLAS 0.3.3</del> EDITED) does not contain `dtzrqf`anymore and fails to provide the necessary dependency. Perhaps **psi4** could use the alternative routine to avoid this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1290
https://github.com/psi4/psi4/issues/1290:94,Integrability,rout,routine,94,"**psi4** uses the LAPACK routine `dtzrqf`. However, at least in the current LAPACK 3.8.0, the routine `dtzrqf` is marked as deprecated, the [suggested alternative](http://www.netlib.org/lapack/explore-html/da/dba/group__double_o_t_h_e_rcomputational_ga2d309addf953bcdd497d58608a7f7935.html) being `dtzrzf`. As a result, the default build of LAPACK 3.8.0 (<del>as well as of OpenBLAS 0.3.3</del> EDITED) does not contain `dtzrqf`anymore and fails to provide the necessary dependency. Perhaps **psi4** could use the alternative routine to avoid this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1290
https://github.com/psi4/psi4/issues/1290:471,Integrability,depend,dependency,471,"**psi4** uses the LAPACK routine `dtzrqf`. However, at least in the current LAPACK 3.8.0, the routine `dtzrqf` is marked as deprecated, the [suggested alternative](http://www.netlib.org/lapack/explore-html/da/dba/group__double_o_t_h_e_rcomputational_ga2d309addf953bcdd497d58608a7f7935.html) being `dtzrzf`. As a result, the default build of LAPACK 3.8.0 (<del>as well as of OpenBLAS 0.3.3</del> EDITED) does not contain `dtzrqf`anymore and fails to provide the necessary dependency. Perhaps **psi4** could use the alternative routine to avoid this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1290
https://github.com/psi4/psi4/issues/1290:526,Integrability,rout,routine,526,"**psi4** uses the LAPACK routine `dtzrqf`. However, at least in the current LAPACK 3.8.0, the routine `dtzrqf` is marked as deprecated, the [suggested alternative](http://www.netlib.org/lapack/explore-html/da/dba/group__double_o_t_h_e_rcomputational_ga2d309addf953bcdd497d58608a7f7935.html) being `dtzrzf`. As a result, the default build of LAPACK 3.8.0 (<del>as well as of OpenBLAS 0.3.3</del> EDITED) does not contain `dtzrqf`anymore and fails to provide the necessary dependency. Perhaps **psi4** could use the alternative routine to avoid this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1290
https://github.com/psi4/psi4/issues/1290:537,Safety,avoid,avoid,537,"**psi4** uses the LAPACK routine `dtzrqf`. However, at least in the current LAPACK 3.8.0, the routine `dtzrqf` is marked as deprecated, the [suggested alternative](http://www.netlib.org/lapack/explore-html/da/dba/group__double_o_t_h_e_rcomputational_ga2d309addf953bcdd497d58608a7f7935.html) being `dtzrzf`. As a result, the default build of LAPACK 3.8.0 (<del>as well as of OpenBLAS 0.3.3</del> EDITED) does not contain `dtzrqf`anymore and fails to provide the necessary dependency. Perhaps **psi4** could use the alternative routine to avoid this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1290
https://github.com/psi4/psi4/pull/1291:690,Energy Efficiency,schedul,scheduler,690,"## Description; Parallelism was added to the construction of the DFT Grid with OpenMP. . The grid construction's asymptotic complexity is a function of the number of atoms, so it can be significant for small-to-medium sized molecules, especially when a smaller basis set is used. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Parallelized DFT grid construction. ## Questions; - [x] Is this necessary? I ran some scaling tests, and grid construction accounted for up to one third of the total wall time on 6 cores for molecules with between ~75 and ~225 atoms; - [x] Are there best practices for OpenMP specific to Psi4? I used the static scheduler since it seems that each atom will result in the same amount of work, but I'm open to other opinions. The best scheduler could also be determined empirically on a set of test calculations, but I don't know if the differences between scheduler performance is significant enough to warrant this. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] Ran all tests, passed everything but cbs-xtpl-freq, x2c1, dftd3-version, and mrcc-rohf_ccsdt_q_. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1291
https://github.com/psi4/psi4/pull/1291:811,Energy Efficiency,schedul,scheduler,811,"## Description; Parallelism was added to the construction of the DFT Grid with OpenMP. . The grid construction's asymptotic complexity is a function of the number of atoms, so it can be significant for small-to-medium sized molecules, especially when a smaller basis set is used. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Parallelized DFT grid construction. ## Questions; - [x] Is this necessary? I ran some scaling tests, and grid construction accounted for up to one third of the total wall time on 6 cores for molecules with between ~75 and ~225 atoms; - [x] Are there best practices for OpenMP specific to Psi4? I used the static scheduler since it seems that each atom will result in the same amount of work, but I'm open to other opinions. The best scheduler could also be determined empirically on a set of test calculations, but I don't know if the differences between scheduler performance is significant enough to warrant this. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] Ran all tests, passed everything but cbs-xtpl-freq, x2c1, dftd3-version, and mrcc-rohf_ccsdt_q_. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1291
https://github.com/psi4/psi4/pull/1291:933,Energy Efficiency,schedul,scheduler,933,"## Description; Parallelism was added to the construction of the DFT Grid with OpenMP. . The grid construction's asymptotic complexity is a function of the number of atoms, so it can be significant for small-to-medium sized molecules, especially when a smaller basis set is used. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Parallelized DFT grid construction. ## Questions; - [x] Is this necessary? I ran some scaling tests, and grid construction accounted for up to one third of the total wall time on 6 cores for molecules with between ~75 and ~225 atoms; - [x] Are there best practices for OpenMP specific to Psi4? I used the static scheduler since it seems that each atom will result in the same amount of work, but I'm open to other opinions. The best scheduler could also be determined empirically on a set of test calculations, but I don't know if the differences between scheduler performance is significant enough to warrant this. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] Ran all tests, passed everything but cbs-xtpl-freq, x2c1, dftd3-version, and mrcc-rohf_ccsdt_q_. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1291
https://github.com/psi4/psi4/pull/1291:943,Performance,perform,performance,943,"## Description; Parallelism was added to the construction of the DFT Grid with OpenMP. . The grid construction's asymptotic complexity is a function of the number of atoms, so it can be significant for small-to-medium sized molecules, especially when a smaller basis set is used. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Parallelized DFT grid construction. ## Questions; - [x] Is this necessary? I ran some scaling tests, and grid construction accounted for up to one third of the total wall time on 6 cores for molecules with between ~75 and ~225 atoms; - [x] Are there best practices for OpenMP specific to Psi4? I used the static scheduler since it seems that each atom will result in the same amount of work, but I'm open to other opinions. The best scheduler could also be determined empirically on a set of test calculations, but I don't know if the differences between scheduler performance is significant enough to warrant this. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] Ran all tests, passed everything but cbs-xtpl-freq, x2c1, dftd3-version, and mrcc-rohf_ccsdt_q_. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1291
https://github.com/psi4/psi4/pull/1291:472,Testability,test,tests,472,"## Description; Parallelism was added to the construction of the DFT Grid with OpenMP. . The grid construction's asymptotic complexity is a function of the number of atoms, so it can be significant for small-to-medium sized molecules, especially when a smaller basis set is used. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Parallelized DFT grid construction. ## Questions; - [x] Is this necessary? I ran some scaling tests, and grid construction accounted for up to one third of the total wall time on 6 cores for molecules with between ~75 and ~225 atoms; - [x] Are there best practices for OpenMP specific to Psi4? I used the static scheduler since it seems that each atom will result in the same amount of work, but I'm open to other opinions. The best scheduler could also be determined empirically on a set of test calculations, but I don't know if the differences between scheduler performance is significant enough to warrant this. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] Ran all tests, passed everything but cbs-xtpl-freq, x2c1, dftd3-version, and mrcc-rohf_ccsdt_q_. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1291
https://github.com/psi4/psi4/pull/1291:870,Testability,test,test,870,"## Description; Parallelism was added to the construction of the DFT Grid with OpenMP. . The grid construction's asymptotic complexity is a function of the number of atoms, so it can be significant for small-to-medium sized molecules, especially when a smaller basis set is used. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Parallelized DFT grid construction. ## Questions; - [x] Is this necessary? I ran some scaling tests, and grid construction accounted for up to one third of the total wall time on 6 cores for molecules with between ~75 and ~225 atoms; - [x] Are there best practices for OpenMP specific to Psi4? I used the static scheduler since it seems that each atom will result in the same amount of work, but I'm open to other opinions. The best scheduler could also be determined empirically on a set of test calculations, but I don't know if the differences between scheduler performance is significant enough to warrant this. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] Ran all tests, passed everything but cbs-xtpl-freq, x2c1, dftd3-version, and mrcc-rohf_ccsdt_q_. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1291
https://github.com/psi4/psi4/pull/1291:1016,Testability,Test,Tests,1016,"## Description; Parallelism was added to the construction of the DFT Grid with OpenMP. . The grid construction's asymptotic complexity is a function of the number of atoms, so it can be significant for small-to-medium sized molecules, especially when a smaller basis set is used. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Parallelized DFT grid construction. ## Questions; - [x] Is this necessary? I ran some scaling tests, and grid construction accounted for up to one third of the total wall time on 6 cores for molecules with between ~75 and ~225 atoms; - [x] Are there best practices for OpenMP specific to Psi4? I used the static scheduler since it seems that each atom will result in the same amount of work, but I'm open to other opinions. The best scheduler could also be determined empirically on a set of test calculations, but I don't know if the differences between scheduler performance is significant enough to warrant this. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] Ran all tests, passed everything but cbs-xtpl-freq, x2c1, dftd3-version, and mrcc-rohf_ccsdt_q_. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1291
https://github.com/psi4/psi4/pull/1291:1066,Testability,test,tests,1066,"## Description; Parallelism was added to the construction of the DFT Grid with OpenMP. . The grid construction's asymptotic complexity is a function of the number of atoms, so it can be significant for small-to-medium sized molecules, especially when a smaller basis set is used. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Parallelized DFT grid construction. ## Questions; - [x] Is this necessary? I ran some scaling tests, and grid construction accounted for up to one third of the total wall time on 6 cores for molecules with between ~75 and ~225 atoms; - [x] Are there best practices for OpenMP specific to Psi4? I used the static scheduler since it seems that each atom will result in the same amount of work, but I'm open to other opinions. The best scheduler could also be determined empirically on a set of test calculations, but I don't know if the differences between scheduler performance is significant enough to warrant this. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] Ran all tests, passed everything but cbs-xtpl-freq, x2c1, dftd3-version, and mrcc-rohf_ccsdt_q_. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1291
https://github.com/psi4/psi4/issues/1295:206,Energy Efficiency,energy,energy,206,"During debugging of the failing (on Windows) test in #1235, I have noticed the following:; ```; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 1 -i in.dat -o n1.out; 	Nuclear repulsion energy..........................................PASSED; 6 displacements needed.; 1 2 3 4 5 6; 	SCF/cc-pVDZ Frequency 1...........................................PASSED; 	SCF/cc-pVDZ Frequency 2...........................................PASSED; 	SCF/cc-pVDZ Frequency 3...........................................PASSED; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 4 -i in.dat -o n4.out; 	Nuclear repulsion energy..........................................PASSED; 9 displacements needed.; 1 2 3 4 5 6 7 8 9; Warning: used thermodynamics relations inappropriate for low-frequency modes: ['476.8559' '479.2930' '484.2715']; 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; Traceback (most recent call last):; File ""/home/kraus/Applications/psi4-cbs_dict/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/home/kraus/Applications/psi4-cbs_dict/lib/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; ```; The in.dat, n1.out and n2.out files are attached.; [in.txt](https://github.com/psi4/psi4/files/2488549/in.txt); [n1.txt](https://github.com/psi4/psi4/files/2488550/n1.txt); [n4.txt](https://github.com/psi4/psi4/files/2488551/n4.txt). The number of SALC's in the parallel version (see line 362) is wrong: it should be 3, it is 6. @JonathonMisiewicz , ideas?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1295
https://github.com/psi4/psi4/issues/1295:635,Energy Efficiency,energy,energy,635,"During debugging of the failing (on Windows) test in #1235, I have noticed the following:; ```; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 1 -i in.dat -o n1.out; 	Nuclear repulsion energy..........................................PASSED; 6 displacements needed.; 1 2 3 4 5 6; 	SCF/cc-pVDZ Frequency 1...........................................PASSED; 	SCF/cc-pVDZ Frequency 2...........................................PASSED; 	SCF/cc-pVDZ Frequency 3...........................................PASSED; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 4 -i in.dat -o n4.out; 	Nuclear repulsion energy..........................................PASSED; 9 displacements needed.; 1 2 3 4 5 6 7 8 9; Warning: used thermodynamics relations inappropriate for low-frequency modes: ['476.8559' '479.2930' '484.2715']; 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; Traceback (most recent call last):; File ""/home/kraus/Applications/psi4-cbs_dict/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/home/kraus/Applications/psi4-cbs_dict/lib/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; ```; The in.dat, n1.out and n2.out files are attached.; [in.txt](https://github.com/psi4/psi4/files/2488549/in.txt); [n1.txt](https://github.com/psi4/psi4/files/2488550/n1.txt); [n4.txt](https://github.com/psi4/psi4/files/2488551/n4.txt). The number of SALC's in the parallel version (see line 362) is wrong: it should be 3, it is 6. @JonathonMisiewicz , ideas?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1295
https://github.com/psi4/psi4/issues/1295:1242,Integrability,message,message,1242,"During debugging of the failing (on Windows) test in #1235, I have noticed the following:; ```; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 1 -i in.dat -o n1.out; 	Nuclear repulsion energy..........................................PASSED; 6 displacements needed.; 1 2 3 4 5 6; 	SCF/cc-pVDZ Frequency 1...........................................PASSED; 	SCF/cc-pVDZ Frequency 2...........................................PASSED; 	SCF/cc-pVDZ Frequency 3...........................................PASSED; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 4 -i in.dat -o n4.out; 	Nuclear repulsion energy..........................................PASSED; 9 displacements needed.; 1 2 3 4 5 6 7 8 9; Warning: used thermodynamics relations inappropriate for low-frequency modes: ['476.8559' '479.2930' '484.2715']; 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; Traceback (most recent call last):; File ""/home/kraus/Applications/psi4-cbs_dict/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/home/kraus/Applications/psi4-cbs_dict/lib/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; ```; The in.dat, n1.out and n2.out files are attached.; [in.txt](https://github.com/psi4/psi4/files/2488549/in.txt); [n1.txt](https://github.com/psi4/psi4/files/2488550/n1.txt); [n4.txt](https://github.com/psi4/psi4/files/2488551/n4.txt). The number of SALC's in the parallel version (see line 362) is wrong: it should be 3, it is 6. @JonathonMisiewicz , ideas?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1295
https://github.com/psi4/psi4/issues/1295:45,Testability,test,test,45,"During debugging of the failing (on Windows) test in #1235, I have noticed the following:; ```; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 1 -i in.dat -o n1.out; 	Nuclear repulsion energy..........................................PASSED; 6 displacements needed.; 1 2 3 4 5 6; 	SCF/cc-pVDZ Frequency 1...........................................PASSED; 	SCF/cc-pVDZ Frequency 2...........................................PASSED; 	SCF/cc-pVDZ Frequency 3...........................................PASSED; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 4 -i in.dat -o n4.out; 	Nuclear repulsion energy..........................................PASSED; 9 displacements needed.; 1 2 3 4 5 6 7 8 9; Warning: used thermodynamics relations inappropriate for low-frequency modes: ['476.8559' '479.2930' '484.2715']; 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; Traceback (most recent call last):; File ""/home/kraus/Applications/psi4-cbs_dict/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/home/kraus/Applications/psi4-cbs_dict/lib/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; ```; The in.dat, n1.out and n2.out files are attached.; [in.txt](https://github.com/psi4/psi4/files/2488549/in.txt); [n1.txt](https://github.com/psi4/psi4/files/2488550/n1.txt); [n4.txt](https://github.com/psi4/psi4/files/2488551/n4.txt). The number of SALC's in the parallel version (see line 362) is wrong: it should be 3, it is 6. @JonathonMisiewicz , ideas?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1295
https://github.com/psi4/psi4/issues/1295:135,Testability,test,tests,135,"During debugging of the failing (on Windows) test in #1235, I have noticed the following:; ```; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 1 -i in.dat -o n1.out; 	Nuclear repulsion energy..........................................PASSED; 6 displacements needed.; 1 2 3 4 5 6; 	SCF/cc-pVDZ Frequency 1...........................................PASSED; 	SCF/cc-pVDZ Frequency 2...........................................PASSED; 	SCF/cc-pVDZ Frequency 3...........................................PASSED; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 4 -i in.dat -o n4.out; 	Nuclear repulsion energy..........................................PASSED; 9 displacements needed.; 1 2 3 4 5 6 7 8 9; Warning: used thermodynamics relations inappropriate for low-frequency modes: ['476.8559' '479.2930' '484.2715']; 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; Traceback (most recent call last):; File ""/home/kraus/Applications/psi4-cbs_dict/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/home/kraus/Applications/psi4-cbs_dict/lib/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; ```; The in.dat, n1.out and n2.out files are attached.; [in.txt](https://github.com/psi4/psi4/files/2488549/in.txt); [n1.txt](https://github.com/psi4/psi4/files/2488550/n1.txt); [n4.txt](https://github.com/psi4/psi4/files/2488551/n4.txt). The number of SALC's in the parallel version (see line 362) is wrong: it should be 3, it is 6. @JonathonMisiewicz , ideas?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1295
https://github.com/psi4/psi4/issues/1295:564,Testability,test,tests,564,"During debugging of the failing (on Windows) test in #1235, I have noticed the following:; ```; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 1 -i in.dat -o n1.out; 	Nuclear repulsion energy..........................................PASSED; 6 displacements needed.; 1 2 3 4 5 6; 	SCF/cc-pVDZ Frequency 1...........................................PASSED; 	SCF/cc-pVDZ Frequency 2...........................................PASSED; 	SCF/cc-pVDZ Frequency 3...........................................PASSED; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 4 -i in.dat -o n4.out; 	Nuclear repulsion energy..........................................PASSED; 9 displacements needed.; 1 2 3 4 5 6 7 8 9; Warning: used thermodynamics relations inappropriate for low-frequency modes: ['476.8559' '479.2930' '484.2715']; 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; Traceback (most recent call last):; File ""/home/kraus/Applications/psi4-cbs_dict/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/home/kraus/Applications/psi4-cbs_dict/lib/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; ```; The in.dat, n1.out and n2.out files are attached.; [in.txt](https://github.com/psi4/psi4/files/2488549/in.txt); [n1.txt](https://github.com/psi4/psi4/files/2488550/n1.txt); [n4.txt](https://github.com/psi4/psi4/files/2488551/n4.txt). The number of SALC's in the parallel version (see line 362) is wrong: it should be 3, it is 6. @JonathonMisiewicz , ideas?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1295
https://github.com/psi4/psi4/issues/1295:1222,Testability,Test,TestComparisonError,1222,"During debugging of the failing (on Windows) test in #1235, I have noticed the following:; ```; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 1 -i in.dat -o n1.out; 	Nuclear repulsion energy..........................................PASSED; 6 displacements needed.; 1 2 3 4 5 6; 	SCF/cc-pVDZ Frequency 1...........................................PASSED; 	SCF/cc-pVDZ Frequency 2...........................................PASSED; 	SCF/cc-pVDZ Frequency 3...........................................PASSED; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 4 -i in.dat -o n4.out; 	Nuclear repulsion energy..........................................PASSED; 9 displacements needed.; 1 2 3 4 5 6 7 8 9; Warning: used thermodynamics relations inappropriate for low-frequency modes: ['476.8559' '479.2930' '484.2715']; 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; Traceback (most recent call last):; File ""/home/kraus/Applications/psi4-cbs_dict/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/home/kraus/Applications/psi4-cbs_dict/lib/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; ```; The in.dat, n1.out and n2.out files are attached.; [in.txt](https://github.com/psi4/psi4/files/2488549/in.txt); [n1.txt](https://github.com/psi4/psi4/files/2488550/n1.txt); [n4.txt](https://github.com/psi4/psi4/files/2488551/n4.txt). The number of SALC's in the parallel version (see line 362) is wrong: it should be 3, it is 6. @JonathonMisiewicz , ideas?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1295
https://github.com/psi4/psi4/issues/1295:1252,Testability,Test,TestComparisonError,1252,"During debugging of the failing (on Windows) test in #1235, I have noticed the following:; ```; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 1 -i in.dat -o n1.out; 	Nuclear repulsion energy..........................................PASSED; 6 displacements needed.; 1 2 3 4 5 6; 	SCF/cc-pVDZ Frequency 1...........................................PASSED; 	SCF/cc-pVDZ Frequency 2...........................................PASSED; 	SCF/cc-pVDZ Frequency 3...........................................PASSED; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 4 -i in.dat -o n4.out; 	Nuclear repulsion energy..........................................PASSED; 9 displacements needed.; 1 2 3 4 5 6 7 8 9; Warning: used thermodynamics relations inappropriate for low-frequency modes: ['476.8559' '479.2930' '484.2715']; 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; Traceback (most recent call last):; File ""/home/kraus/Applications/psi4-cbs_dict/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/home/kraus/Applications/psi4-cbs_dict/lib/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; ```; The in.dat, n1.out and n2.out files are attached.; [in.txt](https://github.com/psi4/psi4/files/2488549/in.txt); [n1.txt](https://github.com/psi4/psi4/files/2488550/n1.txt); [n4.txt](https://github.com/psi4/psi4/files/2488551/n4.txt). The number of SALC's in the parallel version (see line 362) is wrong: it should be 3, it is 6. @JonathonMisiewicz , ideas?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1295
https://github.com/psi4/psi4/issues/1296:64,Performance,optimiz,optimize,64,"I wondered how the pre-#1289 driver handled core cleaning when `optimize` called for a `hessian`. I discovered the handling was bugged. The following input file crashes when I try to run it on my control version of Psi, 287272b. The initial Hessian is fine because `GUESS` hasn't yet been set to `READ`. (I assume that happens somewhere in OPTKING.) After the first step, `GUESS` is set to read, causing the seventh displacement for the hessian to crash with `ValidationError: Cannot compute projection of different symmetries.` I had been under the impression that https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1454-L1455 existed precisely to avoid such things, so maybe those lines do something else?. ```; molecule h2o { ; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 7; full_hess_every 1 ; }. optimize('scf', dertype = 0); ```. EDIT: The conditions are more general than originally reported. Any findif hessian with `GUESS` set to `READ` will trigger the bug. The hessians computed by `full_hess_every` are just one particular instance.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1296
https://github.com/psi4/psi4/issues/1296:885,Performance,optimiz,optimize,885,"I wondered how the pre-#1289 driver handled core cleaning when `optimize` called for a `hessian`. I discovered the handling was bugged. The following input file crashes when I try to run it on my control version of Psi, 287272b. The initial Hessian is fine because `GUESS` hasn't yet been set to `READ`. (I assume that happens somewhere in OPTKING.) After the first step, `GUESS` is set to read, causing the seventh displacement for the hessian to crash with `ValidationError: Cannot compute projection of different symmetries.` I had been under the impression that https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1454-L1455 existed precisely to avoid such things, so maybe those lines do something else?. ```; molecule h2o { ; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 7; full_hess_every 1 ; }. optimize('scf', dertype = 0); ```. EDIT: The conditions are more general than originally reported. Any findif hessian with `GUESS` set to `READ` will trigger the bug. The hessians computed by `full_hess_every` are just one particular instance.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1296
https://github.com/psi4/psi4/issues/1296:662,Safety,avoid,avoid,662,"I wondered how the pre-#1289 driver handled core cleaning when `optimize` called for a `hessian`. I discovered the handling was bugged. The following input file crashes when I try to run it on my control version of Psi, 287272b. The initial Hessian is fine because `GUESS` hasn't yet been set to `READ`. (I assume that happens somewhere in OPTKING.) After the first step, `GUESS` is set to read, causing the seventh displacement for the hessian to crash with `ValidationError: Cannot compute projection of different symmetries.` I had been under the impression that https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1454-L1455 existed precisely to avoid such things, so maybe those lines do something else?. ```; molecule h2o { ; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 7; full_hess_every 1 ; }. optimize('scf', dertype = 0); ```. EDIT: The conditions are more general than originally reported. Any findif hessian with `GUESS` set to `READ` will trigger the bug. The hessians computed by `full_hess_every` are just one particular instance.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1296
https://github.com/psi4/psi4/issues/1296:460,Security,Validat,ValidationError,460,"I wondered how the pre-#1289 driver handled core cleaning when `optimize` called for a `hessian`. I discovered the handling was bugged. The following input file crashes when I try to run it on my control version of Psi, 287272b. The initial Hessian is fine because `GUESS` hasn't yet been set to `READ`. (I assume that happens somewhere in OPTKING.) After the first step, `GUESS` is set to read, causing the seventh displacement for the hessian to crash with `ValidationError: Cannot compute projection of different symmetries.` I had been under the impression that https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1454-L1455 existed precisely to avoid such things, so maybe those lines do something else?. ```; molecule h2o { ; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 7; full_hess_every 1 ; }. optimize('scf', dertype = 0); ```. EDIT: The conditions are more general than originally reported. Any findif hessian with `GUESS` set to `READ` will trigger the bug. The hessians computed by `full_hess_every` are just one particular instance.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1296
https://github.com/psi4/psi4/issues/1297:91,Availability,error,error,91,"Psi currently can't project orbitals across different symmetries. Attempting gives you the error, `Cannot compute projection of different symmetries.` We should be able to project to the proper subgroups. This is a common problem in finite difference computations where read is enabled. For an example file. ```; molecule h2o { ; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 7; full_hess_every 1 ; }. optimize('scf', dertype = 0); ```. This issue is blocking the expected behavior upon fix of #1296. Even when reading orbitals from the original C2v geometry, the orbitals can't be projected to Cs symmetry. #1296 will address problems of poor read orbitals and switching from one proper subgroup of the reference symmetry to another proper subgroup that is not a subgroup of the previous proper subgroup. (Example: A C1 displacement and then a Cs displacement.). Although this causes similar _symptoms_ to #1296, its fix is beyond the scope of modifications to the finite difference code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1297
https://github.com/psi4/psi4/issues/1297:471,Performance,optimiz,optimize,471,"Psi currently can't project orbitals across different symmetries. Attempting gives you the error, `Cannot compute projection of different symmetries.` We should be able to project to the proper subgroups. This is a common problem in finite difference computations where read is enabled. For an example file. ```; molecule h2o { ; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 7; full_hess_every 1 ; }. optimize('scf', dertype = 0); ```. This issue is blocking the expected behavior upon fix of #1296. Even when reading orbitals from the original C2v geometry, the orbitals can't be projected to Cs symmetry. #1296 will address problems of poor read orbitals and switching from one proper subgroup of the reference symmetry to another proper subgroup that is not a subgroup of the previous proper subgroup. (Example: A C1 displacement and then a Cs displacement.). Although this causes similar _symptoms_ to #1296, its fix is beyond the scope of modifications to the finite difference code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1297
https://github.com/psi4/psi4/issues/1298:505,Energy Efficiency,energy,energy,505,"A clean version of 287272b showed that when `full_hess_every` is enabled in an optimization, the data is corrupted. Every time a hessian is taken, it appears to be taken from the starting geometry, not the current geometry in the optimization. optking thinks the ""reference"" of the hessian it gets should be the starting point for the next step for purposes of convergence criteria output, but not for purposes of the internal coordinate step. In this example, every odd displacement has exactly the same energy. To me, this screams that `intco.dat` is being handled correctly, but some other file is not. Input file:; ```; molecule h2o { ; symmetry c1; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 50; full_hess_every 2 ; }. optimize('scf', dertype = 0); ```. We direly need `full_hess_every` coverage in the test suite. `grep` says the only test covering it is `opt10`, which isn't even built when I build all the tests, for some reason. The exact commit number is probably not integral to this problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1298
https://github.com/psi4/psi4/issues/1298:79,Performance,optimiz,optimization,79,"A clean version of 287272b showed that when `full_hess_every` is enabled in an optimization, the data is corrupted. Every time a hessian is taken, it appears to be taken from the starting geometry, not the current geometry in the optimization. optking thinks the ""reference"" of the hessian it gets should be the starting point for the next step for purposes of convergence criteria output, but not for purposes of the internal coordinate step. In this example, every odd displacement has exactly the same energy. To me, this screams that `intco.dat` is being handled correctly, but some other file is not. Input file:; ```; molecule h2o { ; symmetry c1; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 50; full_hess_every 2 ; }. optimize('scf', dertype = 0); ```. We direly need `full_hess_every` coverage in the test suite. `grep` says the only test covering it is `opt10`, which isn't even built when I build all the tests, for some reason. The exact commit number is probably not integral to this problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1298
https://github.com/psi4/psi4/issues/1298:230,Performance,optimiz,optimization,230,"A clean version of 287272b showed that when `full_hess_every` is enabled in an optimization, the data is corrupted. Every time a hessian is taken, it appears to be taken from the starting geometry, not the current geometry in the optimization. optking thinks the ""reference"" of the hessian it gets should be the starting point for the next step for purposes of convergence criteria output, but not for purposes of the internal coordinate step. In this example, every odd displacement has exactly the same energy. To me, this screams that `intco.dat` is being handled correctly, but some other file is not. Input file:; ```; molecule h2o { ; symmetry c1; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 50; full_hess_every 2 ; }. optimize('scf', dertype = 0); ```. We direly need `full_hess_every` coverage in the test suite. `grep` says the only test covering it is `opt10`, which isn't even built when I build all the tests, for some reason. The exact commit number is probably not integral to this problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1298
https://github.com/psi4/psi4/issues/1298:796,Performance,optimiz,optimize,796,"A clean version of 287272b showed that when `full_hess_every` is enabled in an optimization, the data is corrupted. Every time a hessian is taken, it appears to be taken from the starting geometry, not the current geometry in the optimization. optking thinks the ""reference"" of the hessian it gets should be the starting point for the next step for purposes of convergence criteria output, but not for purposes of the internal coordinate step. In this example, every odd displacement has exactly the same energy. To me, this screams that `intco.dat` is being handled correctly, but some other file is not. Input file:; ```; molecule h2o { ; symmetry c1; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 50; full_hess_every 2 ; }. optimize('scf', dertype = 0); ```. We direly need `full_hess_every` coverage in the test suite. `grep` says the only test covering it is `opt10`, which isn't even built when I build all the tests, for some reason. The exact commit number is probably not integral to this problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1298
https://github.com/psi4/psi4/issues/1298:880,Testability,test,test,880,"A clean version of 287272b showed that when `full_hess_every` is enabled in an optimization, the data is corrupted. Every time a hessian is taken, it appears to be taken from the starting geometry, not the current geometry in the optimization. optking thinks the ""reference"" of the hessian it gets should be the starting point for the next step for purposes of convergence criteria output, but not for purposes of the internal coordinate step. In this example, every odd displacement has exactly the same energy. To me, this screams that `intco.dat` is being handled correctly, but some other file is not. Input file:; ```; molecule h2o { ; symmetry c1; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 50; full_hess_every 2 ; }. optimize('scf', dertype = 0); ```. We direly need `full_hess_every` coverage in the test suite. `grep` says the only test covering it is `opt10`, which isn't even built when I build all the tests, for some reason. The exact commit number is probably not integral to this problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1298
https://github.com/psi4/psi4/issues/1298:913,Testability,test,test,913,"A clean version of 287272b showed that when `full_hess_every` is enabled in an optimization, the data is corrupted. Every time a hessian is taken, it appears to be taken from the starting geometry, not the current geometry in the optimization. optking thinks the ""reference"" of the hessian it gets should be the starting point for the next step for purposes of convergence criteria output, but not for purposes of the internal coordinate step. In this example, every odd displacement has exactly the same energy. To me, this screams that `intco.dat` is being handled correctly, but some other file is not. Input file:; ```; molecule h2o { ; symmetry c1; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 50; full_hess_every 2 ; }. optimize('scf', dertype = 0); ```. We direly need `full_hess_every` coverage in the test suite. `grep` says the only test covering it is `opt10`, which isn't even built when I build all the tests, for some reason. The exact commit number is probably not integral to this problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1298
https://github.com/psi4/psi4/issues/1298:986,Testability,test,tests,986,"A clean version of 287272b showed that when `full_hess_every` is enabled in an optimization, the data is corrupted. Every time a hessian is taken, it appears to be taken from the starting geometry, not the current geometry in the optimization. optking thinks the ""reference"" of the hessian it gets should be the starting point for the next step for purposes of convergence criteria output, but not for purposes of the internal coordinate step. In this example, every odd displacement has exactly the same energy. To me, this screams that `intco.dat` is being handled correctly, but some other file is not. Input file:; ```; molecule h2o { ; symmetry c1; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 50; full_hess_every 2 ; }. optimize('scf', dertype = 0); ```. We direly need `full_hess_every` coverage in the test suite. `grep` says the only test covering it is `opt10`, which isn't even built when I build all the tests, for some reason. The exact commit number is probably not integral to this problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1298
https://github.com/psi4/psi4/pull/1299:175,Testability,test,test,175,"## Description; Fixes and closes #1298. `full_hess_every` now takes hessians at the latest geometry rather than the reference geometry. Because this bug was not caught by the test suite, I've added a test to catch this bug, and it clocks in at just over 6 seconds on my Mac. ## Checklist; - [x] Tests added for newly working features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1299
https://github.com/psi4/psi4/pull/1299:200,Testability,test,test,200,"## Description; Fixes and closes #1298. `full_hess_every` now takes hessians at the latest geometry rather than the reference geometry. Because this bug was not caught by the test suite, I've added a test to catch this bug, and it clocks in at just over 6 seconds on my Mac. ## Checklist; - [x] Tests added for newly working features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1299
https://github.com/psi4/psi4/pull/1299:295,Testability,Test,Tests,295,"## Description; Fixes and closes #1298. `full_hess_every` now takes hessians at the latest geometry rather than the reference geometry. Because this bug was not caught by the test suite, I've added a test to catch this bug, and it clocks in at just over 6 seconds on my Mac. ## Checklist; - [x] Tests added for newly working features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1299
https://github.com/psi4/psi4/pull/1300:148,Testability,test,test,148,"## Description; fixes #1284 by forcing flush in `core.print_out`. Similar to what is done in `PsiOutStream.cc` is already.; Perhaps @PeterKraus can test it, as he was the only one confirming the issue. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1300
https://github.com/psi4/psi4/pull/1300:256,Testability,test,tests,256,"## Description; fixes #1284 by forcing flush in `core.print_out`. Similar to what is done in `PsiOutStream.cc` is already.; Perhaps @PeterKraus can test it, as he was the only one confirming the issue. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1300
https://github.com/psi4/psi4/pull/1300:347,Testability,test,tests,347,"## Description; fixes #1284 by forcing flush in `core.print_out`. Similar to what is done in `PsiOutStream.cc` is already.; Perhaps @PeterKraus can test it, as he was the only one confirming the issue. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1300
https://github.com/psi4/psi4/issues/1301:292,Deployability,install,installed,292,Stage directory ends up having each file twice. For example:; ```; $ find work/stage/ -name 1_xk20_9E1; work/stage/usr/local/share/psi4/quadratures/1_x/1_xk20_9E1; work/stage/usr/ports/science/psi4/work/.build/stage/share/psi4/quadratures/1_x/1_xk20_9E1; ```. The second version shouldn't be installed.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1301
https://github.com/psi4/psi4/issues/1302:156,Deployability,install,installs,156,"Libxc:; 1. This line https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L38 includes ```libxc/xc.h``` when ```libxc``` installs ```include/xc.h```; 2. Libxc project doesn't install .cmake files that you rely on. Only cmake build installs .cmake files and cmake build is broken:; https://gitlab.com/libxc/libxc/issues/66; https://gitlab.com/libxc/libxc/issues/67; https://gitlab.com/libxc/libxc/issues/68. Libint:; * Similarly to ```Libxc```, ```Libint``` has problems in its cmake build and it can't be used https://github.com/evaleev/libint/issues/111 https://github.com/evaleev/libint/issues/112. I created problem reports for these projects, but their authors are unresponsive.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1302
https://github.com/psi4/psi4/issues/1302:210,Deployability,install,install,210,"Libxc:; 1. This line https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L38 includes ```libxc/xc.h``` when ```libxc``` installs ```include/xc.h```; 2. Libxc project doesn't install .cmake files that you rely on. Only cmake build installs .cmake files and cmake build is broken:; https://gitlab.com/libxc/libxc/issues/66; https://gitlab.com/libxc/libxc/issues/67; https://gitlab.com/libxc/libxc/issues/68. Libint:; * Similarly to ```Libxc```, ```Libint``` has problems in its cmake build and it can't be used https://github.com/evaleev/libint/issues/111 https://github.com/evaleev/libint/issues/112. I created problem reports for these projects, but their authors are unresponsive.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1302
https://github.com/psi4/psi4/issues/1302:266,Deployability,install,installs,266,"Libxc:; 1. This line https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L38 includes ```libxc/xc.h``` when ```libxc``` installs ```include/xc.h```; 2. Libxc project doesn't install .cmake files that you rely on. Only cmake build installs .cmake files and cmake build is broken:; https://gitlab.com/libxc/libxc/issues/66; https://gitlab.com/libxc/libxc/issues/67; https://gitlab.com/libxc/libxc/issues/68. Libint:; * Similarly to ```Libxc```, ```Libint``` has problems in its cmake build and it can't be used https://github.com/evaleev/libint/issues/111 https://github.com/evaleev/libint/issues/112. I created problem reports for these projects, but their authors are unresponsive.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1302
https://github.com/psi4/psi4/pull/1304:286,Energy Efficiency,energy,energy,286,"## Description; This is a first pass at implementing serialization of the Wavefunction object as suggested by @dgasmith in #887 . This functionality allows a wavefunction to be read to or written from a file:. closes #887 . ```; # get a wavefunction from some calculation; e, wfn_old = energy('mp2', return_wfn=True). # write the wavefunction to file; Wavefunction.to_file(wfn_old, filename). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(filename); ```. The wavefunction can also be stored directly in memory as a python dictionary:; ```; # write the wavefunction to file; wfn_dict = Wavefunction.to_file(wfn_old). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(wfn_dict); ```. In this code snippet, `wfn_new` and `wfn_old` should be identical (by value, not reference). A test case was added that corresponds to this example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Read/Write Wavefunction object to file; - [x] Serialize a few more variables (PCM related stuff, etc.); - [x] ~~Deal with Wavefunction inheritance~~ (future PR). ## Questions; - [x] Does anyone have thoughts on the file naming scheme? Currently, the user specifies the filename in the call and a `.npy` file is generated in the working directory. This allows the user to have an arbitrary number of saved wavefunctions that persist between jobs. Alternatively, using a reserved filename (similar the `scf guess` procedure) might be better because users wouldn't have to work with filenames at all, but they would be limited to a single wavefunction.; - [x] ~~How should classes that are derived from Wavefunction (like CIWavefunction) be dealt with?~~; - [ ] Is everything implemented in a reasonable location? ; - [ ] Any inconsistencies in format/style?. ## Checklist; - [x] Added Test `serial-wfn`; - [ ] [All or relevant fraction of full ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1304
https://github.com/psi4/psi4/pull/1304:1126,Modifiability,variab,variables,1126,"d by @dgasmith in #887 . This functionality allows a wavefunction to be read to or written from a file:. closes #887 . ```; # get a wavefunction from some calculation; e, wfn_old = energy('mp2', return_wfn=True). # write the wavefunction to file; Wavefunction.to_file(wfn_old, filename). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(filename); ```. The wavefunction can also be stored directly in memory as a python dictionary:; ```; # write the wavefunction to file; wfn_dict = Wavefunction.to_file(wfn_old). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(wfn_dict); ```. In this code snippet, `wfn_new` and `wfn_old` should be identical (by value, not reference). A test case was added that corresponds to this example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Read/Write Wavefunction object to file; - [x] Serialize a few more variables (PCM related stuff, etc.); - [x] ~~Deal with Wavefunction inheritance~~ (future PR). ## Questions; - [x] Does anyone have thoughts on the file naming scheme? Currently, the user specifies the filename in the call and a `.npy` file is generated in the working directory. This allows the user to have an arbitrary number of saved wavefunctions that persist between jobs. Alternatively, using a reserved filename (similar the `scf guess` procedure) might be better because users wouldn't have to work with filenames at all, but they would be limited to a single wavefunction.; - [x] ~~How should classes that are derived from Wavefunction (like CIWavefunction) be dealt with?~~; - [ ] Is everything implemented in a reasonable location? ; - [ ] Any inconsistencies in format/style?. ## Checklist; - [x] Added Test `serial-wfn`; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Sta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1304
https://github.com/psi4/psi4/pull/1304:1194,Modifiability,inherit,inheritance,1194,"a wavefunction to be read to or written from a file:. closes #887 . ```; # get a wavefunction from some calculation; e, wfn_old = energy('mp2', return_wfn=True). # write the wavefunction to file; Wavefunction.to_file(wfn_old, filename). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(filename); ```. The wavefunction can also be stored directly in memory as a python dictionary:; ```; # write the wavefunction to file; wfn_dict = Wavefunction.to_file(wfn_old). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(wfn_dict); ```. In this code snippet, `wfn_new` and `wfn_old` should be identical (by value, not reference). A test case was added that corresponds to this example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Read/Write Wavefunction object to file; - [x] Serialize a few more variables (PCM related stuff, etc.); - [x] ~~Deal with Wavefunction inheritance~~ (future PR). ## Questions; - [x] Does anyone have thoughts on the file naming scheme? Currently, the user specifies the filename in the call and a `.npy` file is generated in the working directory. This allows the user to have an arbitrary number of saved wavefunctions that persist between jobs. Alternatively, using a reserved filename (similar the `scf guess` procedure) might be better because users wouldn't have to work with filenames at all, but they would be limited to a single wavefunction.; - [x] ~~How should classes that are derived from Wavefunction (like CIWavefunction) be dealt with?~~; - [ ] Is everything implemented in a reasonable location? ; - [ ] Any inconsistencies in format/style?. ## Checklist; - [x] Added Test `serial-wfn`; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1304
https://github.com/psi4/psi4/pull/1304:907,Testability,test,test,907,"## Description; This is a first pass at implementing serialization of the Wavefunction object as suggested by @dgasmith in #887 . This functionality allows a wavefunction to be read to or written from a file:. closes #887 . ```; # get a wavefunction from some calculation; e, wfn_old = energy('mp2', return_wfn=True). # write the wavefunction to file; Wavefunction.to_file(wfn_old, filename). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(filename); ```. The wavefunction can also be stored directly in memory as a python dictionary:; ```; # write the wavefunction to file; wfn_dict = Wavefunction.to_file(wfn_old). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(wfn_dict); ```. In this code snippet, `wfn_new` and `wfn_old` should be identical (by value, not reference). A test case was added that corresponds to this example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Read/Write Wavefunction object to file; - [x] Serialize a few more variables (PCM related stuff, etc.); - [x] ~~Deal with Wavefunction inheritance~~ (future PR). ## Questions; - [x] Does anyone have thoughts on the file naming scheme? Currently, the user specifies the filename in the call and a `.npy` file is generated in the working directory. This allows the user to have an arbitrary number of saved wavefunctions that persist between jobs. Alternatively, using a reserved filename (similar the `scf guess` procedure) might be better because users wouldn't have to work with filenames at all, but they would be limited to a single wavefunction.; - [x] ~~How should classes that are derived from Wavefunction (like CIWavefunction) be dealt with?~~; - [ ] Is everything implemented in a reasonable location? ; - [ ] Any inconsistencies in format/style?. ## Checklist; - [x] Added Test `serial-wfn`; - [ ] [All or relevant fraction of full ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1304
https://github.com/psi4/psi4/pull/1304:1942,Testability,Test,Test,1942,"a wavefunction to be read to or written from a file:. closes #887 . ```; # get a wavefunction from some calculation; e, wfn_old = energy('mp2', return_wfn=True). # write the wavefunction to file; Wavefunction.to_file(wfn_old, filename). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(filename); ```. The wavefunction can also be stored directly in memory as a python dictionary:; ```; # write the wavefunction to file; wfn_dict = Wavefunction.to_file(wfn_old). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(wfn_dict); ```. In this code snippet, `wfn_new` and `wfn_old` should be identical (by value, not reference). A test case was added that corresponds to this example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Read/Write Wavefunction object to file; - [x] Serialize a few more variables (PCM related stuff, etc.); - [x] ~~Deal with Wavefunction inheritance~~ (future PR). ## Questions; - [x] Does anyone have thoughts on the file naming scheme? Currently, the user specifies the filename in the call and a `.npy` file is generated in the working directory. This allows the user to have an arbitrary number of saved wavefunctions that persist between jobs. Alternatively, using a reserved filename (similar the `scf guess` procedure) might be better because users wouldn't have to work with filenames at all, but they would be limited to a single wavefunction.; - [x] ~~How should classes that are derived from Wavefunction (like CIWavefunction) be dealt with?~~; - [ ] Is everything implemented in a reasonable location? ; - [ ] Any inconsistencies in format/style?. ## Checklist; - [x] Added Test `serial-wfn`; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1304
https://github.com/psi4/psi4/pull/1304:2001,Testability,test,tests,2001,"a wavefunction to be read to or written from a file:. closes #887 . ```; # get a wavefunction from some calculation; e, wfn_old = energy('mp2', return_wfn=True). # write the wavefunction to file; Wavefunction.to_file(wfn_old, filename). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(filename); ```. The wavefunction can also be stored directly in memory as a python dictionary:; ```; # write the wavefunction to file; wfn_dict = Wavefunction.to_file(wfn_old). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(wfn_dict); ```. In this code snippet, `wfn_new` and `wfn_old` should be identical (by value, not reference). A test case was added that corresponds to this example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Read/Write Wavefunction object to file; - [x] Serialize a few more variables (PCM related stuff, etc.); - [x] ~~Deal with Wavefunction inheritance~~ (future PR). ## Questions; - [x] Does anyone have thoughts on the file naming scheme? Currently, the user specifies the filename in the call and a `.npy` file is generated in the working directory. This allows the user to have an arbitrary number of saved wavefunctions that persist between jobs. Alternatively, using a reserved filename (similar the `scf guess` procedure) might be better because users wouldn't have to work with filenames at all, but they would be limited to a single wavefunction.; - [x] ~~How should classes that are derived from Wavefunction (like CIWavefunction) be dealt with?~~; - [ ] Is everything implemented in a reasonable location? ; - [ ] Any inconsistencies in format/style?. ## Checklist; - [x] Added Test `serial-wfn`; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1304
https://github.com/psi4/psi4/pull/1304:2092,Testability,test,tests,2092,"a wavefunction to be read to or written from a file:. closes #887 . ```; # get a wavefunction from some calculation; e, wfn_old = energy('mp2', return_wfn=True). # write the wavefunction to file; Wavefunction.to_file(wfn_old, filename). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(filename); ```. The wavefunction can also be stored directly in memory as a python dictionary:; ```; # write the wavefunction to file; wfn_dict = Wavefunction.to_file(wfn_old). # ...; # other calculations may occur; # ... # read the wavefunction from file; wfn_new = Wavefunction.from_file(wfn_dict); ```. In this code snippet, `wfn_new` and `wfn_old` should be identical (by value, not reference). A test case was added that corresponds to this example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Read/Write Wavefunction object to file; - [x] Serialize a few more variables (PCM related stuff, etc.); - [x] ~~Deal with Wavefunction inheritance~~ (future PR). ## Questions; - [x] Does anyone have thoughts on the file naming scheme? Currently, the user specifies the filename in the call and a `.npy` file is generated in the working directory. This allows the user to have an arbitrary number of saved wavefunctions that persist between jobs. Alternatively, using a reserved filename (similar the `scf guess` procedure) might be better because users wouldn't have to work with filenames at all, but they would be limited to a single wavefunction.; - [x] ~~How should classes that are derived from Wavefunction (like CIWavefunction) be dealt with?~~; - [ ] Is everything implemented in a reasonable location? ; - [ ] Any inconsistencies in format/style?. ## Checklist; - [x] Added Test `serial-wfn`; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1304
https://github.com/psi4/psi4/pull/1305:234,Deployability,update,updated,234,"## Description; I didn't know https://github.com/lothian/test-psi4-map existed, so possibly others don't either. Now that we have codemeta.json for this sort of info, let's consolidate there. Added latitude and longitude fields. Also updated Alex Sokolov and Peter Kraus locations. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1305
https://github.com/psi4/psi4/pull/1305:57,Testability,test,test-,57,"## Description; I didn't know https://github.com/lothian/test-psi4-map existed, so possibly others don't either. Now that we have codemeta.json for this sort of info, let's consolidate there. Added latitude and longitude fields. Also updated Alex Sokolov and Peter Kraus locations. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1305
https://github.com/psi4/psi4/issues/1306:31,Performance,optimiz,optimization,31,File 1 is not removed after an optimization in which a hessian is computed. This causes the step counter to not restart after consecutive optimizations. Example file below. Should be fixed as part of #1289 or Py-Optking. ```; molecule h2o { ; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; full_hess_every 0; g_convergence gau_verytight; }. optimize('scf'); optimize('scf'); ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1306
https://github.com/psi4/psi4/issues/1306:138,Performance,optimiz,optimizations,138,File 1 is not removed after an optimization in which a hessian is computed. This causes the step counter to not restart after consecutive optimizations. Example file below. Should be fixed as part of #1289 or Py-Optking. ```; molecule h2o { ; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; full_hess_every 0; g_convergence gau_verytight; }. optimize('scf'); optimize('scf'); ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1306
https://github.com/psi4/psi4/issues/1306:386,Performance,optimiz,optimize,386,File 1 is not removed after an optimization in which a hessian is computed. This causes the step counter to not restart after consecutive optimizations. Example file below. Should be fixed as part of #1289 or Py-Optking. ```; molecule h2o { ; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; full_hess_every 0; g_convergence gau_verytight; }. optimize('scf'); optimize('scf'); ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1306
https://github.com/psi4/psi4/issues/1306:403,Performance,optimiz,optimize,403,File 1 is not removed after an optimization in which a hessian is computed. This causes the step counter to not restart after consecutive optimizations. Example file below. Should be fixed as part of #1289 or Py-Optking. ```; molecule h2o { ; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; full_hess_every 0; g_convergence gau_verytight; }. optimize('scf'); optimize('scf'); ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1306
https://github.com/psi4/psi4/pull/1307:245,Testability,Test,Tests,245,## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1307
https://github.com/psi4/psi4/pull/1307:319,Testability,test,tests,319,## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1307
https://github.com/psi4/psi4/pull/1307:410,Testability,test,tests,410,## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1307
https://github.com/psi4/psi4/pull/1308:245,Testability,Test,Tests,245,## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1308
https://github.com/psi4/psi4/pull/1308:319,Testability,test,tests,319,## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1308
https://github.com/psi4/psi4/pull/1308:410,Testability,test,tests,410,## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1308
https://github.com/psi4/psi4/issues/1309:365,Availability,error,errors,365,"During an optimization where an initial hessian by finite difference is requested, the gradient is requested at the starting geometry _twice_. Once by the optimizer and once to determine what modes should be projected in the finite difference treatment. The SCF and final energies agree, but for some reason, the estimated MP2 energies disagree, and the RMS lambda errors don't match either. In this example, the MP2 correlation energy the first time is -0.018978215515226, but the MP2 correlation energy the second time is -0.017979235543976. An MP2 computation agreed with the first correlation energy. Minimal input file below. I've seen this bug on systems with UHF and systems of C1 symmetry. I want this fixed ASAP, just in case the bug does affect energies in some way I haven't seen, so I'll take this myself.; ```; molecule mol {; 0 1 ; units bohr; H; H 1 1.8 ; }. set {; reference rhf ; basis sto-3g; scf_type pk; dcft_functional odc-12; full_hess_every 0; }. optimize('dcft'); ````",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1309
https://github.com/psi4/psi4/issues/1309:429,Energy Efficiency,energy,energy,429,"During an optimization where an initial hessian by finite difference is requested, the gradient is requested at the starting geometry _twice_. Once by the optimizer and once to determine what modes should be projected in the finite difference treatment. The SCF and final energies agree, but for some reason, the estimated MP2 energies disagree, and the RMS lambda errors don't match either. In this example, the MP2 correlation energy the first time is -0.018978215515226, but the MP2 correlation energy the second time is -0.017979235543976. An MP2 computation agreed with the first correlation energy. Minimal input file below. I've seen this bug on systems with UHF and systems of C1 symmetry. I want this fixed ASAP, just in case the bug does affect energies in some way I haven't seen, so I'll take this myself.; ```; molecule mol {; 0 1 ; units bohr; H; H 1 1.8 ; }. set {; reference rhf ; basis sto-3g; scf_type pk; dcft_functional odc-12; full_hess_every 0; }. optimize('dcft'); ````",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1309
https://github.com/psi4/psi4/issues/1309:498,Energy Efficiency,energy,energy,498,"During an optimization where an initial hessian by finite difference is requested, the gradient is requested at the starting geometry _twice_. Once by the optimizer and once to determine what modes should be projected in the finite difference treatment. The SCF and final energies agree, but for some reason, the estimated MP2 energies disagree, and the RMS lambda errors don't match either. In this example, the MP2 correlation energy the first time is -0.018978215515226, but the MP2 correlation energy the second time is -0.017979235543976. An MP2 computation agreed with the first correlation energy. Minimal input file below. I've seen this bug on systems with UHF and systems of C1 symmetry. I want this fixed ASAP, just in case the bug does affect energies in some way I haven't seen, so I'll take this myself.; ```; molecule mol {; 0 1 ; units bohr; H; H 1 1.8 ; }. set {; reference rhf ; basis sto-3g; scf_type pk; dcft_functional odc-12; full_hess_every 0; }. optimize('dcft'); ````",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1309
https://github.com/psi4/psi4/issues/1309:597,Energy Efficiency,energy,energy,597,"During an optimization where an initial hessian by finite difference is requested, the gradient is requested at the starting geometry _twice_. Once by the optimizer and once to determine what modes should be projected in the finite difference treatment. The SCF and final energies agree, but for some reason, the estimated MP2 energies disagree, and the RMS lambda errors don't match either. In this example, the MP2 correlation energy the first time is -0.018978215515226, but the MP2 correlation energy the second time is -0.017979235543976. An MP2 computation agreed with the first correlation energy. Minimal input file below. I've seen this bug on systems with UHF and systems of C1 symmetry. I want this fixed ASAP, just in case the bug does affect energies in some way I haven't seen, so I'll take this myself.; ```; molecule mol {; 0 1 ; units bohr; H; H 1 1.8 ; }. set {; reference rhf ; basis sto-3g; scf_type pk; dcft_functional odc-12; full_hess_every 0; }. optimize('dcft'); ````",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1309
https://github.com/psi4/psi4/issues/1309:10,Performance,optimiz,optimization,10,"During an optimization where an initial hessian by finite difference is requested, the gradient is requested at the starting geometry _twice_. Once by the optimizer and once to determine what modes should be projected in the finite difference treatment. The SCF and final energies agree, but for some reason, the estimated MP2 energies disagree, and the RMS lambda errors don't match either. In this example, the MP2 correlation energy the first time is -0.018978215515226, but the MP2 correlation energy the second time is -0.017979235543976. An MP2 computation agreed with the first correlation energy. Minimal input file below. I've seen this bug on systems with UHF and systems of C1 symmetry. I want this fixed ASAP, just in case the bug does affect energies in some way I haven't seen, so I'll take this myself.; ```; molecule mol {; 0 1 ; units bohr; H; H 1 1.8 ; }. set {; reference rhf ; basis sto-3g; scf_type pk; dcft_functional odc-12; full_hess_every 0; }. optimize('dcft'); ````",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1309
https://github.com/psi4/psi4/issues/1309:155,Performance,optimiz,optimizer,155,"During an optimization where an initial hessian by finite difference is requested, the gradient is requested at the starting geometry _twice_. Once by the optimizer and once to determine what modes should be projected in the finite difference treatment. The SCF and final energies agree, but for some reason, the estimated MP2 energies disagree, and the RMS lambda errors don't match either. In this example, the MP2 correlation energy the first time is -0.018978215515226, but the MP2 correlation energy the second time is -0.017979235543976. An MP2 computation agreed with the first correlation energy. Minimal input file below. I've seen this bug on systems with UHF and systems of C1 symmetry. I want this fixed ASAP, just in case the bug does affect energies in some way I haven't seen, so I'll take this myself.; ```; molecule mol {; 0 1 ; units bohr; H; H 1 1.8 ; }. set {; reference rhf ; basis sto-3g; scf_type pk; dcft_functional odc-12; full_hess_every 0; }. optimize('dcft'); ````",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1309
https://github.com/psi4/psi4/issues/1309:970,Performance,optimiz,optimize,970,"During an optimization where an initial hessian by finite difference is requested, the gradient is requested at the starting geometry _twice_. Once by the optimizer and once to determine what modes should be projected in the finite difference treatment. The SCF and final energies agree, but for some reason, the estimated MP2 energies disagree, and the RMS lambda errors don't match either. In this example, the MP2 correlation energy the first time is -0.018978215515226, but the MP2 correlation energy the second time is -0.017979235543976. An MP2 computation agreed with the first correlation energy. Minimal input file below. I've seen this bug on systems with UHF and systems of C1 symmetry. I want this fixed ASAP, just in case the bug does affect energies in some way I haven't seen, so I'll take this myself.; ```; molecule mol {; 0 1 ; units bohr; H; H 1 1.8 ; }. set {; reference rhf ; basis sto-3g; scf_type pk; dcft_functional odc-12; full_hess_every 0; }. optimize('dcft'); ````",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1309
https://github.com/psi4/psi4/pull/1310:150,Energy Efficiency,energy,energy,150,"## Description; DCT files were not correctly being cleared upon completion. Among other things, the tau matrix was not properly cleared, which led to energy denominator computations for the MP2 guess incorporating the tau matrix when a DC-12 variant was selected. The MP2 guess was not correct. Requesting the attention of @andysim on this. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Clears DCT files correctly. ## Checklist; - [x] [All 'dcft' tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1310
https://github.com/psi4/psi4/pull/1310:499,Testability,test,tests,499,"## Description; DCT files were not correctly being cleared upon completion. Among other things, the tau matrix was not properly cleared, which led to energy denominator computations for the MP2 guess incorporating the tau matrix when a DC-12 variant was selected. The MP2 guess was not correct. Requesting the attention of @andysim on this. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Clears DCT files correctly. ## Checklist; - [x] [All 'dcft' tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1310
https://github.com/psi4/psi4/pull/1310:590,Testability,test,tests,590,"## Description; DCT files were not correctly being cleared upon completion. Among other things, the tau matrix was not properly cleared, which led to energy denominator computations for the MP2 guess incorporating the tau matrix when a DC-12 variant was selected. The MP2 guess was not correct. Requesting the attention of @andysim on this. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Clears DCT files correctly. ## Checklist; - [x] [All 'dcft' tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1310
https://github.com/psi4/psi4/pull/1310:51,Usability,clear,cleared,51,"## Description; DCT files were not correctly being cleared upon completion. Among other things, the tau matrix was not properly cleared, which led to energy denominator computations for the MP2 guess incorporating the tau matrix when a DC-12 variant was selected. The MP2 guess was not correct. Requesting the attention of @andysim on this. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Clears DCT files correctly. ## Checklist; - [x] [All 'dcft' tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1310
https://github.com/psi4/psi4/pull/1310:128,Usability,clear,cleared,128,"## Description; DCT files were not correctly being cleared upon completion. Among other things, the tau matrix was not properly cleared, which led to energy denominator computations for the MP2 guess incorporating the tau matrix when a DC-12 variant was selected. The MP2 guess was not correct. Requesting the attention of @andysim on this. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Clears DCT files correctly. ## Checklist; - [x] [All 'dcft' tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1310
https://github.com/psi4/psi4/pull/1310:439,Usability,Clear,Clears,439,"## Description; DCT files were not correctly being cleared upon completion. Among other things, the tau matrix was not properly cleared, which led to energy denominator computations for the MP2 guess incorporating the tau matrix when a DC-12 variant was selected. The MP2 guess was not correct. Requesting the attention of @andysim on this. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Clears DCT files correctly. ## Checklist; - [x] [All 'dcft' tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1310
https://github.com/psi4/psi4/issues/1311:1990,Availability,error,error,1990,"04296831956 1.503991149589; CL -0.000000000000 2.604296831956 1.503991149589; CL -0.000000000000 0.000000000000 -3.007607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more corr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2016,Availability,error,error,2016,"; CL -0.000000000000 2.604296831956 1.503991149589; CL -0.000000000000 0.000000000000 -3.007607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron densit",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2042,Availability,error,error,2042,"296831956 1.503991149589; CL -0.000000000000 0.000000000000 -3.007607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid sp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2068,Availability,error,error,2068,"CL -0.000000000000 0.000000000000 -3.007607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2094,Availability,error,error,2094,"0000000 -3.007607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large fi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2120,Availability,error,error,2120,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2146,Availability,error,error,2146,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2173,Availability,error,error,2173,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2199,Availability,error,error,2199,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2225,Availability,error,error,2225,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2251,Availability,error,error,2251,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2276,Availability,error,error,2276,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2303,Availability,error,error,2303,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2329,Availability,error,error,2329,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2355,Availability,error,error,2355,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2382,Availability,error,error,2382,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2407,Availability,error,error,2407,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2433,Availability,error,error,2433,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2459,Availability,error,error,2459,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2485,Availability,error,error,2485,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2511,Availability,error,error,2511,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2535,Availability,error,error,2535,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2562,Availability,error,error,2562,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2588,Availability,error,error,2588,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2615,Availability,error,error,2615,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2641,Availability,error,error,2641,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2665,Availability,error,error,2665,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2691,Availability,error,error,2691,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2716,Availability,error,error,2716,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2741,Availability,error,error,2741,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2766,Availability,error,error,2766,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:2792,Availability,error,error,2792,"07607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can minimize this behaviour to be sure get a more correct total electron density also with larger grid spacing, as a grid spacing of 0.05 gives VERY large files. Regards",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:1573,Deployability,integrat,integrated,1573,"le total_elecs = sum_of_elecs*D_[0]*D_[1]*D_[2];. ```; example file:; ```; molecule mol {; 0 1; C -0.000000000000 0.000000000000 -1.285087454295; N -0.000000000000 1.193800518377 -0.689363570963; N -0.000000000000 0.000000000000 1.378195289586; C 0.000000000000 -1.112779051192 0.642308628677; C -0.000000000000 1.112779051192 0.642308628677; N 0.000000000000 -1.193800518377 -0.689363570963; CL 0.000000000000 -2.604296831956 1.503991149589; CL -0.000000000000 2.604296831956 1.503991149589; CL -0.000000000000 0.000000000000 -3.007607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; gr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:1234,Energy Efficiency,energy,energy,1234," matter of getting higher grid density. I have added a small extra calculation of the same kind in csg.cc in psi, to check if it was psi4 side or in the calculation in the other program I use. They agree, so it is psi4 side. ```; 	double sum_of_elecs = 0;; 	for (size_t ind = 0; ind < npoints_; ind++) {sum_of_elecs +=v[ind];}; 	double total_elecs = sum_of_elecs*D_[0]*D_[1]*D_[2];. ```; example file:; ```; molecule mol {; 0 1; C -0.000000000000 0.000000000000 -1.285087454295; N -0.000000000000 1.193800518377 -0.689363570963; N -0.000000000000 0.000000000000 1.378195289586; C 0.000000000000 -1.112779051192 0.642308628677; C -0.000000000000 1.112779051192 0.642308628677; N 0.000000000000 -1.193800518377 -0.689363570963; CL 0.000000000000 -2.604296831956 1.503991149589; CL -0.000000000000 2.604296831956 1.503991149589; CL -0.000000000000 0.000000000000 -3.007607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:1494,Energy Efficiency,charge,chargemol,1494,"(size_t ind = 0; ind < npoints_; ind++) {sum_of_elecs +=v[ind];}; 	double total_elecs = sum_of_elecs*D_[0]*D_[1]*D_[2];. ```; example file:; ```; molecule mol {; 0 1; C -0.000000000000 0.000000000000 -1.285087454295; N -0.000000000000 1.193800518377 -0.689363570963; N -0.000000000000 0.000000000000 1.378195289586; C 0.000000000000 -1.112779051192 0.642308628677; C -0.000000000000 1.112779051192 0.642308628677; N 0.000000000000 -1.193800518377 -0.689363570963; CL 0.000000000000 -2.604296831956 1.503991149589; CL -0.000000000000 2.604296831956 1.503991149589; CL -0.000000000000 0.000000000000 -3.007607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:1834,Energy Efficiency,charge,charge,1834,"0000000000 1.378195289586; C 0.000000000000 -1.112779051192 0.642308628677; C -0.000000000000 1.112779051192 0.642308628677; N 0.000000000000 -1.193800518377 -0.689363570963; CL 0.000000000000 -2.604296831956 1.503991149589; CL -0.000000000000 2.604296831956 1.503991149589; CL -0.000000000000 0.000000000000 -3.007607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, err",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:1573,Integrability,integrat,integrated,1573,"le total_elecs = sum_of_elecs*D_[0]*D_[1]*D_[2];. ```; example file:; ```; molecule mol {; 0 1; C -0.000000000000 0.000000000000 -1.285087454295; N -0.000000000000 1.193800518377 -0.689363570963; N -0.000000000000 0.000000000000 1.378195289586; C 0.000000000000 -1.112779051192 0.642308628677; C -0.000000000000 1.112779051192 0.642308628677; N 0.000000000000 -1.193800518377 -0.689363570963; CL 0.000000000000 -2.604296831956 1.503991149589; CL -0.000000000000 2.604296831956 1.503991149589; CL -0.000000000000 0.000000000000 -3.007607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; gr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/issues/1311:1909,Testability,test,testing,1909,"800518377 -0.689363570963; CL 0.000000000000 -2.604296831956 1.503991149589; CL -0.000000000000 2.604296831956 1.503991149589; CL -0.000000000000 0.000000000000 -3.007607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, error:0.047781; ```; I guess the interpolation of the density values for each point take place in the add_density function but I am not sure how I can m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1311
https://github.com/psi4/psi4/pull/1312:366,Performance,perform,perform,366,"## Description; This is a trivial one. It just sets the `CMAKE_EXPORT_COMPILE_COMMANDS` option to `ON` when setting up the `psi4-core` external project.; Upon generation, CMake will dump the compile options for each file in `psi4-core` to a `compile_commands.json` file in `<build-dir>/psi4-core-prefix/src/psi4-core-build`. This file can be used by `clang-tidy` to perform various static checks and apply corresponding fixes. For the latter, PRs are incoming. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1312
https://github.com/psi4/psi4/pull/1312:481,Testability,Test,Tests,481,"## Description; This is a trivial one. It just sets the `CMAKE_EXPORT_COMPILE_COMMANDS` option to `ON` when setting up the `psi4-core` external project.; Upon generation, CMake will dump the compile options for each file in `psi4-core` to a `compile_commands.json` file in `<build-dir>/psi4-core-prefix/src/psi4-core-build`. This file can be used by `clang-tidy` to perform various static checks and apply corresponding fixes. For the latter, PRs are incoming. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1312
https://github.com/psi4/psi4/pull/1312:555,Testability,test,tests,555,"## Description; This is a trivial one. It just sets the `CMAKE_EXPORT_COMPILE_COMMANDS` option to `ON` when setting up the `psi4-core` external project.; Upon generation, CMake will dump the compile options for each file in `psi4-core` to a `compile_commands.json` file in `<build-dir>/psi4-core-prefix/src/psi4-core-build`. This file can be used by `clang-tidy` to perform various static checks and apply corresponding fixes. For the latter, PRs are incoming. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1312
https://github.com/psi4/psi4/pull/1312:646,Testability,test,tests,646,"## Description; This is a trivial one. It just sets the `CMAKE_EXPORT_COMPILE_COMMANDS` option to `ON` when setting up the `psi4-core` external project.; Upon generation, CMake will dump the compile options for each file in `psi4-core` to a `compile_commands.json` file in `<build-dir>/psi4-core-prefix/src/psi4-core-build`. This file can be used by `clang-tidy` to perform various static checks and apply corresponding fixes. For the latter, PRs are incoming. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1312
https://github.com/psi4/psi4/pull/1313:495,Testability,Test,Tests,495,"## Description; Uses `clang-tidy` to find and fix uses of null pointer not conforming to `nullptr` as mandated by C++11 and later standards. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-use-nullptr' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-use-nullptr`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1313
https://github.com/psi4/psi4/pull/1313:569,Testability,test,tests,569,"## Description; Uses `clang-tidy` to find and fix uses of null pointer not conforming to `nullptr` as mandated by C++11 and later standards. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-use-nullptr' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-use-nullptr`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1313
https://github.com/psi4/psi4/pull/1313:660,Testability,test,tests,660,"## Description; Uses `clang-tidy` to find and fix uses of null pointer not conforming to `nullptr` as mandated by C++11 and later standards. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-use-nullptr' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-use-nullptr`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1313
https://github.com/psi4/psi4/pull/1314:788,Availability,avail,available,788,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1314
https://github.com/psi4/psi4/pull/1314:1008,Availability,avail,available,1008,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1314
https://github.com/psi4/psi4/pull/1314:1103,Availability,avail,available,1103,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1314
https://github.com/psi4/psi4/pull/1314:132,Deployability,UPDATE,UPDATE,132,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1314
https://github.com/psi4/psi4/pull/1314:31,Integrability,wrap,wrapping,31,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1314
https://github.com/psi4/psi4/pull/1314:425,Integrability,Wrap,Wrap,425,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1314
https://github.com/psi4/psi4/pull/1314:488,Integrability,Wrap,Wrap,488,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1314
https://github.com/psi4/psi4/pull/1314:554,Integrability,Wrap,Wrap,554,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1314
https://github.com/psi4/psi4/pull/1314:616,Integrability,Wrap,Wrap,616,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1314
https://github.com/psi4/psi4/pull/1314:681,Integrability,Wrap,Wrap,681,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1314
https://github.com/psi4/psi4/pull/1314:953,Integrability,Wrap,Wrap,953,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1314
https://github.com/psi4/psi4/pull/1314:1048,Integrability,Wrap,Wrap,1048,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1314
https://github.com/psi4/psi4/pull/1314:238,Modifiability,variab,variables,238,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1314
https://github.com/psi4/psi4/pull/1314:920,Modifiability,variab,variables,920,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1314
https://github.com/psi4/psi4/pull/1314:1236,Testability,Test,Tests,1236,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1314
https://github.com/psi4/psi4/pull/1314:1310,Testability,test,tests,1310,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1314
https://github.com/psi4/psi4/pull/1314:1401,Testability,test,tests,1401,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1314
https://github.com/psi4/psi4/pull/1316:206,Testability,Test,Tests,206,"## Description; QCSchema has comment and provenance fields. With this PR (and molssi/qcelemental#7), the `qcdb.Molecule` and `psi4.core.Molecule` classes can passthrough these objects. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests run. ## Status; In good shape, but I'll probably add more.; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1316
https://github.com/psi4/psi4/pull/1316:252,Testability,test,tests,252,"## Description; QCSchema has comment and provenance fields. With this PR (and molssi/qcelemental#7), the `qcdb.Molecule` and `psi4.core.Molecule` classes can passthrough these objects. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests run. ## Status; In good shape, but I'll probably add more.; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1316
https://github.com/psi4/psi4/pull/1317:58,Availability,redundant,redundant,58,"## Description; Uses `clang-tidy` to find and fix uses of redundant `void` argument in functions. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-redundant-void-arg' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-redundant-void-arg`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1317
https://github.com/psi4/psi4/pull/1317:237,Availability,redundant,redundant-void-arg,237,"## Description; Uses `clang-tidy` to find and fix uses of redundant `void` argument in functions. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-redundant-void-arg' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-redundant-void-arg`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1317
https://github.com/psi4/psi4/pull/1317:425,Availability,redundant,redundant-void-arg,425,"## Description; Uses `clang-tidy` to find and fix uses of redundant `void` argument in functions. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-redundant-void-arg' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-redundant-void-arg`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1317
https://github.com/psi4/psi4/pull/1317:58,Safety,redund,redundant,58,"## Description; Uses `clang-tidy` to find and fix uses of redundant `void` argument in functions. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-redundant-void-arg' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-redundant-void-arg`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1317
https://github.com/psi4/psi4/pull/1317:237,Safety,redund,redundant-void-arg,237,"## Description; Uses `clang-tidy` to find and fix uses of redundant `void` argument in functions. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-redundant-void-arg' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-redundant-void-arg`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1317
https://github.com/psi4/psi4/pull/1317:425,Safety,redund,redundant-void-arg,425,"## Description; Uses `clang-tidy` to find and fix uses of redundant `void` argument in functions. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-redundant-void-arg' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-redundant-void-arg`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1317
https://github.com/psi4/psi4/pull/1317:466,Testability,Test,Tests,466,"## Description; Uses `clang-tidy` to find and fix uses of redundant `void` argument in functions. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-redundant-void-arg' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-redundant-void-arg`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1317
https://github.com/psi4/psi4/pull/1317:540,Testability,test,tests,540,"## Description; Uses `clang-tidy` to find and fix uses of redundant `void` argument in functions. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-redundant-void-arg' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-redundant-void-arg`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1317
https://github.com/psi4/psi4/pull/1317:631,Testability,test,tests,631,"## Description; Uses `clang-tidy` to find and fix uses of redundant `void` argument in functions. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-redundant-void-arg' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-redundant-void-arg`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1317
https://github.com/psi4/psi4/pull/1318:448,Testability,Test,Tests,448,"## Description; Uses `clang-tidy` to find and fix uses of deprecated C headers. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-deprecated-headers' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-deprecated-headers`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1318
https://github.com/psi4/psi4/pull/1318:522,Testability,test,tests,522,"## Description; Uses `clang-tidy` to find and fix uses of deprecated C headers. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-deprecated-headers' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-deprecated-headers`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1318
https://github.com/psi4/psi4/pull/1318:613,Testability,test,tests,613,"## Description; Uses `clang-tidy` to find and fix uses of deprecated C headers. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-deprecated-headers' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-deprecated-headers`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1318
https://github.com/psi4/psi4/pull/1319:512,Testability,Test,Tests,512,"## Description; Uses `clang-tidy` to find and fix uses of `virtual` that can be replaced by the `override` keyword introduced in C++11 and later standards. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-use-override' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-use-override`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1319
https://github.com/psi4/psi4/pull/1319:586,Testability,test,tests,586,"## Description; Uses `clang-tidy` to find and fix uses of `virtual` that can be replaced by the `override` keyword introduced in C++11 and later standards. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-use-override' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-use-override`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1319
https://github.com/psi4/psi4/pull/1319:677,Testability,test,tests,677,"## Description; Uses `clang-tidy` to find and fix uses of `virtual` that can be replaced by the `override` keyword introduced in C++11 and later standards. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-use-override' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-use-override`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1319
https://github.com/psi4/psi4/pull/1320:510,Testability,log,logic,510,"## Description; Adds Goerigk's D3 versions of B97M-V, wB97M-V, wB97X-V; https://pubs.acs.org/doi/10.1021/acs.jctc.8b00842. Absolute and relative energies added from L. Georigk. S22 MADs in SI are also reproduced. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes #1188 ; - [x] B97M-D3(BJ), wB97M-D3(BJ); - [x] wB97X-D3(BJ) (of wB97X-V origin); - [x] revTPSS-NL parameters from Kruse,Banas,Sponer (JCTC 'just accepted'); - [x] moves rest of the post-scf NL logic to python. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1320
https://github.com/psi4/psi4/pull/1320:547,Testability,Test,Tests,547,"## Description; Adds Goerigk's D3 versions of B97M-V, wB97M-V, wB97X-V; https://pubs.acs.org/doi/10.1021/acs.jctc.8b00842. Absolute and relative energies added from L. Georigk. S22 MADs in SI are also reproduced. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes #1188 ; - [x] B97M-D3(BJ), wB97M-D3(BJ); - [x] wB97X-D3(BJ) (of wB97X-V origin); - [x] revTPSS-NL parameters from Kruse,Banas,Sponer (JCTC 'just accepted'); - [x] moves rest of the post-scf NL logic to python. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1320
https://github.com/psi4/psi4/pull/1320:621,Testability,test,tests,621,"## Description; Adds Goerigk's D3 versions of B97M-V, wB97M-V, wB97X-V; https://pubs.acs.org/doi/10.1021/acs.jctc.8b00842. Absolute and relative energies added from L. Georigk. S22 MADs in SI are also reproduced. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes #1188 ; - [x] B97M-D3(BJ), wB97M-D3(BJ); - [x] wB97X-D3(BJ) (of wB97X-V origin); - [x] revTPSS-NL parameters from Kruse,Banas,Sponer (JCTC 'just accepted'); - [x] moves rest of the post-scf NL logic to python. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1320
https://github.com/psi4/psi4/pull/1320:712,Testability,test,tests,712,"## Description; Adds Goerigk's D3 versions of B97M-V, wB97M-V, wB97X-V; https://pubs.acs.org/doi/10.1021/acs.jctc.8b00842. Absolute and relative energies added from L. Georigk. S22 MADs in SI are also reproduced. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes #1188 ; - [x] B97M-D3(BJ), wB97M-D3(BJ); - [x] wB97X-D3(BJ) (of wB97X-V origin); - [x] revTPSS-NL parameters from Kruse,Banas,Sponer (JCTC 'just accepted'); - [x] moves rest of the post-scf NL logic to python. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1320
https://github.com/psi4/psi4/pull/1321:89,Usability,guid,guideline,89,"This is a trivial change that replaces `==` operator with `is` operator, following PEP 8 guideline:. > Comparisons to singletons like None should always be done with is or is not, never the equality operators. https://legacy.python.org/dev/peps/pep-0008/#programming-recommendations",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1321
https://github.com/psi4/psi4/pull/1322:459,Testability,Test,Tests,459,"## Description; Uses `clang-tidy` to find and fix uses of `0`/`1` instead of `false`/`true`. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-use-bool-literals' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-use-bool-literals`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1322
https://github.com/psi4/psi4/pull/1322:533,Testability,test,tests,533,"## Description; Uses `clang-tidy` to find and fix uses of `0`/`1` instead of `false`/`true`. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-use-bool-literals' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-use-bool-literals`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1322
https://github.com/psi4/psi4/pull/1322:624,Testability,test,tests,624,"## Description; Uses `clang-tidy` to find and fix uses of `0`/`1` instead of `false`/`true`. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-use-bool-literals' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-use-bool-literals`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1322
https://github.com/psi4/psi4/pull/1323:493,Testability,Test,Tests,493,"## Description; Uses `clang-tidy` to find and fix instances where `auto` can be used to declare the type on the left-hand side of an assignment. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-use-auto' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-use-auto`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1323
https://github.com/psi4/psi4/pull/1323:567,Testability,test,tests,567,"## Description; Uses `clang-tidy` to find and fix instances where `auto` can be used to declare the type on the left-hand side of an assignment. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-use-auto' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-use-auto`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1323
https://github.com/psi4/psi4/pull/1323:658,Testability,test,tests,658,"## Description; Uses `clang-tidy` to find and fix instances where `auto` can be used to declare the type on the left-hand side of an assignment. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-use-auto' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-use-auto`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1323
https://github.com/psi4/psi4/pull/1324:467,Testability,Test,Tests,467,"## Description; Uses `clang-tidy` to find and fix instances where `noexcept` can be used instead of `throw()`. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-use-noexcept' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-use-noexcept`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1324
https://github.com/psi4/psi4/pull/1324:541,Testability,test,tests,541,"## Description; Uses `clang-tidy` to find and fix instances where `noexcept` can be used instead of `throw()`. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-use-noexcept' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-use-noexcept`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1324
https://github.com/psi4/psi4/pull/1324:632,Testability,test,tests,632,"## Description; Uses `clang-tidy` to find and fix instances where `noexcept` can be used instead of `throw()`. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-use-noexcept' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-use-noexcept`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1324
https://github.com/psi4/psi4/issues/1325:1192,Availability,Error,Error,1192,"eback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 100, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 431, in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 225, in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 411, in compute_nbody_components; current_mol = molecule.extract_subsets(list(pair[0]), ghost). RuntimeError: ; Fatal Error: Coordinates have been set in the wrong order; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 239 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Molecule::operator=(psi::Molecule const&); psi::Molecule::Molecule(psi::Molecule const&); ```. Given that the user's problem is failure for the SCF to converge, I can only assume some change since the 1.2.1 release is at fault. I've been able to get the crash with the following simplified input file:; ```; molecule dimer {; 1 1; C1 0.000000 0.513942 0.000000; N2 0.628754 1.703580 0.000000; H3 0.109407 2.571793 0.000000; H4 1.638743 1.762759 0.000000; N5 -1.342220 0.473050 0.000000; H6 -1.890262 1.323784 0.000000; H7 -1.839824 -0.407373 0.000000; N8 0.700723 -0.623756 0.000000; H9 1.712010 -0.555355 0.000000; C10 0.085273 -1.957243 0.000000; H11 0.892679 -2.697454 0.000000; H12 -0.522596 -2.104233 0.905528; H13 -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1325
https://github.com/psi4/psi4/issues/1325:1245,Availability,Error,Error,1245,"eback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 100, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 431, in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 225, in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 411, in compute_nbody_components; current_mol = molecule.extract_subsets(list(pair[0]), ghost). RuntimeError: ; Fatal Error: Coordinates have been set in the wrong order; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 239 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Molecule::operator=(psi::Molecule const&); psi::Molecule::Molecule(psi::Molecule const&); ```. Given that the user's problem is failure for the SCF to converge, I can only assume some change since the 1.2.1 release is at fault. I've been able to get the crash with the following simplified input file:; ```; molecule dimer {; 1 1; C1 0.000000 0.513942 0.000000; N2 0.628754 1.703580 0.000000; H3 0.109407 2.571793 0.000000; H4 1.638743 1.762759 0.000000; N5 -1.342220 0.473050 0.000000; H6 -1.890262 1.323784 0.000000; H7 -1.839824 -0.407373 0.000000; N8 0.700723 -0.623756 0.000000; H9 1.712010 -0.555355 0.000000; C10 0.085273 -1.957243 0.000000; H11 0.892679 -2.697454 0.000000; H12 -0.522596 -2.104233 0.905528; H13 -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1325
https://github.com/psi4/psi4/issues/1325:1660,Availability,failure,failure,1660,"rgy', **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 225, in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 411, in compute_nbody_components; current_mol = molecule.extract_subsets(list(pair[0]), ghost). RuntimeError: ; Fatal Error: Coordinates have been set in the wrong order; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 239 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Molecule::operator=(psi::Molecule const&); psi::Molecule::Molecule(psi::Molecule const&); ```. Given that the user's problem is failure for the SCF to converge, I can only assume some change since the 1.2.1 release is at fault. I've been able to get the crash with the following simplified input file:; ```; molecule dimer {; 1 1; C1 0.000000 0.513942 0.000000; N2 0.628754 1.703580 0.000000; H3 0.109407 2.571793 0.000000; H4 1.638743 1.762759 0.000000; N5 -1.342220 0.473050 0.000000; H6 -1.890262 1.323784 0.000000; H7 -1.839824 -0.407373 0.000000; N8 0.700723 -0.623756 0.000000; H9 1.712010 -0.555355 0.000000; C10 0.085273 -1.957243 0.000000; H11 0.892679 -2.697454 0.000000; H12 -0.522596 -2.104233 0.905528; H13 -0.522596 -2.104233 -0.905528; --; -1 1; I N8 3.6 H9 90.0 C1 90.0; }. basis {. assign H def2-tzvpd; assign C def2-tzvpd; assign N def2-tzvpd. assign I def2-tzvpd; }. set guess sad; set scf_type df; set maxiter 500; set soscf true; set soscf_max_iter 15; set soscf_conv 1.e-4; set freeze_core false ## false for ions. energy(""mp2"", bsse_type = ""cp""); ```; This can probably be simplified further. It would be worth investigating w",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1325
https://github.com/psi4/psi4/issues/1325:1753,Availability,fault,fault,1753,"0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 225, in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 411, in compute_nbody_components; current_mol = molecule.extract_subsets(list(pair[0]), ghost). RuntimeError: ; Fatal Error: Coordinates have been set in the wrong order; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 239 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Molecule::operator=(psi::Molecule const&); psi::Molecule::Molecule(psi::Molecule const&); ```. Given that the user's problem is failure for the SCF to converge, I can only assume some change since the 1.2.1 release is at fault. I've been able to get the crash with the following simplified input file:; ```; molecule dimer {; 1 1; C1 0.000000 0.513942 0.000000; N2 0.628754 1.703580 0.000000; H3 0.109407 2.571793 0.000000; H4 1.638743 1.762759 0.000000; N5 -1.342220 0.473050 0.000000; H6 -1.890262 1.323784 0.000000; H7 -1.839824 -0.407373 0.000000; N8 0.700723 -0.623756 0.000000; H9 1.712010 -0.555355 0.000000; C10 0.085273 -1.957243 0.000000; H11 0.892679 -2.697454 0.000000; H12 -0.522596 -2.104233 0.905528; H13 -0.522596 -2.104233 -0.905528; --; -1 1; I N8 3.6 H9 90.0 C1 90.0; }. basis {. assign H def2-tzvpd; assign C def2-tzvpd; assign N def2-tzvpd. assign I def2-tzvpd; }. set guess sad; set scf_type df; set maxiter 500; set soscf true; set soscf_max_iter 15; set soscf_conv 1.e-4; set freeze_core false ## false for ions. energy(""mp2"", bsse_type = ""cp""); ```; This can probably be simplified further. It would be worth investigating whether this is a consequence of mixing Cartesian and ZMAT coordinat",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1325
https://github.com/psi4/psi4/issues/1325:1739,Deployability,release,release,1739,"0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 225, in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 411, in compute_nbody_components; current_mol = molecule.extract_subsets(list(pair[0]), ghost). RuntimeError: ; Fatal Error: Coordinates have been set in the wrong order; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 239 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Molecule::operator=(psi::Molecule const&); psi::Molecule::Molecule(psi::Molecule const&); ```. Given that the user's problem is failure for the SCF to converge, I can only assume some change since the 1.2.1 release is at fault. I've been able to get the crash with the following simplified input file:; ```; molecule dimer {; 1 1; C1 0.000000 0.513942 0.000000; N2 0.628754 1.703580 0.000000; H3 0.109407 2.571793 0.000000; H4 1.638743 1.762759 0.000000; N5 -1.342220 0.473050 0.000000; H6 -1.890262 1.323784 0.000000; H7 -1.839824 -0.407373 0.000000; N8 0.700723 -0.623756 0.000000; H9 1.712010 -0.555355 0.000000; C10 0.085273 -1.957243 0.000000; H11 0.892679 -2.697454 0.000000; H12 -0.522596 -2.104233 0.905528; H13 -0.522596 -2.104233 -0.905528; --; -1 1; I N8 3.6 H9 90.0 C1 90.0; }. basis {. assign H def2-tzvpd; assign C def2-tzvpd; assign N def2-tzvpd. assign I def2-tzvpd; }. set guess sad; set scf_type df; set maxiter 500; set soscf true; set soscf_max_iter 15; set soscf_conv 1.e-4; set freeze_core false ## false for ions. energy(""mp2"", bsse_type = ""cp""); ```; This can probably be simplified further. It would be worth investigating whether this is a consequence of mixing Cartesian and ZMAT coordinat",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1325
https://github.com/psi4/psi4/issues/1325:615,Energy Efficiency,energy,energy,615,"Discovered on a build of 8db12d6 while investigating [a forum post](http://forum.psicode.org/t/ri-mp2-def2-tzvppd-convergence-issue-for-calculations-with-iodide/1106/5). The user's input file crashes during the MP2 computation with traceback:. ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 100, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 431, in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 225, in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 411, in compute_nbody_components; current_mol = molecule.extract_subsets(list(pair[0]), ghost). RuntimeError: ; Fatal Error: Coordinates have been set in the wrong order; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 239 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Molecule::operator=(psi::Molecule const&); psi::Molecule::Molecule(psi::Molecule const&); ```. Given that the user's problem is failure for the SCF to converge, I can only assume some change since the 1.2.1 release is at fault. I've been able to get the crash with the following simplified input file:; ```; molecule dimer {; 1 1; C1 0.000000 0.513942 0.000000; N2 0.628754 1.703580 0.000000; H3 0.109407 2.571793 0.000000; H4 1.638743 1.762759 0.000000; N5 -1.342220 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1325
https://github.com/psi4/psi4/issues/1325:656,Energy Efficiency,energy,energy,656,"Discovered on a build of 8db12d6 while investigating [a forum post](http://forum.psicode.org/t/ri-mp2-def2-tzvppd-convergence-issue-for-calculations-with-iodide/1106/5). The user's input file crashes during the MP2 computation with traceback:. ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 100, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 431, in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 225, in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 411, in compute_nbody_components; current_mol = molecule.extract_subsets(list(pair[0]), ghost). RuntimeError: ; Fatal Error: Coordinates have been set in the wrong order; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 239 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Molecule::operator=(psi::Molecule const&); psi::Molecule::Molecule(psi::Molecule const&); ```. Given that the user's problem is failure for the SCF to converge, I can only assume some change since the 1.2.1 release is at fault. I've been able to get the crash with the following simplified input file:; ```; molecule dimer {; 1 1; C1 0.000000 0.513942 0.000000; N2 0.628754 1.703580 0.000000; H3 0.109407 2.571793 0.000000; H4 1.638743 1.762759 0.000000; N5 -1.342220 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1325
https://github.com/psi4/psi4/issues/1325:677,Energy Efficiency,energy,energy,677,"Discovered on a build of 8db12d6 while investigating [a forum post](http://forum.psicode.org/t/ri-mp2-def2-tzvppd-convergence-issue-for-calculations-with-iodide/1106/5). The user's input file crashes during the MP2 computation with traceback:. ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 100, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 431, in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 225, in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 411, in compute_nbody_components; current_mol = molecule.extract_subsets(list(pair[0]), ghost). RuntimeError: ; Fatal Error: Coordinates have been set in the wrong order; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 239 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Molecule::operator=(psi::Molecule const&); psi::Molecule::Molecule(psi::Molecule const&); ```. Given that the user's problem is failure for the SCF to converge, I can only assume some change since the 1.2.1 release is at fault. I've been able to get the crash with the following simplified input file:; ```; molecule dimer {; 1 1; C1 0.000000 0.513942 0.000000; N2 0.628754 1.703580 0.000000; H3 0.109407 2.571793 0.000000; H4 1.638743 1.762759 0.000000; N5 -1.342220 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1325
https://github.com/psi4/psi4/issues/1325:2569,Energy Efficiency,energy,energy,2569,"/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 225, in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 411, in compute_nbody_components; current_mol = molecule.extract_subsets(list(pair[0]), ghost). RuntimeError: ; Fatal Error: Coordinates have been set in the wrong order; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 239 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Molecule::operator=(psi::Molecule const&); psi::Molecule::Molecule(psi::Molecule const&); ```. Given that the user's problem is failure for the SCF to converge, I can only assume some change since the 1.2.1 release is at fault. I've been able to get the crash with the following simplified input file:; ```; molecule dimer {; 1 1; C1 0.000000 0.513942 0.000000; N2 0.628754 1.703580 0.000000; H3 0.109407 2.571793 0.000000; H4 1.638743 1.762759 0.000000; N5 -1.342220 0.473050 0.000000; H6 -1.890262 1.323784 0.000000; H7 -1.839824 -0.407373 0.000000; N8 0.700723 -0.623756 0.000000; H9 1.712010 -0.555355 0.000000; C10 0.085273 -1.957243 0.000000; H11 0.892679 -2.697454 0.000000; H12 -0.522596 -2.104233 0.905528; H13 -0.522596 -2.104233 -0.905528; --; -1 1; I N8 3.6 H9 90.0 C1 90.0; }. basis {. assign H def2-tzvpd; assign C def2-tzvpd; assign N def2-tzvpd. assign I def2-tzvpd; }. set guess sad; set scf_type df; set maxiter 500; set soscf true; set soscf_max_iter 15; set soscf_conv 1.e-4; set freeze_core false ## false for ions. energy(""mp2"", bsse_type = ""cp""); ```; This can probably be simplified further. It would be worth investigating whether this is a consequence of mixing Cartesian and ZMAT coordinates.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1325
https://github.com/psi4/psi4/issues/1325:1811,Usability,simpl,simplified,1811,"/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 225, in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 411, in compute_nbody_components; current_mol = molecule.extract_subsets(list(pair[0]), ghost). RuntimeError: ; Fatal Error: Coordinates have been set in the wrong order; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 239 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Molecule::operator=(psi::Molecule const&); psi::Molecule::Molecule(psi::Molecule const&); ```. Given that the user's problem is failure for the SCF to converge, I can only assume some change since the 1.2.1 release is at fault. I've been able to get the crash with the following simplified input file:; ```; molecule dimer {; 1 1; C1 0.000000 0.513942 0.000000; N2 0.628754 1.703580 0.000000; H3 0.109407 2.571793 0.000000; H4 1.638743 1.762759 0.000000; N5 -1.342220 0.473050 0.000000; H6 -1.890262 1.323784 0.000000; H7 -1.839824 -0.407373 0.000000; N8 0.700723 -0.623756 0.000000; H9 1.712010 -0.555355 0.000000; C10 0.085273 -1.957243 0.000000; H11 0.892679 -2.697454 0.000000; H12 -0.522596 -2.104233 0.905528; H13 -0.522596 -2.104233 -0.905528; --; -1 1; I N8 3.6 H9 90.0 C1 90.0; }. basis {. assign H def2-tzvpd; assign C def2-tzvpd; assign N def2-tzvpd. assign I def2-tzvpd; }. set guess sad; set scf_type df; set maxiter 500; set soscf true; set soscf_max_iter 15; set soscf_conv 1.e-4; set freeze_core false ## false for ions. energy(""mp2"", bsse_type = ""cp""); ```; This can probably be simplified further. It would be worth investigating whether this is a consequence of mixing Cartesian and ZMAT coordinates.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1325
https://github.com/psi4/psi4/issues/1325:2628,Usability,simpl,simplified,2628,"/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 225, in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 411, in compute_nbody_components; current_mol = molecule.extract_subsets(list(pair[0]), ghost). RuntimeError: ; Fatal Error: Coordinates have been set in the wrong order; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 239 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Molecule::operator=(psi::Molecule const&); psi::Molecule::Molecule(psi::Molecule const&); ```. Given that the user's problem is failure for the SCF to converge, I can only assume some change since the 1.2.1 release is at fault. I've been able to get the crash with the following simplified input file:; ```; molecule dimer {; 1 1; C1 0.000000 0.513942 0.000000; N2 0.628754 1.703580 0.000000; H3 0.109407 2.571793 0.000000; H4 1.638743 1.762759 0.000000; N5 -1.342220 0.473050 0.000000; H6 -1.890262 1.323784 0.000000; H7 -1.839824 -0.407373 0.000000; N8 0.700723 -0.623756 0.000000; H9 1.712010 -0.555355 0.000000; C10 0.085273 -1.957243 0.000000; H11 0.892679 -2.697454 0.000000; H12 -0.522596 -2.104233 0.905528; H13 -0.522596 -2.104233 -0.905528; --; -1 1; I N8 3.6 H9 90.0 C1 90.0; }. basis {. assign H def2-tzvpd; assign C def2-tzvpd; assign N def2-tzvpd. assign I def2-tzvpd; }. set guess sad; set scf_type df; set maxiter 500; set soscf true; set soscf_max_iter 15; set soscf_conv 1.e-4; set freeze_core false ## false for ions. energy(""mp2"", bsse_type = ""cp""); ```; This can probably be simplified further. It would be worth investigating whether this is a consequence of mixing Cartesian and ZMAT coordinates.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1325
https://github.com/psi4/psi4/pull/1326:31,Availability,reliab,reliably,31,"## Description; Make tests run reliably and a bit cleaner. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] @JonathonMisiewicz, @amjames so the continuation of the `cc3` saga is that it continued flaky, usually running clean but sometimes throwing PSIO errors at first findif freq, sometimes throwing PSIO errors at second findif freq. Finally figured out that the G0 calc was leaving scratch files before findif launched and findif was only cleaning _after_ each displacement. Previously this was nearly always safe b/c G0 had full symmetry and first findif displacement was totally symmetric (bet we were never testing partial freq on a susceptible mol). But now findif displacements appear in random order, and if the first one up has a lower irrep, it doesn't like those totally symmetric leftovers, so PSIO error. There's any number of places one could put the `clean` -- I chose least obtrusive.; - [x] `gcp` calcs weren't deleting their directories in scratch, so made them. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests less bench run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1326
https://github.com/psi4/psi4/pull/1326:302,Availability,error,errors,302,"## Description; Make tests run reliably and a bit cleaner. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] @JonathonMisiewicz, @amjames so the continuation of the `cc3` saga is that it continued flaky, usually running clean but sometimes throwing PSIO errors at first findif freq, sometimes throwing PSIO errors at second findif freq. Finally figured out that the G0 calc was leaving scratch files before findif launched and findif was only cleaning _after_ each displacement. Previously this was nearly always safe b/c G0 had full symmetry and first findif displacement was totally symmetric (bet we were never testing partial freq on a susceptible mol). But now findif displacements appear in random order, and if the first one up has a lower irrep, it doesn't like those totally symmetric leftovers, so PSIO error. There's any number of places one could put the `clean` -- I chose least obtrusive.; - [x] `gcp` calcs weren't deleting their directories in scratch, so made them. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests less bench run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1326
https://github.com/psi4/psi4/pull/1326:355,Availability,error,errors,355,"## Description; Make tests run reliably and a bit cleaner. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] @JonathonMisiewicz, @amjames so the continuation of the `cc3` saga is that it continued flaky, usually running clean but sometimes throwing PSIO errors at first findif freq, sometimes throwing PSIO errors at second findif freq. Finally figured out that the G0 calc was leaving scratch files before findif launched and findif was only cleaning _after_ each displacement. Previously this was nearly always safe b/c G0 had full symmetry and first findif displacement was totally symmetric (bet we were never testing partial freq on a susceptible mol). But now findif displacements appear in random order, and if the first one up has a lower irrep, it doesn't like those totally symmetric leftovers, so PSIO error. There's any number of places one could put the `clean` -- I chose least obtrusive.; - [x] `gcp` calcs weren't deleting their directories in scratch, so made them. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests less bench run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1326
https://github.com/psi4/psi4/pull/1326:861,Availability,error,error,861,"## Description; Make tests run reliably and a bit cleaner. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] @JonathonMisiewicz, @amjames so the continuation of the `cc3` saga is that it continued flaky, usually running clean but sometimes throwing PSIO errors at first findif freq, sometimes throwing PSIO errors at second findif freq. Finally figured out that the G0 calc was leaving scratch files before findif launched and findif was only cleaning _after_ each displacement. Previously this was nearly always safe b/c G0 had full symmetry and first findif displacement was totally symmetric (bet we were never testing partial freq on a susceptible mol). But now findif displacements appear in random order, and if the first one up has a lower irrep, it doesn't like those totally symmetric leftovers, so PSIO error. There's any number of places one could put the `clean` -- I chose least obtrusive.; - [x] `gcp` calcs weren't deleting their directories in scratch, so made them. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests less bench run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1326
https://github.com/psi4/psi4/pull/1326:561,Safety,safe,safe,561,"## Description; Make tests run reliably and a bit cleaner. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] @JonathonMisiewicz, @amjames so the continuation of the `cc3` saga is that it continued flaky, usually running clean but sometimes throwing PSIO errors at first findif freq, sometimes throwing PSIO errors at second findif freq. Finally figured out that the G0 calc was leaving scratch files before findif launched and findif was only cleaning _after_ each displacement. Previously this was nearly always safe b/c G0 had full symmetry and first findif displacement was totally symmetric (bet we were never testing partial freq on a susceptible mol). But now findif displacements appear in random order, and if the first one up has a lower irrep, it doesn't like those totally symmetric leftovers, so PSIO error. There's any number of places one could put the `clean` -- I chose least obtrusive.; - [x] `gcp` calcs weren't deleting their directories in scratch, so made them. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests less bench run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1326
https://github.com/psi4/psi4/pull/1326:21,Testability,test,tests,21,"## Description; Make tests run reliably and a bit cleaner. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] @JonathonMisiewicz, @amjames so the continuation of the `cc3` saga is that it continued flaky, usually running clean but sometimes throwing PSIO errors at first findif freq, sometimes throwing PSIO errors at second findif freq. Finally figured out that the G0 calc was leaving scratch files before findif launched and findif was only cleaning _after_ each displacement. Previously this was nearly always safe b/c G0 had full symmetry and first findif displacement was totally symmetric (bet we were never testing partial freq on a susceptible mol). But now findif displacements appear in random order, and if the first one up has a lower irrep, it doesn't like those totally symmetric leftovers, so PSIO error. There's any number of places one could put the `clean` -- I chose least obtrusive.; - [x] `gcp` calcs weren't deleting their directories in scratch, so made them. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests less bench run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1326
https://github.com/psi4/psi4/pull/1326:662,Testability,test,testing,662,"## Description; Make tests run reliably and a bit cleaner. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] @JonathonMisiewicz, @amjames so the continuation of the `cc3` saga is that it continued flaky, usually running clean but sometimes throwing PSIO errors at first findif freq, sometimes throwing PSIO errors at second findif freq. Finally figured out that the G0 calc was leaving scratch files before findif launched and findif was only cleaning _after_ each displacement. Previously this was nearly always safe b/c G0 had full symmetry and first findif displacement was totally symmetric (bet we were never testing partial freq on a susceptible mol). But now findif displacements appear in random order, and if the first one up has a lower irrep, it doesn't like those totally symmetric leftovers, so PSIO error. There's any number of places one could put the `clean` -- I chose least obtrusive.; - [x] `gcp` calcs weren't deleting their directories in scratch, so made them. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests less bench run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1326
https://github.com/psi4/psi4/pull/1326:1052,Testability,Test,Tests,1052,"## Description; Make tests run reliably and a bit cleaner. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] @JonathonMisiewicz, @amjames so the continuation of the `cc3` saga is that it continued flaky, usually running clean but sometimes throwing PSIO errors at first findif freq, sometimes throwing PSIO errors at second findif freq. Finally figured out that the G0 calc was leaving scratch files before findif launched and findif was only cleaning _after_ each displacement. Previously this was nearly always safe b/c G0 had full symmetry and first findif displacement was totally symmetric (bet we were never testing partial freq on a susceptible mol). But now findif displacements appear in random order, and if the first one up has a lower irrep, it doesn't like those totally symmetric leftovers, so PSIO error. There's any number of places one could put the `clean` -- I chose least obtrusive.; - [x] `gcp` calcs weren't deleting their directories in scratch, so made them. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests less bench run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1326
https://github.com/psi4/psi4/pull/1326:1098,Testability,test,tests,1098,"## Description; Make tests run reliably and a bit cleaner. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] @JonathonMisiewicz, @amjames so the continuation of the `cc3` saga is that it continued flaky, usually running clean but sometimes throwing PSIO errors at first findif freq, sometimes throwing PSIO errors at second findif freq. Finally figured out that the G0 calc was leaving scratch files before findif launched and findif was only cleaning _after_ each displacement. Previously this was nearly always safe b/c G0 had full symmetry and first findif displacement was totally symmetric (bet we were never testing partial freq on a susceptible mol). But now findif displacements appear in random order, and if the first one up has a lower irrep, it doesn't like those totally symmetric leftovers, so PSIO error. There's any number of places one could put the `clean` -- I chose least obtrusive.; - [x] `gcp` calcs weren't deleting their directories in scratch, so made them. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests less bench run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1326
https://github.com/psi4/psi4/pull/1327:33,Deployability,update,updates,33,"## Description; Some PCM related updates/fixes that were enabled after the move of SCF to Python. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Tests ROHF with PCM. Close #999 ; ~- [ ] Do gradients with PCM semi-numerically [à la ECP](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L2095-L2132), see https://github.com/psi4/psi4/issues/402#issuecomment-386149151~ **Probably for 1.4**. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1327
https://github.com/psi4/psi4/pull/1327:196,Testability,Test,Tests,196,"## Description; Some PCM related updates/fixes that were enabled after the move of SCF to Python. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Tests ROHF with PCM. Close #999 ; ~- [ ] Do gradients with PCM semi-numerically [à la ECP](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L2095-L2132), see https://github.com/psi4/psi4/issues/402#issuecomment-386149151~ **Probably for 1.4**. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1327
https://github.com/psi4/psi4/pull/1327:484,Testability,Test,Tests,484,"## Description; Some PCM related updates/fixes that were enabled after the move of SCF to Python. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Tests ROHF with PCM. Close #999 ; ~- [ ] Do gradients with PCM semi-numerically [à la ECP](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L2095-L2132), see https://github.com/psi4/psi4/issues/402#issuecomment-386149151~ **Probably for 1.4**. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1327
https://github.com/psi4/psi4/pull/1327:558,Testability,test,tests,558,"## Description; Some PCM related updates/fixes that were enabled after the move of SCF to Python. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Tests ROHF with PCM. Close #999 ; ~- [ ] Do gradients with PCM semi-numerically [à la ECP](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L2095-L2132), see https://github.com/psi4/psi4/issues/402#issuecomment-386149151~ **Probably for 1.4**. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1327
https://github.com/psi4/psi4/pull/1327:649,Testability,test,tests,649,"## Description; Some PCM related updates/fixes that were enabled after the move of SCF to Python. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Tests ROHF with PCM. Close #999 ; ~- [ ] Do gradients with PCM semi-numerically [à la ECP](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L2095-L2132), see https://github.com/psi4/psi4/issues/402#issuecomment-386149151~ **Probably for 1.4**. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1327
https://github.com/psi4/psi4/issues/1328:1,Availability,Recover,Recovered,1,"[Recovered from the forums](http://forum.psicode.org/t/sapt0-job-fail-i-am-a-beginner/1034). As the forum mangles input file syntax, be wary that there may be an error or two hiding here. User reported the following input. ; ```; memory 5000 Mb; molecule dimer {; 1 1; C 4.19994 3.08488 -1.76044; C 5.06954 2.46285 -0.64984; C 4.64327 1.0663 -0.28153; O 4.85673 0.07495 -0.94802; O 3.96234 1.04199 0.88706; H 4.61569 4.07213 -1.97225; H 4.3027 2.5025 -2.67989; H 6.10053 2.39646 -1.00395; C 3.46892 -0.23561 1.35315; H 5.0473 3.09629 0.23787; C 1.89576 1.98716 -1.88508; C 2.70489 3.20283 -1.38087; C 2.1115 4.4631 -2.00089; O 2.22564 4.69469 -3.21122; N 1.45755 5.29818 -1.17121; H 1.82029 2.0666 -2.97331; H 2.43364 1.05863 -1.68462; H 2.61952 3.26827 -0.29319; H 0.99607 6.1109 -1.5546; H 1.29463 5.07123 -0.20248; C 0.54897 1.25688 0.14654; C 0.49167 1.90422 -1.2458; C -0.42151 1.12609 -2.17481; O -0.30845 -0.10438 -2.3373; N -1.33375 1.83551 -2.84989; H 1.41314 1.64705 0.68692; H 0.72592 0.18975 0.02069; H 0.09209 2.91772 -1.16504; H -1.48178 2.81502 -2.66023; H -1.96292 1.36772 -3.48833; C -0.75822 2.9873 1.46817; C -0.71562 1.51535 0.97554; C -0.84126 0.54385 2.14223; O 0.07905 -0.22265 2.47636; N -2.01096 0.56868 2.81099; H -0.38444 3.03627 2.49566; H -0.05905 3.57117 0.86785; H -1.58667 1.32703 0.34288; H -2.1767 -0.18204 3.47055; H -2.8428 0.94125 2.3602; H -1.95043 4.30157 -0.69534; C -2.6631 3.78375 -0.0493; C -2.12926 3.68676 1.38656; C -1.95827 5.09276 1.94691; O -1.18692 5.90686 1.41866; N -2.67996 5.39713 3.0393; H -3.6084 4.33293 -0.07465; H -2.84925 2.79578 -0.47069; H -2.85563 3.14558 1.99767; H -3.31103 4.73323 3.45906; H -2.59711 6.3152 3.45181; C 4.60787 -0.8758 2.13999; H 3.13705 -0.83567 0.50868; H 2.61634 0.00579 1.97897; H 4.90463 -0.2111 2.95001; N 4.27305 -2.20998 2.77179; H 5.46495 -1.04265 1.48973; C 3.078 -2.08869 3.6774; C 4.01212 -3.24631 1.71507; C 5.4587 -2.64236 3.59063; H 2.19356 -1.85215 3.09367; H 3.27107 -1.30183 4.40339; H 2.93642 -3.0407",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1328
https://github.com/psi4/psi4/issues/1328:162,Availability,error,error,162,"[Recovered from the forums](http://forum.psicode.org/t/sapt0-job-fail-i-am-a-beginner/1034). As the forum mangles input file syntax, be wary that there may be an error or two hiding here. User reported the following input. ; ```; memory 5000 Mb; molecule dimer {; 1 1; C 4.19994 3.08488 -1.76044; C 5.06954 2.46285 -0.64984; C 4.64327 1.0663 -0.28153; O 4.85673 0.07495 -0.94802; O 3.96234 1.04199 0.88706; H 4.61569 4.07213 -1.97225; H 4.3027 2.5025 -2.67989; H 6.10053 2.39646 -1.00395; C 3.46892 -0.23561 1.35315; H 5.0473 3.09629 0.23787; C 1.89576 1.98716 -1.88508; C 2.70489 3.20283 -1.38087; C 2.1115 4.4631 -2.00089; O 2.22564 4.69469 -3.21122; N 1.45755 5.29818 -1.17121; H 1.82029 2.0666 -2.97331; H 2.43364 1.05863 -1.68462; H 2.61952 3.26827 -0.29319; H 0.99607 6.1109 -1.5546; H 1.29463 5.07123 -0.20248; C 0.54897 1.25688 0.14654; C 0.49167 1.90422 -1.2458; C -0.42151 1.12609 -2.17481; O -0.30845 -0.10438 -2.3373; N -1.33375 1.83551 -2.84989; H 1.41314 1.64705 0.68692; H 0.72592 0.18975 0.02069; H 0.09209 2.91772 -1.16504; H -1.48178 2.81502 -2.66023; H -1.96292 1.36772 -3.48833; C -0.75822 2.9873 1.46817; C -0.71562 1.51535 0.97554; C -0.84126 0.54385 2.14223; O 0.07905 -0.22265 2.47636; N -2.01096 0.56868 2.81099; H -0.38444 3.03627 2.49566; H -0.05905 3.57117 0.86785; H -1.58667 1.32703 0.34288; H -2.1767 -0.18204 3.47055; H -2.8428 0.94125 2.3602; H -1.95043 4.30157 -0.69534; C -2.6631 3.78375 -0.0493; C -2.12926 3.68676 1.38656; C -1.95827 5.09276 1.94691; O -1.18692 5.90686 1.41866; N -2.67996 5.39713 3.0393; H -3.6084 4.33293 -0.07465; H -2.84925 2.79578 -0.47069; H -2.85563 3.14558 1.99767; H -3.31103 4.73323 3.45906; H -2.59711 6.3152 3.45181; C 4.60787 -0.8758 2.13999; H 3.13705 -0.83567 0.50868; H 2.61634 0.00579 1.97897; H 4.90463 -0.2111 2.95001; N 4.27305 -2.20998 2.77179; H 5.46495 -1.04265 1.48973; C 3.078 -2.08869 3.6774; C 4.01212 -3.24631 1.71507; C 5.4587 -2.64236 3.59063; H 2.19356 -1.85215 3.09367; H 3.27107 -1.30183 4.40339; H 2.93642 -3.0407",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1328
https://github.com/psi4/psi4/issues/1328:3624,Availability,error,error,3624,".95802 -2.84738 2.22072; H -0.62594 -1.95593 2.43463; H -0.25639 -4.56534 1.39064; C -3.89573 -1.47663 1.11455; H -2.84685 -1.21526 1.24711; O -3.96785 -2.64213 0.26554; C -3.25927 -2.48505 -0.9528; H -3.38296 -3.42013 -1.49634; C -3.83016 -1.30519 -1.76284; H -4.84213 -1.57034 -2.07564; O -3.08657 -1.08539 -2.95725; H -2.16485 -0.88813 -2.71436; C -3.89865 -0.04023 -0.90552; H -2.87924 0.29308 -0.69629; O -4.61098 1.01217 -1.56224; H -4.00729 1.44319 -2.17836; C -4.59468 -0.30612 0.4222; H -5.64733 -0.55648 0.23973; O -4.51034 0.8485 1.2693; H -4.69798 1.62621 0.72518; C -4.47115 -1.85465 2.46592; H -5.33699 -2.50924 2.30958; O -3.50744 -2.49324 3.3135; H -2.76983 -2.83605 2.77919; H -4.81526 -0.95879 2.98516; O 2.01537 -1.70774 -1.89652; H 1.17126 -1.21952 -1.9851; units angstrom. }; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'); energy('sapt0-ct'); ```. User reported error message:; ```; Traceback (most recent call last):; File “/home/think/psi4conda/bin/psi4”, line 248, in; exec(content); File “”, line 147, in; File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py”, line 460, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py”, line 3278, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::sapt::SAPT::zero_disk(int, char const*, int, int); psi::sapt::SAPT0::df_integrals(); ```. @loriab reported being able to reproduce ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1328
https://github.com/psi4/psi4/issues/1328:4148,Availability,Error,Error,4148,"2.48505 -0.9528; H -3.38296 -3.42013 -1.49634; C -3.83016 -1.30519 -1.76284; H -4.84213 -1.57034 -2.07564; O -3.08657 -1.08539 -2.95725; H -2.16485 -0.88813 -2.71436; C -3.89865 -0.04023 -0.90552; H -2.87924 0.29308 -0.69629; O -4.61098 1.01217 -1.56224; H -4.00729 1.44319 -2.17836; C -4.59468 -0.30612 0.4222; H -5.64733 -0.55648 0.23973; O -4.51034 0.8485 1.2693; H -4.69798 1.62621 0.72518; C -4.47115 -1.85465 2.46592; H -5.33699 -2.50924 2.30958; O -3.50744 -2.49324 3.3135; H -2.76983 -2.83605 2.77919; H -4.81526 -0.95879 2.98516; O 2.01537 -1.70774 -1.89652; H 1.17126 -1.21952 -1.9851; units angstrom. }; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'); energy('sapt0-ct'); ```. User reported error message:; ```; Traceback (most recent call last):; File “/home/think/psi4conda/bin/psi4”, line 248, in; exec(content); File “”, line 147, in; File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py”, line 460, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py”, line 3278, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::sapt::SAPT::zero_disk(int, char const*, int, int); psi::sapt::SAPT0::df_integrals(); ```. @loriab reported being able to reproduce this, but was interrupted working on the bug and never got around to it. This may just be a case of the disk filling up, in which case, all we can do is write a better error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1328
https://github.com/psi4/psi4/issues/1328:4160,Availability,Error,Error,4160,"2.48505 -0.9528; H -3.38296 -3.42013 -1.49634; C -3.83016 -1.30519 -1.76284; H -4.84213 -1.57034 -2.07564; O -3.08657 -1.08539 -2.95725; H -2.16485 -0.88813 -2.71436; C -3.89865 -0.04023 -0.90552; H -2.87924 0.29308 -0.69629; O -4.61098 1.01217 -1.56224; H -4.00729 1.44319 -2.17836; C -4.59468 -0.30612 0.4222; H -5.64733 -0.55648 0.23973; O -4.51034 0.8485 1.2693; H -4.69798 1.62621 0.72518; C -4.47115 -1.85465 2.46592; H -5.33699 -2.50924 2.30958; O -3.50744 -2.49324 3.3135; H -2.76983 -2.83605 2.77919; H -4.81526 -0.95879 2.98516; O 2.01537 -1.70774 -1.89652; H 1.17126 -1.21952 -1.9851; units angstrom. }; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'); energy('sapt0-ct'); ```. User reported error message:; ```; Traceback (most recent call last):; File “/home/think/psi4conda/bin/psi4”, line 248, in; exec(content); File “”, line 147, in; File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py”, line 460, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py”, line 3278, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::sapt::SAPT::zero_disk(int, char const*, int, int); psi::sapt::SAPT0::df_integrals(); ```. @loriab reported being able to reproduce this, but was interrupted working on the bug and never got around to it. This may just be a case of the disk filling up, in which case, all we can do is write a better error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1328
https://github.com/psi4/psi4/issues/1328:4167,Availability,Error,Error,4167,"2.48505 -0.9528; H -3.38296 -3.42013 -1.49634; C -3.83016 -1.30519 -1.76284; H -4.84213 -1.57034 -2.07564; O -3.08657 -1.08539 -2.95725; H -2.16485 -0.88813 -2.71436; C -3.89865 -0.04023 -0.90552; H -2.87924 0.29308 -0.69629; O -4.61098 1.01217 -1.56224; H -4.00729 1.44319 -2.17836; C -4.59468 -0.30612 0.4222; H -5.64733 -0.55648 0.23973; O -4.51034 0.8485 1.2693; H -4.69798 1.62621 0.72518; C -4.47115 -1.85465 2.46592; H -5.33699 -2.50924 2.30958; O -3.50744 -2.49324 3.3135; H -2.76983 -2.83605 2.77919; H -4.81526 -0.95879 2.98516; O 2.01537 -1.70774 -1.89652; H 1.17126 -1.21952 -1.9851; units angstrom. }; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'); energy('sapt0-ct'); ```. User reported error message:; ```; Traceback (most recent call last):; File “/home/think/psi4conda/bin/psi4”, line 248, in; exec(content); File “”, line 147, in; File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py”, line 460, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py”, line 3278, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::sapt::SAPT::zero_disk(int, char const*, int, int); psi::sapt::SAPT0::df_integrals(); ```. @loriab reported being able to reproduce this, but was interrupted working on the bug and never got around to it. This may just be a case of the disk filling up, in which case, all we can do is write a better error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1328
https://github.com/psi4/psi4/issues/1328:4272,Availability,error,error,4272,"2.48505 -0.9528; H -3.38296 -3.42013 -1.49634; C -3.83016 -1.30519 -1.76284; H -4.84213 -1.57034 -2.07564; O -3.08657 -1.08539 -2.95725; H -2.16485 -0.88813 -2.71436; C -3.89865 -0.04023 -0.90552; H -2.87924 0.29308 -0.69629; O -4.61098 1.01217 -1.56224; H -4.00729 1.44319 -2.17836; C -4.59468 -0.30612 0.4222; H -5.64733 -0.55648 0.23973; O -4.51034 0.8485 1.2693; H -4.69798 1.62621 0.72518; C -4.47115 -1.85465 2.46592; H -5.33699 -2.50924 2.30958; O -3.50744 -2.49324 3.3135; H -2.76983 -2.83605 2.77919; H -4.81526 -0.95879 2.98516; O 2.01537 -1.70774 -1.89652; H 1.17126 -1.21952 -1.9851; units angstrom. }; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'); energy('sapt0-ct'); ```. User reported error message:; ```; Traceback (most recent call last):; File “/home/think/psi4conda/bin/psi4”, line 248, in; exec(content); File “”, line 147, in; File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py”, line 460, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py”, line 3278, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::sapt::SAPT::zero_disk(int, char const*, int, int); psi::sapt::SAPT0::df_integrals(); ```. @loriab reported being able to reproduce this, but was interrupted working on the bug and never got around to it. This may just be a case of the disk filling up, in which case, all we can do is write a better error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1328
https://github.com/psi4/psi4/issues/1328:4879,Availability,error,error,4879,"2.48505 -0.9528; H -3.38296 -3.42013 -1.49634; C -3.83016 -1.30519 -1.76284; H -4.84213 -1.57034 -2.07564; O -3.08657 -1.08539 -2.95725; H -2.16485 -0.88813 -2.71436; C -3.89865 -0.04023 -0.90552; H -2.87924 0.29308 -0.69629; O -4.61098 1.01217 -1.56224; H -4.00729 1.44319 -2.17836; C -4.59468 -0.30612 0.4222; H -5.64733 -0.55648 0.23973; O -4.51034 0.8485 1.2693; H -4.69798 1.62621 0.72518; C -4.47115 -1.85465 2.46592; H -5.33699 -2.50924 2.30958; O -3.50744 -2.49324 3.3135; H -2.76983 -2.83605 2.77919; H -4.81526 -0.95879 2.98516; O 2.01537 -1.70774 -1.89652; H 1.17126 -1.21952 -1.9851; units angstrom. }; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'); energy('sapt0-ct'); ```. User reported error message:; ```; Traceback (most recent call last):; File “/home/think/psi4conda/bin/psi4”, line 248, in; exec(content); File “”, line 147, in; File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py”, line 460, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py”, line 3278, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::sapt::SAPT::zero_disk(int, char const*, int, int); psi::sapt::SAPT0::df_integrals(); ```. @loriab reported being able to reproduce this, but was interrupted working on the bug and never got around to it. This may just be a case of the disk filling up, in which case, all we can do is write a better error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1328
https://github.com/psi4/psi4/issues/1328:3568,Energy Efficiency,energy,energy,3568,"1; H -1.36917 -4.23407 -0.64127; O -1.89779 -2.21963 -0.70275; C 0.04169 -3.51758 1.45753; H 1.00429 -3.46857 1.97365; O -0.95802 -2.84738 2.22072; H -0.62594 -1.95593 2.43463; H -0.25639 -4.56534 1.39064; C -3.89573 -1.47663 1.11455; H -2.84685 -1.21526 1.24711; O -3.96785 -2.64213 0.26554; C -3.25927 -2.48505 -0.9528; H -3.38296 -3.42013 -1.49634; C -3.83016 -1.30519 -1.76284; H -4.84213 -1.57034 -2.07564; O -3.08657 -1.08539 -2.95725; H -2.16485 -0.88813 -2.71436; C -3.89865 -0.04023 -0.90552; H -2.87924 0.29308 -0.69629; O -4.61098 1.01217 -1.56224; H -4.00729 1.44319 -2.17836; C -4.59468 -0.30612 0.4222; H -5.64733 -0.55648 0.23973; O -4.51034 0.8485 1.2693; H -4.69798 1.62621 0.72518; C -4.47115 -1.85465 2.46592; H -5.33699 -2.50924 2.30958; O -3.50744 -2.49324 3.3135; H -2.76983 -2.83605 2.77919; H -4.81526 -0.95879 2.98516; O 2.01537 -1.70774 -1.89652; H 1.17126 -1.21952 -1.9851; units angstrom. }; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'); energy('sapt0-ct'); ```. User reported error message:; ```; Traceback (most recent call last):; File “/home/think/psi4conda/bin/psi4”, line 248, in; exec(content); File “”, line 147, in; File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py”, line 460, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py”, line 3278, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::sapt::SA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1328
https://github.com/psi4/psi4/issues/1328:3585,Energy Efficiency,energy,energy,3585,"1; H -1.36917 -4.23407 -0.64127; O -1.89779 -2.21963 -0.70275; C 0.04169 -3.51758 1.45753; H 1.00429 -3.46857 1.97365; O -0.95802 -2.84738 2.22072; H -0.62594 -1.95593 2.43463; H -0.25639 -4.56534 1.39064; C -3.89573 -1.47663 1.11455; H -2.84685 -1.21526 1.24711; O -3.96785 -2.64213 0.26554; C -3.25927 -2.48505 -0.9528; H -3.38296 -3.42013 -1.49634; C -3.83016 -1.30519 -1.76284; H -4.84213 -1.57034 -2.07564; O -3.08657 -1.08539 -2.95725; H -2.16485 -0.88813 -2.71436; C -3.89865 -0.04023 -0.90552; H -2.87924 0.29308 -0.69629; O -4.61098 1.01217 -1.56224; H -4.00729 1.44319 -2.17836; C -4.59468 -0.30612 0.4222; H -5.64733 -0.55648 0.23973; O -4.51034 0.8485 1.2693; H -4.69798 1.62621 0.72518; C -4.47115 -1.85465 2.46592; H -5.33699 -2.50924 2.30958; O -3.50744 -2.49324 3.3135; H -2.76983 -2.83605 2.77919; H -4.81526 -0.95879 2.98516; O 2.01537 -1.70774 -1.89652; H 1.17126 -1.21952 -1.9851; units angstrom. }; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'); energy('sapt0-ct'); ```. User reported error message:; ```; Traceback (most recent call last):; File “/home/think/psi4conda/bin/psi4”, line 248, in; exec(content); File “”, line 147, in; File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py”, line 460, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py”, line 3278, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::sapt::SA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1328
https://github.com/psi4/psi4/issues/1328:3866,Energy Efficiency,energy,energy,3866,"2.48505 -0.9528; H -3.38296 -3.42013 -1.49634; C -3.83016 -1.30519 -1.76284; H -4.84213 -1.57034 -2.07564; O -3.08657 -1.08539 -2.95725; H -2.16485 -0.88813 -2.71436; C -3.89865 -0.04023 -0.90552; H -2.87924 0.29308 -0.69629; O -4.61098 1.01217 -1.56224; H -4.00729 1.44319 -2.17836; C -4.59468 -0.30612 0.4222; H -5.64733 -0.55648 0.23973; O -4.51034 0.8485 1.2693; H -4.69798 1.62621 0.72518; C -4.47115 -1.85465 2.46592; H -5.33699 -2.50924 2.30958; O -3.50744 -2.49324 3.3135; H -2.76983 -2.83605 2.77919; H -4.81526 -0.95879 2.98516; O 2.01537 -1.70774 -1.89652; H 1.17126 -1.21952 -1.9851; units angstrom. }; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'); energy('sapt0-ct'); ```. User reported error message:; ```; Traceback (most recent call last):; File “/home/think/psi4conda/bin/psi4”, line 248, in; exec(content); File “”, line 147, in; File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py”, line 460, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py”, line 3278, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::sapt::SAPT::zero_disk(int, char const*, int, int); psi::sapt::SAPT0::df_integrals(); ```. @loriab reported being able to reproduce this, but was interrupted working on the bug and never got around to it. This may just be a case of the disk filling up, in which case, all we can do is write a better error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1328
https://github.com/psi4/psi4/issues/1328:3892,Energy Efficiency,energy,energy,3892,"2.48505 -0.9528; H -3.38296 -3.42013 -1.49634; C -3.83016 -1.30519 -1.76284; H -4.84213 -1.57034 -2.07564; O -3.08657 -1.08539 -2.95725; H -2.16485 -0.88813 -2.71436; C -3.89865 -0.04023 -0.90552; H -2.87924 0.29308 -0.69629; O -4.61098 1.01217 -1.56224; H -4.00729 1.44319 -2.17836; C -4.59468 -0.30612 0.4222; H -5.64733 -0.55648 0.23973; O -4.51034 0.8485 1.2693; H -4.69798 1.62621 0.72518; C -4.47115 -1.85465 2.46592; H -5.33699 -2.50924 2.30958; O -3.50744 -2.49324 3.3135; H -2.76983 -2.83605 2.77919; H -4.81526 -0.95879 2.98516; O 2.01537 -1.70774 -1.89652; H 1.17126 -1.21952 -1.9851; units angstrom. }; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'); energy('sapt0-ct'); ```. User reported error message:; ```; Traceback (most recent call last):; File “/home/think/psi4conda/bin/psi4”, line 248, in; exec(content); File “”, line 147, in; File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py”, line 460, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py”, line 3278, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::sapt::SAPT::zero_disk(int, char const*, int, int); psi::sapt::SAPT0::df_integrals(); ```. @loriab reported being able to reproduce this, but was interrupted working on the bug and never got around to it. This may just be a case of the disk filling up, in which case, all we can do is write a better error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1328
https://github.com/psi4/psi4/issues/1328:3630,Integrability,message,message,3630,".95802 -2.84738 2.22072; H -0.62594 -1.95593 2.43463; H -0.25639 -4.56534 1.39064; C -3.89573 -1.47663 1.11455; H -2.84685 -1.21526 1.24711; O -3.96785 -2.64213 0.26554; C -3.25927 -2.48505 -0.9528; H -3.38296 -3.42013 -1.49634; C -3.83016 -1.30519 -1.76284; H -4.84213 -1.57034 -2.07564; O -3.08657 -1.08539 -2.95725; H -2.16485 -0.88813 -2.71436; C -3.89865 -0.04023 -0.90552; H -2.87924 0.29308 -0.69629; O -4.61098 1.01217 -1.56224; H -4.00729 1.44319 -2.17836; C -4.59468 -0.30612 0.4222; H -5.64733 -0.55648 0.23973; O -4.51034 0.8485 1.2693; H -4.69798 1.62621 0.72518; C -4.47115 -1.85465 2.46592; H -5.33699 -2.50924 2.30958; O -3.50744 -2.49324 3.3135; H -2.76983 -2.83605 2.77919; H -4.81526 -0.95879 2.98516; O 2.01537 -1.70774 -1.89652; H 1.17126 -1.21952 -1.9851; units angstrom. }; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'); energy('sapt0-ct'); ```. User reported error message:; ```; Traceback (most recent call last):; File “/home/think/psi4conda/bin/psi4”, line 248, in; exec(content); File “”, line 147, in; File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py”, line 460, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py”, line 3278, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::sapt::SAPT::zero_disk(int, char const*, int, int); psi::sapt::SAPT0::df_integrals(); ```. @loriab reported being able to reproduce ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1328
https://github.com/psi4/psi4/issues/1328:4885,Integrability,message,message,4885,"2.48505 -0.9528; H -3.38296 -3.42013 -1.49634; C -3.83016 -1.30519 -1.76284; H -4.84213 -1.57034 -2.07564; O -3.08657 -1.08539 -2.95725; H -2.16485 -0.88813 -2.71436; C -3.89865 -0.04023 -0.90552; H -2.87924 0.29308 -0.69629; O -4.61098 1.01217 -1.56224; H -4.00729 1.44319 -2.17836; C -4.59468 -0.30612 0.4222; H -5.64733 -0.55648 0.23973; O -4.51034 0.8485 1.2693; H -4.69798 1.62621 0.72518; C -4.47115 -1.85465 2.46592; H -5.33699 -2.50924 2.30958; O -3.50744 -2.49324 3.3135; H -2.76983 -2.83605 2.77919; H -4.81526 -0.95879 2.98516; O 2.01537 -1.70774 -1.89652; H 1.17126 -1.21952 -1.9851; units angstrom. }; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'); energy('sapt0-ct'); ```. User reported error message:; ```; Traceback (most recent call last):; File “/home/think/psi4conda/bin/psi4”, line 248, in; exec(content); File “”, line 147, in; File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py”, line 460, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py”, line 3278, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::sapt::SAPT::zero_disk(int, char const*, int, int); psi::sapt::SAPT0::df_integrals(); ```. @loriab reported being able to reproduce this, but was interrupted working on the bug and never got around to it. This may just be a case of the disk filling up, in which case, all we can do is write a better error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1328
https://github.com/psi4/psi4/issues/1328:1,Safety,Recover,Recovered,1,"[Recovered from the forums](http://forum.psicode.org/t/sapt0-job-fail-i-am-a-beginner/1034). As the forum mangles input file syntax, be wary that there may be an error or two hiding here. User reported the following input. ; ```; memory 5000 Mb; molecule dimer {; 1 1; C 4.19994 3.08488 -1.76044; C 5.06954 2.46285 -0.64984; C 4.64327 1.0663 -0.28153; O 4.85673 0.07495 -0.94802; O 3.96234 1.04199 0.88706; H 4.61569 4.07213 -1.97225; H 4.3027 2.5025 -2.67989; H 6.10053 2.39646 -1.00395; C 3.46892 -0.23561 1.35315; H 5.0473 3.09629 0.23787; C 1.89576 1.98716 -1.88508; C 2.70489 3.20283 -1.38087; C 2.1115 4.4631 -2.00089; O 2.22564 4.69469 -3.21122; N 1.45755 5.29818 -1.17121; H 1.82029 2.0666 -2.97331; H 2.43364 1.05863 -1.68462; H 2.61952 3.26827 -0.29319; H 0.99607 6.1109 -1.5546; H 1.29463 5.07123 -0.20248; C 0.54897 1.25688 0.14654; C 0.49167 1.90422 -1.2458; C -0.42151 1.12609 -2.17481; O -0.30845 -0.10438 -2.3373; N -1.33375 1.83551 -2.84989; H 1.41314 1.64705 0.68692; H 0.72592 0.18975 0.02069; H 0.09209 2.91772 -1.16504; H -1.48178 2.81502 -2.66023; H -1.96292 1.36772 -3.48833; C -0.75822 2.9873 1.46817; C -0.71562 1.51535 0.97554; C -0.84126 0.54385 2.14223; O 0.07905 -0.22265 2.47636; N -2.01096 0.56868 2.81099; H -0.38444 3.03627 2.49566; H -0.05905 3.57117 0.86785; H -1.58667 1.32703 0.34288; H -2.1767 -0.18204 3.47055; H -2.8428 0.94125 2.3602; H -1.95043 4.30157 -0.69534; C -2.6631 3.78375 -0.0493; C -2.12926 3.68676 1.38656; C -1.95827 5.09276 1.94691; O -1.18692 5.90686 1.41866; N -2.67996 5.39713 3.0393; H -3.6084 4.33293 -0.07465; H -2.84925 2.79578 -0.47069; H -2.85563 3.14558 1.99767; H -3.31103 4.73323 3.45906; H -2.59711 6.3152 3.45181; C 4.60787 -0.8758 2.13999; H 3.13705 -0.83567 0.50868; H 2.61634 0.00579 1.97897; H 4.90463 -0.2111 2.95001; N 4.27305 -2.20998 2.77179; H 5.46495 -1.04265 1.48973; C 3.078 -2.08869 3.6774; C 4.01212 -3.24631 1.71507; C 5.4587 -2.64236 3.59063; H 2.19356 -1.85215 3.09367; H 3.27107 -1.30183 4.40339; H 2.93642 -3.0407",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1328
https://github.com/psi4/psi4/issues/1329:1,Availability,Recover,Recovered,1,"[Recovered from the forums.](http://forum.psicode.org/t/segfault-projecting-wfn-onto-new-basis/945). User attempted a manual basis guess, with the following input file.; ```; molecule {; 0 5; FE 0.000000000000 0.000000000000 0.123274779640; F 1.565379000000 0.000000000000 -0.647320000000; F -0.000000000000 -1.700830000000 0.639825000000; F 0.000000000000 1.700830000000 0.639825000000; F -1.565379000000 -0.000000000000 -0.647320000000; }. set {; basis sto-3g; guess sad; scf_type direct; reference uhf; }. energy('hf'). basis {; assign 6-31++G**; assign Fe 6-31G**; }. set guess read; optimize('hf'); ```. The PSIO error that results is difficult to interpret. Can we catch the case of switching basis sets without cleaning and tell the user to either clean explicitly or use the `basis_guess` option, depending on what they're trying to do?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1329
https://github.com/psi4/psi4/issues/1329:618,Availability,error,error,618,"[Recovered from the forums.](http://forum.psicode.org/t/segfault-projecting-wfn-onto-new-basis/945). User attempted a manual basis guess, with the following input file.; ```; molecule {; 0 5; FE 0.000000000000 0.000000000000 0.123274779640; F 1.565379000000 0.000000000000 -0.647320000000; F -0.000000000000 -1.700830000000 0.639825000000; F 0.000000000000 1.700830000000 0.639825000000; F -1.565379000000 -0.000000000000 -0.647320000000; }. set {; basis sto-3g; guess sad; scf_type direct; reference uhf; }. energy('hf'). basis {; assign 6-31++G**; assign Fe 6-31G**; }. set guess read; optimize('hf'); ```. The PSIO error that results is difficult to interpret. Can we catch the case of switching basis sets without cleaning and tell the user to either clean explicitly or use the `basis_guess` option, depending on what they're trying to do?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1329
https://github.com/psi4/psi4/issues/1329:509,Energy Efficiency,energy,energy,509,"[Recovered from the forums.](http://forum.psicode.org/t/segfault-projecting-wfn-onto-new-basis/945). User attempted a manual basis guess, with the following input file.; ```; molecule {; 0 5; FE 0.000000000000 0.000000000000 0.123274779640; F 1.565379000000 0.000000000000 -0.647320000000; F -0.000000000000 -1.700830000000 0.639825000000; F 0.000000000000 1.700830000000 0.639825000000; F -1.565379000000 -0.000000000000 -0.647320000000; }. set {; basis sto-3g; guess sad; scf_type direct; reference uhf; }. energy('hf'). basis {; assign 6-31++G**; assign Fe 6-31G**; }. set guess read; optimize('hf'); ```. The PSIO error that results is difficult to interpret. Can we catch the case of switching basis sets without cleaning and tell the user to either clean explicitly or use the `basis_guess` option, depending on what they're trying to do?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1329
https://github.com/psi4/psi4/issues/1329:805,Integrability,depend,depending,805,"[Recovered from the forums.](http://forum.psicode.org/t/segfault-projecting-wfn-onto-new-basis/945). User attempted a manual basis guess, with the following input file.; ```; molecule {; 0 5; FE 0.000000000000 0.000000000000 0.123274779640; F 1.565379000000 0.000000000000 -0.647320000000; F -0.000000000000 -1.700830000000 0.639825000000; F 0.000000000000 1.700830000000 0.639825000000; F -1.565379000000 -0.000000000000 -0.647320000000; }. set {; basis sto-3g; guess sad; scf_type direct; reference uhf; }. energy('hf'). basis {; assign 6-31++G**; assign Fe 6-31G**; }. set guess read; optimize('hf'); ```. The PSIO error that results is difficult to interpret. Can we catch the case of switching basis sets without cleaning and tell the user to either clean explicitly or use the `basis_guess` option, depending on what they're trying to do?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1329
https://github.com/psi4/psi4/issues/1329:588,Performance,optimiz,optimize,588,"[Recovered from the forums.](http://forum.psicode.org/t/segfault-projecting-wfn-onto-new-basis/945). User attempted a manual basis guess, with the following input file.; ```; molecule {; 0 5; FE 0.000000000000 0.000000000000 0.123274779640; F 1.565379000000 0.000000000000 -0.647320000000; F -0.000000000000 -1.700830000000 0.639825000000; F 0.000000000000 1.700830000000 0.639825000000; F -1.565379000000 -0.000000000000 -0.647320000000; }. set {; basis sto-3g; guess sad; scf_type direct; reference uhf; }. energy('hf'). basis {; assign 6-31++G**; assign Fe 6-31G**; }. set guess read; optimize('hf'); ```. The PSIO error that results is difficult to interpret. Can we catch the case of switching basis sets without cleaning and tell the user to either clean explicitly or use the `basis_guess` option, depending on what they're trying to do?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1329
https://github.com/psi4/psi4/issues/1329:1,Safety,Recover,Recovered,1,"[Recovered from the forums.](http://forum.psicode.org/t/segfault-projecting-wfn-onto-new-basis/945). User attempted a manual basis guess, with the following input file.; ```; molecule {; 0 5; FE 0.000000000000 0.000000000000 0.123274779640; F 1.565379000000 0.000000000000 -0.647320000000; F -0.000000000000 -1.700830000000 0.639825000000; F 0.000000000000 1.700830000000 0.639825000000; F -1.565379000000 -0.000000000000 -0.647320000000; }. set {; basis sto-3g; guess sad; scf_type direct; reference uhf; }. energy('hf'). basis {; assign 6-31++G**; assign Fe 6-31G**; }. set guess read; optimize('hf'); ```. The PSIO error that results is difficult to interpret. Can we catch the case of switching basis sets without cleaning and tell the user to either clean explicitly or use the `basis_guess` option, depending on what they're trying to do?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1329
https://github.com/psi4/psi4/pull/1330:494,Security,access,access,494,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] switch to qcel for covalent radii. require v0.1.2; - [x] to try out covalent radii, add a test for translating to MOL format. add to psi4.core.Mol.; - [x] fix the compare_vals in threading_test; - [x] clean up all but json_out files from ctest run; - [x] add levels to pytest. while `psi4 --test` still does smoke only, other access modes have smoke/quick/default/long and we can start expanding the pytest suite. ## Checklist; - [x] added MOL writer test; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1330
https://github.com/psi4/psi4/pull/1330:258,Testability,test,test,258,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] switch to qcel for covalent radii. require v0.1.2; - [x] to try out covalent radii, add a test for translating to MOL format. add to psi4.core.Mol.; - [x] fix the compare_vals in threading_test; - [x] clean up all but json_out files from ctest run; - [x] add levels to pytest. while `psi4 --test` still does smoke only, other access modes have smoke/quick/default/long and we can start expanding the pytest suite. ## Checklist; - [x] added MOL writer test; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1330
https://github.com/psi4/psi4/pull/1330:459,Testability,test,test,459,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] switch to qcel for covalent radii. require v0.1.2; - [x] to try out covalent radii, add a test for translating to MOL format. add to psi4.core.Mol.; - [x] fix the compare_vals in threading_test; - [x] clean up all but json_out files from ctest run; - [x] add levels to pytest. while `psi4 --test` still does smoke only, other access modes have smoke/quick/default/long and we can start expanding the pytest suite. ## Checklist; - [x] added MOL writer test; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1330
https://github.com/psi4/psi4/pull/1330:619,Testability,test,test,619,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] switch to qcel for covalent radii. require v0.1.2; - [x] to try out covalent radii, add a test for translating to MOL format. add to psi4.core.Mol.; - [x] fix the compare_vals in threading_test; - [x] clean up all but json_out files from ctest run; - [x] add levels to pytest. while `psi4 --test` still does smoke only, other access modes have smoke/quick/default/long and we can start expanding the pytest suite. ## Checklist; - [x] added MOL writer test; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1330
https://github.com/psi4/psi4/pull/1330:665,Testability,test,tests,665,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] switch to qcel for covalent radii. require v0.1.2; - [x] to try out covalent radii, add a test for translating to MOL format. add to psi4.core.Mol.; - [x] fix the compare_vals in threading_test; - [x] clean up all but json_out files from ctest run; - [x] add levels to pytest. while `psi4 --test` still does smoke only, other access modes have smoke/quick/default/long and we can start expanding the pytest suite. ## Checklist; - [x] added MOL writer test; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1330
https://github.com/psi4/psi4/pull/1330:756,Testability,test,tests,756,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] switch to qcel for covalent radii. require v0.1.2; - [x] to try out covalent radii, add a test for translating to MOL format. add to psi4.core.Mol.; - [x] fix the compare_vals in threading_test; - [x] clean up all but json_out files from ctest run; - [x] add levels to pytest. while `psi4 --test` still does smoke only, other access modes have smoke/quick/default/long and we can start expanding the pytest suite. ## Checklist; - [x] added MOL writer test; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1330
https://github.com/psi4/psi4/issues/1331:1,Availability,Recover,Recovered,1,"[Recovered from the forums.](http://forum.psicode.org/t/thermodynamic-analysis/1014/2). The post-frequency vibrational information is difficult to get at in-file with a Psithon (not PsiAPI). See the original topic for a listing of the difficulties. User reports that `thermo` did not return a dict, but `git blame` says the return value of `thermo` has been a dict for quite some time. In the end, Lori recommended not getting the information through thermo in the first place, but loading the vibrational record.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1331
https://github.com/psi4/psi4/issues/1331:482,Performance,load,loading,482,"[Recovered from the forums.](http://forum.psicode.org/t/thermodynamic-analysis/1014/2). The post-frequency vibrational information is difficult to get at in-file with a Psithon (not PsiAPI). See the original topic for a listing of the difficulties. User reports that `thermo` did not return a dict, but `git blame` says the return value of `thermo` has been a dict for quite some time. In the end, Lori recommended not getting the information through thermo in the first place, but loading the vibrational record.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1331
https://github.com/psi4/psi4/issues/1331:1,Safety,Recover,Recovered,1,"[Recovered from the forums.](http://forum.psicode.org/t/thermodynamic-analysis/1014/2). The post-frequency vibrational information is difficult to get at in-file with a Psithon (not PsiAPI). See the original topic for a listing of the difficulties. User reports that `thermo` did not return a dict, but `git blame` says the return value of `thermo` has been a dict for quite some time. In the end, Lori recommended not getting the information through thermo in the first place, but loading the vibrational record.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1331
https://github.com/psi4/psi4/issues/1332:169,Availability,error,error,169,"Discovered yet again when trying to reproduce an issue reported on the forums. When I defined a custom basis set but forgot to include the final quadruple asterisk, the error message appeared when I attempted the scf and did not leave me any clues about what was wrong in the basis set. Such errors should be caught in the basis set input phase, where a usual error message can be printed. It would be useful to try a few other basis inputs that break the parser and verify that a useful error message is printed in the parsing phase.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1332
https://github.com/psi4/psi4/issues/1332:292,Availability,error,errors,292,"Discovered yet again when trying to reproduce an issue reported on the forums. When I defined a custom basis set but forgot to include the final quadruple asterisk, the error message appeared when I attempted the scf and did not leave me any clues about what was wrong in the basis set. Such errors should be caught in the basis set input phase, where a usual error message can be printed. It would be useful to try a few other basis inputs that break the parser and verify that a useful error message is printed in the parsing phase.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1332
https://github.com/psi4/psi4/issues/1332:360,Availability,error,error,360,"Discovered yet again when trying to reproduce an issue reported on the forums. When I defined a custom basis set but forgot to include the final quadruple asterisk, the error message appeared when I attempted the scf and did not leave me any clues about what was wrong in the basis set. Such errors should be caught in the basis set input phase, where a usual error message can be printed. It would be useful to try a few other basis inputs that break the parser and verify that a useful error message is printed in the parsing phase.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1332
https://github.com/psi4/psi4/issues/1332:488,Availability,error,error,488,"Discovered yet again when trying to reproduce an issue reported on the forums. When I defined a custom basis set but forgot to include the final quadruple asterisk, the error message appeared when I attempted the scf and did not leave me any clues about what was wrong in the basis set. Such errors should be caught in the basis set input phase, where a usual error message can be printed. It would be useful to try a few other basis inputs that break the parser and verify that a useful error message is printed in the parsing phase.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1332
https://github.com/psi4/psi4/issues/1332:175,Integrability,message,message,175,"Discovered yet again when trying to reproduce an issue reported on the forums. When I defined a custom basis set but forgot to include the final quadruple asterisk, the error message appeared when I attempted the scf and did not leave me any clues about what was wrong in the basis set. Such errors should be caught in the basis set input phase, where a usual error message can be printed. It would be useful to try a few other basis inputs that break the parser and verify that a useful error message is printed in the parsing phase.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1332
https://github.com/psi4/psi4/issues/1332:366,Integrability,message,message,366,"Discovered yet again when trying to reproduce an issue reported on the forums. When I defined a custom basis set but forgot to include the final quadruple asterisk, the error message appeared when I attempted the scf and did not leave me any clues about what was wrong in the basis set. Such errors should be caught in the basis set input phase, where a usual error message can be printed. It would be useful to try a few other basis inputs that break the parser and verify that a useful error message is printed in the parsing phase.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1332
https://github.com/psi4/psi4/issues/1332:494,Integrability,message,message,494,"Discovered yet again when trying to reproduce an issue reported on the forums. When I defined a custom basis set but forgot to include the final quadruple asterisk, the error message appeared when I attempted the scf and did not leave me any clues about what was wrong in the basis set. Such errors should be caught in the basis set input phase, where a usual error message can be printed. It would be useful to try a few other basis inputs that break the parser and verify that a useful error message is printed in the parsing phase.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1332
https://github.com/psi4/psi4/issues/1334:399,Availability,error,error,399,"Launching GDMA calculations from a python script or python interpreter causes a sudden crash. Ouptu files indicates that previous steps finish with no eroor and a GDMA input file is created, as well as a log file (fort.52, attached) with this message: `Could not open psi4 output for writing.unit = 51`. On the contrary, launching the same calculations with the psi4 executable does not produce any error. This bug was originally reported and discussed on the [psi4 forum](http://forum.psicode.org/t/psi-gdma-causes-python-to-crash-could-not-open-psi4-output-for-writing-unit-51/1126?u=flolangenfeld). The bug can be reproduce using the sample gdma h2o.dat file and its [python equivalent](http://forum.psicode.org/t/psi-gdma-causes-python-to-crash-could-not-open-psi4-output-for-writing-unit-51/1126/4?u=flolangenfeld)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1334
https://github.com/psi4/psi4/issues/1334:243,Integrability,message,message,243,"Launching GDMA calculations from a python script or python interpreter causes a sudden crash. Ouptu files indicates that previous steps finish with no eroor and a GDMA input file is created, as well as a log file (fort.52, attached) with this message: `Could not open psi4 output for writing.unit = 51`. On the contrary, launching the same calculations with the psi4 executable does not produce any error. This bug was originally reported and discussed on the [psi4 forum](http://forum.psicode.org/t/psi-gdma-causes-python-to-crash-could-not-open-psi4-output-for-writing-unit-51/1126?u=flolangenfeld). The bug can be reproduce using the sample gdma h2o.dat file and its [python equivalent](http://forum.psicode.org/t/psi-gdma-causes-python-to-crash-could-not-open-psi4-output-for-writing-unit-51/1126/4?u=flolangenfeld)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1334
https://github.com/psi4/psi4/issues/1334:204,Testability,log,log,204,"Launching GDMA calculations from a python script or python interpreter causes a sudden crash. Ouptu files indicates that previous steps finish with no eroor and a GDMA input file is created, as well as a log file (fort.52, attached) with this message: `Could not open psi4 output for writing.unit = 51`. On the contrary, launching the same calculations with the psi4 executable does not produce any error. This bug was originally reported and discussed on the [psi4 forum](http://forum.psicode.org/t/psi-gdma-causes-python-to-crash-could-not-open-psi4-output-for-writing-unit-51/1126?u=flolangenfeld). The bug can be reproduce using the sample gdma h2o.dat file and its [python equivalent](http://forum.psicode.org/t/psi-gdma-causes-python-to-crash-could-not-open-psi4-output-for-writing-unit-51/1126/4?u=flolangenfeld)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1334
https://github.com/psi4/psi4/pull/1335:341,Integrability,wrap,wrapper,341,"## Description; Continues from #1120. pyoptking largely plumbed in. ## Todos. Failing tests from full suite. These will definitely include (a) functions to opt, (b) mixed basis sets, an odd thing in fnocc2 where I can't get the wfn to freeze core.; - [ ]	 17 - cbs-xtpl-opt (Failed); - [ ]	 18 - cbs-xtpl-func (Failed); - [ ]	 20 - cbs-xtpl-wrapper (Failed); - [ ]	114 - dcft5 (Failed); - [ ]	204 - fnocc2 (Failed); - [ ]	267 - opt-lindep-change (Failed); - [ ]	277 - opt8 (Failed); - [ ]	281 - opt13 (Failed); - [ ]	282 - opt14 (Failed); - [ ]	283 - opt-irc-1 (Failed); - [ ]	284 - opt-irc-2 (Failed); - [ ]	285 - opt-irc-3 (Failed); - [ ]	301 - pubchem1 (Failed); - [ ]	304 - pywrap-all (Failed); - [ ]	393 - python-pubchem (Failed); - [ ]	419 - gcp-pbeh3c (Failed); - [ ]	428 - pcmsolver-opt-fd (Failed). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for preliminary review. hopefully the optking team can work off this.; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1335
https://github.com/psi4/psi4/pull/1335:86,Testability,test,tests,86,"## Description; Continues from #1120. pyoptking largely plumbed in. ## Todos. Failing tests from full suite. These will definitely include (a) functions to opt, (b) mixed basis sets, an odd thing in fnocc2 where I can't get the wfn to freeze core.; - [ ]	 17 - cbs-xtpl-opt (Failed); - [ ]	 18 - cbs-xtpl-func (Failed); - [ ]	 20 - cbs-xtpl-wrapper (Failed); - [ ]	114 - dcft5 (Failed); - [ ]	204 - fnocc2 (Failed); - [ ]	267 - opt-lindep-change (Failed); - [ ]	277 - opt8 (Failed); - [ ]	281 - opt13 (Failed); - [ ]	282 - opt14 (Failed); - [ ]	283 - opt-irc-1 (Failed); - [ ]	284 - opt-irc-2 (Failed); - [ ]	285 - opt-irc-3 (Failed); - [ ]	301 - pubchem1 (Failed); - [ ]	304 - pywrap-all (Failed); - [ ]	393 - python-pubchem (Failed); - [ ]	419 - gcp-pbeh3c (Failed); - [ ]	428 - pcmsolver-opt-fd (Failed). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for preliminary review. hopefully the optking team can work off this.; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1335
https://github.com/psi4/psi4/pull/1335:828,Testability,Test,Tests,828,"## Description; Continues from #1120. pyoptking largely plumbed in. ## Todos. Failing tests from full suite. These will definitely include (a) functions to opt, (b) mixed basis sets, an odd thing in fnocc2 where I can't get the wfn to freeze core.; - [ ]	 17 - cbs-xtpl-opt (Failed); - [ ]	 18 - cbs-xtpl-func (Failed); - [ ]	 20 - cbs-xtpl-wrapper (Failed); - [ ]	114 - dcft5 (Failed); - [ ]	204 - fnocc2 (Failed); - [ ]	267 - opt-lindep-change (Failed); - [ ]	277 - opt8 (Failed); - [ ]	281 - opt13 (Failed); - [ ]	282 - opt14 (Failed); - [ ]	283 - opt-irc-1 (Failed); - [ ]	284 - opt-irc-2 (Failed); - [ ]	285 - opt-irc-3 (Failed); - [ ]	301 - pubchem1 (Failed); - [ ]	304 - pywrap-all (Failed); - [ ]	393 - python-pubchem (Failed); - [ ]	419 - gcp-pbeh3c (Failed); - [ ]	428 - pcmsolver-opt-fd (Failed). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for preliminary review. hopefully the optking team can work off this.; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1335
https://github.com/psi4/psi4/pull/1335:902,Testability,test,tests,902,"## Description; Continues from #1120. pyoptking largely plumbed in. ## Todos. Failing tests from full suite. These will definitely include (a) functions to opt, (b) mixed basis sets, an odd thing in fnocc2 where I can't get the wfn to freeze core.; - [ ]	 17 - cbs-xtpl-opt (Failed); - [ ]	 18 - cbs-xtpl-func (Failed); - [ ]	 20 - cbs-xtpl-wrapper (Failed); - [ ]	114 - dcft5 (Failed); - [ ]	204 - fnocc2 (Failed); - [ ]	267 - opt-lindep-change (Failed); - [ ]	277 - opt8 (Failed); - [ ]	281 - opt13 (Failed); - [ ]	282 - opt14 (Failed); - [ ]	283 - opt-irc-1 (Failed); - [ ]	284 - opt-irc-2 (Failed); - [ ]	285 - opt-irc-3 (Failed); - [ ]	301 - pubchem1 (Failed); - [ ]	304 - pywrap-all (Failed); - [ ]	393 - python-pubchem (Failed); - [ ]	419 - gcp-pbeh3c (Failed); - [ ]	428 - pcmsolver-opt-fd (Failed). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for preliminary review. hopefully the optking team can work off this.; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1335
https://github.com/psi4/psi4/pull/1335:993,Testability,test,tests,993,"## Description; Continues from #1120. pyoptking largely plumbed in. ## Todos. Failing tests from full suite. These will definitely include (a) functions to opt, (b) mixed basis sets, an odd thing in fnocc2 where I can't get the wfn to freeze core.; - [ ]	 17 - cbs-xtpl-opt (Failed); - [ ]	 18 - cbs-xtpl-func (Failed); - [ ]	 20 - cbs-xtpl-wrapper (Failed); - [ ]	114 - dcft5 (Failed); - [ ]	204 - fnocc2 (Failed); - [ ]	267 - opt-lindep-change (Failed); - [ ]	277 - opt8 (Failed); - [ ]	281 - opt13 (Failed); - [ ]	282 - opt14 (Failed); - [ ]	283 - opt-irc-1 (Failed); - [ ]	284 - opt-irc-2 (Failed); - [ ]	285 - opt-irc-3 (Failed); - [ ]	301 - pubchem1 (Failed); - [ ]	304 - pywrap-all (Failed); - [ ]	393 - python-pubchem (Failed); - [ ]	419 - gcp-pbeh3c (Failed); - [ ]	428 - pcmsolver-opt-fd (Failed). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for preliminary review. hopefully the optking team can work off this.; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1335
https://github.com/psi4/psi4/pull/1336:328,Availability,redundant,redundant,328,"## Description; Fixes #1288. The trouble was that Bozkaya's code used libtrans to transform integrals, and those were written to disk in their antisymmetrized, redundancy-free form, as libtrans does. The DCT code gets different integrals from libtrans but then sorts those to get the same blocks as Bozkaya wrote earlier in the redundant form. Because the DCT-sorted integral block had antisymmetry redundancies, it was larger than the libtrans block that did not have those redundancies. Fixed by changing the code to use a block without those redundancies. I imagine this is of interest to @amjames and @ssh2. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes 1288. ## Checklist; - [x] DCFT tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1336
https://github.com/psi4/psi4/pull/1336:160,Safety,redund,redundancy-free,160,"## Description; Fixes #1288. The trouble was that Bozkaya's code used libtrans to transform integrals, and those were written to disk in their antisymmetrized, redundancy-free form, as libtrans does. The DCT code gets different integrals from libtrans but then sorts those to get the same blocks as Bozkaya wrote earlier in the redundant form. Because the DCT-sorted integral block had antisymmetry redundancies, it was larger than the libtrans block that did not have those redundancies. Fixed by changing the code to use a block without those redundancies. I imagine this is of interest to @amjames and @ssh2. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes 1288. ## Checklist; - [x] DCFT tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1336
https://github.com/psi4/psi4/pull/1336:328,Safety,redund,redundant,328,"## Description; Fixes #1288. The trouble was that Bozkaya's code used libtrans to transform integrals, and those were written to disk in their antisymmetrized, redundancy-free form, as libtrans does. The DCT code gets different integrals from libtrans but then sorts those to get the same blocks as Bozkaya wrote earlier in the redundant form. Because the DCT-sorted integral block had antisymmetry redundancies, it was larger than the libtrans block that did not have those redundancies. Fixed by changing the code to use a block without those redundancies. I imagine this is of interest to @amjames and @ssh2. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes 1288. ## Checklist; - [x] DCFT tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1336
https://github.com/psi4/psi4/pull/1336:399,Safety,redund,redundancies,399,"## Description; Fixes #1288. The trouble was that Bozkaya's code used libtrans to transform integrals, and those were written to disk in their antisymmetrized, redundancy-free form, as libtrans does. The DCT code gets different integrals from libtrans but then sorts those to get the same blocks as Bozkaya wrote earlier in the redundant form. Because the DCT-sorted integral block had antisymmetry redundancies, it was larger than the libtrans block that did not have those redundancies. Fixed by changing the code to use a block without those redundancies. I imagine this is of interest to @amjames and @ssh2. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes 1288. ## Checklist; - [x] DCFT tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1336
https://github.com/psi4/psi4/pull/1336:475,Safety,redund,redundancies,475,"## Description; Fixes #1288. The trouble was that Bozkaya's code used libtrans to transform integrals, and those were written to disk in their antisymmetrized, redundancy-free form, as libtrans does. The DCT code gets different integrals from libtrans but then sorts those to get the same blocks as Bozkaya wrote earlier in the redundant form. Because the DCT-sorted integral block had antisymmetry redundancies, it was larger than the libtrans block that did not have those redundancies. Fixed by changing the code to use a block without those redundancies. I imagine this is of interest to @amjames and @ssh2. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes 1288. ## Checklist; - [x] DCFT tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1336
https://github.com/psi4/psi4/pull/1336:545,Safety,redund,redundancies,545,"## Description; Fixes #1288. The trouble was that Bozkaya's code used libtrans to transform integrals, and those were written to disk in their antisymmetrized, redundancy-free form, as libtrans does. The DCT code gets different integrals from libtrans but then sorts those to get the same blocks as Bozkaya wrote earlier in the redundant form. Because the DCT-sorted integral block had antisymmetry redundancies, it was larger than the libtrans block that did not have those redundancies. Fixed by changing the code to use a block without those redundancies. I imagine this is of interest to @amjames and @ssh2. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes 1288. ## Checklist; - [x] DCFT tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1336
https://github.com/psi4/psi4/pull/1336:747,Testability,test,tests,747,"## Description; Fixes #1288. The trouble was that Bozkaya's code used libtrans to transform integrals, and those were written to disk in their antisymmetrized, redundancy-free form, as libtrans does. The DCT code gets different integrals from libtrans but then sorts those to get the same blocks as Bozkaya wrote earlier in the redundant form. Because the DCT-sorted integral block had antisymmetry redundancies, it was larger than the libtrans block that did not have those redundancies. Fixed by changing the code to use a block without those redundancies. I imagine this is of interest to @amjames and @ssh2. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes 1288. ## Checklist; - [x] DCFT tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1336
https://github.com/psi4/psi4/pull/1337:10,Availability,error,error,10,"Raise the error that we can't do stability analysis on DFT ""wavefunctions"" before we bother to compute the (potentially very expensive) integrals necessary for this. The same error message is getting raised C-side under the same condition. This commit just raises it sooner, because spending the better part of an an hour computing integrals for no reason is annoying. ## Checklist; - [x] No tests run in addition to quicktests, since this is so simple and mirroring a C-side operation. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1337
https://github.com/psi4/psi4/pull/1337:175,Availability,error,error,175,"Raise the error that we can't do stability analysis on DFT ""wavefunctions"" before we bother to compute the (potentially very expensive) integrals necessary for this. The same error message is getting raised C-side under the same condition. This commit just raises it sooner, because spending the better part of an an hour computing integrals for no reason is annoying. ## Checklist; - [x] No tests run in addition to quicktests, since this is so simple and mirroring a C-side operation. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1337
https://github.com/psi4/psi4/pull/1337:181,Integrability,message,message,181,"Raise the error that we can't do stability analysis on DFT ""wavefunctions"" before we bother to compute the (potentially very expensive) integrals necessary for this. The same error message is getting raised C-side under the same condition. This commit just raises it sooner, because spending the better part of an an hour computing integrals for no reason is annoying. ## Checklist; - [x] No tests run in addition to quicktests, since this is so simple and mirroring a C-side operation. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1337
https://github.com/psi4/psi4/pull/1337:392,Testability,test,tests,392,"Raise the error that we can't do stability analysis on DFT ""wavefunctions"" before we bother to compute the (potentially very expensive) integrals necessary for this. The same error message is getting raised C-side under the same condition. This commit just raises it sooner, because spending the better part of an an hour computing integrals for no reason is annoying. ## Checklist; - [x] No tests run in addition to quicktests, since this is so simple and mirroring a C-side operation. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1337
https://github.com/psi4/psi4/pull/1337:446,Usability,simpl,simple,446,"Raise the error that we can't do stability analysis on DFT ""wavefunctions"" before we bother to compute the (potentially very expensive) integrals necessary for this. The same error message is getting raised C-side under the same condition. This commit just raises it sooner, because spending the better part of an an hour computing integrals for no reason is annoying. ## Checklist; - [x] No tests run in addition to quicktests, since this is so simple and mirroring a C-side operation. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1337
https://github.com/psi4/psi4/issues/1338:570,Energy Efficiency,energy,energy,570,"Yet another issue [rescued from the the forums](http://forum.psicode.org/t/problem-with-tungsten-dft-and-hf-scf-unreasonable-energies/1129/2). The user reports using conda's 1.2.1 to attempt to converge a molecule with ECPs and observes a spread in deltaE between reactant and product of over 1000 kcal/mol, depending on basis set. Suspecting some catastrophic case of landing on an excited state, I ran a modified version of the input file on the cluster, using 1.3a2.dev122. I doubled the memory allocation and replaced the attempt to unpickle with simply calling the energy with `'b3lyp'` directly. While I was able to reproduce his small-basis energy, the large-basis energy never even began. Psi segfaulted after `Total Energy Delta E RMS |[F,P]|`, and `std::cout` got hit with over 500 counts of `Failed to converge:`, which can only happen due to [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/ecpint.cc#L492). So the ECP integrals won't even converge for me, and the SCF converges to garbage for our user. Because this is a transition metal, we can't immediately rule out excited state problems, but `Failed to converge:` points to ECP problems. User's Input File:; ```; # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-PR07-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; W -0.000070400000 -0.017989600000 -0.146457100000; C 0.000157200000 1.955377300000 -0.631545200000; O 0.000411800000 3.068043100000 -0.986288700000; C 0.000004600000 0.271128000000 1.825131000000; O 0.000003100000 0.436870000000 2.983755900000; C 0.000079000000 -2.055167300000 -0.056719200000; O 0.000369700000 -3.220382300000 -0.103637600000; H 0.422788400000 -0.287137400000 -1.984721800000; H -0.422970800000 -0.287404200000 -1.985319300000; P -2.498968200000 0.054091800000 -0.052469100000; C -3.398360300000 -0.535031900000 -1.584174",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1338
https://github.com/psi4/psi4/issues/1338:648,Energy Efficiency,energy,energy,648,"Yet another issue [rescued from the the forums](http://forum.psicode.org/t/problem-with-tungsten-dft-and-hf-scf-unreasonable-energies/1129/2). The user reports using conda's 1.2.1 to attempt to converge a molecule with ECPs and observes a spread in deltaE between reactant and product of over 1000 kcal/mol, depending on basis set. Suspecting some catastrophic case of landing on an excited state, I ran a modified version of the input file on the cluster, using 1.3a2.dev122. I doubled the memory allocation and replaced the attempt to unpickle with simply calling the energy with `'b3lyp'` directly. While I was able to reproduce his small-basis energy, the large-basis energy never even began. Psi segfaulted after `Total Energy Delta E RMS |[F,P]|`, and `std::cout` got hit with over 500 counts of `Failed to converge:`, which can only happen due to [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/ecpint.cc#L492). So the ECP integrals won't even converge for me, and the SCF converges to garbage for our user. Because this is a transition metal, we can't immediately rule out excited state problems, but `Failed to converge:` points to ECP problems. User's Input File:; ```; # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-PR07-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; W -0.000070400000 -0.017989600000 -0.146457100000; C 0.000157200000 1.955377300000 -0.631545200000; O 0.000411800000 3.068043100000 -0.986288700000; C 0.000004600000 0.271128000000 1.825131000000; O 0.000003100000 0.436870000000 2.983755900000; C 0.000079000000 -2.055167300000 -0.056719200000; O 0.000369700000 -3.220382300000 -0.103637600000; H 0.422788400000 -0.287137400000 -1.984721800000; H -0.422970800000 -0.287404200000 -1.985319300000; P -2.498968200000 0.054091800000 -0.052469100000; C -3.398360300000 -0.535031900000 -1.584174",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1338
https://github.com/psi4/psi4/issues/1338:672,Energy Efficiency,energy,energy,672,"Yet another issue [rescued from the the forums](http://forum.psicode.org/t/problem-with-tungsten-dft-and-hf-scf-unreasonable-energies/1129/2). The user reports using conda's 1.2.1 to attempt to converge a molecule with ECPs and observes a spread in deltaE between reactant and product of over 1000 kcal/mol, depending on basis set. Suspecting some catastrophic case of landing on an excited state, I ran a modified version of the input file on the cluster, using 1.3a2.dev122. I doubled the memory allocation and replaced the attempt to unpickle with simply calling the energy with `'b3lyp'` directly. While I was able to reproduce his small-basis energy, the large-basis energy never even began. Psi segfaulted after `Total Energy Delta E RMS |[F,P]|`, and `std::cout` got hit with over 500 counts of `Failed to converge:`, which can only happen due to [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/ecpint.cc#L492). So the ECP integrals won't even converge for me, and the SCF converges to garbage for our user. Because this is a transition metal, we can't immediately rule out excited state problems, but `Failed to converge:` points to ECP problems. User's Input File:; ```; # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-PR07-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; W -0.000070400000 -0.017989600000 -0.146457100000; C 0.000157200000 1.955377300000 -0.631545200000; O 0.000411800000 3.068043100000 -0.986288700000; C 0.000004600000 0.271128000000 1.825131000000; O 0.000003100000 0.436870000000 2.983755900000; C 0.000079000000 -2.055167300000 -0.056719200000; O 0.000369700000 -3.220382300000 -0.103637600000; H 0.422788400000 -0.287137400000 -1.984721800000; H -0.422970800000 -0.287404200000 -1.985319300000; P -2.498968200000 0.054091800000 -0.052469100000; C -3.398360300000 -0.535031900000 -1.584174",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1338
https://github.com/psi4/psi4/issues/1338:725,Energy Efficiency,Energy,Energy,725,"Yet another issue [rescued from the the forums](http://forum.psicode.org/t/problem-with-tungsten-dft-and-hf-scf-unreasonable-energies/1129/2). The user reports using conda's 1.2.1 to attempt to converge a molecule with ECPs and observes a spread in deltaE between reactant and product of over 1000 kcal/mol, depending on basis set. Suspecting some catastrophic case of landing on an excited state, I ran a modified version of the input file on the cluster, using 1.3a2.dev122. I doubled the memory allocation and replaced the attempt to unpickle with simply calling the energy with `'b3lyp'` directly. While I was able to reproduce his small-basis energy, the large-basis energy never even began. Psi segfaulted after `Total Energy Delta E RMS |[F,P]|`, and `std::cout` got hit with over 500 counts of `Failed to converge:`, which can only happen due to [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/ecpint.cc#L492). So the ECP integrals won't even converge for me, and the SCF converges to garbage for our user. Because this is a transition metal, we can't immediately rule out excited state problems, but `Failed to converge:` points to ECP problems. User's Input File:; ```; # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-PR07-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; W -0.000070400000 -0.017989600000 -0.146457100000; C 0.000157200000 1.955377300000 -0.631545200000; O 0.000411800000 3.068043100000 -0.986288700000; C 0.000004600000 0.271128000000 1.825131000000; O 0.000003100000 0.436870000000 2.983755900000; C 0.000079000000 -2.055167300000 -0.056719200000; O 0.000369700000 -3.220382300000 -0.103637600000; H 0.422788400000 -0.287137400000 -1.984721800000; H -0.422970800000 -0.287404200000 -1.985319300000; P -2.498968200000 0.054091800000 -0.052469100000; C -3.398360300000 -0.535031900000 -1.584174",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1338
https://github.com/psi4/psi4/issues/1338:5238,Energy Efficiency,energy,energy,5238," H 3.564969200000 -2.328960800000 -2.789307000000; H 3.137352200000 -2.657957400000 -1.099490900000; C 3.398322700000 -0.532419600000 -1.585326900000; H 3.622375400000 -0.006874700000 -3.674767900000; H 3.573575400000 1.403617700000 -2.603965500000; H 2.084603000000 0.521976000000 -2.972940400000; C 4.806061200000 -1.299837300000 1.069941600000; H 5.255832800000 -1.677434300000 1.995985100000; H 5.435230800000 -0.488422700000 0.699837500000; H 4.834740800000 -2.114113900000 0.338643400000; C 2.561315100000 -2.067960800000 1.878190500000; H 2.501285900000 -2.864212200000 1.130337600000; H 1.543963400000 -1.790105100000 2.156196500000; H 3.062895500000 -2.476510500000 2.763911500000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-PR07-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-PR07-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()). # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-H2-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; H 0.798743700000 0.046507300000 0.075739400000; H 1.071087200000 0.408924800000 0.665066700000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-H2-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1338
https://github.com/psi4/psi4/issues/1338:5400,Energy Efficiency,energy,energy,5400,".398322700000 -0.532419600000 -1.585326900000; H 3.622375400000 -0.006874700000 -3.674767900000; H 3.573575400000 1.403617700000 -2.603965500000; H 2.084603000000 0.521976000000 -2.972940400000; C 4.806061200000 -1.299837300000 1.069941600000; H 5.255832800000 -1.677434300000 1.995985100000; H 5.435230800000 -0.488422700000 0.699837500000; H 4.834740800000 -2.114113900000 0.338643400000; C 2.561315100000 -2.067960800000 1.878190500000; H 2.501285900000 -2.864212200000 1.130337600000; H 1.543963400000 -1.790105100000 2.156196500000; H 3.062895500000 -2.476510500000 2.763911500000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-PR07-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-PR07-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()). # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-H2-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; H 0.798743700000 0.046507300000 0.075739400000; H 1.071087200000 0.408924800000 0.665066700000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-H2-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1338
https://github.com/psi4/psi4/issues/1338:5544,Energy Efficiency,energy,energy,5544,"0 1.403617700000 -2.603965500000; H 2.084603000000 0.521976000000 -2.972940400000; C 4.806061200000 -1.299837300000 1.069941600000; H 5.255832800000 -1.677434300000 1.995985100000; H 5.435230800000 -0.488422700000 0.699837500000; H 4.834740800000 -2.114113900000 0.338643400000; C 2.561315100000 -2.067960800000 1.878190500000; H 2.501285900000 -2.864212200000 1.130337600000; H 1.543963400000 -1.790105100000 2.156196500000; H 3.062895500000 -2.476510500000 2.763911500000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-PR07-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-PR07-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()). # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-H2-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; H 0.798743700000 0.046507300000 0.075739400000; H 1.071087200000 0.408924800000 0.665066700000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-H2-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for rea",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1338
https://github.com/psi4/psi4/issues/1338:6237,Energy Efficiency,energy,energy,6237,"00; H 5.255832800000 -1.677434300000 1.995985100000; H 5.435230800000 -0.488422700000 0.699837500000; H 4.834740800000 -2.114113900000 0.338643400000; C 2.561315100000 -2.067960800000 1.878190500000; H 2.501285900000 -2.864212200000 1.130337600000; H 1.543963400000 -1.790105100000 2.156196500000; H 3.062895500000 -2.476510500000 2.763911500000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-PR07-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-PR07-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()). # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-H2-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; H 0.798743700000 0.046507300000 0.075739400000; H 1.071087200000 0.408924800000 0.665066700000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-H2-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-H2-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1338
https://github.com/psi4/psi4/issues/1338:6399,Energy Efficiency,energy,energy,6399,"00; H 5.255832800000 -1.677434300000 1.995985100000; H 5.435230800000 -0.488422700000 0.699837500000; H 4.834740800000 -2.114113900000 0.338643400000; C 2.561315100000 -2.067960800000 1.878190500000; H 2.501285900000 -2.864212200000 1.130337600000; H 1.543963400000 -1.790105100000 2.156196500000; H 3.062895500000 -2.476510500000 2.763911500000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-PR07-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-PR07-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()). # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-H2-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; H 0.798743700000 0.046507300000 0.075739400000; H 1.071087200000 0.408924800000 0.665066700000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-H2-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-H2-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1338
https://github.com/psi4/psi4/issues/1338:6541,Energy Efficiency,energy,energy,6541,"00; H 5.255832800000 -1.677434300000 1.995985100000; H 5.435230800000 -0.488422700000 0.699837500000; H 4.834740800000 -2.114113900000 0.338643400000; C 2.561315100000 -2.067960800000 1.878190500000; H 2.501285900000 -2.864212200000 1.130337600000; H 1.543963400000 -1.790105100000 2.156196500000; H 3.062895500000 -2.476510500000 2.763911500000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-PR07-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-PR07-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()). # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-H2-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; H 0.798743700000 0.046507300000 0.075739400000; H 1.071087200000 0.408924800000 0.665066700000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-H2-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-H2-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1338
https://github.com/psi4/psi4/issues/1338:308,Integrability,depend,depending,308,"Yet another issue [rescued from the the forums](http://forum.psicode.org/t/problem-with-tungsten-dft-and-hf-scf-unreasonable-energies/1129/2). The user reports using conda's 1.2.1 to attempt to converge a molecule with ECPs and observes a spread in deltaE between reactant and product of over 1000 kcal/mol, depending on basis set. Suspecting some catastrophic case of landing on an excited state, I ran a modified version of the input file on the cluster, using 1.3a2.dev122. I doubled the memory allocation and replaced the attempt to unpickle with simply calling the energy with `'b3lyp'` directly. While I was able to reproduce his small-basis energy, the large-basis energy never even began. Psi segfaulted after `Total Energy Delta E RMS |[F,P]|`, and `std::cout` got hit with over 500 counts of `Failed to converge:`, which can only happen due to [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/ecpint.cc#L492). So the ECP integrals won't even converge for me, and the SCF converges to garbage for our user. Because this is a transition metal, we can't immediately rule out excited state problems, but `Failed to converge:` points to ECP problems. User's Input File:; ```; # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-PR07-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; W -0.000070400000 -0.017989600000 -0.146457100000; C 0.000157200000 1.955377300000 -0.631545200000; O 0.000411800000 3.068043100000 -0.986288700000; C 0.000004600000 0.271128000000 1.825131000000; O 0.000003100000 0.436870000000 2.983755900000; C 0.000079000000 -2.055167300000 -0.056719200000; O 0.000369700000 -3.220382300000 -0.103637600000; H 0.422788400000 -0.287137400000 -1.984721800000; H -0.422970800000 -0.287404200000 -1.985319300000; P -2.498968200000 0.054091800000 -0.052469100000; C -3.398360300000 -0.535031900000 -1.584174",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1338
https://github.com/psi4/psi4/issues/1338:1271,Integrability,wrap,wrapper,1271,"serves a spread in deltaE between reactant and product of over 1000 kcal/mol, depending on basis set. Suspecting some catastrophic case of landing on an excited state, I ran a modified version of the input file on the cluster, using 1.3a2.dev122. I doubled the memory allocation and replaced the attempt to unpickle with simply calling the energy with `'b3lyp'` directly. While I was able to reproduce his small-basis energy, the large-basis energy never even began. Psi segfaulted after `Total Energy Delta E RMS |[F,P]|`, and `std::cout` got hit with over 500 counts of `Failed to converge:`, which can only happen due to [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/ecpint.cc#L492). So the ECP integrals won't even converge for me, and the SCF converges to garbage for our user. Because this is a transition metal, we can't immediately rule out excited state problems, but `Failed to converge:` points to ECP problems. User's Input File:; ```; # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-PR07-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; W -0.000070400000 -0.017989600000 -0.146457100000; C 0.000157200000 1.955377300000 -0.631545200000; O 0.000411800000 3.068043100000 -0.986288700000; C 0.000004600000 0.271128000000 1.825131000000; O 0.000003100000 0.436870000000 2.983755900000; C 0.000079000000 -2.055167300000 -0.056719200000; O 0.000369700000 -3.220382300000 -0.103637600000; H 0.422788400000 -0.287137400000 -1.984721800000; H -0.422970800000 -0.287404200000 -1.985319300000; P -2.498968200000 0.054091800000 -0.052469100000; C -3.398360300000 -0.535031900000 -1.584174500000; H -4.468441100000 -0.526892600000 -1.348265500000; C -3.356878400000 -0.865573300000 1.355714100000; H -3.371868200000 -0.108729700000 2.151443200000; C -3.157712400000 1.802287600000 0.144667000000; H -2.704252500000 2.31",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1338
https://github.com/psi4/psi4/issues/1338:5692,Integrability,wrap,wrapper,5692,"00; H 5.255832800000 -1.677434300000 1.995985100000; H 5.435230800000 -0.488422700000 0.699837500000; H 4.834740800000 -2.114113900000 0.338643400000; C 2.561315100000 -2.067960800000 1.878190500000; H 2.501285900000 -2.864212200000 1.130337600000; H 1.543963400000 -1.790105100000 2.156196500000; H 3.062895500000 -2.476510500000 2.763911500000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-PR07-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-PR07-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()). # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-H2-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; H 0.798743700000 0.046507300000 0.075739400000; H 1.071087200000 0.408924800000 0.665066700000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-H2-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-H2-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1338
https://github.com/psi4/psi4/issues/1338:5362,Performance,load,loads,5362,".398322700000 -0.532419600000 -1.585326900000; H 3.622375400000 -0.006874700000 -3.674767900000; H 3.573575400000 1.403617700000 -2.603965500000; H 2.084603000000 0.521976000000 -2.972940400000; C 4.806061200000 -1.299837300000 1.069941600000; H 5.255832800000 -1.677434300000 1.995985100000; H 5.435230800000 -0.488422700000 0.699837500000; H 4.834740800000 -2.114113900000 0.338643400000; C 2.561315100000 -2.067960800000 1.878190500000; H 2.501285900000 -2.864212200000 1.130337600000; H 1.543963400000 -1.790105100000 2.156196500000; H 3.062895500000 -2.476510500000 2.763911500000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-PR07-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-PR07-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()). # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-H2-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; H 0.798743700000 0.046507300000 0.075739400000; H 1.071087200000 0.408924800000 0.665066700000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-H2-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1338
https://github.com/psi4/psi4/issues/1338:6361,Performance,load,loads,6361,"00; H 5.255832800000 -1.677434300000 1.995985100000; H 5.435230800000 -0.488422700000 0.699837500000; H 4.834740800000 -2.114113900000 0.338643400000; C 2.561315100000 -2.067960800000 1.878190500000; H 2.501285900000 -2.864212200000 1.130337600000; H 1.543963400000 -1.790105100000 2.156196500000; H 3.062895500000 -2.476510500000 2.763911500000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-PR07-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-PR07-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()). # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-H2-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; H 0.798743700000 0.046507300000 0.075739400000; H 1.071087200000 0.408924800000 0.665066700000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-H2-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-H2-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1338
https://github.com/psi4/psi4/issues/1338:551,Usability,simpl,simply,551,"Yet another issue [rescued from the the forums](http://forum.psicode.org/t/problem-with-tungsten-dft-and-hf-scf-unreasonable-energies/1129/2). The user reports using conda's 1.2.1 to attempt to converge a molecule with ECPs and observes a spread in deltaE between reactant and product of over 1000 kcal/mol, depending on basis set. Suspecting some catastrophic case of landing on an excited state, I ran a modified version of the input file on the cluster, using 1.3a2.dev122. I doubled the memory allocation and replaced the attempt to unpickle with simply calling the energy with `'b3lyp'` directly. While I was able to reproduce his small-basis energy, the large-basis energy never even began. Psi segfaulted after `Total Energy Delta E RMS |[F,P]|`, and `std::cout` got hit with over 500 counts of `Failed to converge:`, which can only happen due to [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/ecpint.cc#L492). So the ECP integrals won't even converge for me, and the SCF converges to garbage for our user. Because this is a transition metal, we can't immediately rule out excited state problems, but `Failed to converge:` points to ECP problems. User's Input File:; ```; # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-PR07-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; W -0.000070400000 -0.017989600000 -0.146457100000; C 0.000157200000 1.955377300000 -0.631545200000; O 0.000411800000 3.068043100000 -0.986288700000; C 0.000004600000 0.271128000000 1.825131000000; O 0.000003100000 0.436870000000 2.983755900000; C 0.000079000000 -2.055167300000 -0.056719200000; O 0.000369700000 -3.220382300000 -0.103637600000; H 0.422788400000 -0.287137400000 -1.984721800000; H -0.422970800000 -0.287404200000 -1.985319300000; P -2.498968200000 0.054091800000 -0.052469100000; C -3.398360300000 -0.535031900000 -1.584174",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1338
https://github.com/psi4/psi4/pull/1340:548,Integrability,wrap,wrappers,548,"## Description; This PR builds on the start that @PeterKraus made to get the libecpint library from @robashaw up and running as Psi4's ECP engine. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - Improve the speed and stability of the ECP integrals. ## Questions; - [ ] @robashaw are the derivative integrals ready to go in Libecpint yet? If not, do you have any idea how much work it will be to implement them?. ## Checklist; - [x] Make libecpint play nicely with our CMake infrastructure; - [ ] Write wrappers for ECP integral code, making the new code path optional for now; - [ ] Tests added for any new features. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1340
https://github.com/psi4/psi4/pull/1340:629,Testability,Test,Tests,629,"## Description; This PR builds on the start that @PeterKraus made to get the libecpint library from @robashaw up and running as Psi4's ECP engine. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - Improve the speed and stability of the ECP integrals. ## Questions; - [ ] @robashaw are the derivative integrals ready to go in Libecpint yet? If not, do you have any idea how much work it will be to implement them?. ## Checklist; - [x] Make libecpint play nicely with our CMake infrastructure; - [ ] Write wrappers for ECP integral code, making the new code path optional for now; - [ ] Tests added for any new features. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1340
https://github.com/psi4/psi4/issues/1341:1212,Availability,error,error,1212," the documentation and on forum threads, but these are too confusing and not working. This is my failed attempt (borrowed from http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2rc2.html and http://forum.psicode.org/t/building-with-high-am/936/20):. ```; wget 'https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh'; chmod +x Miniconda3-latest-Linux-x86_64.sh; ./Miniconda3-latest-Linux-x86_64.sh -b; conda create -n p4dev psi4-dev python=3.6 -c psi4/label/dev; conda activate p4dev; conda install libint am8 -c psi4/label/dev; git clone https://github.com/psi4/psi4.git && cd psi4; `psi4-path-advisor --gcc` -DMAX_AM_ERI=8; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; ```. (The info on the forum is also confusing and due to formatting issues, some essential quotes are missing.). From the output of the penultimate line, it seems that the right AM options is picked up:. ```; ...; -- Setting option MAX_AM_ERI: 8; ...; ```. Alas, this does not work. The error I get from the last command is:. ```; -- Maximum AM: 8; -- Maximum Derivative: 0; -- CMAKE_C_FLAGS: -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- CMAKE_CXX_FLAGS: -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- SIMINT_C_INCLUDES: /home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external;/home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build/stage; -- SIMINT_C_FLAGS: -std=c99;-Wall;-Wextra;-pedantic;-Wno-unused-parameter;-Wno-unused-variable;-fopenmp;-mavx; -- SIMINT_LINK_FLAGS: -fopenmp; CMake Error at simint/CMakeLists.txt:7 (message):; Maximum angular momentum set is greater than I have available (7); ```. I've checked manually that my libint supports the right angular momenta:. ```; grep MAX ~/miniconda3/envs/p4dev/include/libint/*",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1341
https://github.com/psi4/psi4/issues/1341:1984,Availability,Error,Error,1984,"nda3-latest-Linux-x86_64.sh; ./Miniconda3-latest-Linux-x86_64.sh -b; conda create -n p4dev psi4-dev python=3.6 -c psi4/label/dev; conda activate p4dev; conda install libint am8 -c psi4/label/dev; git clone https://github.com/psi4/psi4.git && cd psi4; `psi4-path-advisor --gcc` -DMAX_AM_ERI=8; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; ```. (The info on the forum is also confusing and due to formatting issues, some essential quotes are missing.). From the output of the penultimate line, it seems that the right AM options is picked up:. ```; ...; -- Setting option MAX_AM_ERI: 8; ...; ```. Alas, this does not work. The error I get from the last command is:. ```; -- Maximum AM: 8; -- Maximum Derivative: 0; -- CMAKE_C_FLAGS: -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- CMAKE_CXX_FLAGS: -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- SIMINT_C_INCLUDES: /home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external;/home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build/stage; -- SIMINT_C_FLAGS: -std=c99;-Wall;-Wextra;-pedantic;-Wno-unused-parameter;-Wno-unused-variable;-fopenmp;-mavx; -- SIMINT_LINK_FLAGS: -fopenmp; CMake Error at simint/CMakeLists.txt:7 (message):; Maximum angular momentum set is greater than I have available (7); ```. I've checked manually that my libint supports the right angular momenta:. ```; grep MAX ~/miniconda3/envs/p4dev/include/libint/*.h ; /home/toon/miniconda3/envs/p4dev/include/libint/libderiv.h:#define LIBDERIV_MAX_AM1 8; /home/toon/miniconda3/envs/p4dev/include/libint/libderiv.h:#define LIBDERIV_MAX_AM12 7; /home/toon/miniconda3/envs/p4dev/include/libint/libint.h:#define LIBINT_MAX_AM 9; ```. I have no other version of libint installed on my test system. Any suggestions? Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1341
https://github.com/psi4/psi4/issues/1341:2081,Availability,avail,available,2081,"nda3-latest-Linux-x86_64.sh; ./Miniconda3-latest-Linux-x86_64.sh -b; conda create -n p4dev psi4-dev python=3.6 -c psi4/label/dev; conda activate p4dev; conda install libint am8 -c psi4/label/dev; git clone https://github.com/psi4/psi4.git && cd psi4; `psi4-path-advisor --gcc` -DMAX_AM_ERI=8; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; ```. (The info on the forum is also confusing and due to formatting issues, some essential quotes are missing.). From the output of the penultimate line, it seems that the right AM options is picked up:. ```; ...; -- Setting option MAX_AM_ERI: 8; ...; ```. Alas, this does not work. The error I get from the last command is:. ```; -- Maximum AM: 8; -- Maximum Derivative: 0; -- CMAKE_C_FLAGS: -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- CMAKE_CXX_FLAGS: -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- SIMINT_C_INCLUDES: /home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external;/home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build/stage; -- SIMINT_C_FLAGS: -std=c99;-Wall;-Wextra;-pedantic;-Wno-unused-parameter;-Wno-unused-variable;-fopenmp;-mavx; -- SIMINT_LINK_FLAGS: -fopenmp; CMake Error at simint/CMakeLists.txt:7 (message):; Maximum angular momentum set is greater than I have available (7); ```. I've checked manually that my libint supports the right angular momenta:. ```; grep MAX ~/miniconda3/envs/p4dev/include/libint/*.h ; /home/toon/miniconda3/envs/p4dev/include/libint/libderiv.h:#define LIBDERIV_MAX_AM1 8; /home/toon/miniconda3/envs/p4dev/include/libint/libderiv.h:#define LIBDERIV_MAX_AM12 7; /home/toon/miniconda3/envs/p4dev/include/libint/libint.h:#define LIBINT_MAX_AM 9; ```. I have no other version of libint installed on my test system. Any suggestions? Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1341
https://github.com/psi4/psi4/issues/1341:401,Deployability,install,install-,401,"It would be nice to just have a mindless list of commands to arrive at a PSI4 version with `MAX_AM_ERI=8`, starting from a clean conda environment, with minimal amount of recompilation. There are scattered bits of information in the documentation and on forum threads, but these are too confusing and not working. This is my failed attempt (borrowed from http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2rc2.html and http://forum.psicode.org/t/building-with-high-am/936/20):. ```; wget 'https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh'; chmod +x Miniconda3-latest-Linux-x86_64.sh; ./Miniconda3-latest-Linux-x86_64.sh -b; conda create -n p4dev psi4-dev python=3.6 -c psi4/label/dev; conda activate p4dev; conda install libint am8 -c psi4/label/dev; git clone https://github.com/psi4/psi4.git && cd psi4; `psi4-path-advisor --gcc` -DMAX_AM_ERI=8; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; ```. (The info on the forum is also confusing and due to formatting issues, some essential quotes are missing.). From the output of the penultimate line, it seems that the right AM options is picked up:. ```; ...; -- Setting option MAX_AM_ERI: 8; ...; ```. Alas, this does not work. The error I get from the last command is:. ```; -- Maximum AM: 8; -- Maximum Derivative: 0; -- CMAKE_C_FLAGS: -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- CMAKE_CXX_FLAGS: -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- SIMINT_C_INCLUDES: /home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external;/home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build/stage; -- SIMINT_C_FLAGS: -std=c99;-Wall;-Wextra;-pedantic;-Wno-unused-parameter;-Wno-unused-variable;-fopenmp;-mavx; -- SIMINT_LINK_FLAGS: -fopenmp; CMake Error at simint/C",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1341
https://github.com/psi4/psi4/issues/1341:741,Deployability,install,install,741,"It would be nice to just have a mindless list of commands to arrive at a PSI4 version with `MAX_AM_ERI=8`, starting from a clean conda environment, with minimal amount of recompilation. There are scattered bits of information in the documentation and on forum threads, but these are too confusing and not working. This is my failed attempt (borrowed from http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2rc2.html and http://forum.psicode.org/t/building-with-high-am/936/20):. ```; wget 'https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh'; chmod +x Miniconda3-latest-Linux-x86_64.sh; ./Miniconda3-latest-Linux-x86_64.sh -b; conda create -n p4dev psi4-dev python=3.6 -c psi4/label/dev; conda activate p4dev; conda install libint am8 -c psi4/label/dev; git clone https://github.com/psi4/psi4.git && cd psi4; `psi4-path-advisor --gcc` -DMAX_AM_ERI=8; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; ```. (The info on the forum is also confusing and due to formatting issues, some essential quotes are missing.). From the output of the penultimate line, it seems that the right AM options is picked up:. ```; ...; -- Setting option MAX_AM_ERI: 8; ...; ```. Alas, this does not work. The error I get from the last command is:. ```; -- Maximum AM: 8; -- Maximum Derivative: 0; -- CMAKE_C_FLAGS: -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- CMAKE_CXX_FLAGS: -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- SIMINT_C_INCLUDES: /home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external;/home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build/stage; -- SIMINT_C_FLAGS: -std=c99;-Wall;-Wextra;-pedantic;-Wno-unused-parameter;-Wno-unused-variable;-fopenmp;-mavx; -- SIMINT_LINK_FLAGS: -fopenmp; CMake Error at simint/C",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1341
https://github.com/psi4/psi4/issues/1341:2530,Deployability,install,installed,2530,"nda3-latest-Linux-x86_64.sh; ./Miniconda3-latest-Linux-x86_64.sh -b; conda create -n p4dev psi4-dev python=3.6 -c psi4/label/dev; conda activate p4dev; conda install libint am8 -c psi4/label/dev; git clone https://github.com/psi4/psi4.git && cd psi4; `psi4-path-advisor --gcc` -DMAX_AM_ERI=8; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; ```. (The info on the forum is also confusing and due to formatting issues, some essential quotes are missing.). From the output of the penultimate line, it seems that the right AM options is picked up:. ```; ...; -- Setting option MAX_AM_ERI: 8; ...; ```. Alas, this does not work. The error I get from the last command is:. ```; -- Maximum AM: 8; -- Maximum Derivative: 0; -- CMAKE_C_FLAGS: -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- CMAKE_CXX_FLAGS: -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- SIMINT_C_INCLUDES: /home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external;/home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build/stage; -- SIMINT_C_FLAGS: -std=c99;-Wall;-Wextra;-pedantic;-Wno-unused-parameter;-Wno-unused-variable;-fopenmp;-mavx; -- SIMINT_LINK_FLAGS: -fopenmp; CMake Error at simint/CMakeLists.txt:7 (message):; Maximum angular momentum set is greater than I have available (7); ```. I've checked manually that my libint supports the right angular momenta:. ```; grep MAX ~/miniconda3/envs/p4dev/include/libint/*.h ; /home/toon/miniconda3/envs/p4dev/include/libint/libderiv.h:#define LIBDERIV_MAX_AM1 8; /home/toon/miniconda3/envs/p4dev/include/libint/libderiv.h:#define LIBDERIV_MAX_AM12 7; /home/toon/miniconda3/envs/p4dev/include/libint/libint.h:#define LIBINT_MAX_AM 9; ```. I have no other version of libint installed on my test system. Any suggestions? Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1341
https://github.com/psi4/psi4/issues/1341:2018,Integrability,message,message,2018,"nda3-latest-Linux-x86_64.sh; ./Miniconda3-latest-Linux-x86_64.sh -b; conda create -n p4dev psi4-dev python=3.6 -c psi4/label/dev; conda activate p4dev; conda install libint am8 -c psi4/label/dev; git clone https://github.com/psi4/psi4.git && cd psi4; `psi4-path-advisor --gcc` -DMAX_AM_ERI=8; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; ```. (The info on the forum is also confusing and due to formatting issues, some essential quotes are missing.). From the output of the penultimate line, it seems that the right AM options is picked up:. ```; ...; -- Setting option MAX_AM_ERI: 8; ...; ```. Alas, this does not work. The error I get from the last command is:. ```; -- Maximum AM: 8; -- Maximum Derivative: 0; -- CMAKE_C_FLAGS: -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- CMAKE_CXX_FLAGS: -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- SIMINT_C_INCLUDES: /home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external;/home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build/stage; -- SIMINT_C_FLAGS: -std=c99;-Wall;-Wextra;-pedantic;-Wno-unused-parameter;-Wno-unused-variable;-fopenmp;-mavx; -- SIMINT_LINK_FLAGS: -fopenmp; CMake Error at simint/CMakeLists.txt:7 (message):; Maximum angular momentum set is greater than I have available (7); ```. I've checked manually that my libint supports the right angular momenta:. ```; grep MAX ~/miniconda3/envs/p4dev/include/libint/*.h ; /home/toon/miniconda3/envs/p4dev/include/libint/libderiv.h:#define LIBDERIV_MAX_AM1 8; /home/toon/miniconda3/envs/p4dev/include/libint/libderiv.h:#define LIBDERIV_MAX_AM12 7; /home/toon/miniconda3/envs/p4dev/include/libint/libint.h:#define LIBINT_MAX_AM 9; ```. I have no other version of libint installed on my test system. Any suggestions? Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1341
https://github.com/psi4/psi4/issues/1341:1921,Modifiability,variab,variable,1921,"nda3-latest-Linux-x86_64.sh; ./Miniconda3-latest-Linux-x86_64.sh -b; conda create -n p4dev psi4-dev python=3.6 -c psi4/label/dev; conda activate p4dev; conda install libint am8 -c psi4/label/dev; git clone https://github.com/psi4/psi4.git && cd psi4; `psi4-path-advisor --gcc` -DMAX_AM_ERI=8; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; ```. (The info on the forum is also confusing and due to formatting issues, some essential quotes are missing.). From the output of the penultimate line, it seems that the right AM options is picked up:. ```; ...; -- Setting option MAX_AM_ERI: 8; ...; ```. Alas, this does not work. The error I get from the last command is:. ```; -- Maximum AM: 8; -- Maximum Derivative: 0; -- CMAKE_C_FLAGS: -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- CMAKE_CXX_FLAGS: -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- SIMINT_C_INCLUDES: /home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external;/home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build/stage; -- SIMINT_C_FLAGS: -std=c99;-Wall;-Wextra;-pedantic;-Wno-unused-parameter;-Wno-unused-variable;-fopenmp;-mavx; -- SIMINT_LINK_FLAGS: -fopenmp; CMake Error at simint/CMakeLists.txt:7 (message):; Maximum angular momentum set is greater than I have available (7); ```. I've checked manually that my libint supports the right angular momenta:. ```; grep MAX ~/miniconda3/envs/p4dev/include/libint/*.h ; /home/toon/miniconda3/envs/p4dev/include/libint/libderiv.h:#define LIBDERIV_MAX_AM1 8; /home/toon/miniconda3/envs/p4dev/include/libint/libderiv.h:#define LIBDERIV_MAX_AM12 7; /home/toon/miniconda3/envs/p4dev/include/libint/libint.h:#define LIBINT_MAX_AM 9; ```. I have no other version of libint installed on my test system. Any suggestions? Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1341
https://github.com/psi4/psi4/issues/1341:2546,Testability,test,test,2546,"nda3-latest-Linux-x86_64.sh; ./Miniconda3-latest-Linux-x86_64.sh -b; conda create -n p4dev psi4-dev python=3.6 -c psi4/label/dev; conda activate p4dev; conda install libint am8 -c psi4/label/dev; git clone https://github.com/psi4/psi4.git && cd psi4; `psi4-path-advisor --gcc` -DMAX_AM_ERI=8; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; ```. (The info on the forum is also confusing and due to formatting issues, some essential quotes are missing.). From the output of the penultimate line, it seems that the right AM options is picked up:. ```; ...; -- Setting option MAX_AM_ERI: 8; ...; ```. Alas, this does not work. The error I get from the last command is:. ```; -- Maximum AM: 8; -- Maximum Derivative: 0; -- CMAKE_C_FLAGS: -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- CMAKE_CXX_FLAGS: -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -march=native; -- SIMINT_C_INCLUDES: /home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external;/home/toon/psi4/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build/stage; -- SIMINT_C_FLAGS: -std=c99;-Wall;-Wextra;-pedantic;-Wno-unused-parameter;-Wno-unused-variable;-fopenmp;-mavx; -- SIMINT_LINK_FLAGS: -fopenmp; CMake Error at simint/CMakeLists.txt:7 (message):; Maximum angular momentum set is greater than I have available (7); ```. I've checked manually that my libint supports the right angular momenta:. ```; grep MAX ~/miniconda3/envs/p4dev/include/libint/*.h ; /home/toon/miniconda3/envs/p4dev/include/libint/libderiv.h:#define LIBDERIV_MAX_AM1 8; /home/toon/miniconda3/envs/p4dev/include/libint/libderiv.h:#define LIBDERIV_MAX_AM12 7; /home/toon/miniconda3/envs/p4dev/include/libint/libint.h:#define LIBINT_MAX_AM 9; ```. I have no other version of libint installed on my test system. Any suggestions? Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1341
https://github.com/psi4/psi4/pull/1342:0,Integrability,Wrap,Wraps,0,"Wraps new lapack function tests in a Fortran_ENABLED block; and resolves OpenMP linking issues. Ultimately, we'd want to change the detection from a Fortran function to a C function. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1342
https://github.com/psi4/psi4/pull/1342:132,Safety,detect,detection,132,"Wraps new lapack function tests in a Fortran_ENABLED block; and resolves OpenMP linking issues. Ultimately, we'd want to change the detection from a Fortran function to a C function. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1342
https://github.com/psi4/psi4/pull/1342:26,Testability,test,tests,26,"Wraps new lapack function tests in a Fortran_ENABLED block; and resolves OpenMP linking issues. Ultimately, we'd want to change the detection from a Fortran function to a C function. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1342
https://github.com/psi4/psi4/pull/1342:203,Testability,Test,Tests,203,"Wraps new lapack function tests in a Fortran_ENABLED block; and resolves OpenMP linking issues. Ultimately, we'd want to change the detection from a Fortran function to a C function. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1342
https://github.com/psi4/psi4/pull/1342:277,Testability,test,tests,277,"Wraps new lapack function tests in a Fortran_ENABLED block; and resolves OpenMP linking issues. Ultimately, we'd want to change the detection from a Fortran function to a C function. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1342
https://github.com/psi4/psi4/pull/1342:368,Testability,test,tests,368,"Wraps new lapack function tests in a Fortran_ENABLED block; and resolves OpenMP linking issues. Ultimately, we'd want to change the detection from a Fortran function to a C function. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1342
https://github.com/psi4/psi4/pull/1344:124,Availability,avail,available,124,"## Description; This PR provides access to T1/T2 python side for other packages using psi4 as a library. Amplitudes will be available for symmetry C1 calculations only as the numpy shape on the T2 matrices can't be set correctly (This is similar to how mintshelper does not provide bindings for SO basis ERIs). All spin combinations of T1/T2 wil be loaded into memory, so you do not want to use this method when there is not enough memory to hold these quantities in core. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] UHF ; - [x] RHF; - [x] ROHF; - [x] Check that nirrep > 1 will raise meaningful errors. ## Checklist; - [x] UHF Test; - [x] RHF Test; - [x] ROHF Test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1344
https://github.com/psi4/psi4/pull/1344:650,Availability,error,errors,650,"## Description; This PR provides access to T1/T2 python side for other packages using psi4 as a library. Amplitudes will be available for symmetry C1 calculations only as the numpy shape on the T2 matrices can't be set correctly (This is similar to how mintshelper does not provide bindings for SO basis ERIs). All spin combinations of T1/T2 wil be loaded into memory, so you do not want to use this method when there is not enough memory to hold these quantities in core. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] UHF ; - [x] RHF; - [x] ROHF; - [x] Check that nirrep > 1 will raise meaningful errors. ## Checklist; - [x] UHF Test; - [x] RHF Test; - [x] ROHF Test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1344
https://github.com/psi4/psi4/pull/1344:349,Performance,load,loaded,349,"## Description; This PR provides access to T1/T2 python side for other packages using psi4 as a library. Amplitudes will be available for symmetry C1 calculations only as the numpy shape on the T2 matrices can't be set correctly (This is similar to how mintshelper does not provide bindings for SO basis ERIs). All spin combinations of T1/T2 wil be loaded into memory, so you do not want to use this method when there is not enough memory to hold these quantities in core. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] UHF ; - [x] RHF; - [x] ROHF; - [x] Check that nirrep > 1 will raise meaningful errors. ## Checklist; - [x] UHF Test; - [x] RHF Test; - [x] ROHF Test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1344
https://github.com/psi4/psi4/pull/1344:33,Security,access,access,33,"## Description; This PR provides access to T1/T2 python side for other packages using psi4 as a library. Amplitudes will be available for symmetry C1 calculations only as the numpy shape on the T2 matrices can't be set correctly (This is similar to how mintshelper does not provide bindings for SO basis ERIs). All spin combinations of T1/T2 wil be loaded into memory, so you do not want to use this method when there is not enough memory to hold these quantities in core. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] UHF ; - [x] RHF; - [x] ROHF; - [x] Check that nirrep > 1 will raise meaningful errors. ## Checklist; - [x] UHF Test; - [x] RHF Test; - [x] ROHF Test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1344
https://github.com/psi4/psi4/pull/1344:682,Testability,Test,Test,682,"## Description; This PR provides access to T1/T2 python side for other packages using psi4 as a library. Amplitudes will be available for symmetry C1 calculations only as the numpy shape on the T2 matrices can't be set correctly (This is similar to how mintshelper does not provide bindings for SO basis ERIs). All spin combinations of T1/T2 wil be loaded into memory, so you do not want to use this method when there is not enough memory to hold these quantities in core. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] UHF ; - [x] RHF; - [x] ROHF; - [x] Check that nirrep > 1 will raise meaningful errors. ## Checklist; - [x] UHF Test; - [x] RHF Test; - [x] ROHF Test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1344
https://github.com/psi4/psi4/pull/1344:698,Testability,Test,Test,698,"## Description; This PR provides access to T1/T2 python side for other packages using psi4 as a library. Amplitudes will be available for symmetry C1 calculations only as the numpy shape on the T2 matrices can't be set correctly (This is similar to how mintshelper does not provide bindings for SO basis ERIs). All spin combinations of T1/T2 wil be loaded into memory, so you do not want to use this method when there is not enough memory to hold these quantities in core. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] UHF ; - [x] RHF; - [x] ROHF; - [x] Check that nirrep > 1 will raise meaningful errors. ## Checklist; - [x] UHF Test; - [x] RHF Test; - [x] ROHF Test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1344
https://github.com/psi4/psi4/pull/1344:715,Testability,Test,Test,715,"## Description; This PR provides access to T1/T2 python side for other packages using psi4 as a library. Amplitudes will be available for symmetry C1 calculations only as the numpy shape on the T2 matrices can't be set correctly (This is similar to how mintshelper does not provide bindings for SO basis ERIs). All spin combinations of T1/T2 wil be loaded into memory, so you do not want to use this method when there is not enough memory to hold these quantities in core. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] UHF ; - [x] RHF; - [x] ROHF; - [x] Check that nirrep > 1 will raise meaningful errors. ## Checklist; - [x] UHF Test; - [x] RHF Test; - [x] ROHF Test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1344
https://github.com/psi4/psi4/pull/1345:234,Testability,test,tests,234,## Description; Allow psi4 to be compiled with C++17. Default compilation still uses C++11. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Ready for C++17. ## Checklist; - [x] All cc tests run. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1345
https://github.com/psi4/psi4/pull/1346:337,Safety,detect,detection,337,"## Description; Adds the nZaPa basis sets that converge faster for SCF and correlation energies than many others. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] nZaPa-NR basis sets for n=2,3,4,5,6,7; - [x] RI and JKFIT definitions for nZaPa and cc-pVnZ-F12; - [x] `[23]ZaPa-NR` bracket detection for CBS. ## Checklist; - [x] Tests added for any new features; - [x] relevant fraction of full tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1346
https://github.com/psi4/psi4/pull/1346:376,Testability,Test,Tests,376,"## Description; Adds the nZaPa basis sets that converge faster for SCF and correlation energies than many others. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] nZaPa-NR basis sets for n=2,3,4,5,6,7; - [x] RI and JKFIT definitions for nZaPa and cc-pVnZ-F12; - [x] `[23]ZaPa-NR` bracket detection for CBS. ## Checklist; - [x] Tests added for any new features; - [x] relevant fraction of full tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1346
https://github.com/psi4/psi4/pull/1346:442,Testability,test,tests,442,"## Description; Adds the nZaPa basis sets that converge faster for SCF and correlation energies than many others. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] nZaPa-NR basis sets for n=2,3,4,5,6,7; - [x] RI and JKFIT definitions for nZaPa and cc-pVnZ-F12; - [x] `[23]ZaPa-NR` bracket detection for CBS. ## Checklist; - [x] Tests added for any new features; - [x] relevant fraction of full tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1346
https://github.com/psi4/psi4/pull/1347:238,Deployability,install,install,238,"## Description; What it says on the tin: use standardized C bindings to BLAS and LAPACK. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] BLAS level 1, 2, and 3 moved to CBLAS; - [x] Conda install `mkl-include` on Travis; - [x] LAPACK moved to LAPACKE; - [x] Remove use of `check_fortran_function_exists` to check for newere LAPACK subroutines; - [x] Remove duplicated name-mangling headers. ## Questions; - Should the bindings be someplace more central, rather than in `libqt`? It could encourage _not rewriting them_ in other modules... ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1347
https://github.com/psi4/psi4/pull/1347:608,Testability,Test,Tests,608,"## Description; What it says on the tin: use standardized C bindings to BLAS and LAPACK. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] BLAS level 1, 2, and 3 moved to CBLAS; - [x] Conda install `mkl-include` on Travis; - [x] LAPACK moved to LAPACKE; - [x] Remove use of `check_fortran_function_exists` to check for newere LAPACK subroutines; - [x] Remove duplicated name-mangling headers. ## Questions; - Should the bindings be someplace more central, rather than in `libqt`? It could encourage _not rewriting them_ in other modules... ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1347
https://github.com/psi4/psi4/pull/1347:682,Testability,test,tests,682,"## Description; What it says on the tin: use standardized C bindings to BLAS and LAPACK. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] BLAS level 1, 2, and 3 moved to CBLAS; - [x] Conda install `mkl-include` on Travis; - [x] LAPACK moved to LAPACKE; - [x] Remove use of `check_fortran_function_exists` to check for newere LAPACK subroutines; - [x] Remove duplicated name-mangling headers. ## Questions; - Should the bindings be someplace more central, rather than in `libqt`? It could encourage _not rewriting them_ in other modules... ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1347
https://github.com/psi4/psi4/pull/1347:773,Testability,test,tests,773,"## Description; What it says on the tin: use standardized C bindings to BLAS and LAPACK. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] BLAS level 1, 2, and 3 moved to CBLAS; - [x] Conda install `mkl-include` on Travis; - [x] LAPACK moved to LAPACKE; - [x] Remove use of `check_fortran_function_exists` to check for newere LAPACK subroutines; - [x] Remove duplicated name-mangling headers. ## Questions; - Should the bindings be someplace more central, rather than in `libqt`? It could encourage _not rewriting them_ in other modules... ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1347
https://github.com/psi4/psi4/pull/1348:118,Modifiability,config,config,118,"## Description; This is part of *Psi4* porting to Windows (#933). *FindOpenMP* doesn't yet support *clang-cl*, so the config has to be done manually. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix OpenMP config for clang-cl on Windonws; - [x] Check if OpenMP config hadn't failed silently. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1348
https://github.com/psi4/psi4/pull/1348:259,Modifiability,config,config,259,"## Description; This is part of *Psi4* porting to Windows (#933). *FindOpenMP* doesn't yet support *clang-cl*, so the config has to be done manually. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix OpenMP config for clang-cl on Windonws; - [x] Check if OpenMP config hadn't failed silently. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1348
https://github.com/psi4/psi4/pull/1348:314,Modifiability,config,config,314,"## Description; This is part of *Psi4* porting to Windows (#933). *FindOpenMP* doesn't yet support *clang-cl*, so the config has to be done manually. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix OpenMP config for clang-cl on Windonws; - [x] Check if OpenMP config hadn't failed silently. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1348
https://github.com/psi4/psi4/pull/1348:365,Testability,Test,Tests,365,"## Description; This is part of *Psi4* porting to Windows (#933). *FindOpenMP* doesn't yet support *clang-cl*, so the config has to be done manually. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix OpenMP config for clang-cl on Windonws; - [x] Check if OpenMP config hadn't failed silently. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1348
https://github.com/psi4/psi4/pull/1348:439,Testability,test,tests,439,"## Description; This is part of *Psi4* porting to Windows (#933). *FindOpenMP* doesn't yet support *clang-cl*, so the config has to be done manually. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix OpenMP config for clang-cl on Windonws; - [x] Check if OpenMP config hadn't failed silently. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1348
https://github.com/psi4/psi4/pull/1348:530,Testability,test,tests,530,"## Description; This is part of *Psi4* porting to Windows (#933). *FindOpenMP* doesn't yet support *clang-cl*, so the config has to be done manually. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix OpenMP config for clang-cl on Windonws; - [x] Check if OpenMP config hadn't failed silently. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1348
https://github.com/psi4/psi4/pull/1349:2419,Availability,failure,failures,2419,"DDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take about 4x as long. I have verified that it works though. ; - I marked the HF tests as quick for CI as they are fast, the DFT tests take a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:1460,Energy Efficiency,adapt,adapted,1460,"the above. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:1761,Energy Efficiency,adapt,adapted,1761,"ge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take abou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:2241,Energy Efficiency,adapt,adapted,2241," engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take about 4x as long. I have verified that it works though. ; - I marked the HF tests as quick for CI as they are fast, the DFT tests take a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:5866,Energy Efficiency,Adapt,Adapted,5866, PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kern,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:5999,Energy Efficiency,Adapt,Adapted,5999,ons.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kern,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:6372,Energy Efficiency,Adapt,Adapted,6372,-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:6507,Energy Efficiency,Adapt,Adapted,6507,est_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:6874,Energy Efficiency,Adapt,Adapted,6874,f[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:7007,Energy Efficiency,Adapt,Adapted,7007,f[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:7377,Energy Efficiency,Adapt,Adapted,7377,f[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:7511,Energy Efficiency,Adapt,Adapted,7511,f[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:1251,Modifiability,config,configured,1251," C1 TDDFT Spectra; - [x] Unrestricted C1 TDDFT Spectra; - ~Restricted C1 Stability Analysis~; - ~Unrestricted C1 Stability Spectra~; - [x] Per-irrep abilities for the above. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:1460,Modifiability,adapt,adapted,1460,"the above. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:1761,Modifiability,adapt,adapted,1761,"ge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take abou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:2241,Modifiability,adapt,adapted,2241," engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take about 4x as long. I have verified that it works though. ; - I marked the HF tests as quick for CI as they are fast, the DFT tests take a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:5866,Modifiability,Adapt,Adapted,5866, PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kern,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:5999,Modifiability,Adapt,Adapted,5999,ons.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kern,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:6372,Modifiability,Adapt,Adapted,6372,-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:6507,Modifiability,Adapt,Adapted,6507,est_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:6874,Modifiability,Adapt,Adapted,6874,f[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:7007,Modifiability,Adapt,Adapted,7007,f[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:7377,Modifiability,Adapt,Adapted,7377,f[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:7511,Modifiability,Adapt,Adapted,7511,f[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:967,Performance,perform,perform,967,"## Description; This is a starting PR for @amjames @robertodr @kcpearce and myself (in addition to anyone else) to hack on for TDDFT functionality in Psi4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Restricuted C1 TDDFT Spectra; - [x] Unrestricted C1 TDDFT Spectra; - ~Restricted C1 Stability Analysis~; - ~Unrestricted C1 Stability Spectra~; - [x] Per-irrep abilities for the above. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kern",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:1265,Performance,perform,perform,1265," C1 TDDFT Spectra; - [x] Unrestricted C1 TDDFT Spectra; - ~Restricted C1 Stability Analysis~; - ~Unrestricted C1 Stability Spectra~; - [x] Per-irrep abilities for the above. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:459,Testability,Test,Tests,459,"## Description; This is a starting PR for @amjames @robertodr @kcpearce and myself (in addition to anyone else) to hack on for TDDFT functionality in Psi4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Restricuted C1 TDDFT Spectra; - [x] Unrestricted C1 TDDFT Spectra; - ~Restricted C1 Stability Analysis~; - ~Unrestricted C1 Stability Spectra~; - [x] Per-irrep abilities for the above. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kern",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:533,Testability,test,tests,533,"## Description; This is a starting PR for @amjames @robertodr @kcpearce and myself (in addition to anyone else) to hack on for TDDFT functionality in Psi4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Restricuted C1 TDDFT Spectra; - [x] Unrestricted C1 TDDFT Spectra; - ~Restricted C1 Stability Analysis~; - ~Unrestricted C1 Stability Spectra~; - [x] Per-irrep abilities for the above. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kern",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:624,Testability,test,tests,624,"## Description; This is a starting PR for @amjames @robertodr @kcpearce and myself (in addition to anyone else) to hack on for TDDFT functionality in Psi4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Restricuted C1 TDDFT Spectra; - [x] Unrestricted C1 TDDFT Spectra; - ~Restricted C1 Stability Analysis~; - ~Unrestricted C1 Stability Spectra~; - [x] Per-irrep abilities for the above. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kern",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:2284,Testability,test,tests,2284,"DDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take about 4x as long. I have verified that it works though. ; - I marked the HF tests as quick for CI as they are fast, the DFT tests take a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:2437,Testability,test,tests,2437,"an tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take about 4x as long. I have verified that it works though. ; - I marked the HF tests as quick for CI as they are fast, the DFT tests take a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdsc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:2672,Testability,test,test,2672,"nctionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take about 4x as long. I have verified that it works though. ; - I marked the HF tests as quick for CI as they are fast, the DFT tests take a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/tes",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:2758,Testability,test,tests,2758,"ions are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take about 4x as long. I have verified that it works though. ; - I marked the HF tests as quick for CI as they are fast, the DFT tests take a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TD",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:2806,Testability,test,tests,2806,"ions are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take about 4x as long. I have verified that it works though. ; - I marked the HF tests as quick for CI as they are fast, the DFT tests take a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TD",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:2871,Testability,test,test,2871,"ementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take about 4x as long. I have verified that it works though. ; - I marked the HF tests as quick for CI as they are fast, the DFT tests take a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%];",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:2971,Testability,test,tests,2971,"pin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take about 4x as long. I have verified that it works though. ; - I marked the HF tests as quick for CI as they are fast, the DFT tests take a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvd",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:3056,Testability,test,tests,3056,"pped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take about 4x as long. I have verified that it works though. ; - I marked the HF tests as quick for CI as they are fast, the DFT tests take a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_td",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:3141,Testability,test,tests,3141,"X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take about 4x as long. I have verified that it works though. ; - I marked the HF tests as quick for CI as they are fast, the DFT tests take a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:3229,Testability,test,tests,3229,"423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take about 4x as long. I have verified that it works though. ; - I marked the HF tests as quick for CI as they are fast, the DFT tests take a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:3317,Testability,test,tests,3317,"inations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take about 4x as long. I have verified that it works though. ; - I marked the HF tests as quick for CI as they are fast, the DFT tests take a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:3404,Testability,test,tests,3404,"nd marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take about 4x as long. I have verified that it works though. ; - I marked the HF tests as quick for CI as they are fast, the DFT tests take a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:3491,Testability,test,tests,3491,"these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take about 4x as long. I have verified that it works though. ; - I marked the HF tests as quick for CI as they are fast, the DFT tests take a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:3575,Testability,test,tests,3575,"at transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take about 4x as long. I have verified that it works though. ; - I marked the HF tests as quick for CI as they are fast, the DFT tests take a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitation",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:3659,Testability,test,tests,3659,"ng symmetry on makes each test take about 4x as long. I have verified that it works though. ; - I marked the HF tests as quick for CI as they are fast, the DFT tests take a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitatio",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:3745,Testability,test,tests,3745,"hough. ; - I marked the HF tests as quick for CI as they are fast, the DFT tests take a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitatio",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:3831,Testability,test,tests,3831,"a bit longer, that can be adjusted as needed. ; - The test output below summarizes which Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitat",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:3917,Testability,test,tests,3917,ch Reference/functional combinations work and don't work. ```; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-TDA-cc-pvdz] PASSED [ 73%]; psi4/tests/test_tdscf_excit,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:4003,Testability,test,tests,4003,xcitations.py::test_tdscf[UHF-SVWN-RPA-cc-pvdz] PASSED [ 3%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-TDA-cc-pvdz] PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_exci,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:4090,Testability,test,tests,4090,citations.py::test_tdscf[UHF-SVWN-TDA-cc-pvdz] PASSED [ 6%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-TDA-cc-pvdz] PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_exci,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:4177,Testability,test,tests,4177,tations.py::test_tdscf[RHF-1-SVWN-RPA-cc-pvdz] PASSED [ 10%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-TDA-cc-pvdz] PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excit,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:4267,Testability,test,tests,4267,ations.py::test_tdscf[RHF-1-SVWN-TDA-cc-pvdz] PASSED [ 13%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-TDA-cc-pvdz] PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitat,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:4357,Testability,test,tests,4357,ions.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz] xfail [ 16%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-TDA-cc-pvdz] PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitati,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:4446,Testability,test,tests,4446,ns.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz] xfail [ 20%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-TDA-cc-pvdz] PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitatio,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:4535,Testability,test,tests,4535,.py::test_tdscf[UHF-HF-RPA-cc-pvdz] PASSED [ 23%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-TDA-cc-pvdz] PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitation,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:4620,Testability,test,tests,4620,::test_tdscf[UHF-HF-TDA-cc-pvdz] PASSED [ 26%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-TDA-cc-pvdz] PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; ===============================,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:4705,Testability,test,tests,4705,:test_tdscf[RHF-1-HF-RPA-cc-pvdz] PASSED [ 30%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-TDA-cc-pvdz] PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ================,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:4793,Testability,test,tests,4793,test_tdscf[RHF-1-HF-TDA-cc-pvdz] PASSED [ 33%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-TDA-cc-pvdz] PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_td,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:4881,Testability,test,tests,4881,st_tdscf[RHF-3-HF-RPA-cc-pvdz] PASSED [ 36%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-TDA-cc-pvdz] PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:4968,Testability,test,tests,4968,t_tdscf[RHF-3-HF-TDA-cc-pvdz] PASSED [ 40%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-TDA-cc-pvdz] PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-T,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:5055,Testability,test,tests,5055,_tdscf[UHF-HCTH93-RPA-cc-pvdz] xfail [ 43%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-TDA-cc-pvdz] PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:5141,Testability,test,tests,5141,_tdscf[UHF-HCTH93-TDA-cc-pvdz] xfail [ 46%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-TDA-cc-pvdz] PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug f,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:5227,Testability,test,tests,5227,t_tdscf[RHF-1-HCTH93-RPA-cc-pvdz] PASSED [ 50%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-TDA-cc-pvdz] PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-p,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:5316,Testability,test,tests,5316,test_tdscf[RHF-1-HCTH93-TDA-cc-pvdz] PASSED [ 53%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-TDA-cc-pvdz] PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py:,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:5405,Testability,test,tests,5405,:test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz] xfail [ 56%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-TDA-cc-pvdz] PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Single,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:5493,Testability,test,tests,5493,:test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz] xfail [ 60%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz] xfail [ 63%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-TDA-cc-pvdz] PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; rea,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:5658,Testability,test,test,5658,tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-TDA-cc-pvdz] PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/te,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:5765,Testability,test,tests,5765,tdscf[UHF-PBE0-TDA-cc-pvdz] xfail [ 66%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-RPA-cc-pvdz] PASSED [ 70%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-PBE0-TDA-cc-pvdz] PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/te,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:5898,Testability,test,tests,5898, PASSED [ 73%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz] xfail [ 76%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kern,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:6031,Testability,test,tests,6031,ons.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kern,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:6150,Testability,test,tests,6150,z] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS V,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:6269,Testability,test,tests,6269,tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:6404,Testability,test,tests,6404,-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:6539,Testability,test,tests,6539,est_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:6656,Testability,test,tests,6656,f[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:6773,Testability,test,tests,6773,f[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:6906,Testability,test,tests,6906,f[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:7039,Testability,test,tests,7039,f[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:7157,Testability,test,tests,7157,f[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:7275,Testability,test,tests,7275,f[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1349:7409,Testability,test,tests,7409,f[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1349
https://github.com/psi4/psi4/pull/1350:85,Security,hash,hash,85,"## Description; This is my attempt to resolve #1271 . I would like to use this PR to hash out the FC functionality more thoroughly. The questions I have are:. - what is the ideal expected behaviour of `freeze_core True`; - do we want to implement ""previous shells"" freezing, using eg. `freeze_core {1,2,...}`; - how about ""ridiculous"" cases such as Li2+ or F2-, how much hand-holding do we want the code to do and at which point we give up?. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Resolves #1271; - [ ] Clarify . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1350
https://github.com/psi4/psi4/pull/1350:592,Testability,Test,Tests,592,"## Description; This is my attempt to resolve #1271 . I would like to use this PR to hash out the FC functionality more thoroughly. The questions I have are:. - what is the ideal expected behaviour of `freeze_core True`; - do we want to implement ""previous shells"" freezing, using eg. `freeze_core {1,2,...}`; - how about ""ridiculous"" cases such as Li2+ or F2-, how much hand-holding do we want the code to do and at which point we give up?. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Resolves #1271; - [ ] Clarify . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1350
https://github.com/psi4/psi4/pull/1350:666,Testability,test,tests,666,"## Description; This is my attempt to resolve #1271 . I would like to use this PR to hash out the FC functionality more thoroughly. The questions I have are:. - what is the ideal expected behaviour of `freeze_core True`; - do we want to implement ""previous shells"" freezing, using eg. `freeze_core {1,2,...}`; - how about ""ridiculous"" cases such as Li2+ or F2-, how much hand-holding do we want the code to do and at which point we give up?. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Resolves #1271; - [ ] Clarify . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1350
https://github.com/psi4/psi4/pull/1350:757,Testability,test,tests,757,"## Description; This is my attempt to resolve #1271 . I would like to use this PR to hash out the FC functionality more thoroughly. The questions I have are:. - what is the ideal expected behaviour of `freeze_core True`; - do we want to implement ""previous shells"" freezing, using eg. `freeze_core {1,2,...}`; - how about ""ridiculous"" cases such as Li2+ or F2-, how much hand-holding do we want the code to do and at which point we give up?. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] Resolves #1271; - [ ] Clarify . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1350
https://github.com/psi4/psi4/pull/1351:3135,Availability,down,down,3135,"essian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - A Logging file has been introduced. All its contents should be considered experimental and subject to change. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:183,Deployability,integrat,integrate,183,"### Needs Py36. ## Description; Starting PR. Change the Psi4 driver from being recursive to being based on compute classes that have planning, computing and querying functions. Then, integrate the new driver with the QCArchive project for parallelizing nbody, CBS and findif. ## Deconstruction Progress; 99 changed files, and 5,314 additions and 2,946 deletions. c. dgasmith:recursive; - #2512; - #2515; - #2518; - #2526 ; - #2530 ; - #2532; - #2536 ; - #2544. 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; - #2552 ; - #2557; - [ ] #2516. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:729,Deployability,Integrat,Integrate,729,"### Needs Py36. ## Description; Starting PR. Change the Psi4 driver from being recursive to being based on compute classes that have planning, computing and querying functions. Then, integrate the new driver with the QCArchive project for parallelizing nbody, CBS and findif. ## Deconstruction Progress; 99 changed files, and 5,314 additions and 2,946 deletions. c. dgasmith:recursive; - #2512; - #2515; - #2518; - #2526 ; - #2530 ; - #2532; - #2536 ; - #2544. 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; - #2552 ; - #2557; - [ ] #2516. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:753,Deployability,Release,Release,753,"### Needs Py36. ## Description; Starting PR. Change the Psi4 driver from being recursive to being based on compute classes that have planning, computing and querying functions. Then, integrate the new driver with the QCArchive project for parallelizing nbody, CBS and findif. ## Deconstruction Progress; 99 changed files, and 5,314 additions and 2,946 deletions. c. dgasmith:recursive; - #2512; - #2515; - #2518; - #2526 ; - #2530 ; - #2532; - #2536 ; - #2544. 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; - #2552 ; - #2557; - [ ] #2516. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:973,Deployability,continuous,continuously,973,"hat have planning, computing and querying functions. Then, integrate the new driver with the QCArchive project for parallelizing nbody, CBS and findif. ## Deconstruction Progress; 99 changed files, and 5,314 additions and 2,946 deletions. c. dgasmith:recursive; - #2512; - #2515; - #2518; - #2526 ; - #2530 ; - #2532; - #2536 ; - #2544. 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; - #2552 ; - #2557; - [ ] #2516. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:2870,Deployability,continuous,continuous,2870,"essian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - A Logging file has been introduced. All its contents should be considered experimental and subject to change. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:1303,Energy Efficiency,energy,energy,1303,"512; - #2515; - #2518; - #2526 ; - #2530 ; - #2532; - #2536 ; - #2544. 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; - #2552 ; - #2557; - [ ] #2516. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:1397,Energy Efficiency,energy,energy,1397,"512; - #2515; - #2518; - #2526 ; - #2530 ; - #2532; - #2536 ; - #2544. 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; - #2552 ; - #2557; - [ ] #2516. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:2060,Energy Efficiency,energy,energy,2060,"omposite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is ex",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:2199,Energy Efficiency,energy,energy,2199,"omposite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is ex",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:183,Integrability,integrat,integrate,183,"### Needs Py36. ## Description; Starting PR. Change the Psi4 driver from being recursive to being based on compute classes that have planning, computing and querying functions. Then, integrate the new driver with the QCArchive project for parallelizing nbody, CBS and findif. ## Deconstruction Progress; 99 changed files, and 5,314 additions and 2,946 deletions. c. dgasmith:recursive; - #2512; - #2515; - #2518; - #2526 ; - #2530 ; - #2532; - #2536 ; - #2544. 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; - #2552 ; - #2557; - [ ] #2516. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:729,Integrability,Integrat,Integrate,729,"### Needs Py36. ## Description; Starting PR. Change the Psi4 driver from being recursive to being based on compute classes that have planning, computing and querying functions. Then, integrate the new driver with the QCArchive project for parallelizing nbody, CBS and findif. ## Deconstruction Progress; 99 changed files, and 5,314 additions and 2,946 deletions. c. dgasmith:recursive; - #2512; - #2515; - #2518; - #2526 ; - #2530 ; - #2532; - #2536 ; - #2544. 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; - #2552 ; - #2557; - [ ] #2516. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:802,Integrability,depend,dependency,802,"### Needs Py36. ## Description; Starting PR. Change the Psi4 driver from being recursive to being based on compute classes that have planning, computing and querying functions. Then, integrate the new driver with the QCArchive project for parallelizing nbody, CBS and findif. ## Deconstruction Progress; 99 changed files, and 5,314 additions and 2,946 deletions. c. dgasmith:recursive; - #2512; - #2515; - #2518; - #2526 ; - #2530 ; - #2532; - #2536 ; - #2544. 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; - #2552 ; - #2557; - [ ] #2516. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:1986,Integrability,wrap,wrapper,1986," fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:2518,Integrability,wrap,wraps,2518," gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - A Logging file has been introduced. All its contents should be considered experimental and subject to change. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:2431,Performance,load,loading,2431," scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - A Logging file has been introduced. All its contents should be considered experimental and subject to change. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:1546,Safety,safe,safety,1546,":recursive62; - #2552 ; - #2557; - [ ] #2516. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:1595,Safety,unsafe,unsafe,1595,"ble points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:1955,Security,access,access,1955,"ntly is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few mo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:920,Testability,log,logging,920,"### Needs Py36. ## Description; Starting PR. Change the Psi4 driver from being recursive to being based on compute classes that have planning, computing and querying functions. Then, integrate the new driver with the QCArchive project for parallelizing nbody, CBS and findif. ## Deconstruction Progress; 99 changed files, and 5,314 additions and 2,946 deletions. c. dgasmith:recursive; - #2512; - #2515; - #2518; - #2526 ; - #2530 ; - #2532; - #2536 ; - #2544. 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; - #2552 ; - #2557; - [ ] #2516. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:950,Testability,log,log,950,"hat have planning, computing and querying functions. Then, integrate the new driver with the QCArchive project for parallelizing nbody, CBS and findif. ## Deconstruction Progress; 99 changed files, and 5,314 additions and 2,946 deletions. c. dgasmith:recursive; - #2512; - #2515; - #2518; - #2526 ; - #2530 ; - #2532; - #2536 ; - #2544. 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; - #2552 ; - #2557; - [ ] #2516. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:1541,Testability,test,test,1541,":recursive62; - #2552 ; - #2557; - [ ] #2516. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:1636,Testability,test,test,1636,"will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:2597,Testability,log,logging,2597,"essian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - A Logging file has been introduced. All its contents should be considered experimental and subject to change. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:2617,Testability,log,log,2617,"essian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - A Logging file has been introduced. All its contents should be considered experimental and subject to change. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:2806,Testability,log,log,2806,"essian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - A Logging file has been introduced. All its contents should be considered experimental and subject to change. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:3174,Testability,Log,Logging,3174,"essian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - A Logging file has been introduced. All its contents should be considered experimental and subject to change. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:3302,Testability,Test,Tests,3302,"essian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - A Logging file has been introduced. All its contents should be considered experimental and subject to change. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:3376,Testability,test,tests,3376,"essian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - A Logging file has been introduced. All its contents should be considered experimental and subject to change. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:3467,Testability,test,tests,3467,"essian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - A Logging file has been introduced. All its contents should be considered experimental and subject to change. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1351:2738,Usability,simpl,simplified,2738,"essian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - A Logging file has been introduced. All its contents should be considered experimental and subject to change. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1351
https://github.com/psi4/psi4/pull/1352:170,Energy Efficiency,energy,energy,170,"## Description; Fixes a bug where the following input file crashes:; ```; molecule {; O; H 1 1 ; H 1 1 2 104.5; }. set basis sto-3g. set scf {; damping_percentage 20; }. energy('scf'); ```. `damping_percentage` is defined as a _double_. Before this commit, Psi would naively set the relevant keyword to be the int the user gave it and then complain when it tried to read options later. It now knows to cast to double. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes type conversion bug in options system. ## Checklist; - [x] No tests run beyond Travis and that the input file up top. This PR doesn't need it. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1352
https://github.com/psi4/psi4/pull/1352:584,Testability,test,tests,584,"## Description; Fixes a bug where the following input file crashes:; ```; molecule {; O; H 1 1 ; H 1 1 2 104.5; }. set basis sto-3g. set scf {; damping_percentage 20; }. energy('scf'); ```. `damping_percentage` is defined as a _double_. Before this commit, Psi would naively set the relevant keyword to be the int the user gave it and then complain when it tried to read options later. It now knows to cast to double. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes type conversion bug in options system. ## Checklist; - [x] No tests run beyond Travis and that the input file up top. This PR doesn't need it. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1352
https://github.com/psi4/psi4/issues/1353:317,Availability,error,error,317,"Attempts to use both density fitting and the quadratically convergent algorithm in DCT crash Psi. In particular, the following input file. ```; molecule adduct {; O; H 1 1 ; H 1 1 2 104.5; }. set {; basis sto-3g; reference uhf ; dcft_type df; }. set dcft {; algorithm qc; }. energy('dcft'); ```. raises the following error. ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/procrouting/proc.py"", line 1489, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libpsio/error.cc on line: 128 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); ```. Public Enemy No. 2, we meet again... My hunch is that this was never implemented, and an error just needs to be raised until it is implemented. However, it may actually be implemented, but just suffering from a bug. I'll be leaving this error message here until I can figure out which - that will take a while.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1353
https://github.com/psi4/psi4/issues/1353:996,Availability,Error,Error,996,"Attempts to use both density fitting and the quadratically convergent algorithm in DCT crash Psi. In particular, the following input file. ```; molecule adduct {; O; H 1 1 ; H 1 1 2 104.5; }. set {; basis sto-3g; reference uhf ; dcft_type df; }. set dcft {; algorithm qc; }. energy('dcft'); ```. raises the following error. ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/procrouting/proc.py"", line 1489, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libpsio/error.cc on line: 128 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); ```. Public Enemy No. 2, we meet again... My hunch is that this was never implemented, and an error just needs to be raised until it is implemented. However, it may actually be implemented, but just suffering from a bug. I'll be leaving this error message here until I can figure out which - that will take a while.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1353
https://github.com/psi4/psi4/issues/1353:1008,Availability,Error,Error,1008,"Attempts to use both density fitting and the quadratically convergent algorithm in DCT crash Psi. In particular, the following input file. ```; molecule adduct {; O; H 1 1 ; H 1 1 2 104.5; }. set {; basis sto-3g; reference uhf ; dcft_type df; }. set dcft {; algorithm qc; }. energy('dcft'); ```. raises the following error. ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/procrouting/proc.py"", line 1489, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libpsio/error.cc on line: 128 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); ```. Public Enemy No. 2, we meet again... My hunch is that this was never implemented, and an error just needs to be raised until it is implemented. However, it may actually be implemented, but just suffering from a bug. I'll be leaving this error message here until I can figure out which - that will take a while.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1353
https://github.com/psi4/psi4/issues/1353:1015,Availability,Error,Error,1015,"Attempts to use both density fitting and the quadratically convergent algorithm in DCT crash Psi. In particular, the following input file. ```; molecule adduct {; O; H 1 1 ; H 1 1 2 104.5; }. set {; basis sto-3g; reference uhf ; dcft_type df; }. set dcft {; algorithm qc; }. energy('dcft'); ```. raises the following error. ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/procrouting/proc.py"", line 1489, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libpsio/error.cc on line: 128 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); ```. Public Enemy No. 2, we meet again... My hunch is that this was never implemented, and an error just needs to be raised until it is implemented. However, it may actually be implemented, but just suffering from a bug. I'll be leaving this error message here until I can figure out which - that will take a while.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1353
https://github.com/psi4/psi4/issues/1353:1095,Availability,error,error,1095,"Attempts to use both density fitting and the quadratically convergent algorithm in DCT crash Psi. In particular, the following input file. ```; molecule adduct {; O; H 1 1 ; H 1 1 2 104.5; }. set {; basis sto-3g; reference uhf ; dcft_type df; }. set dcft {; algorithm qc; }. energy('dcft'); ```. raises the following error. ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/procrouting/proc.py"", line 1489, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libpsio/error.cc on line: 128 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); ```. Public Enemy No. 2, we meet again... My hunch is that this was never implemented, and an error just needs to be raised until it is implemented. However, it may actually be implemented, but just suffering from a bug. I'll be leaving this error message here until I can figure out which - that will take a while.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1353
https://github.com/psi4/psi4/issues/1353:1510,Availability,error,error,1510,"Attempts to use both density fitting and the quadratically convergent algorithm in DCT crash Psi. In particular, the following input file. ```; molecule adduct {; O; H 1 1 ; H 1 1 2 104.5; }. set {; basis sto-3g; reference uhf ; dcft_type df; }. set dcft {; algorithm qc; }. energy('dcft'); ```. raises the following error. ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/procrouting/proc.py"", line 1489, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libpsio/error.cc on line: 128 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); ```. Public Enemy No. 2, we meet again... My hunch is that this was never implemented, and an error just needs to be raised until it is implemented. However, it may actually be implemented, but just suffering from a bug. I'll be leaving this error message here until I can figure out which - that will take a while.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1353
https://github.com/psi4/psi4/issues/1353:1658,Availability,error,error,1658,"Attempts to use both density fitting and the quadratically convergent algorithm in DCT crash Psi. In particular, the following input file. ```; molecule adduct {; O; H 1 1 ; H 1 1 2 104.5; }. set {; basis sto-3g; reference uhf ; dcft_type df; }. set dcft {; algorithm qc; }. energy('dcft'); ```. raises the following error. ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/procrouting/proc.py"", line 1489, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libpsio/error.cc on line: 128 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); ```. Public Enemy No. 2, we meet again... My hunch is that this was never implemented, and an error just needs to be raised until it is implemented. However, it may actually be implemented, but just suffering from a bug. I'll be leaving this error message here until I can figure out which - that will take a while.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1353
https://github.com/psi4/psi4/issues/1353:275,Energy Efficiency,energy,energy,275,"Attempts to use both density fitting and the quadratically convergent algorithm in DCT crash Psi. In particular, the following input file. ```; molecule adduct {; O; H 1 1 ; H 1 1 2 104.5; }. set {; basis sto-3g; reference uhf ; dcft_type df; }. set dcft {; algorithm qc; }. energy('dcft'); ```. raises the following error. ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/procrouting/proc.py"", line 1489, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libpsio/error.cc on line: 128 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); ```. Public Enemy No. 2, we meet again... My hunch is that this was never implemented, and an error just needs to be raised until it is implemented. However, it may actually be implemented, but just suffering from a bug. I'll be leaving this error message here until I can figure out which - that will take a while.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1353
https://github.com/psi4/psi4/issues/1353:694,Energy Efficiency,energy,energy,694,"Attempts to use both density fitting and the quadratically convergent algorithm in DCT crash Psi. In particular, the following input file. ```; molecule adduct {; O; H 1 1 ; H 1 1 2 104.5; }. set {; basis sto-3g; reference uhf ; dcft_type df; }. set dcft {; algorithm qc; }. energy('dcft'); ```. raises the following error. ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/procrouting/proc.py"", line 1489, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libpsio/error.cc on line: 128 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); ```. Public Enemy No. 2, we meet again... My hunch is that this was never implemented, and an error just needs to be raised until it is implemented. However, it may actually be implemented, but just suffering from a bug. I'll be leaving this error message here until I can figure out which - that will take a while.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1353
https://github.com/psi4/psi4/issues/1353:720,Energy Efficiency,energy,energy,720,"Attempts to use both density fitting and the quadratically convergent algorithm in DCT crash Psi. In particular, the following input file. ```; molecule adduct {; O; H 1 1 ; H 1 1 2 104.5; }. set {; basis sto-3g; reference uhf ; dcft_type df; }. set dcft {; algorithm qc; }. energy('dcft'); ```. raises the following error. ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/procrouting/proc.py"", line 1489, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libpsio/error.cc on line: 128 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); ```. Public Enemy No. 2, we meet again... My hunch is that this was never implemented, and an error just needs to be raised until it is implemented. However, it may actually be implemented, but just suffering from a bug. I'll be leaving this error message here until I can figure out which - that will take a while.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1353
https://github.com/psi4/psi4/issues/1353:1664,Integrability,message,message,1664,"Attempts to use both density fitting and the quadratically convergent algorithm in DCT crash Psi. In particular, the following input file. ```; molecule adduct {; O; H 1 1 ; H 1 1 2 104.5; }. set {; basis sto-3g; reference uhf ; dcft_type df; }. set dcft {; algorithm qc; }. energy('dcft'); ```. raises the following error. ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/procrouting/proc.py"", line 1489, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libpsio/error.cc on line: 128 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); ```. Public Enemy No. 2, we meet again... My hunch is that this was never implemented, and an error just needs to be raised until it is implemented. However, it may actually be implemented, but just suffering from a bug. I'll be leaving this error message here until I can figure out which - that will take a while.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1353
https://github.com/psi4/psi4/issues/1354:178,Availability,error,error,178,"I'm attempting to converge a very tricky molecule with ODC-12. _Something_ goes wrong in the computation, likely involving the fact that I added damping, and I get the following error message:; ```; There was a problem correcting the MO phases.; If this does not converge, try ALGORITHM=TWOSTEP; ```. However helpful a change of algorithm might be, the two step algorithm isn't implemented for the orbital optimized methods, so this advice is useless for me, and aggravating for any users encountering this problem. So the error message needs to be changed if the cumulant parameterization includes orbital rotations. But it would be nice if I could replace it with something else. Do any of the (very few) people familiar with wrangling with tricky molecules in DCT have any suggestions?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1354
https://github.com/psi4/psi4/issues/1354:523,Availability,error,error,523,"I'm attempting to converge a very tricky molecule with ODC-12. _Something_ goes wrong in the computation, likely involving the fact that I added damping, and I get the following error message:; ```; There was a problem correcting the MO phases.; If this does not converge, try ALGORITHM=TWOSTEP; ```. However helpful a change of algorithm might be, the two step algorithm isn't implemented for the orbital optimized methods, so this advice is useless for me, and aggravating for any users encountering this problem. So the error message needs to be changed if the cumulant parameterization includes orbital rotations. But it would be nice if I could replace it with something else. Do any of the (very few) people familiar with wrangling with tricky molecules in DCT have any suggestions?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1354
https://github.com/psi4/psi4/issues/1354:184,Integrability,message,message,184,"I'm attempting to converge a very tricky molecule with ODC-12. _Something_ goes wrong in the computation, likely involving the fact that I added damping, and I get the following error message:; ```; There was a problem correcting the MO phases.; If this does not converge, try ALGORITHM=TWOSTEP; ```. However helpful a change of algorithm might be, the two step algorithm isn't implemented for the orbital optimized methods, so this advice is useless for me, and aggravating for any users encountering this problem. So the error message needs to be changed if the cumulant parameterization includes orbital rotations. But it would be nice if I could replace it with something else. Do any of the (very few) people familiar with wrangling with tricky molecules in DCT have any suggestions?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1354
https://github.com/psi4/psi4/issues/1354:529,Integrability,message,message,529,"I'm attempting to converge a very tricky molecule with ODC-12. _Something_ goes wrong in the computation, likely involving the fact that I added damping, and I get the following error message:; ```; There was a problem correcting the MO phases.; If this does not converge, try ALGORITHM=TWOSTEP; ```. However helpful a change of algorithm might be, the two step algorithm isn't implemented for the orbital optimized methods, so this advice is useless for me, and aggravating for any users encountering this problem. So the error message needs to be changed if the cumulant parameterization includes orbital rotations. But it would be nice if I could replace it with something else. Do any of the (very few) people familiar with wrangling with tricky molecules in DCT have any suggestions?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1354
https://github.com/psi4/psi4/issues/1354:573,Modifiability,parameteriz,parameterization,573,"I'm attempting to converge a very tricky molecule with ODC-12. _Something_ goes wrong in the computation, likely involving the fact that I added damping, and I get the following error message:; ```; There was a problem correcting the MO phases.; If this does not converge, try ALGORITHM=TWOSTEP; ```. However helpful a change of algorithm might be, the two step algorithm isn't implemented for the orbital optimized methods, so this advice is useless for me, and aggravating for any users encountering this problem. So the error message needs to be changed if the cumulant parameterization includes orbital rotations. But it would be nice if I could replace it with something else. Do any of the (very few) people familiar with wrangling with tricky molecules in DCT have any suggestions?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1354
https://github.com/psi4/psi4/issues/1354:406,Performance,optimiz,optimized,406,"I'm attempting to converge a very tricky molecule with ODC-12. _Something_ goes wrong in the computation, likely involving the fact that I added damping, and I get the following error message:; ```; There was a problem correcting the MO phases.; If this does not converge, try ALGORITHM=TWOSTEP; ```. However helpful a change of algorithm might be, the two step algorithm isn't implemented for the orbital optimized methods, so this advice is useless for me, and aggravating for any users encountering this problem. So the error message needs to be changed if the cumulant parameterization includes orbital rotations. But it would be nice if I could replace it with something else. Do any of the (very few) people familiar with wrangling with tricky molecules in DCT have any suggestions?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1354
https://github.com/psi4/psi4/pull/1355:1076,Deployability,Release,Release,1076,"## Description; New PR for [PR#990](https://github.com/psi4/psi4/pull/990) to avoid a mess of merge conflicts. Thanks to @robertodr for the help. Provides a remedy for [#909](https://github.com/psi4/psi4/issues/909). `Molecule::mass` and `Molecule::Z` show inconsistent behavior for ghosts. This PR requires a new argument `bool zero_ghost` on the C++ side and optionally in the Python layer which gives a choice for behavior. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Required C++ argument `bool zero_ghost` for `Molecule::mass`; - [x] Optional python argument `bool zero_ghost` for `Molecule::mass` (default false); - [x] Required argument `bool zero_ghost` for `Molecule::Z`; - [x] Optional python argument `bool zero_ghost` for `Molecule::Z` (default true); - [x] Optional C++/python argument `bool zero_ghost` for `Molecule::center_of_mass`; - [x] Optional C++/python argument `bool zero_ghost` for `Molecule::inertia_tensor`; - [x] Check all C++ calls for ""intended behavior""; * **User-Facing for Release Notes**; - [x] New optional python arguments for `Molecule.mass()`, `Molecule.Z()`, `Molecule.center_of_mass`, and `Molecule.inertia_tensor`. ## Questions; - For clarity: ""previous behavior"" is that `mass` returns non-zero for ghost atoms (equivalent to `zero_ghost = false`), and `Z` returns zero for ghost atoms (`zero_ghost = true`).; - `Molecule::mass` and `Molecule::Z` on the C++ side now need to be passed either `True` or `False`, for whether or not to return zero for ghost atoms. I'm defaulting to previous behavior in most cases, though there are some (such as `optrot.cc`) that likely need to be changed. See the discussion in [#909](https://github.com/psi4/psi4/issues/909).; - May also need a logic pass of `center_of_mass` and `inertia_tensor` in a separate PR?; - Suggestions for changes C++ side or py-side are greatly encouraged. ; - This is a good chance to consider changing some `Z` calls to `tru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1355
https://github.com/psi4/psi4/pull/1355:78,Safety,avoid,avoid,78,"## Description; New PR for [PR#990](https://github.com/psi4/psi4/pull/990) to avoid a mess of merge conflicts. Thanks to @robertodr for the help. Provides a remedy for [#909](https://github.com/psi4/psi4/issues/909). `Molecule::mass` and `Molecule::Z` show inconsistent behavior for ghosts. This PR requires a new argument `bool zero_ghost` on the C++ side and optionally in the Python layer which gives a choice for behavior. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Required C++ argument `bool zero_ghost` for `Molecule::mass`; - [x] Optional python argument `bool zero_ghost` for `Molecule::mass` (default false); - [x] Required argument `bool zero_ghost` for `Molecule::Z`; - [x] Optional python argument `bool zero_ghost` for `Molecule::Z` (default true); - [x] Optional C++/python argument `bool zero_ghost` for `Molecule::center_of_mass`; - [x] Optional C++/python argument `bool zero_ghost` for `Molecule::inertia_tensor`; - [x] Check all C++ calls for ""intended behavior""; * **User-Facing for Release Notes**; - [x] New optional python arguments for `Molecule.mass()`, `Molecule.Z()`, `Molecule.center_of_mass`, and `Molecule.inertia_tensor`. ## Questions; - For clarity: ""previous behavior"" is that `mass` returns non-zero for ghost atoms (equivalent to `zero_ghost = false`), and `Z` returns zero for ghost atoms (`zero_ghost = true`).; - `Molecule::mass` and `Molecule::Z` on the C++ side now need to be passed either `True` or `False`, for whether or not to return zero for ghost atoms. I'm defaulting to previous behavior in most cases, though there are some (such as `optrot.cc`) that likely need to be changed. See the discussion in [#909](https://github.com/psi4/psi4/issues/909).; - May also need a logic pass of `center_of_mass` and `inertia_tensor` in a separate PR?; - Suggestions for changes C++ side or py-side are greatly encouraged. ; - This is a good chance to consider changing some `Z` calls to `tru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1355
https://github.com/psi4/psi4/pull/1355:1791,Testability,log,logic,1791,"equires a new argument `bool zero_ghost` on the C++ side and optionally in the Python layer which gives a choice for behavior. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Required C++ argument `bool zero_ghost` for `Molecule::mass`; - [x] Optional python argument `bool zero_ghost` for `Molecule::mass` (default false); - [x] Required argument `bool zero_ghost` for `Molecule::Z`; - [x] Optional python argument `bool zero_ghost` for `Molecule::Z` (default true); - [x] Optional C++/python argument `bool zero_ghost` for `Molecule::center_of_mass`; - [x] Optional C++/python argument `bool zero_ghost` for `Molecule::inertia_tensor`; - [x] Check all C++ calls for ""intended behavior""; * **User-Facing for Release Notes**; - [x] New optional python arguments for `Molecule.mass()`, `Molecule.Z()`, `Molecule.center_of_mass`, and `Molecule.inertia_tensor`. ## Questions; - For clarity: ""previous behavior"" is that `mass` returns non-zero for ghost atoms (equivalent to `zero_ghost = false`), and `Z` returns zero for ghost atoms (`zero_ghost = true`).; - `Molecule::mass` and `Molecule::Z` on the C++ side now need to be passed either `True` or `False`, for whether or not to return zero for ghost atoms. I'm defaulting to previous behavior in most cases, though there are some (such as `optrot.cc`) that likely need to be changed. See the discussion in [#909](https://github.com/psi4/psi4/issues/909).; - May also need a logic pass of `center_of_mass` and `inertia_tensor` in a separate PR?; - Suggestions for changes C++ side or py-side are greatly encouraged. ; - This is a good chance to consider changing some `Z` calls to `true_atomic_number` as in the ECP fix [PR#1109](https://github.com/psi4/psi4/pull/1109), though it should be functionally the same in most cases. . ## Checklist; - [x] Add argument for `mass`; - [x] Add argument for `Z`; - [x] Tests; - [x] Docs. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1355
https://github.com/psi4/psi4/pull/1355:2225,Testability,Test,Tests,2225,"equires a new argument `bool zero_ghost` on the C++ side and optionally in the Python layer which gives a choice for behavior. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Required C++ argument `bool zero_ghost` for `Molecule::mass`; - [x] Optional python argument `bool zero_ghost` for `Molecule::mass` (default false); - [x] Required argument `bool zero_ghost` for `Molecule::Z`; - [x] Optional python argument `bool zero_ghost` for `Molecule::Z` (default true); - [x] Optional C++/python argument `bool zero_ghost` for `Molecule::center_of_mass`; - [x] Optional C++/python argument `bool zero_ghost` for `Molecule::inertia_tensor`; - [x] Check all C++ calls for ""intended behavior""; * **User-Facing for Release Notes**; - [x] New optional python arguments for `Molecule.mass()`, `Molecule.Z()`, `Molecule.center_of_mass`, and `Molecule.inertia_tensor`. ## Questions; - For clarity: ""previous behavior"" is that `mass` returns non-zero for ghost atoms (equivalent to `zero_ghost = false`), and `Z` returns zero for ghost atoms (`zero_ghost = true`).; - `Molecule::mass` and `Molecule::Z` on the C++ side now need to be passed either `True` or `False`, for whether or not to return zero for ghost atoms. I'm defaulting to previous behavior in most cases, though there are some (such as `optrot.cc`) that likely need to be changed. See the discussion in [#909](https://github.com/psi4/psi4/issues/909).; - May also need a logic pass of `center_of_mass` and `inertia_tensor` in a separate PR?; - Suggestions for changes C++ side or py-side are greatly encouraged. ; - This is a good chance to consider changing some `Z` calls to `true_atomic_number` as in the ECP fix [PR#1109](https://github.com/psi4/psi4/pull/1109), though it should be functionally the same in most cases. . ## Checklist; - [x] Add argument for `mass`; - [x] Add argument for `Z`; - [x] Tests; - [x] Docs. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1355
https://github.com/psi4/psi4/issues/1356:25,Energy Efficiency,energy,energy,25,"PBEh-3c passes the wrong energy into Optking or Findif, sometimes, for some molecules. It happens for O2(s) but not for C3H8. See the O2(s) log posted here:. [O2 logfile](https://github.com/psi4/psi4/files/2573213/o2.txt). As @hokru pointed out, it's the D3 dispersion energy of O2 that gets forwarded instead of the total energy, the most likely culprit (as identified by @andysim) is here:. https://github.com/psi4/psi4/blob/8cb0765c2735b0735fc3468d210d258de476a72b/psi4/driver/qcdb/intf_dftd3/runner.py#L88",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1356
https://github.com/psi4/psi4/issues/1356:269,Energy Efficiency,energy,energy,269,"PBEh-3c passes the wrong energy into Optking or Findif, sometimes, for some molecules. It happens for O2(s) but not for C3H8. See the O2(s) log posted here:. [O2 logfile](https://github.com/psi4/psi4/files/2573213/o2.txt). As @hokru pointed out, it's the D3 dispersion energy of O2 that gets forwarded instead of the total energy, the most likely culprit (as identified by @andysim) is here:. https://github.com/psi4/psi4/blob/8cb0765c2735b0735fc3468d210d258de476a72b/psi4/driver/qcdb/intf_dftd3/runner.py#L88",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1356
https://github.com/psi4/psi4/issues/1356:323,Energy Efficiency,energy,energy,323,"PBEh-3c passes the wrong energy into Optking or Findif, sometimes, for some molecules. It happens for O2(s) but not for C3H8. See the O2(s) log posted here:. [O2 logfile](https://github.com/psi4/psi4/files/2573213/o2.txt). As @hokru pointed out, it's the D3 dispersion energy of O2 that gets forwarded instead of the total energy, the most likely culprit (as identified by @andysim) is here:. https://github.com/psi4/psi4/blob/8cb0765c2735b0735fc3468d210d258de476a72b/psi4/driver/qcdb/intf_dftd3/runner.py#L88",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1356
https://github.com/psi4/psi4/issues/1356:140,Testability,log,log,140,"PBEh-3c passes the wrong energy into Optking or Findif, sometimes, for some molecules. It happens for O2(s) but not for C3H8. See the O2(s) log posted here:. [O2 logfile](https://github.com/psi4/psi4/files/2573213/o2.txt). As @hokru pointed out, it's the D3 dispersion energy of O2 that gets forwarded instead of the total energy, the most likely culprit (as identified by @andysim) is here:. https://github.com/psi4/psi4/blob/8cb0765c2735b0735fc3468d210d258de476a72b/psi4/driver/qcdb/intf_dftd3/runner.py#L88",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1356
https://github.com/psi4/psi4/issues/1356:162,Testability,log,logfile,162,"PBEh-3c passes the wrong energy into Optking or Findif, sometimes, for some molecules. It happens for O2(s) but not for C3H8. See the O2(s) log posted here:. [O2 logfile](https://github.com/psi4/psi4/files/2573213/o2.txt). As @hokru pointed out, it's the D3 dispersion energy of O2 that gets forwarded instead of the total energy, the most likely culprit (as identified by @andysim) is here:. https://github.com/psi4/psi4/blob/8cb0765c2735b0735fc3468d210d258de476a72b/psi4/driver/qcdb/intf_dftd3/runner.py#L88",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1356
https://github.com/psi4/psi4/pull/1357:65,Safety,detect,detection,65,## Description; Put helPME into build and testing. I know OpenMP detection isn't there and prob have to pass `FFTW_ROOT`. ## Todos. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1357
https://github.com/psi4/psi4/pull/1357:42,Testability,test,testing,42,## Description; Put helPME into build and testing. I know OpenMP detection isn't there and prob have to pass `FFTW_ROOT`. ## Todos. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1357
https://github.com/psi4/psi4/pull/1357:166,Testability,Test,Tests,166,## Description; Put helPME into build and testing. I know OpenMP detection isn't there and prob have to pass `FFTW_ROOT`. ## Todos. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1357
https://github.com/psi4/psi4/pull/1357:240,Testability,test,tests,240,## Description; Put helPME into build and testing. I know OpenMP detection isn't there and prob have to pass `FFTW_ROOT`. ## Todos. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1357
https://github.com/psi4/psi4/pull/1357:331,Testability,test,tests,331,## Description; Put helPME into build and testing. I know OpenMP detection isn't there and prob have to pass `FFTW_ROOT`. ## Todos. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1357
https://github.com/psi4/psi4/pull/1358:806,Availability,down,downstream,806,"## Description; Cleans up CMake so that external dependencies can be linked to libraries in `psi4/src/psi4` and then inherited by `core` without invoking `target_link_libraries`/`target_include_directories` again. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Bump CMake minimum requirement to 3.8; - [x] Rewrote `psi4_add_module` CMake macro. Now it takes `bin` or `lib` argument, name of module, and list of sources. Note that the macro:; - Now defines **two** global lists of libraries `core` will link to, one for `bin`s and one for `lib`s. This is needed because `lib`s need to appear last in the link line to avoid missing symbols.; - Sets source file properties to generate position-independent code with symbols hidden by default.; - [x] Rewrote downstream `CMakeLists.txt` so that: ; - Sources are in a list, with one source file per line, for easier diff inspection.; - External dependencies are linked where they are used first.; - [x] Reordered `include`s in _some_ files according to the hierarchy: ; - For class implementation sources: header corresponding to current source file first (_.i.e._ `#include ""myself.h""` in `myself.cc`); - C++ standard headers, including `<omp.h>`; - Psi4 higher-level headers, _i.e._ `psi4/psifiles.h` &co.; - Psi4 headers in subdirectories _i.e._ `psi4/libmints/matrix.h` &co.; - Headers in current directory _without full path_.; - [x] `psi4/src/psi4/liboptions/liboptions_python.h` moved to `psi4/src/python_data_type.h` and ; `psi4/src/psi4/liboptions/python.cc` moved to `psi4/src/python_data_type.cc`. These are now compiled and linked as part of `core`, rather than `liboptions`. ## Questions; I note that `mrcc.cc` and `civect.h` include `pybind11.h`. It might be a good idea to move those bindings one level up, directly into `core` without spreading the dependency too deep in the code. Opinions?. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1358
https://github.com/psi4/psi4/pull/1358:49,Integrability,depend,dependencies,49,"## Description; Cleans up CMake so that external dependencies can be linked to libraries in `psi4/src/psi4` and then inherited by `core` without invoking `target_link_libraries`/`target_include_directories` again. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Bump CMake minimum requirement to 3.8; - [x] Rewrote `psi4_add_module` CMake macro. Now it takes `bin` or `lib` argument, name of module, and list of sources. Note that the macro:; - Now defines **two** global lists of libraries `core` will link to, one for `bin`s and one for `lib`s. This is needed because `lib`s need to appear last in the link line to avoid missing symbols.; - Sets source file properties to generate position-independent code with symbols hidden by default.; - [x] Rewrote downstream `CMakeLists.txt` so that: ; - Sources are in a list, with one source file per line, for easier diff inspection.; - External dependencies are linked where they are used first.; - [x] Reordered `include`s in _some_ files according to the hierarchy: ; - For class implementation sources: header corresponding to current source file first (_.i.e._ `#include ""myself.h""` in `myself.cc`); - C++ standard headers, including `<omp.h>`; - Psi4 higher-level headers, _i.e._ `psi4/psifiles.h` &co.; - Psi4 headers in subdirectories _i.e._ `psi4/libmints/matrix.h` &co.; - Headers in current directory _without full path_.; - [x] `psi4/src/psi4/liboptions/liboptions_python.h` moved to `psi4/src/python_data_type.h` and ; `psi4/src/psi4/liboptions/python.cc` moved to `psi4/src/python_data_type.cc`. These are now compiled and linked as part of `core`, rather than `liboptions`. ## Questions; I note that `mrcc.cc` and `civect.h` include `pybind11.h`. It might be a good idea to move those bindings one level up, directly into `core` without spreading the dependency too deep in the code. Opinions?. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1358
https://github.com/psi4/psi4/pull/1358:941,Integrability,depend,dependencies,941,"## Description; Cleans up CMake so that external dependencies can be linked to libraries in `psi4/src/psi4` and then inherited by `core` without invoking `target_link_libraries`/`target_include_directories` again. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Bump CMake minimum requirement to 3.8; - [x] Rewrote `psi4_add_module` CMake macro. Now it takes `bin` or `lib` argument, name of module, and list of sources. Note that the macro:; - Now defines **two** global lists of libraries `core` will link to, one for `bin`s and one for `lib`s. This is needed because `lib`s need to appear last in the link line to avoid missing symbols.; - Sets source file properties to generate position-independent code with symbols hidden by default.; - [x] Rewrote downstream `CMakeLists.txt` so that: ; - Sources are in a list, with one source file per line, for easier diff inspection.; - External dependencies are linked where they are used first.; - [x] Reordered `include`s in _some_ files according to the hierarchy: ; - For class implementation sources: header corresponding to current source file first (_.i.e._ `#include ""myself.h""` in `myself.cc`); - C++ standard headers, including `<omp.h>`; - Psi4 higher-level headers, _i.e._ `psi4/psifiles.h` &co.; - Psi4 headers in subdirectories _i.e._ `psi4/libmints/matrix.h` &co.; - Headers in current directory _without full path_.; - [x] `psi4/src/psi4/liboptions/liboptions_python.h` moved to `psi4/src/python_data_type.h` and ; `psi4/src/psi4/liboptions/python.cc` moved to `psi4/src/python_data_type.cc`. These are now compiled and linked as part of `core`, rather than `liboptions`. ## Questions; I note that `mrcc.cc` and `civect.h` include `pybind11.h`. It might be a good idea to move those bindings one level up, directly into `core` without spreading the dependency too deep in the code. Opinions?. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1358
https://github.com/psi4/psi4/pull/1358:1861,Integrability,depend,dependency,1861,"k_libraries`/`target_include_directories` again. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Bump CMake minimum requirement to 3.8; - [x] Rewrote `psi4_add_module` CMake macro. Now it takes `bin` or `lib` argument, name of module, and list of sources. Note that the macro:; - Now defines **two** global lists of libraries `core` will link to, one for `bin`s and one for `lib`s. This is needed because `lib`s need to appear last in the link line to avoid missing symbols.; - Sets source file properties to generate position-independent code with symbols hidden by default.; - [x] Rewrote downstream `CMakeLists.txt` so that: ; - Sources are in a list, with one source file per line, for easier diff inspection.; - External dependencies are linked where they are used first.; - [x] Reordered `include`s in _some_ files according to the hierarchy: ; - For class implementation sources: header corresponding to current source file first (_.i.e._ `#include ""myself.h""` in `myself.cc`); - C++ standard headers, including `<omp.h>`; - Psi4 higher-level headers, _i.e._ `psi4/psifiles.h` &co.; - Psi4 headers in subdirectories _i.e._ `psi4/libmints/matrix.h` &co.; - Headers in current directory _without full path_.; - [x] `psi4/src/psi4/liboptions/liboptions_python.h` moved to `psi4/src/python_data_type.h` and ; `psi4/src/psi4/liboptions/python.cc` moved to `psi4/src/python_data_type.cc`. These are now compiled and linked as part of `core`, rather than `liboptions`. ## Questions; I note that `mrcc.cc` and `civect.h` include `pybind11.h`. It might be a good idea to move those bindings one level up, directly into `core` without spreading the dependency too deep in the code. Opinions?. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1358
https://github.com/psi4/psi4/pull/1358:117,Modifiability,inherit,inherited,117,"## Description; Cleans up CMake so that external dependencies can be linked to libraries in `psi4/src/psi4` and then inherited by `core` without invoking `target_link_libraries`/`target_include_directories` again. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Bump CMake minimum requirement to 3.8; - [x] Rewrote `psi4_add_module` CMake macro. Now it takes `bin` or `lib` argument, name of module, and list of sources. Note that the macro:; - Now defines **two** global lists of libraries `core` will link to, one for `bin`s and one for `lib`s. This is needed because `lib`s need to appear last in the link line to avoid missing symbols.; - Sets source file properties to generate position-independent code with symbols hidden by default.; - [x] Rewrote downstream `CMakeLists.txt` so that: ; - Sources are in a list, with one source file per line, for easier diff inspection.; - External dependencies are linked where they are used first.; - [x] Reordered `include`s in _some_ files according to the hierarchy: ; - For class implementation sources: header corresponding to current source file first (_.i.e._ `#include ""myself.h""` in `myself.cc`); - C++ standard headers, including `<omp.h>`; - Psi4 higher-level headers, _i.e._ `psi4/psifiles.h` &co.; - Psi4 headers in subdirectories _i.e._ `psi4/libmints/matrix.h` &co.; - Headers in current directory _without full path_.; - [x] `psi4/src/psi4/liboptions/liboptions_python.h` moved to `psi4/src/python_data_type.h` and ; `psi4/src/psi4/liboptions/python.cc` moved to `psi4/src/python_data_type.cc`. These are now compiled and linked as part of `core`, rather than `liboptions`. ## Questions; I note that `mrcc.cc` and `civect.h` include `pybind11.h`. It might be a good idea to move those bindings one level up, directly into `core` without spreading the dependency too deep in the code. Opinions?. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1358
https://github.com/psi4/psi4/pull/1358:667,Safety,avoid,avoid,667,"## Description; Cleans up CMake so that external dependencies can be linked to libraries in `psi4/src/psi4` and then inherited by `core` without invoking `target_link_libraries`/`target_include_directories` again. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Bump CMake minimum requirement to 3.8; - [x] Rewrote `psi4_add_module` CMake macro. Now it takes `bin` or `lib` argument, name of module, and list of sources. Note that the macro:; - Now defines **two** global lists of libraries `core` will link to, one for `bin`s and one for `lib`s. This is needed because `lib`s need to appear last in the link line to avoid missing symbols.; - Sets source file properties to generate position-independent code with symbols hidden by default.; - [x] Rewrote downstream `CMakeLists.txt` so that: ; - Sources are in a list, with one source file per line, for easier diff inspection.; - External dependencies are linked where they are used first.; - [x] Reordered `include`s in _some_ files according to the hierarchy: ; - For class implementation sources: header corresponding to current source file first (_.i.e._ `#include ""myself.h""` in `myself.cc`); - C++ standard headers, including `<omp.h>`; - Psi4 higher-level headers, _i.e._ `psi4/psifiles.h` &co.; - Psi4 headers in subdirectories _i.e._ `psi4/libmints/matrix.h` &co.; - Headers in current directory _without full path_.; - [x] `psi4/src/psi4/liboptions/liboptions_python.h` moved to `psi4/src/python_data_type.h` and ; `psi4/src/psi4/liboptions/python.cc` moved to `psi4/src/python_data_type.cc`. These are now compiled and linked as part of `core`, rather than `liboptions`. ## Questions; I note that `mrcc.cc` and `civect.h` include `pybind11.h`. It might be a good idea to move those bindings one level up, directly into `core` without spreading the dependency too deep in the code. Opinions?. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1358
https://github.com/psi4/psi4/pull/1358:1925,Testability,Test,Tests,1925,"k_libraries`/`target_include_directories` again. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Bump CMake minimum requirement to 3.8; - [x] Rewrote `psi4_add_module` CMake macro. Now it takes `bin` or `lib` argument, name of module, and list of sources. Note that the macro:; - Now defines **two** global lists of libraries `core` will link to, one for `bin`s and one for `lib`s. This is needed because `lib`s need to appear last in the link line to avoid missing symbols.; - Sets source file properties to generate position-independent code with symbols hidden by default.; - [x] Rewrote downstream `CMakeLists.txt` so that: ; - Sources are in a list, with one source file per line, for easier diff inspection.; - External dependencies are linked where they are used first.; - [x] Reordered `include`s in _some_ files according to the hierarchy: ; - For class implementation sources: header corresponding to current source file first (_.i.e._ `#include ""myself.h""` in `myself.cc`); - C++ standard headers, including `<omp.h>`; - Psi4 higher-level headers, _i.e._ `psi4/psifiles.h` &co.; - Psi4 headers in subdirectories _i.e._ `psi4/libmints/matrix.h` &co.; - Headers in current directory _without full path_.; - [x] `psi4/src/psi4/liboptions/liboptions_python.h` moved to `psi4/src/python_data_type.h` and ; `psi4/src/psi4/liboptions/python.cc` moved to `psi4/src/python_data_type.cc`. These are now compiled and linked as part of `core`, rather than `liboptions`. ## Questions; I note that `mrcc.cc` and `civect.h` include `pybind11.h`. It might be a good idea to move those bindings one level up, directly into `core` without spreading the dependency too deep in the code. Opinions?. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1358
https://github.com/psi4/psi4/pull/1358:1999,Testability,test,tests,1999,"k_libraries`/`target_include_directories` again. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Bump CMake minimum requirement to 3.8; - [x] Rewrote `psi4_add_module` CMake macro. Now it takes `bin` or `lib` argument, name of module, and list of sources. Note that the macro:; - Now defines **two** global lists of libraries `core` will link to, one for `bin`s and one for `lib`s. This is needed because `lib`s need to appear last in the link line to avoid missing symbols.; - Sets source file properties to generate position-independent code with symbols hidden by default.; - [x] Rewrote downstream `CMakeLists.txt` so that: ; - Sources are in a list, with one source file per line, for easier diff inspection.; - External dependencies are linked where they are used first.; - [x] Reordered `include`s in _some_ files according to the hierarchy: ; - For class implementation sources: header corresponding to current source file first (_.i.e._ `#include ""myself.h""` in `myself.cc`); - C++ standard headers, including `<omp.h>`; - Psi4 higher-level headers, _i.e._ `psi4/psifiles.h` &co.; - Psi4 headers in subdirectories _i.e._ `psi4/libmints/matrix.h` &co.; - Headers in current directory _without full path_.; - [x] `psi4/src/psi4/liboptions/liboptions_python.h` moved to `psi4/src/python_data_type.h` and ; `psi4/src/psi4/liboptions/python.cc` moved to `psi4/src/python_data_type.cc`. These are now compiled and linked as part of `core`, rather than `liboptions`. ## Questions; I note that `mrcc.cc` and `civect.h` include `pybind11.h`. It might be a good idea to move those bindings one level up, directly into `core` without spreading the dependency too deep in the code. Opinions?. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1358
https://github.com/psi4/psi4/pull/1358:2090,Testability,test,tests,2090,"k_libraries`/`target_include_directories` again. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Bump CMake minimum requirement to 3.8; - [x] Rewrote `psi4_add_module` CMake macro. Now it takes `bin` or `lib` argument, name of module, and list of sources. Note that the macro:; - Now defines **two** global lists of libraries `core` will link to, one for `bin`s and one for `lib`s. This is needed because `lib`s need to appear last in the link line to avoid missing symbols.; - Sets source file properties to generate position-independent code with symbols hidden by default.; - [x] Rewrote downstream `CMakeLists.txt` so that: ; - Sources are in a list, with one source file per line, for easier diff inspection.; - External dependencies are linked where they are used first.; - [x] Reordered `include`s in _some_ files according to the hierarchy: ; - For class implementation sources: header corresponding to current source file first (_.i.e._ `#include ""myself.h""` in `myself.cc`); - C++ standard headers, including `<omp.h>`; - Psi4 higher-level headers, _i.e._ `psi4/psifiles.h` &co.; - Psi4 headers in subdirectories _i.e._ `psi4/libmints/matrix.h` &co.; - Headers in current directory _without full path_.; - [x] `psi4/src/psi4/liboptions/liboptions_python.h` moved to `psi4/src/python_data_type.h` and ; `psi4/src/psi4/liboptions/python.cc` moved to `psi4/src/python_data_type.cc`. These are now compiled and linked as part of `core`, rather than `liboptions`. ## Questions; I note that `mrcc.cc` and `civect.h` include `pybind11.h`. It might be a good idea to move those bindings one level up, directly into `core` without spreading the dependency too deep in the code. Opinions?. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1358
https://github.com/psi4/psi4/issues/1361:111,Availability,fault,fault-error,111,"Oh, the things you find on [the forums](http://forum.psicode.org/t/sapt2-calculation-stops-with-a-segmentation-fault-error/1138)!. User reported a segfault in a SAPT2 computation. I attempted to run the input file they provided, in serial. ```; memory 100 gb. molecule AP_BMIMBF4; {; 0 1; C 2.71424 3.35160 2.17047; C 2.61539 3.07721 0.69258; C 3.27155 1.81549 0.13150; C 3.01216 0.53303 0.90532; C 3.45716 -0.78046 0.26355; C 3.05053 -0.99330 -1.18650; C 3.20741 -2.40360 -1.74586; C 2.55026 -3.52443 -0.96032; F 3.17228 4.13514 -0.00592; F 1.27554 3.06932 0.32664; F 3.66787 0.59838 2.12267; F 1.67182 0.43073 1.22024; F 3.82500 -0.17529 -1.99644; F 1.75160 -0.57213 -1.38634; F 3.25533 -3.78096 0.19399; F 1.27730 -3.18683 -0.58308; H 2.25306 4.32050 2.37079; H 3.76241 3.37061 2.47326; H 2.19469 2.57073 2.72526; H 4.35180 1.97066 0.10411; H 2.92157 1.70418 -0.89385; H 4.54579 -0.84429 0.31346; H 3.04476 -1.57689 0.88214; H 4.27328 -2.63006 -1.82364; H 2.78870 -2.38708 -2.75512; H 2.50060 -4.45608 -1.52780; --; 0 1; C -3.87349 2.91061 -1.65876; N -2.75856 1.99410 -1.41455; C -1.50263 2.33407 -0.94691; C -0.83120 1.17172 -0.73344; C -2.84151 0.66484 -1.47790; N -1.68346 0.14262 -1.07953; C -1.46679 -1.28577 -0.78728; C -1.38542 -1.51827 0.72247; C -1.59684 -2.99357 1.06458; C -1.46598 -3.24276 2.56923; H -3.87594 3.66326 -0.86989; H -3.76218 3.38868 -2.63477; H -4.79884 2.33892 -1.60023; H -1.20045 3.35521 -0.79404; H 0.15181 0.98994 -0.34830; H -3.72834 0.10789 -1.72147; H -0.55449 -1.60196 -1.29485; H -2.32462 -1.81798 -1.19641; H -0.41387 -1.17340 1.09480; H -2.16763 -0.92438 1.19970; H -0.87575 -3.61428 0.52075; H -2.59984 -3.27619 0.72873; H -0.46552 -2.96983 2.92459; H -2.19613 -2.64103 3.11964; H -1.63860 -4.29508 2.81528; B -4.99249 -0.20013 0.53015; F -4.36607 -1.36290 -0.02014; F -5.60912 0.50296 -0.55477; F -3.96502 0.63394 1.05703; F -5.91416 -0.53978 1.49939. units angstrom; no_reorient; symmetry c1; }. set{ basis 6-311+G(d,p); scf_type df. DF_BASIS_SAPT 6-311+G(",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1361
https://github.com/psi4/psi4/issues/1361:2096,Availability,error,error,2096,"6355; C 3.05053 -0.99330 -1.18650; C 3.20741 -2.40360 -1.74586; C 2.55026 -3.52443 -0.96032; F 3.17228 4.13514 -0.00592; F 1.27554 3.06932 0.32664; F 3.66787 0.59838 2.12267; F 1.67182 0.43073 1.22024; F 3.82500 -0.17529 -1.99644; F 1.75160 -0.57213 -1.38634; F 3.25533 -3.78096 0.19399; F 1.27730 -3.18683 -0.58308; H 2.25306 4.32050 2.37079; H 3.76241 3.37061 2.47326; H 2.19469 2.57073 2.72526; H 4.35180 1.97066 0.10411; H 2.92157 1.70418 -0.89385; H 4.54579 -0.84429 0.31346; H 3.04476 -1.57689 0.88214; H 4.27328 -2.63006 -1.82364; H 2.78870 -2.38708 -2.75512; H 2.50060 -4.45608 -1.52780; --; 0 1; C -3.87349 2.91061 -1.65876; N -2.75856 1.99410 -1.41455; C -1.50263 2.33407 -0.94691; C -0.83120 1.17172 -0.73344; C -2.84151 0.66484 -1.47790; N -1.68346 0.14262 -1.07953; C -1.46679 -1.28577 -0.78728; C -1.38542 -1.51827 0.72247; C -1.59684 -2.99357 1.06458; C -1.46598 -3.24276 2.56923; H -3.87594 3.66326 -0.86989; H -3.76218 3.38868 -2.63477; H -4.79884 2.33892 -1.60023; H -1.20045 3.35521 -0.79404; H 0.15181 0.98994 -0.34830; H -3.72834 0.10789 -1.72147; H -0.55449 -1.60196 -1.29485; H -2.32462 -1.81798 -1.19641; H -0.41387 -1.17340 1.09480; H -2.16763 -0.92438 1.19970; H -0.87575 -3.61428 0.52075; H -2.59984 -3.27619 0.72873; H -0.46552 -2.96983 2.92459; H -2.19613 -2.64103 3.11964; H -1.63860 -4.29508 2.81528; B -4.99249 -0.20013 0.53015; F -4.36607 -1.36290 -0.02014; F -5.60912 0.50296 -0.55477; F -3.96502 0.63394 1.05703; F -5.91416 -0.53978 1.49939. units angstrom; no_reorient; symmetry c1; }. set{ basis 6-311+G(d,p); scf_type df. DF_BASIS_SAPT 6-311+G(d,p); SAPT_DFT_FUNCTIONAL B3LYP-D. }; energy('sapt2', molecule=AP_BMIMBF4); ```. I received an error message that I ran out of memory. The output file indicates failure occurred during the SAPT2 part, which reported `Estimated memory usage: 64566.6 MB`. Its estimate is off by at least 30 GB, which is not good. The user didn't specify the version they were using beyond `conda`, but I observed this on `1.3a2.dev122`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1361
https://github.com/psi4/psi4/issues/1361:2162,Availability,failure,failure,2162,"6355; C 3.05053 -0.99330 -1.18650; C 3.20741 -2.40360 -1.74586; C 2.55026 -3.52443 -0.96032; F 3.17228 4.13514 -0.00592; F 1.27554 3.06932 0.32664; F 3.66787 0.59838 2.12267; F 1.67182 0.43073 1.22024; F 3.82500 -0.17529 -1.99644; F 1.75160 -0.57213 -1.38634; F 3.25533 -3.78096 0.19399; F 1.27730 -3.18683 -0.58308; H 2.25306 4.32050 2.37079; H 3.76241 3.37061 2.47326; H 2.19469 2.57073 2.72526; H 4.35180 1.97066 0.10411; H 2.92157 1.70418 -0.89385; H 4.54579 -0.84429 0.31346; H 3.04476 -1.57689 0.88214; H 4.27328 -2.63006 -1.82364; H 2.78870 -2.38708 -2.75512; H 2.50060 -4.45608 -1.52780; --; 0 1; C -3.87349 2.91061 -1.65876; N -2.75856 1.99410 -1.41455; C -1.50263 2.33407 -0.94691; C -0.83120 1.17172 -0.73344; C -2.84151 0.66484 -1.47790; N -1.68346 0.14262 -1.07953; C -1.46679 -1.28577 -0.78728; C -1.38542 -1.51827 0.72247; C -1.59684 -2.99357 1.06458; C -1.46598 -3.24276 2.56923; H -3.87594 3.66326 -0.86989; H -3.76218 3.38868 -2.63477; H -4.79884 2.33892 -1.60023; H -1.20045 3.35521 -0.79404; H 0.15181 0.98994 -0.34830; H -3.72834 0.10789 -1.72147; H -0.55449 -1.60196 -1.29485; H -2.32462 -1.81798 -1.19641; H -0.41387 -1.17340 1.09480; H -2.16763 -0.92438 1.19970; H -0.87575 -3.61428 0.52075; H -2.59984 -3.27619 0.72873; H -0.46552 -2.96983 2.92459; H -2.19613 -2.64103 3.11964; H -1.63860 -4.29508 2.81528; B -4.99249 -0.20013 0.53015; F -4.36607 -1.36290 -0.02014; F -5.60912 0.50296 -0.55477; F -3.96502 0.63394 1.05703; F -5.91416 -0.53978 1.49939. units angstrom; no_reorient; symmetry c1; }. set{ basis 6-311+G(d,p); scf_type df. DF_BASIS_SAPT 6-311+G(d,p); SAPT_DFT_FUNCTIONAL B3LYP-D. }; energy('sapt2', molecule=AP_BMIMBF4); ```. I received an error message that I ran out of memory. The output file indicates failure occurred during the SAPT2 part, which reported `Estimated memory usage: 64566.6 MB`. Its estimate is off by at least 30 GB, which is not good. The user didn't specify the version they were using beyond `conda`, but I observed this on `1.3a2.dev122`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1361
https://github.com/psi4/psi4/issues/1361:2039,Energy Efficiency,energy,energy,2039,"6355; C 3.05053 -0.99330 -1.18650; C 3.20741 -2.40360 -1.74586; C 2.55026 -3.52443 -0.96032; F 3.17228 4.13514 -0.00592; F 1.27554 3.06932 0.32664; F 3.66787 0.59838 2.12267; F 1.67182 0.43073 1.22024; F 3.82500 -0.17529 -1.99644; F 1.75160 -0.57213 -1.38634; F 3.25533 -3.78096 0.19399; F 1.27730 -3.18683 -0.58308; H 2.25306 4.32050 2.37079; H 3.76241 3.37061 2.47326; H 2.19469 2.57073 2.72526; H 4.35180 1.97066 0.10411; H 2.92157 1.70418 -0.89385; H 4.54579 -0.84429 0.31346; H 3.04476 -1.57689 0.88214; H 4.27328 -2.63006 -1.82364; H 2.78870 -2.38708 -2.75512; H 2.50060 -4.45608 -1.52780; --; 0 1; C -3.87349 2.91061 -1.65876; N -2.75856 1.99410 -1.41455; C -1.50263 2.33407 -0.94691; C -0.83120 1.17172 -0.73344; C -2.84151 0.66484 -1.47790; N -1.68346 0.14262 -1.07953; C -1.46679 -1.28577 -0.78728; C -1.38542 -1.51827 0.72247; C -1.59684 -2.99357 1.06458; C -1.46598 -3.24276 2.56923; H -3.87594 3.66326 -0.86989; H -3.76218 3.38868 -2.63477; H -4.79884 2.33892 -1.60023; H -1.20045 3.35521 -0.79404; H 0.15181 0.98994 -0.34830; H -3.72834 0.10789 -1.72147; H -0.55449 -1.60196 -1.29485; H -2.32462 -1.81798 -1.19641; H -0.41387 -1.17340 1.09480; H -2.16763 -0.92438 1.19970; H -0.87575 -3.61428 0.52075; H -2.59984 -3.27619 0.72873; H -0.46552 -2.96983 2.92459; H -2.19613 -2.64103 3.11964; H -1.63860 -4.29508 2.81528; B -4.99249 -0.20013 0.53015; F -4.36607 -1.36290 -0.02014; F -5.60912 0.50296 -0.55477; F -3.96502 0.63394 1.05703; F -5.91416 -0.53978 1.49939. units angstrom; no_reorient; symmetry c1; }. set{ basis 6-311+G(d,p); scf_type df. DF_BASIS_SAPT 6-311+G(d,p); SAPT_DFT_FUNCTIONAL B3LYP-D. }; energy('sapt2', molecule=AP_BMIMBF4); ```. I received an error message that I ran out of memory. The output file indicates failure occurred during the SAPT2 part, which reported `Estimated memory usage: 64566.6 MB`. Its estimate is off by at least 30 GB, which is not good. The user didn't specify the version they were using beyond `conda`, but I observed this on `1.3a2.dev122`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1361
https://github.com/psi4/psi4/issues/1361:2102,Integrability,message,message,2102,"6355; C 3.05053 -0.99330 -1.18650; C 3.20741 -2.40360 -1.74586; C 2.55026 -3.52443 -0.96032; F 3.17228 4.13514 -0.00592; F 1.27554 3.06932 0.32664; F 3.66787 0.59838 2.12267; F 1.67182 0.43073 1.22024; F 3.82500 -0.17529 -1.99644; F 1.75160 -0.57213 -1.38634; F 3.25533 -3.78096 0.19399; F 1.27730 -3.18683 -0.58308; H 2.25306 4.32050 2.37079; H 3.76241 3.37061 2.47326; H 2.19469 2.57073 2.72526; H 4.35180 1.97066 0.10411; H 2.92157 1.70418 -0.89385; H 4.54579 -0.84429 0.31346; H 3.04476 -1.57689 0.88214; H 4.27328 -2.63006 -1.82364; H 2.78870 -2.38708 -2.75512; H 2.50060 -4.45608 -1.52780; --; 0 1; C -3.87349 2.91061 -1.65876; N -2.75856 1.99410 -1.41455; C -1.50263 2.33407 -0.94691; C -0.83120 1.17172 -0.73344; C -2.84151 0.66484 -1.47790; N -1.68346 0.14262 -1.07953; C -1.46679 -1.28577 -0.78728; C -1.38542 -1.51827 0.72247; C -1.59684 -2.99357 1.06458; C -1.46598 -3.24276 2.56923; H -3.87594 3.66326 -0.86989; H -3.76218 3.38868 -2.63477; H -4.79884 2.33892 -1.60023; H -1.20045 3.35521 -0.79404; H 0.15181 0.98994 -0.34830; H -3.72834 0.10789 -1.72147; H -0.55449 -1.60196 -1.29485; H -2.32462 -1.81798 -1.19641; H -0.41387 -1.17340 1.09480; H -2.16763 -0.92438 1.19970; H -0.87575 -3.61428 0.52075; H -2.59984 -3.27619 0.72873; H -0.46552 -2.96983 2.92459; H -2.19613 -2.64103 3.11964; H -1.63860 -4.29508 2.81528; B -4.99249 -0.20013 0.53015; F -4.36607 -1.36290 -0.02014; F -5.60912 0.50296 -0.55477; F -3.96502 0.63394 1.05703; F -5.91416 -0.53978 1.49939. units angstrom; no_reorient; symmetry c1; }. set{ basis 6-311+G(d,p); scf_type df. DF_BASIS_SAPT 6-311+G(d,p); SAPT_DFT_FUNCTIONAL B3LYP-D. }; energy('sapt2', molecule=AP_BMIMBF4); ```. I received an error message that I ran out of memory. The output file indicates failure occurred during the SAPT2 part, which reported `Estimated memory usage: 64566.6 MB`. Its estimate is off by at least 30 GB, which is not good. The user didn't specify the version they were using beyond `conda`, but I observed this on `1.3a2.dev122`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1361
https://github.com/psi4/psi4/issues/1362:119,Performance,optimiz,optimized,119,"As suggested by @andysim on slack, the 2D array of ShellPair objects initialized in eribase.cc (linked below) could be optimized by screening out negligibly small terms. ; https://github.com/psi4/psi4/blob/206420b5c9765140f5ffd86777f694a2547c8002/psi4/src/psi4/libmints/eribase.cc#L1905; The two ideas he proposed are:; 1) Shell pair (block) screening: ignore entire shell pairs only when all of their primitive pairs have small enough overlap, otherwise keep the entire shell pair; 2) Primitive pair (fine-grained) screening: individually ignore primitive pairs with small enough overlap, allowing part (or all) of a shell pair to be discarded. For both approaches, I counted how many primitive pairs would be removed in this function over a range of systems/basis sets:; ![image](https://user-images.githubusercontent.com/16376046/48686241-ee3f3700-eb88-11e8-8e69-04ffabca9b39.png); Note that this considers a pair of primitives negligible if the overlap term (shown below) is less than a cutoff of 10e-10, which will likely have to be tuned; https://github.com/psi4/psi4/blob/206420b5c9765140f5ffd86777f694a2547c8002/psi4/src/psi4/libmints/eribase.cc#L2026. Block screening would definitely be easier to implement, but it doesn't remove as many primitive pairs as the fine-grained screening. However, the discrepancy between the two methods becomes smaller with both the size of the system and basis set. . Is this discrepancy small enough to justify block screening, or should we go with fine-grained screening? (Also, should I change up the overlap-cutoff / basis sets / test molecules?)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1362
https://github.com/psi4/psi4/issues/1362:1038,Performance,tune,tuned,1038,"As suggested by @andysim on slack, the 2D array of ShellPair objects initialized in eribase.cc (linked below) could be optimized by screening out negligibly small terms. ; https://github.com/psi4/psi4/blob/206420b5c9765140f5ffd86777f694a2547c8002/psi4/src/psi4/libmints/eribase.cc#L1905; The two ideas he proposed are:; 1) Shell pair (block) screening: ignore entire shell pairs only when all of their primitive pairs have small enough overlap, otherwise keep the entire shell pair; 2) Primitive pair (fine-grained) screening: individually ignore primitive pairs with small enough overlap, allowing part (or all) of a shell pair to be discarded. For both approaches, I counted how many primitive pairs would be removed in this function over a range of systems/basis sets:; ![image](https://user-images.githubusercontent.com/16376046/48686241-ee3f3700-eb88-11e8-8e69-04ffabca9b39.png); Note that this considers a pair of primitives negligible if the overlap term (shown below) is less than a cutoff of 10e-10, which will likely have to be tuned; https://github.com/psi4/psi4/blob/206420b5c9765140f5ffd86777f694a2547c8002/psi4/src/psi4/libmints/eribase.cc#L2026. Block screening would definitely be easier to implement, but it doesn't remove as many primitive pairs as the fine-grained screening. However, the discrepancy between the two methods becomes smaller with both the size of the system and basis set. . Is this discrepancy small enough to justify block screening, or should we go with fine-grained screening? (Also, should I change up the overlap-cutoff / basis sets / test molecules?)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1362
https://github.com/psi4/psi4/issues/1362:1576,Testability,test,test,1576,"As suggested by @andysim on slack, the 2D array of ShellPair objects initialized in eribase.cc (linked below) could be optimized by screening out negligibly small terms. ; https://github.com/psi4/psi4/blob/206420b5c9765140f5ffd86777f694a2547c8002/psi4/src/psi4/libmints/eribase.cc#L1905; The two ideas he proposed are:; 1) Shell pair (block) screening: ignore entire shell pairs only when all of their primitive pairs have small enough overlap, otherwise keep the entire shell pair; 2) Primitive pair (fine-grained) screening: individually ignore primitive pairs with small enough overlap, allowing part (or all) of a shell pair to be discarded. For both approaches, I counted how many primitive pairs would be removed in this function over a range of systems/basis sets:; ![image](https://user-images.githubusercontent.com/16376046/48686241-ee3f3700-eb88-11e8-8e69-04ffabca9b39.png); Note that this considers a pair of primitives negligible if the overlap term (shown below) is less than a cutoff of 10e-10, which will likely have to be tuned; https://github.com/psi4/psi4/blob/206420b5c9765140f5ffd86777f694a2547c8002/psi4/src/psi4/libmints/eribase.cc#L2026. Block screening would definitely be easier to implement, but it doesn't remove as many primitive pairs as the fine-grained screening. However, the discrepancy between the two methods becomes smaller with both the size of the system and basis set. . Is this discrepancy small enough to justify block screening, or should we go with fine-grained screening? (Also, should I change up the overlap-cutoff / basis sets / test molecules?)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1362
https://github.com/psi4/psi4/pull/1363:185,Testability,test,test,185,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Make failing `psi4 --test` to return non-zero status. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1363
https://github.com/psi4/psi4/pull/1363:240,Testability,Test,Tests,240,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Make failing `psi4 --test` to return non-zero status. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1363
https://github.com/psi4/psi4/pull/1363:316,Testability,test,tests,316,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Make failing `psi4 --test` to return non-zero status. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1363
https://github.com/psi4/psi4/pull/1363:407,Testability,test,tests,407,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Make failing `psi4 --test` to return non-zero status. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1363
https://github.com/psi4/psi4/pull/1364:142,Testability,test,tests,142,## Description; Added casts to long int to prevent integer overflow in SAPT amplitudes. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1364
https://github.com/psi4/psi4/pull/1364:233,Testability,test,tests,233,## Description; Added casts to long int to prevent integer overflow in SAPT amplitudes. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1364
https://github.com/psi4/psi4/pull/1365:31,Testability,test,tests,31,"## Description; Previous nbody tests take long time. I have changed the methods, basis sets and/or molecules to make faster tests. ## Status; - [ ] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1365
https://github.com/psi4/psi4/pull/1365:124,Testability,test,tests,124,"## Description; Previous nbody tests take long time. I have changed the methods, basis sets and/or molecules to make faster tests. ## Status; - [ ] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1365
https://github.com/psi4/psi4/issues/1366:539,Energy Efficiency,energy,energy,539,"With a recent master (1.3a2.dev179, Git: Rev {master} c46660a) the following calculation fails at least 1/10 times. AMD Ryzen, Intel2018 compiler, compiled again conda libraries. `for i in {1..10}; do psi4dev -s /scratch/ -n 6 water.in out ; done`. water.in:; ```memory 4 GiB; molecule water {; O 0.000000000000 -0.000000000000 0.065656839916 ; H -0.000000000000 0.758561000000 -0.521010847646 ; H 0.000000000000 -0.758561000000 -0.521010847646 ; }; set {; scf_type df; basis def2-QZVP; dft_spherical_points 590; dft_radial_points 100; }; energy('wb97X-V'); ```; The segfault's backtrace contains `psi.VBase.build_collocation_cache`.; Turning the collocation grid _off_ fixes the issue.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1366
https://github.com/psi4/psi4/issues/1367:983,Usability,simpl,simpler,983,"I'm pretty sure that python3 is now mandatory for psi4. Having just spotted the database abilities (that could turn out to be pretty useful for some current work), I've discovered that the ixyz2database.py script uses raw_input() that has been deprecated in python3. Replacing the 5 instances in psi4/share/psi4/scripts/ixyz2database.py and the one in psi4/driver/qcdb/psiutil.py gets past the questions about the database it will create. I was going to submit a pull request with these changes in but I there are other issues with this script: ixyz2database.py uses the deprecated method qcdb.Molecule.init_with_xyz() and the suggested replacement, qcdb.Molecule.from_string() doesn't appear to be a direct drop-in replacement. The documentation for qcdb.Molecule.from_string() is pretty minimal too. I'll poke at that part a bit more: it could well be some of my dubious geometries that are causing the ""Unprocessable Molecule remanents under xyz+:"" exceptions! I'll try with some simpler structures. There's also a raw_input() in psi4/share/psi4/scripts/setenv.py",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1367
https://github.com/psi4/psi4/pull/1368:322,Testability,Test,Tests,322,"## Description; This is part of *Psi4* porting to Windows (#933). This is intended as a replacement for *Appveyor*, which has 60 min limit. *Azure* allow to run up to 360 min!. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] CI for Windows on *Azure*. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1368
https://github.com/psi4/psi4/pull/1368:396,Testability,test,tests,396,"## Description; This is part of *Psi4* porting to Windows (#933). This is intended as a replacement for *Appveyor*, which has 60 min limit. *Azure* allow to run up to 360 min!. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] CI for Windows on *Azure*. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1368
https://github.com/psi4/psi4/pull/1368:487,Testability,test,tests,487,"## Description; This is part of *Psi4* porting to Windows (#933). This is intended as a replacement for *Appveyor*, which has 60 min limit. *Azure* allow to run up to 360 min!. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] CI for Windows on *Azure*. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1368
https://github.com/psi4/psi4/pull/1369:110,Testability,test,test,110,## Description; Ensures JSON is written back to file when called from CLI. Not entirely sure of a good way to test this however to ensure that it is not broken again without a fairly involved script. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1369
https://github.com/psi4/psi4/issues/1370:193,Energy Efficiency,energy,energy,193,"The following input file:; ```; molecule h2o {; H; C 1 r1; O 2 r2 1 a1 ; O 2 r2 1 a1 3 180 . r1 = 1.085; r2 = 1.249; a1 = 123.8; }. set reference uhf ; set basis sto-3g. set SOCC [0, 0, 0, 1]. energy('scf'); ```; gives an SCF with a single electron. At present, Psi seems to assume `DOCC` is zero if `DOCC` isn't set but `SOCC` is.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1370
https://github.com/psi4/psi4/issues/1372:114,Integrability,rout,routine,114,Large (over 1000 bfs ) CCSD(T) calculations are in principle possible with DF and FNO approximation but e.g. this routine may require very large amounts of memory and is possibly not accounted for in the memory estimation.; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/dftensor.cc#L134,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1372
https://github.com/psi4/psi4/pull/1374:199,Testability,Test,Tests,199,## Description; Fixes a bug that prohibits computing stability analysis for wfns with an X2C Hamiltonian.; Previously the relativistic basis was not set which made mints unhappy. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1374
https://github.com/psi4/psi4/pull/1374:273,Testability,test,tests,273,## Description; Fixes a bug that prohibits computing stability analysis for wfns with an X2C Hamiltonian.; Previously the relativistic basis was not set which made mints unhappy. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1374
https://github.com/psi4/psi4/pull/1374:364,Testability,test,tests,364,## Description; Fixes a bug that prohibits computing stability analysis for wfns with an X2C Hamiltonian.; Previously the relativistic basis was not set which made mints unhappy. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1374
https://github.com/psi4/psi4/issues/1375:458,Availability,redundant,redundant,458,"# PsiPEP2: Rationalize Variable Access. Pursuant to #883, common driver migration, the War Against Globals, and [QCSchema](https://github.com/molssi/qcschema), we want clear programmatic access to QC quantities, and we want them on the Wfn/JSONrec, not off `Process.environment.globals`. First step toward this is duplication of `P::e.globals` onto `Wfn`. Unfortunately, the syntax and methods don't align (see table below). Also unfortunately, we have many redundant `get_`s. This PsiPEP proposes the following syntax changes and additions. ### Final Proposal (dynamic). * **W-C** means C-side access to `psi4.core.Wavefunction`; * **W-Py** means Py-side access to `psi4.core.Wavefunction`; * **G-Py** means Py-side access to `psi4.core` globals. | Now `Wavefunction` | Now `psi4.core` | Proposed Both | W-C | W-Py | G-Py | doc |; |-----|----|----|---|---|---|---|; | | has_variable | has_scalar_variable |y|y|y| is float var set ? |; | get_variable | get_variable | scalar_variable |y|y|y| return float var value |; | set_variable | set_variable | set_scalar_variable |y|y|y | set float var value |; | | | del_scalar_variable |y|y|y | unset float var |; | variables | get_variables | scalar_variables |y|y|y| return dict of all float vars |; | |; | | | has_array_variable |y|y|y| is array var set ? |; | get_array | get_array_variable | array_variable |y|y|y| return array var value |; | set_array | set_array_variable | set_array_variable |y|y|y| set array var value |; | | | del_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1375
https://github.com/psi4/psi4/issues/1375:3593,Availability,down,downstream,3593,"any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars |. ### Original Proposal (static). | Now `Wavefunction` | Now `psi4.core` | Proposed Both | doc |; |-----|----|----|---|; | | has_variable | has_variable | is float var set ? |; | get_variable | get_variable | variable | return float var value |; | set_variable | set_variable | set_variable | set float var value |; | | | del_variable | unset float var |; | |; | variables | get_variables | variables | return dict of float vars |; | | clean_variables | clean_variables | unset all float vars |; | |; | | | has_array_variable | is array var set ? |; | get_array | get_array_variable | array_variable | return array var value |; | set_array | set_array_variable | set_array_variable | set array var value |; | | | del_array_variable | unset array var |; | |; | arrays | get_array_variables | array_variables | return dict of array vars |; | | | clean_array_variables | unset all array vars |. ### Questions. - [x] No, nothing will break immediately. Use of old syntax will yield runtime `FutureWarning`s if called from Python or compile-time `PSI_DEPRECATED` warnings if called from C++. Old syntax will stop working in Psi4 v1.4. - [x] Note that QCDB (common driver) and QCSchema (I think) merge float vars and array vars into single ~dict. Do we want to consider single access / multi storage in the C++ classes so number of accessors is halved? **EDIT** Answer: yes (see table above), going with multi storage C-side, multi access C-side, unified access Py-side. - Any other changes to suggested syntax. - Whole point of posting this as a PEP instead of leaving it on core-dev is so users/downstream/interested parties can weigh in. Please do so.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1375
https://github.com/psi4/psi4/issues/1375:23,Modifiability,Variab,Variable,23,"# PsiPEP2: Rationalize Variable Access. Pursuant to #883, common driver migration, the War Against Globals, and [QCSchema](https://github.com/molssi/qcschema), we want clear programmatic access to QC quantities, and we want them on the Wfn/JSONrec, not off `Process.environment.globals`. First step toward this is duplication of `P::e.globals` onto `Wfn`. Unfortunately, the syntax and methods don't align (see table below). Also unfortunately, we have many redundant `get_`s. This PsiPEP proposes the following syntax changes and additions. ### Final Proposal (dynamic). * **W-C** means C-side access to `psi4.core.Wavefunction`; * **W-Py** means Py-side access to `psi4.core.Wavefunction`; * **G-Py** means Py-side access to `psi4.core` globals. | Now `Wavefunction` | Now `psi4.core` | Proposed Both | W-C | W-Py | G-Py | doc |; |-----|----|----|---|---|---|---|; | | has_variable | has_scalar_variable |y|y|y| is float var set ? |; | get_variable | get_variable | scalar_variable |y|y|y| return float var value |; | set_variable | set_variable | set_scalar_variable |y|y|y | set float var value |; | | | del_scalar_variable |y|y|y | unset float var |; | variables | get_variables | scalar_variables |y|y|y| return dict of all float vars |; | |; | | | has_array_variable |y|y|y| is array var set ? |; | get_array | get_array_variable | array_variable |y|y|y| return array var value |; | set_array | set_array_variable | set_array_variable |y|y|y| set array var value |; | | | del_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1375
https://github.com/psi4/psi4/issues/1375:1158,Modifiability,variab,variables,1158,"s don't align (see table below). Also unfortunately, we have many redundant `get_`s. This PsiPEP proposes the following syntax changes and additions. ### Final Proposal (dynamic). * **W-C** means C-side access to `psi4.core.Wavefunction`; * **W-Py** means Py-side access to `psi4.core.Wavefunction`; * **G-Py** means Py-side access to `psi4.core` globals. | Now `Wavefunction` | Now `psi4.core` | Proposed Both | W-C | W-Py | G-Py | doc |; |-----|----|----|---|---|---|---|; | | has_variable | has_scalar_variable |y|y|y| is float var set ? |; | get_variable | get_variable | scalar_variable |y|y|y| return float var value |; | set_variable | set_variable | set_scalar_variable |y|y|y | set float var value |; | | | del_scalar_variable |y|y|y | unset float var |; | variables | get_variables | scalar_variables |y|y|y| return dict of all float vars |; | |; | | | has_array_variable |y|y|y| is array var set ? |; | get_array | get_array_variable | array_variable |y|y|y| return array var value |; | set_array | set_array_variable | set_array_variable |y|y|y| set array var value |; | | | del_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars |. ### Original Proposal (static). | Now `Wavefunction` | Now `psi4.core` | Proposed Both | doc |; |-----|----|----|---|; | | has_variable | has_variable | is float var set ? |; | get_variable | get_variable | variable | return float var value |; | set_variable | set_variable | set_variable | set float var value |; | | | del_variable | unset float var |; | |; | variables | get_variables |",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1375
https://github.com/psi4/psi4/issues/1375:1687,Modifiability,variab,variable,1687,"s don't align (see table below). Also unfortunately, we have many redundant `get_`s. This PsiPEP proposes the following syntax changes and additions. ### Final Proposal (dynamic). * **W-C** means C-side access to `psi4.core.Wavefunction`; * **W-Py** means Py-side access to `psi4.core.Wavefunction`; * **G-Py** means Py-side access to `psi4.core` globals. | Now `Wavefunction` | Now `psi4.core` | Proposed Both | W-C | W-Py | G-Py | doc |; |-----|----|----|---|---|---|---|; | | has_variable | has_scalar_variable |y|y|y| is float var set ? |; | get_variable | get_variable | scalar_variable |y|y|y| return float var value |; | set_variable | set_variable | set_scalar_variable |y|y|y | set float var value |; | | | del_scalar_variable |y|y|y | unset float var |; | variables | get_variables | scalar_variables |y|y|y| return dict of all float vars |; | |; | | | has_array_variable |y|y|y| is array var set ? |; | get_array | get_array_variable | array_variable |y|y|y| return array var value |; | set_array | set_array_variable | set_array_variable |y|y|y| set array var value |; | | | del_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars |. ### Original Proposal (static). | Now `Wavefunction` | Now `psi4.core` | Proposed Both | doc |; |-----|----|----|---|; | | has_variable | has_variable | is float var set ? |; | get_variable | get_variable | variable | return float var value |; | set_variable | set_variable | set_variable | set float var value |; | | | del_variable | unset float var |; | |; | variables | get_variables |",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1375
https://github.com/psi4/psi4/issues/1375:1865,Modifiability,variab,variables,1865,"s don't align (see table below). Also unfortunately, we have many redundant `get_`s. This PsiPEP proposes the following syntax changes and additions. ### Final Proposal (dynamic). * **W-C** means C-side access to `psi4.core.Wavefunction`; * **W-Py** means Py-side access to `psi4.core.Wavefunction`; * **G-Py** means Py-side access to `psi4.core` globals. | Now `Wavefunction` | Now `psi4.core` | Proposed Both | W-C | W-Py | G-Py | doc |; |-----|----|----|---|---|---|---|; | | has_variable | has_scalar_variable |y|y|y| is float var set ? |; | get_variable | get_variable | scalar_variable |y|y|y| return float var value |; | set_variable | set_variable | set_scalar_variable |y|y|y | set float var value |; | | | del_scalar_variable |y|y|y | unset float var |; | variables | get_variables | scalar_variables |y|y|y| return dict of all float vars |; | |; | | | has_array_variable |y|y|y| is array var set ? |; | get_array | get_array_variable | array_variable |y|y|y| return array var value |; | set_array | set_array_variable | set_array_variable |y|y|y| set array var value |; | | | del_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars |. ### Original Proposal (static). | Now `Wavefunction` | Now `psi4.core` | Proposed Both | doc |; |-----|----|----|---|; | | has_variable | has_variable | is float var set ? |; | get_variable | get_variable | variable | return float var value |; | set_variable | set_variable | set_variable | set float var value |; | | | del_variable | unset float var |; | |; | variables | get_variables |",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1375
https://github.com/psi4/psi4/issues/1375:2211,Modifiability,variab,variable,2211,"l_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars |. ### Original Proposal (static). | Now `Wavefunction` | Now `psi4.core` | Proposed Both | doc |; |-----|----|----|---|; | | has_variable | has_variable | is float var set ? |; | get_variable | get_variable | variable | return float var value |; | set_variable | set_variable | set_variable | set float var value |; | | | del_variable | unset float var |; | |; | variables | get_variables | variables | return dict of float vars |; | | clean_variables | clean_variables | unset all float vars |; | |; | | | has_array_variable | is array var set ? |; | get_array | get_array_variable | array_variable | return array var value |; | set_array | set_array_variable | set_array_variable | set array var value |; | | | del_array_variable | unset array var |; | |; | arrays | get_array_variables | array_variables | return dict of array vars |; | | | clean_array_variables | unset all array vars |. ### Questions. - [x] No, nothing will break immediately. Use of old syntax will yield runtime `FutureWarning`s if called from Python or compile-time `PSI_DEPRECATED` warnings if called from C++. Old syntax will stop working in Psi4 v1.4. - [x] Note that QCDB (common driver) and QCSchema (I think) merge float vars and array vars into single ~dict. Do we want to consider single access / multi storage in the C++ classes so number of accessors is halved? **EDIT** Answer: yes (see table above), going with multi storage C-side, multi access C-side, unified access Py-side. - Any other ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1375
https://github.com/psi4/psi4/issues/1375:2365,Modifiability,variab,variables,2365,"l_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars |. ### Original Proposal (static). | Now `Wavefunction` | Now `psi4.core` | Proposed Both | doc |; |-----|----|----|---|; | | has_variable | has_variable | is float var set ? |; | get_variable | get_variable | variable | return float var value |; | set_variable | set_variable | set_variable | set float var value |; | | | del_variable | unset float var |; | |; | variables | get_variables | variables | return dict of float vars |; | | clean_variables | clean_variables | unset all float vars |; | |; | | | has_array_variable | is array var set ? |; | get_array | get_array_variable | array_variable | return array var value |; | set_array | set_array_variable | set_array_variable | set array var value |; | | | del_array_variable | unset array var |; | |; | arrays | get_array_variables | array_variables | return dict of array vars |; | | | clean_array_variables | unset all array vars |. ### Questions. - [x] No, nothing will break immediately. Use of old syntax will yield runtime `FutureWarning`s if called from Python or compile-time `PSI_DEPRECATED` warnings if called from C++. Old syntax will stop working in Psi4 v1.4. - [x] Note that QCDB (common driver) and QCSchema (I think) merge float vars and array vars into single ~dict. Do we want to consider single access / multi storage in the C++ classes so number of accessors is halved? **EDIT** Answer: yes (see table above), going with multi storage C-side, multi access C-side, unified access Py-side. - Any other ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1375
https://github.com/psi4/psi4/issues/1375:2393,Modifiability,variab,variables,2393,"l_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars |. ### Original Proposal (static). | Now `Wavefunction` | Now `psi4.core` | Proposed Both | doc |; |-----|----|----|---|; | | has_variable | has_variable | is float var set ? |; | get_variable | get_variable | variable | return float var value |; | set_variable | set_variable | set_variable | set float var value |; | | | del_variable | unset float var |; | |; | variables | get_variables | variables | return dict of float vars |; | | clean_variables | clean_variables | unset all float vars |; | |; | | | has_array_variable | is array var set ? |; | get_array | get_array_variable | array_variable | return array var value |; | set_array | set_array_variable | set_array_variable | set array var value |; | | | del_array_variable | unset array var |; | |; | arrays | get_array_variables | array_variables | return dict of array vars |; | | | clean_array_variables | unset all array vars |. ### Questions. - [x] No, nothing will break immediately. Use of old syntax will yield runtime `FutureWarning`s if called from Python or compile-time `PSI_DEPRECATED` warnings if called from C++. Old syntax will stop working in Psi4 v1.4. - [x] Note that QCDB (common driver) and QCSchema (I think) merge float vars and array vars into single ~dict. Do we want to consider single access / multi storage in the C++ classes so number of accessors is halved? **EDIT** Answer: yes (see table above), going with multi storage C-side, multi access C-side, unified access Py-side. - Any other ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1375
https://github.com/psi4/psi4/issues/1375:458,Safety,redund,redundant,458,"# PsiPEP2: Rationalize Variable Access. Pursuant to #883, common driver migration, the War Against Globals, and [QCSchema](https://github.com/molssi/qcschema), we want clear programmatic access to QC quantities, and we want them on the Wfn/JSONrec, not off `Process.environment.globals`. First step toward this is duplication of `P::e.globals` onto `Wfn`. Unfortunately, the syntax and methods don't align (see table below). Also unfortunately, we have many redundant `get_`s. This PsiPEP proposes the following syntax changes and additions. ### Final Proposal (dynamic). * **W-C** means C-side access to `psi4.core.Wavefunction`; * **W-Py** means Py-side access to `psi4.core.Wavefunction`; * **G-Py** means Py-side access to `psi4.core` globals. | Now `Wavefunction` | Now `psi4.core` | Proposed Both | W-C | W-Py | G-Py | doc |; |-----|----|----|---|---|---|---|; | | has_variable | has_scalar_variable |y|y|y| is float var set ? |; | get_variable | get_variable | scalar_variable |y|y|y| return float var value |; | set_variable | set_variable | set_scalar_variable |y|y|y | set float var value |; | | | del_scalar_variable |y|y|y | unset float var |; | variables | get_variables | scalar_variables |y|y|y| return dict of all float vars |; | |; | | | has_array_variable |y|y|y| is array var set ? |; | get_array | get_array_variable | array_variable |y|y|y| return array var value |; | set_array | set_array_variable | set_array_variable |y|y|y| set array var value |; | | | del_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1375
https://github.com/psi4/psi4/issues/1375:32,Security,Access,Access,32,"# PsiPEP2: Rationalize Variable Access. Pursuant to #883, common driver migration, the War Against Globals, and [QCSchema](https://github.com/molssi/qcschema), we want clear programmatic access to QC quantities, and we want them on the Wfn/JSONrec, not off `Process.environment.globals`. First step toward this is duplication of `P::e.globals` onto `Wfn`. Unfortunately, the syntax and methods don't align (see table below). Also unfortunately, we have many redundant `get_`s. This PsiPEP proposes the following syntax changes and additions. ### Final Proposal (dynamic). * **W-C** means C-side access to `psi4.core.Wavefunction`; * **W-Py** means Py-side access to `psi4.core.Wavefunction`; * **G-Py** means Py-side access to `psi4.core` globals. | Now `Wavefunction` | Now `psi4.core` | Proposed Both | W-C | W-Py | G-Py | doc |; |-----|----|----|---|---|---|---|; | | has_variable | has_scalar_variable |y|y|y| is float var set ? |; | get_variable | get_variable | scalar_variable |y|y|y| return float var value |; | set_variable | set_variable | set_scalar_variable |y|y|y | set float var value |; | | | del_scalar_variable |y|y|y | unset float var |; | variables | get_variables | scalar_variables |y|y|y| return dict of all float vars |; | |; | | | has_array_variable |y|y|y| is array var set ? |; | get_array | get_array_variable | array_variable |y|y|y| return array var value |; | set_array | set_array_variable | set_array_variable |y|y|y| set array var value |; | | | del_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1375
https://github.com/psi4/psi4/issues/1375:187,Security,access,access,187,"# PsiPEP2: Rationalize Variable Access. Pursuant to #883, common driver migration, the War Against Globals, and [QCSchema](https://github.com/molssi/qcschema), we want clear programmatic access to QC quantities, and we want them on the Wfn/JSONrec, not off `Process.environment.globals`. First step toward this is duplication of `P::e.globals` onto `Wfn`. Unfortunately, the syntax and methods don't align (see table below). Also unfortunately, we have many redundant `get_`s. This PsiPEP proposes the following syntax changes and additions. ### Final Proposal (dynamic). * **W-C** means C-side access to `psi4.core.Wavefunction`; * **W-Py** means Py-side access to `psi4.core.Wavefunction`; * **G-Py** means Py-side access to `psi4.core` globals. | Now `Wavefunction` | Now `psi4.core` | Proposed Both | W-C | W-Py | G-Py | doc |; |-----|----|----|---|---|---|---|; | | has_variable | has_scalar_variable |y|y|y| is float var set ? |; | get_variable | get_variable | scalar_variable |y|y|y| return float var value |; | set_variable | set_variable | set_scalar_variable |y|y|y | set float var value |; | | | del_scalar_variable |y|y|y | unset float var |; | variables | get_variables | scalar_variables |y|y|y| return dict of all float vars |; | |; | | | has_array_variable |y|y|y| is array var set ? |; | get_array | get_array_variable | array_variable |y|y|y| return array var value |; | set_array | set_array_variable | set_array_variable |y|y|y| set array var value |; | | | del_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1375
https://github.com/psi4/psi4/issues/1375:595,Security,access,access,595,"# PsiPEP2: Rationalize Variable Access. Pursuant to #883, common driver migration, the War Against Globals, and [QCSchema](https://github.com/molssi/qcschema), we want clear programmatic access to QC quantities, and we want them on the Wfn/JSONrec, not off `Process.environment.globals`. First step toward this is duplication of `P::e.globals` onto `Wfn`. Unfortunately, the syntax and methods don't align (see table below). Also unfortunately, we have many redundant `get_`s. This PsiPEP proposes the following syntax changes and additions. ### Final Proposal (dynamic). * **W-C** means C-side access to `psi4.core.Wavefunction`; * **W-Py** means Py-side access to `psi4.core.Wavefunction`; * **G-Py** means Py-side access to `psi4.core` globals. | Now `Wavefunction` | Now `psi4.core` | Proposed Both | W-C | W-Py | G-Py | doc |; |-----|----|----|---|---|---|---|; | | has_variable | has_scalar_variable |y|y|y| is float var set ? |; | get_variable | get_variable | scalar_variable |y|y|y| return float var value |; | set_variable | set_variable | set_scalar_variable |y|y|y | set float var value |; | | | del_scalar_variable |y|y|y | unset float var |; | variables | get_variables | scalar_variables |y|y|y| return dict of all float vars |; | |; | | | has_array_variable |y|y|y| is array var set ? |; | get_array | get_array_variable | array_variable |y|y|y| return array var value |; | set_array | set_array_variable | set_array_variable |y|y|y| set array var value |; | | | del_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1375
https://github.com/psi4/psi4/issues/1375:656,Security,access,access,656,"# PsiPEP2: Rationalize Variable Access. Pursuant to #883, common driver migration, the War Against Globals, and [QCSchema](https://github.com/molssi/qcschema), we want clear programmatic access to QC quantities, and we want them on the Wfn/JSONrec, not off `Process.environment.globals`. First step toward this is duplication of `P::e.globals` onto `Wfn`. Unfortunately, the syntax and methods don't align (see table below). Also unfortunately, we have many redundant `get_`s. This PsiPEP proposes the following syntax changes and additions. ### Final Proposal (dynamic). * **W-C** means C-side access to `psi4.core.Wavefunction`; * **W-Py** means Py-side access to `psi4.core.Wavefunction`; * **G-Py** means Py-side access to `psi4.core` globals. | Now `Wavefunction` | Now `psi4.core` | Proposed Both | W-C | W-Py | G-Py | doc |; |-----|----|----|---|---|---|---|; | | has_variable | has_scalar_variable |y|y|y| is float var set ? |; | get_variable | get_variable | scalar_variable |y|y|y| return float var value |; | set_variable | set_variable | set_scalar_variable |y|y|y | set float var value |; | | | del_scalar_variable |y|y|y | unset float var |; | variables | get_variables | scalar_variables |y|y|y| return dict of all float vars |; | |; | | | has_array_variable |y|y|y| is array var set ? |; | get_array | get_array_variable | array_variable |y|y|y| return array var value |; | set_array | set_array_variable | set_array_variable |y|y|y| set array var value |; | | | del_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1375
https://github.com/psi4/psi4/issues/1375:717,Security,access,access,717,"# PsiPEP2: Rationalize Variable Access. Pursuant to #883, common driver migration, the War Against Globals, and [QCSchema](https://github.com/molssi/qcschema), we want clear programmatic access to QC quantities, and we want them on the Wfn/JSONrec, not off `Process.environment.globals`. First step toward this is duplication of `P::e.globals` onto `Wfn`. Unfortunately, the syntax and methods don't align (see table below). Also unfortunately, we have many redundant `get_`s. This PsiPEP proposes the following syntax changes and additions. ### Final Proposal (dynamic). * **W-C** means C-side access to `psi4.core.Wavefunction`; * **W-Py** means Py-side access to `psi4.core.Wavefunction`; * **G-Py** means Py-side access to `psi4.core` globals. | Now `Wavefunction` | Now `psi4.core` | Proposed Both | W-C | W-Py | G-Py | doc |; |-----|----|----|---|---|---|---|; | | has_variable | has_scalar_variable |y|y|y| is float var set ? |; | get_variable | get_variable | scalar_variable |y|y|y| return float var value |; | set_variable | set_variable | set_scalar_variable |y|y|y | set float var value |; | | | del_scalar_variable |y|y|y | unset float var |; | variables | get_variables | scalar_variables |y|y|y| return dict of all float vars |; | |; | | | has_array_variable |y|y|y| is array var set ? |; | get_array | get_array_variable | array_variable |y|y|y| return array var value |; | set_array | set_array_variable | set_array_variable |y|y|y| set array var value |; | | | del_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1375
https://github.com/psi4/psi4/issues/1375:3273,Security,access,access,3273,"any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars |. ### Original Proposal (static). | Now `Wavefunction` | Now `psi4.core` | Proposed Both | doc |; |-----|----|----|---|; | | has_variable | has_variable | is float var set ? |; | get_variable | get_variable | variable | return float var value |; | set_variable | set_variable | set_variable | set float var value |; | | | del_variable | unset float var |; | |; | variables | get_variables | variables | return dict of float vars |; | | clean_variables | clean_variables | unset all float vars |; | |; | | | has_array_variable | is array var set ? |; | get_array | get_array_variable | array_variable | return array var value |; | set_array | set_array_variable | set_array_variable | set array var value |; | | | del_array_variable | unset array var |; | |; | arrays | get_array_variables | array_variables | return dict of array vars |; | | | clean_array_variables | unset all array vars |. ### Questions. - [x] No, nothing will break immediately. Use of old syntax will yield runtime `FutureWarning`s if called from Python or compile-time `PSI_DEPRECATED` warnings if called from C++. Old syntax will stop working in Psi4 v1.4. - [x] Note that QCDB (common driver) and QCSchema (I think) merge float vars and array vars into single ~dict. Do we want to consider single access / multi storage in the C++ classes so number of accessors is halved? **EDIT** Answer: yes (see table above), going with multi storage C-side, multi access C-side, unified access Py-side. - Any other changes to suggested syntax. - Whole point of posting this as a PEP instead of leaving it on core-dev is so users/downstream/interested parties can weigh in. Please do so.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1375
https://github.com/psi4/psi4/issues/1375:3328,Security,access,accessors,3328,"any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars |. ### Original Proposal (static). | Now `Wavefunction` | Now `psi4.core` | Proposed Both | doc |; |-----|----|----|---|; | | has_variable | has_variable | is float var set ? |; | get_variable | get_variable | variable | return float var value |; | set_variable | set_variable | set_variable | set float var value |; | | | del_variable | unset float var |; | |; | variables | get_variables | variables | return dict of float vars |; | | clean_variables | clean_variables | unset all float vars |; | |; | | | has_array_variable | is array var set ? |; | get_array | get_array_variable | array_variable | return array var value |; | set_array | set_array_variable | set_array_variable | set array var value |; | | | del_array_variable | unset array var |; | |; | arrays | get_array_variables | array_variables | return dict of array vars |; | | | clean_array_variables | unset all array vars |. ### Questions. - [x] No, nothing will break immediately. Use of old syntax will yield runtime `FutureWarning`s if called from Python or compile-time `PSI_DEPRECATED` warnings if called from C++. Old syntax will stop working in Psi4 v1.4. - [x] Note that QCDB (common driver) and QCSchema (I think) merge float vars and array vars into single ~dict. Do we want to consider single access / multi storage in the C++ classes so number of accessors is halved? **EDIT** Answer: yes (see table above), going with multi storage C-side, multi access C-side, unified access Py-side. - Any other changes to suggested syntax. - Whole point of posting this as a PEP instead of leaving it on core-dev is so users/downstream/interested parties can weigh in. Please do so.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1375
https://github.com/psi4/psi4/issues/1375:3428,Security,access,access,3428,"any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars |. ### Original Proposal (static). | Now `Wavefunction` | Now `psi4.core` | Proposed Both | doc |; |-----|----|----|---|; | | has_variable | has_variable | is float var set ? |; | get_variable | get_variable | variable | return float var value |; | set_variable | set_variable | set_variable | set float var value |; | | | del_variable | unset float var |; | |; | variables | get_variables | variables | return dict of float vars |; | | clean_variables | clean_variables | unset all float vars |; | |; | | | has_array_variable | is array var set ? |; | get_array | get_array_variable | array_variable | return array var value |; | set_array | set_array_variable | set_array_variable | set array var value |; | | | del_array_variable | unset array var |; | |; | arrays | get_array_variables | array_variables | return dict of array vars |; | | | clean_array_variables | unset all array vars |. ### Questions. - [x] No, nothing will break immediately. Use of old syntax will yield runtime `FutureWarning`s if called from Python or compile-time `PSI_DEPRECATED` warnings if called from C++. Old syntax will stop working in Psi4 v1.4. - [x] Note that QCDB (common driver) and QCSchema (I think) merge float vars and array vars into single ~dict. Do we want to consider single access / multi storage in the C++ classes so number of accessors is halved? **EDIT** Answer: yes (see table above), going with multi storage C-side, multi access C-side, unified access Py-side. - Any other changes to suggested syntax. - Whole point of posting this as a PEP instead of leaving it on core-dev is so users/downstream/interested parties can weigh in. Please do so.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1375
https://github.com/psi4/psi4/issues/1375:3451,Security,access,access,3451,"any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars |. ### Original Proposal (static). | Now `Wavefunction` | Now `psi4.core` | Proposed Both | doc |; |-----|----|----|---|; | | has_variable | has_variable | is float var set ? |; | get_variable | get_variable | variable | return float var value |; | set_variable | set_variable | set_variable | set float var value |; | | | del_variable | unset float var |; | |; | variables | get_variables | variables | return dict of float vars |; | | clean_variables | clean_variables | unset all float vars |; | |; | | | has_array_variable | is array var set ? |; | get_array | get_array_variable | array_variable | return array var value |; | set_array | set_array_variable | set_array_variable | set array var value |; | | | del_array_variable | unset array var |; | |; | arrays | get_array_variables | array_variables | return dict of array vars |; | | | clean_array_variables | unset all array vars |. ### Questions. - [x] No, nothing will break immediately. Use of old syntax will yield runtime `FutureWarning`s if called from Python or compile-time `PSI_DEPRECATED` warnings if called from C++. Old syntax will stop working in Psi4 v1.4. - [x] Note that QCDB (common driver) and QCSchema (I think) merge float vars and array vars into single ~dict. Do we want to consider single access / multi storage in the C++ classes so number of accessors is halved? **EDIT** Answer: yes (see table above), going with multi storage C-side, multi access C-side, unified access Py-side. - Any other changes to suggested syntax. - Whole point of posting this as a PEP instead of leaving it on core-dev is so users/downstream/interested parties can weigh in. Please do so.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1375
https://github.com/psi4/psi4/issues/1375:168,Usability,clear,clear,168,"# PsiPEP2: Rationalize Variable Access. Pursuant to #883, common driver migration, the War Against Globals, and [QCSchema](https://github.com/molssi/qcschema), we want clear programmatic access to QC quantities, and we want them on the Wfn/JSONrec, not off `Process.environment.globals`. First step toward this is duplication of `P::e.globals` onto `Wfn`. Unfortunately, the syntax and methods don't align (see table below). Also unfortunately, we have many redundant `get_`s. This PsiPEP proposes the following syntax changes and additions. ### Final Proposal (dynamic). * **W-C** means C-side access to `psi4.core.Wavefunction`; * **W-Py** means Py-side access to `psi4.core.Wavefunction`; * **G-Py** means Py-side access to `psi4.core` globals. | Now `Wavefunction` | Now `psi4.core` | Proposed Both | W-C | W-Py | G-Py | doc |; |-----|----|----|---|---|---|---|; | | has_variable | has_scalar_variable |y|y|y| is float var set ? |; | get_variable | get_variable | scalar_variable |y|y|y| return float var value |; | set_variable | set_variable | set_scalar_variable |y|y|y | set float var value |; | | | del_scalar_variable |y|y|y | unset float var |; | variables | get_variables | scalar_variables |y|y|y| return dict of all float vars |; | |; | | | has_array_variable |y|y|y| is array var set ? |; | get_array | get_array_variable | array_variable |y|y|y| return array var value |; | set_array | set_array_variable | set_array_variable |y|y|y| set array var value |; | | | del_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1375
https://github.com/psi4/psi4/issues/1376:83,Availability,Failure,Failure,83,"If Psi is built with debug symbols, I observe that the `cc53` test fails randomly. Failure rate seems to be somewhere between 50% and 80%. If Psi is not built with debug symbols, the test works perfectly. When the bug appears, the LLDB reports `malloc: *** error for object 0x100000000: pointer being freed was not allocated`. The most relevant part of the stack trace is ; ```; frame #5: 0x00000001050d3b64 core.cpython-36m-darwin.so`psi::DPD::free_dpd_block(this=0x000000011485c9c0, array=0x000000011485cb50, n=3, m=3) at block_matrix.cc:176; frame #6: 0x0000000105124f85 core.cpython-36m-darwin.so`psi::DPD::file2_mat_close(this=0x000000011485c9c0, File=0x00007ffeefbf7718) at file2_mat_close.cc:46; frame #7: 0x0000000103c092dc core.cpython-36m-darwin.so`psi::cctriples::EaT_RHF() at EaT_RHF.cc:247; frame #8: 0x0000000103c5477f core.cpython-36m-darwin.so`psi::cctriples::cctriples(reference_wavefunction=std::__1::shared_ptr<psi::Wavefunction>::element_type @ 0x0000000102a00e00 strong=7 weak=2, options=0x00000001067bf240) at triples.cc:154; frame #9: 0x0000000103b45e93 core.cpython-36m-darwin.so`psi::cclambda::CCLambdaWavefunction::compute_energy(this=0x00000001018f4e18) at cclambda.cc:324; ```. I'll leave this bug to somebody familiar with the CC code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1376
https://github.com/psi4/psi4/issues/1376:257,Availability,error,error,257,"If Psi is built with debug symbols, I observe that the `cc53` test fails randomly. Failure rate seems to be somewhere between 50% and 80%. If Psi is not built with debug symbols, the test works perfectly. When the bug appears, the LLDB reports `malloc: *** error for object 0x100000000: pointer being freed was not allocated`. The most relevant part of the stack trace is ; ```; frame #5: 0x00000001050d3b64 core.cpython-36m-darwin.so`psi::DPD::free_dpd_block(this=0x000000011485c9c0, array=0x000000011485cb50, n=3, m=3) at block_matrix.cc:176; frame #6: 0x0000000105124f85 core.cpython-36m-darwin.so`psi::DPD::file2_mat_close(this=0x000000011485c9c0, File=0x00007ffeefbf7718) at file2_mat_close.cc:46; frame #7: 0x0000000103c092dc core.cpython-36m-darwin.so`psi::cctriples::EaT_RHF() at EaT_RHF.cc:247; frame #8: 0x0000000103c5477f core.cpython-36m-darwin.so`psi::cctriples::cctriples(reference_wavefunction=std::__1::shared_ptr<psi::Wavefunction>::element_type @ 0x0000000102a00e00 strong=7 weak=2, options=0x00000001067bf240) at triples.cc:154; frame #9: 0x0000000103b45e93 core.cpython-36m-darwin.so`psi::cclambda::CCLambdaWavefunction::compute_energy(this=0x00000001018f4e18) at cclambda.cc:324; ```. I'll leave this bug to somebody familiar with the CC code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1376
https://github.com/psi4/psi4/issues/1376:315,Energy Efficiency,allocate,allocated,315,"If Psi is built with debug symbols, I observe that the `cc53` test fails randomly. Failure rate seems to be somewhere between 50% and 80%. If Psi is not built with debug symbols, the test works perfectly. When the bug appears, the LLDB reports `malloc: *** error for object 0x100000000: pointer being freed was not allocated`. The most relevant part of the stack trace is ; ```; frame #5: 0x00000001050d3b64 core.cpython-36m-darwin.so`psi::DPD::free_dpd_block(this=0x000000011485c9c0, array=0x000000011485cb50, n=3, m=3) at block_matrix.cc:176; frame #6: 0x0000000105124f85 core.cpython-36m-darwin.so`psi::DPD::file2_mat_close(this=0x000000011485c9c0, File=0x00007ffeefbf7718) at file2_mat_close.cc:46; frame #7: 0x0000000103c092dc core.cpython-36m-darwin.so`psi::cctriples::EaT_RHF() at EaT_RHF.cc:247; frame #8: 0x0000000103c5477f core.cpython-36m-darwin.so`psi::cctriples::cctriples(reference_wavefunction=std::__1::shared_ptr<psi::Wavefunction>::element_type @ 0x0000000102a00e00 strong=7 weak=2, options=0x00000001067bf240) at triples.cc:154; frame #9: 0x0000000103b45e93 core.cpython-36m-darwin.so`psi::cclambda::CCLambdaWavefunction::compute_energy(this=0x00000001018f4e18) at cclambda.cc:324; ```. I'll leave this bug to somebody familiar with the CC code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1376
https://github.com/psi4/psi4/issues/1376:62,Testability,test,test,62,"If Psi is built with debug symbols, I observe that the `cc53` test fails randomly. Failure rate seems to be somewhere between 50% and 80%. If Psi is not built with debug symbols, the test works perfectly. When the bug appears, the LLDB reports `malloc: *** error for object 0x100000000: pointer being freed was not allocated`. The most relevant part of the stack trace is ; ```; frame #5: 0x00000001050d3b64 core.cpython-36m-darwin.so`psi::DPD::free_dpd_block(this=0x000000011485c9c0, array=0x000000011485cb50, n=3, m=3) at block_matrix.cc:176; frame #6: 0x0000000105124f85 core.cpython-36m-darwin.so`psi::DPD::file2_mat_close(this=0x000000011485c9c0, File=0x00007ffeefbf7718) at file2_mat_close.cc:46; frame #7: 0x0000000103c092dc core.cpython-36m-darwin.so`psi::cctriples::EaT_RHF() at EaT_RHF.cc:247; frame #8: 0x0000000103c5477f core.cpython-36m-darwin.so`psi::cctriples::cctriples(reference_wavefunction=std::__1::shared_ptr<psi::Wavefunction>::element_type @ 0x0000000102a00e00 strong=7 weak=2, options=0x00000001067bf240) at triples.cc:154; frame #9: 0x0000000103b45e93 core.cpython-36m-darwin.so`psi::cclambda::CCLambdaWavefunction::compute_energy(this=0x00000001018f4e18) at cclambda.cc:324; ```. I'll leave this bug to somebody familiar with the CC code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1376
https://github.com/psi4/psi4/issues/1376:183,Testability,test,test,183,"If Psi is built with debug symbols, I observe that the `cc53` test fails randomly. Failure rate seems to be somewhere between 50% and 80%. If Psi is not built with debug symbols, the test works perfectly. When the bug appears, the LLDB reports `malloc: *** error for object 0x100000000: pointer being freed was not allocated`. The most relevant part of the stack trace is ; ```; frame #5: 0x00000001050d3b64 core.cpython-36m-darwin.so`psi::DPD::free_dpd_block(this=0x000000011485c9c0, array=0x000000011485cb50, n=3, m=3) at block_matrix.cc:176; frame #6: 0x0000000105124f85 core.cpython-36m-darwin.so`psi::DPD::file2_mat_close(this=0x000000011485c9c0, File=0x00007ffeefbf7718) at file2_mat_close.cc:46; frame #7: 0x0000000103c092dc core.cpython-36m-darwin.so`psi::cctriples::EaT_RHF() at EaT_RHF.cc:247; frame #8: 0x0000000103c5477f core.cpython-36m-darwin.so`psi::cctriples::cctriples(reference_wavefunction=std::__1::shared_ptr<psi::Wavefunction>::element_type @ 0x0000000102a00e00 strong=7 weak=2, options=0x00000001067bf240) at triples.cc:154; frame #9: 0x0000000103b45e93 core.cpython-36m-darwin.so`psi::cclambda::CCLambdaWavefunction::compute_energy(this=0x00000001018f4e18) at cclambda.cc:324; ```. I'll leave this bug to somebody familiar with the CC code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1376
https://github.com/psi4/psi4/pull/1377:25,Availability,error,error,25,## Description; Fixes an error involving a FNO-(T) delta correction for CBS as in `energy('fno-ccsd/cc-pVDZ+D:fno-ccsd(t)/cc-pVDZ'`. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1377
https://github.com/psi4/psi4/pull/1377:83,Energy Efficiency,energy,energy,83,## Description; Fixes an error involving a FNO-(T) delta correction for CBS as in `energy('fno-ccsd/cc-pVDZ+D:fno-ccsd(t)/cc-pVDZ'`. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1377
https://github.com/psi4/psi4/pull/1377:187,Testability,test,tests,187,## Description; Fixes an error involving a FNO-(T) delta correction for CBS as in `energy('fno-ccsd/cc-pVDZ+D:fno-ccsd(t)/cc-pVDZ'`. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1377
https://github.com/psi4/psi4/pull/1377:278,Testability,test,tests,278,## Description; Fixes an error involving a FNO-(T) delta correction for CBS as in `energy('fno-ccsd/cc-pVDZ+D:fno-ccsd(t)/cc-pVDZ'`. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1377
https://github.com/psi4/psi4/pull/1378:174,Deployability,release,release,174,"## Description; Fixes #994 and #1038. FT97 does not want to converge, so I gave it a handicap. And with that, all the tests that run in a reasonable amount of time pass on a release build. ## Checklist; - [x] [All full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1378
https://github.com/psi4/psi4/pull/1378:118,Testability,test,tests,118,"## Description; Fixes #994 and #1038. FT97 does not want to converge, so I gave it a handicap. And with that, all the tests that run in a reasonable amount of time pass on a release build. ## Checklist; - [x] [All full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1378
https://github.com/psi4/psi4/pull/1378:219,Testability,test,tests,219,"## Description; Fixes #994 and #1038. FT97 does not want to converge, so I gave it a handicap. And with that, all the tests that run in a reasonable amount of time pass on a release build. ## Checklist; - [x] [All full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1378
https://github.com/psi4/psi4/pull/1378:310,Testability,test,tests,310,"## Description; Fixes #994 and #1038. FT97 does not want to converge, so I gave it a handicap. And with that, all the tests that run in a reasonable amount of time pass on a release build. ## Checklist; - [x] [All full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1378
https://github.com/psi4/psi4/pull/1379:411,Safety,avoid,avoid,411,"## Description; My debugging efforts indicate the problem with #1325 is that when attempting to clone a molecule with an atom with ZMAT and Cartesian coordinates, when that ZMatrixEntry atom is cloned, its `rto_`, `ato_`, `dto_` CoordEntries are Cartesian. This somehow leads to the parent ZMatrixEntry having `computed_` true, but not for `rto_` and friends. So, we somehow have a bug in molecule creation. To avoid creating new bugs, I want to understand exactly what is going on before trying to implement a fix. Unfortunately, this part of the code is not in great shape. I'll hopefully include a fix for the bug in here, but in the meantime, I'm submitting the code cleanup I'm doing as I try to follow this part of the code. We do not want `libmints` changes to escape a thorough vetting process. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Cleanup `CoordValue` and `CoordEntry`; - [x] Document `add_atom` and `add_unsettled_atom`; - [x] Actually fix #1325 . ## Checklist; - [ ] Is it worth adding a test for this bugfix? This should be a quick one to test, but it looks like we're seeing timeouts due to test overload again.; - [x] Tested this fixes #1325 ; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) obsessively - everything in ctest except the dft benchmarks and python-vibanalysis. ## Status; - [x] Ready for review; - [ ] Ready for merge. (After the question of whether to add a test.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1379
https://github.com/psi4/psi4/pull/1379:1149,Safety,timeout,timeouts,1149,"## Description; My debugging efforts indicate the problem with #1325 is that when attempting to clone a molecule with an atom with ZMAT and Cartesian coordinates, when that ZMatrixEntry atom is cloned, its `rto_`, `ato_`, `dto_` CoordEntries are Cartesian. This somehow leads to the parent ZMatrixEntry having `computed_` true, but not for `rto_` and friends. So, we somehow have a bug in molecule creation. To avoid creating new bugs, I want to understand exactly what is going on before trying to implement a fix. Unfortunately, this part of the code is not in great shape. I'll hopefully include a fix for the bug in here, but in the meantime, I'm submitting the code cleanup I'm doing as I try to follow this part of the code. We do not want `libmints` changes to escape a thorough vetting process. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Cleanup `CoordValue` and `CoordEntry`; - [x] Document `add_atom` and `add_unsettled_atom`; - [x] Actually fix #1325 . ## Checklist; - [ ] Is it worth adding a test for this bugfix? This should be a quick one to test, but it looks like we're seeing timeouts due to test overload again.; - [x] Tested this fixes #1325 ; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) obsessively - everything in ctest except the dft benchmarks and python-vibanalysis. ## Status; - [x] Ready for review; - [ ] Ready for merge. (After the question of whether to add a test.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1379
https://github.com/psi4/psi4/pull/1379:1060,Testability,test,test,1060,"## Description; My debugging efforts indicate the problem with #1325 is that when attempting to clone a molecule with an atom with ZMAT and Cartesian coordinates, when that ZMatrixEntry atom is cloned, its `rto_`, `ato_`, `dto_` CoordEntries are Cartesian. This somehow leads to the parent ZMatrixEntry having `computed_` true, but not for `rto_` and friends. So, we somehow have a bug in molecule creation. To avoid creating new bugs, I want to understand exactly what is going on before trying to implement a fix. Unfortunately, this part of the code is not in great shape. I'll hopefully include a fix for the bug in here, but in the meantime, I'm submitting the code cleanup I'm doing as I try to follow this part of the code. We do not want `libmints` changes to escape a thorough vetting process. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Cleanup `CoordValue` and `CoordEntry`; - [x] Document `add_atom` and `add_unsettled_atom`; - [x] Actually fix #1325 . ## Checklist; - [ ] Is it worth adding a test for this bugfix? This should be a quick one to test, but it looks like we're seeing timeouts due to test overload again.; - [x] Tested this fixes #1325 ; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) obsessively - everything in ctest except the dft benchmarks and python-vibanalysis. ## Status; - [x] Ready for review; - [ ] Ready for merge. (After the question of whether to add a test.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1379
https://github.com/psi4/psi4/pull/1379:1112,Testability,test,test,1112,"## Description; My debugging efforts indicate the problem with #1325 is that when attempting to clone a molecule with an atom with ZMAT and Cartesian coordinates, when that ZMatrixEntry atom is cloned, its `rto_`, `ato_`, `dto_` CoordEntries are Cartesian. This somehow leads to the parent ZMatrixEntry having `computed_` true, but not for `rto_` and friends. So, we somehow have a bug in molecule creation. To avoid creating new bugs, I want to understand exactly what is going on before trying to implement a fix. Unfortunately, this part of the code is not in great shape. I'll hopefully include a fix for the bug in here, but in the meantime, I'm submitting the code cleanup I'm doing as I try to follow this part of the code. We do not want `libmints` changes to escape a thorough vetting process. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Cleanup `CoordValue` and `CoordEntry`; - [x] Document `add_atom` and `add_unsettled_atom`; - [x] Actually fix #1325 . ## Checklist; - [ ] Is it worth adding a test for this bugfix? This should be a quick one to test, but it looks like we're seeing timeouts due to test overload again.; - [x] Tested this fixes #1325 ; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) obsessively - everything in ctest except the dft benchmarks and python-vibanalysis. ## Status; - [x] Ready for review; - [ ] Ready for merge. (After the question of whether to add a test.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1379
https://github.com/psi4/psi4/pull/1379:1165,Testability,test,test,1165,"## Description; My debugging efforts indicate the problem with #1325 is that when attempting to clone a molecule with an atom with ZMAT and Cartesian coordinates, when that ZMatrixEntry atom is cloned, its `rto_`, `ato_`, `dto_` CoordEntries are Cartesian. This somehow leads to the parent ZMatrixEntry having `computed_` true, but not for `rto_` and friends. So, we somehow have a bug in molecule creation. To avoid creating new bugs, I want to understand exactly what is going on before trying to implement a fix. Unfortunately, this part of the code is not in great shape. I'll hopefully include a fix for the bug in here, but in the meantime, I'm submitting the code cleanup I'm doing as I try to follow this part of the code. We do not want `libmints` changes to escape a thorough vetting process. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Cleanup `CoordValue` and `CoordEntry`; - [x] Document `add_atom` and `add_unsettled_atom`; - [x] Actually fix #1325 . ## Checklist; - [ ] Is it worth adding a test for this bugfix? This should be a quick one to test, but it looks like we're seeing timeouts due to test overload again.; - [x] Tested this fixes #1325 ; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) obsessively - everything in ctest except the dft benchmarks and python-vibanalysis. ## Status; - [x] Ready for review; - [ ] Ready for merge. (After the question of whether to add a test.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1379
https://github.com/psi4/psi4/pull/1379:1193,Testability,Test,Tested,1193,"## Description; My debugging efforts indicate the problem with #1325 is that when attempting to clone a molecule with an atom with ZMAT and Cartesian coordinates, when that ZMatrixEntry atom is cloned, its `rto_`, `ato_`, `dto_` CoordEntries are Cartesian. This somehow leads to the parent ZMatrixEntry having `computed_` true, but not for `rto_` and friends. So, we somehow have a bug in molecule creation. To avoid creating new bugs, I want to understand exactly what is going on before trying to implement a fix. Unfortunately, this part of the code is not in great shape. I'll hopefully include a fix for the bug in here, but in the meantime, I'm submitting the code cleanup I'm doing as I try to follow this part of the code. We do not want `libmints` changes to escape a thorough vetting process. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Cleanup `CoordValue` and `CoordEntry`; - [x] Document `add_atom` and `add_unsettled_atom`; - [x] Actually fix #1325 . ## Checklist; - [ ] Is it worth adding a test for this bugfix? This should be a quick one to test, but it looks like we're seeing timeouts due to test overload again.; - [x] Tested this fixes #1325 ; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) obsessively - everything in ctest except the dft benchmarks and python-vibanalysis. ## Status; - [x] Ready for review; - [ ] Ready for merge. (After the question of whether to add a test.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1379
https://github.com/psi4/psi4/pull/1379:1259,Testability,test,tests,1259,"## Description; My debugging efforts indicate the problem with #1325 is that when attempting to clone a molecule with an atom with ZMAT and Cartesian coordinates, when that ZMatrixEntry atom is cloned, its `rto_`, `ato_`, `dto_` CoordEntries are Cartesian. This somehow leads to the parent ZMatrixEntry having `computed_` true, but not for `rto_` and friends. So, we somehow have a bug in molecule creation. To avoid creating new bugs, I want to understand exactly what is going on before trying to implement a fix. Unfortunately, this part of the code is not in great shape. I'll hopefully include a fix for the bug in here, but in the meantime, I'm submitting the code cleanup I'm doing as I try to follow this part of the code. We do not want `libmints` changes to escape a thorough vetting process. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Cleanup `CoordValue` and `CoordEntry`; - [x] Document `add_atom` and `add_unsettled_atom`; - [x] Actually fix #1325 . ## Checklist; - [ ] Is it worth adding a test for this bugfix? This should be a quick one to test, but it looks like we're seeing timeouts due to test overload again.; - [x] Tested this fixes #1325 ; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) obsessively - everything in ctest except the dft benchmarks and python-vibanalysis. ## Status; - [x] Ready for review; - [ ] Ready for merge. (After the question of whether to add a test.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1379
https://github.com/psi4/psi4/pull/1379:1350,Testability,test,tests,1350,"## Description; My debugging efforts indicate the problem with #1325 is that when attempting to clone a molecule with an atom with ZMAT and Cartesian coordinates, when that ZMatrixEntry atom is cloned, its `rto_`, `ato_`, `dto_` CoordEntries are Cartesian. This somehow leads to the parent ZMatrixEntry having `computed_` true, but not for `rto_` and friends. So, we somehow have a bug in molecule creation. To avoid creating new bugs, I want to understand exactly what is going on before trying to implement a fix. Unfortunately, this part of the code is not in great shape. I'll hopefully include a fix for the bug in here, but in the meantime, I'm submitting the code cleanup I'm doing as I try to follow this part of the code. We do not want `libmints` changes to escape a thorough vetting process. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Cleanup `CoordValue` and `CoordEntry`; - [x] Document `add_atom` and `add_unsettled_atom`; - [x] Actually fix #1325 . ## Checklist; - [ ] Is it worth adding a test for this bugfix? This should be a quick one to test, but it looks like we're seeing timeouts due to test overload again.; - [x] Tested this fixes #1325 ; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) obsessively - everything in ctest except the dft benchmarks and python-vibanalysis. ## Status; - [x] Ready for review; - [ ] Ready for merge. (After the question of whether to add a test.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1379
https://github.com/psi4/psi4/pull/1379:1406,Testability,benchmark,benchmarks,1406,"## Description; My debugging efforts indicate the problem with #1325 is that when attempting to clone a molecule with an atom with ZMAT and Cartesian coordinates, when that ZMatrixEntry atom is cloned, its `rto_`, `ato_`, `dto_` CoordEntries are Cartesian. This somehow leads to the parent ZMatrixEntry having `computed_` true, but not for `rto_` and friends. So, we somehow have a bug in molecule creation. To avoid creating new bugs, I want to understand exactly what is going on before trying to implement a fix. Unfortunately, this part of the code is not in great shape. I'll hopefully include a fix for the bug in here, but in the meantime, I'm submitting the code cleanup I'm doing as I try to follow this part of the code. We do not want `libmints` changes to escape a thorough vetting process. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Cleanup `CoordValue` and `CoordEntry`; - [x] Document `add_atom` and `add_unsettled_atom`; - [x] Actually fix #1325 . ## Checklist; - [ ] Is it worth adding a test for this bugfix? This should be a quick one to test, but it looks like we're seeing timeouts due to test overload again.; - [x] Tested this fixes #1325 ; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) obsessively - everything in ctest except the dft benchmarks and python-vibanalysis. ## Status; - [x] Ready for review; - [ ] Ready for merge. (After the question of whether to add a test.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1379
https://github.com/psi4/psi4/pull/1379:1539,Testability,test,test,1539,"## Description; My debugging efforts indicate the problem with #1325 is that when attempting to clone a molecule with an atom with ZMAT and Cartesian coordinates, when that ZMatrixEntry atom is cloned, its `rto_`, `ato_`, `dto_` CoordEntries are Cartesian. This somehow leads to the parent ZMatrixEntry having `computed_` true, but not for `rto_` and friends. So, we somehow have a bug in molecule creation. To avoid creating new bugs, I want to understand exactly what is going on before trying to implement a fix. Unfortunately, this part of the code is not in great shape. I'll hopefully include a fix for the bug in here, but in the meantime, I'm submitting the code cleanup I'm doing as I try to follow this part of the code. We do not want `libmints` changes to escape a thorough vetting process. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Cleanup `CoordValue` and `CoordEntry`; - [x] Document `add_atom` and `add_unsettled_atom`; - [x] Actually fix #1325 . ## Checklist; - [ ] Is it worth adding a test for this bugfix? This should be a quick one to test, but it looks like we're seeing timeouts due to test overload again.; - [x] Tested this fixes #1325 ; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) obsessively - everything in ctest except the dft benchmarks and python-vibanalysis. ## Status; - [x] Ready for review; - [ ] Ready for merge. (After the question of whether to add a test.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1379
https://github.com/psi4/psi4/pull/1380:26,Energy Efficiency,energy,energy,26,## Description; `cbs-xtpl-energy` test won't pass in conda-build if non-ascii present. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1380
https://github.com/psi4/psi4/pull/1380:34,Testability,test,test,34,## Description; `cbs-xtpl-energy` test won't pass in conda-build if non-ascii present. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1380
https://github.com/psi4/psi4/pull/1381:996,Energy Efficiency,ENERGY,ENERGY,996,"## Description; A step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; - [x] removes or py3-izes scripts; - [x] addresses the floats part of #1375 by; - expanding the variable operations on `Wavefunction`; - making their storage always uppercase and their access case-insensitive; - dev alert: any code that wrote to wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needed to be changed to `wfn.set_variable`; - [x] adds runtime FutureWarning to renamed fns: `psi4.core.get_variable`, psi4.core.get_variables`, `Wavefunction.get_variable`; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on `wfn` c-side, then just copy into `P::e.globals` in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS8; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables_`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`; - `core.variable` now throws when you access a key not set. This is what `Wavefunction.variable` did before, but `core.variable` used to just create the key and set to 0. ## Questions; - [ ] FutureWarning provides the offending line. However, this is complicated by our promoting the get_variable namespace and the PsiAPI and Psithon calling routes. It's going to be hard to get this offending line printing universally right. It's hit and miss now. ## Checklist; - [x] full tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1381
https://github.com/psi4/psi4/pull/1381:1039,Energy Efficiency,ENERGY,ENERGY,1039,"## Description; A step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; - [x] removes or py3-izes scripts; - [x] addresses the floats part of #1375 by; - expanding the variable operations on `Wavefunction`; - making their storage always uppercase and their access case-insensitive; - dev alert: any code that wrote to wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needed to be changed to `wfn.set_variable`; - [x] adds runtime FutureWarning to renamed fns: `psi4.core.get_variable`, psi4.core.get_variables`, `Wavefunction.get_variable`; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on `wfn` c-side, then just copy into `P::e.globals` in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS8; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables_`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`; - `core.variable` now throws when you access a key not set. This is what `Wavefunction.variable` did before, but `core.variable` used to just create the key and set to 0. ## Questions; - [ ] FutureWarning provides the offending line. However, this is complicated by our promoting the get_variable namespace and the PsiAPI and Psithon calling routes. It's going to be hard to get this offending line printing universally right. It's hit and miss now. ## Checklist; - [x] full tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1381
https://github.com/psi4/psi4/pull/1381:1156,Energy Efficiency,ENERGY,ENERGY,1156,"## Description; A step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; - [x] removes or py3-izes scripts; - [x] addresses the floats part of #1375 by; - expanding the variable operations on `Wavefunction`; - making their storage always uppercase and their access case-insensitive; - dev alert: any code that wrote to wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needed to be changed to `wfn.set_variable`; - [x] adds runtime FutureWarning to renamed fns: `psi4.core.get_variable`, psi4.core.get_variables`, `Wavefunction.get_variable`; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on `wfn` c-side, then just copy into `P::e.globals` in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS8; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables_`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`; - `core.variable` now throws when you access a key not set. This is what `Wavefunction.variable` did before, but `core.variable` used to just create the key and set to 0. ## Questions; - [ ] FutureWarning provides the offending line. However, this is complicated by our promoting the get_variable namespace and the PsiAPI and Psithon calling routes. It's going to be hard to get this offending line printing universally right. It's hit and miss now. ## Checklist; - [x] full tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1381
https://github.com/psi4/psi4/pull/1381:1259,Energy Efficiency,ENERGY,ENERGY,1259,"## Description; A step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; - [x] removes or py3-izes scripts; - [x] addresses the floats part of #1375 by; - expanding the variable operations on `Wavefunction`; - making their storage always uppercase and their access case-insensitive; - dev alert: any code that wrote to wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needed to be changed to `wfn.set_variable`; - [x] adds runtime FutureWarning to renamed fns: `psi4.core.get_variable`, psi4.core.get_variables`, `Wavefunction.get_variable`; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on `wfn` c-side, then just copy into `P::e.globals` in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS8; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables_`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`; - `core.variable` now throws when you access a key not set. This is what `Wavefunction.variable` did before, but `core.variable` used to just create the key and set to 0. ## Questions; - [ ] FutureWarning provides the offending line. However, this is complicated by our promoting the get_variable namespace and the PsiAPI and Psithon calling routes. It's going to be hard to get this offending line printing universally right. It's hit and miss now. ## Checklist; - [x] full tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1381
https://github.com/psi4/psi4/pull/1381:1610,Integrability,rout,routes,1610,"## Description; A step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; - [x] removes or py3-izes scripts; - [x] addresses the floats part of #1375 by; - expanding the variable operations on `Wavefunction`; - making their storage always uppercase and their access case-insensitive; - dev alert: any code that wrote to wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needed to be changed to `wfn.set_variable`; - [x] adds runtime FutureWarning to renamed fns: `psi4.core.get_variable`, psi4.core.get_variables`, `Wavefunction.get_variable`; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on `wfn` c-side, then just copy into `P::e.globals` in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS8; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables_`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`; - `core.variable` now throws when you access a key not set. This is what `Wavefunction.variable` did before, but `core.variable` used to just create the key and set to 0. ## Questions; - [ ] FutureWarning provides the offending line. However, this is complicated by our promoting the get_variable namespace and the PsiAPI and Psithon calling routes. It's going to be hard to get this offending line printing universally right. It's hit and miss now. ## Checklist; - [x] full tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1381
https://github.com/psi4/psi4/pull/1381:209,Modifiability,variab,variable,209,"## Description; A step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; - [x] removes or py3-izes scripts; - [x] addresses the floats part of #1375 by; - expanding the variable operations on `Wavefunction`; - making their storage always uppercase and their access case-insensitive; - dev alert: any code that wrote to wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needed to be changed to `wfn.set_variable`; - [x] adds runtime FutureWarning to renamed fns: `psi4.core.get_variable`, psi4.core.get_variables`, `Wavefunction.get_variable`; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on `wfn` c-side, then just copy into `P::e.globals` in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS8; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables_`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`; - `core.variable` now throws when you access a key not set. This is what `Wavefunction.variable` did before, but `core.variable` used to just create the key and set to 0. ## Questions; - [ ] FutureWarning provides the offending line. However, this is complicated by our promoting the get_variable namespace and the PsiAPI and Psithon calling routes. It's going to be hard to get this offending line printing universally right. It's hit and miss now. ## Checklist; - [x] full tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1381
https://github.com/psi4/psi4/pull/1381:1276,Modifiability,variab,variable,1276,"## Description; A step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; - [x] removes or py3-izes scripts; - [x] addresses the floats part of #1375 by; - expanding the variable operations on `Wavefunction`; - making their storage always uppercase and their access case-insensitive; - dev alert: any code that wrote to wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needed to be changed to `wfn.set_variable`; - [x] adds runtime FutureWarning to renamed fns: `psi4.core.get_variable`, psi4.core.get_variables`, `Wavefunction.get_variable`; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on `wfn` c-side, then just copy into `P::e.globals` in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS8; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables_`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`; - `core.variable` now throws when you access a key not set. This is what `Wavefunction.variable` did before, but `core.variable` used to just create the key and set to 0. ## Questions; - [ ] FutureWarning provides the offending line. However, this is complicated by our promoting the get_variable namespace and the PsiAPI and Psithon calling routes. It's going to be hard to get this offending line printing universally right. It's hit and miss now. ## Checklist; - [x] full tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1381
https://github.com/psi4/psi4/pull/1381:1355,Modifiability,variab,variable,1355,"## Description; A step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; - [x] removes or py3-izes scripts; - [x] addresses the floats part of #1375 by; - expanding the variable operations on `Wavefunction`; - making their storage always uppercase and their access case-insensitive; - dev alert: any code that wrote to wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needed to be changed to `wfn.set_variable`; - [x] adds runtime FutureWarning to renamed fns: `psi4.core.get_variable`, psi4.core.get_variables`, `Wavefunction.get_variable`; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on `wfn` c-side, then just copy into `P::e.globals` in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS8; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables_`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`; - `core.variable` now throws when you access a key not set. This is what `Wavefunction.variable` did before, but `core.variable` used to just create the key and set to 0. ## Questions; - [ ] FutureWarning provides the offending line. However, this is complicated by our promoting the get_variable namespace and the PsiAPI and Psithon calling routes. It's going to be hard to get this offending line printing universally right. It's hit and miss now. ## Checklist; - [x] full tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1381
https://github.com/psi4/psi4/pull/1381:1387,Modifiability,variab,variable,1387,"## Description; A step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; - [x] removes or py3-izes scripts; - [x] addresses the floats part of #1375 by; - expanding the variable operations on `Wavefunction`; - making their storage always uppercase and their access case-insensitive; - dev alert: any code that wrote to wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needed to be changed to `wfn.set_variable`; - [x] adds runtime FutureWarning to renamed fns: `psi4.core.get_variable`, psi4.core.get_variables`, `Wavefunction.get_variable`; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on `wfn` c-side, then just copy into `P::e.globals` in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS8; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables_`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`; - `core.variable` now throws when you access a key not set. This is what `Wavefunction.variable` did before, but `core.variable` used to just create the key and set to 0. ## Questions; - [ ] FutureWarning provides the offending line. However, this is complicated by our promoting the get_variable namespace and the PsiAPI and Psithon calling routes. It's going to be hard to get this offending line printing universally right. It's hit and miss now. ## Checklist; - [x] full tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1381
https://github.com/psi4/psi4/pull/1381:298,Security,access,access,298,"## Description; A step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; - [x] removes or py3-izes scripts; - [x] addresses the floats part of #1375 by; - expanding the variable operations on `Wavefunction`; - making their storage always uppercase and their access case-insensitive; - dev alert: any code that wrote to wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needed to be changed to `wfn.set_variable`; - [x] adds runtime FutureWarning to renamed fns: `psi4.core.get_variable`, psi4.core.get_variables`, `Wavefunction.get_variable`; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on `wfn` c-side, then just copy into `P::e.globals` in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS8; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables_`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`; - `core.variable` now throws when you access a key not set. This is what `Wavefunction.variable` did before, but `core.variable` used to just create the key and set to 0. ## Questions; - [ ] FutureWarning provides the offending line. However, this is complicated by our promoting the get_variable namespace and the PsiAPI and Psithon calling routes. It's going to be hard to get this offending line printing universally right. It's hit and miss now. ## Checklist; - [x] full tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1381
https://github.com/psi4/psi4/pull/1381:1306,Security,access,access,1306,"## Description; A step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; - [x] removes or py3-izes scripts; - [x] addresses the floats part of #1375 by; - expanding the variable operations on `Wavefunction`; - making their storage always uppercase and their access case-insensitive; - dev alert: any code that wrote to wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needed to be changed to `wfn.set_variable`; - [x] adds runtime FutureWarning to renamed fns: `psi4.core.get_variable`, psi4.core.get_variables`, `Wavefunction.get_variable`; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on `wfn` c-side, then just copy into `P::e.globals` in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS8; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables_`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`; - `core.variable` now throws when you access a key not set. This is what `Wavefunction.variable` did before, but `core.variable` used to just create the key and set to 0. ## Questions; - [ ] FutureWarning provides the offending line. However, this is complicated by our promoting the get_variable namespace and the PsiAPI and Psithon calling routes. It's going to be hard to get this offending line printing universally right. It's hit and miss now. ## Checklist; - [x] full tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1381
https://github.com/psi4/psi4/pull/1381:1743,Testability,test,tests,1743,"## Description; A step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; - [x] removes or py3-izes scripts; - [x] addresses the floats part of #1375 by; - expanding the variable operations on `Wavefunction`; - making their storage always uppercase and their access case-insensitive; - dev alert: any code that wrote to wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needed to be changed to `wfn.set_variable`; - [x] adds runtime FutureWarning to renamed fns: `psi4.core.get_variable`, psi4.core.get_variables`, `Wavefunction.get_variable`; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on `wfn` c-side, then just copy into `P::e.globals` in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS8; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables_`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`; - `core.variable` now throws when you access a key not set. This is what `Wavefunction.variable` did before, but `core.variable` used to just create the key and set to 0. ## Questions; - [ ] FutureWarning provides the offending line. However, this is complicated by our promoting the get_variable namespace and the PsiAPI and Psithon calling routes. It's going to be hard to get this offending line printing universally right. It's hit and miss now. ## Checklist; - [x] full tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1381
https://github.com/psi4/psi4/pull/1382:392,Testability,test,test,392,"## Description; Adds analytic dipole derivatives for RHF, allowing IR intensities to be computed; @loriab, @dsirianni and crew are working on the finite difference version for cases like DF-MP2, where finite differences of gradients are used for frequencies. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds dipole derivative code, and a test to verify that they match the CCQC programming project values. ## Questions; - [ ] Does anybody object to wavefunction holding these?; - [ ] Does anybody object to the various `set_` methods of wavefunction taking SharedMatrix by value, not by reference?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1382
https://github.com/psi4/psi4/pull/1382:673,Testability,Test,Tests,673,"## Description; Adds analytic dipole derivatives for RHF, allowing IR intensities to be computed; @loriab, @dsirianni and crew are working on the finite difference version for cases like DF-MP2, where finite differences of gradients are used for frequencies. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds dipole derivative code, and a test to verify that they match the CCQC programming project values. ## Questions; - [ ] Does anybody object to wavefunction holding these?; - [ ] Does anybody object to the various `set_` methods of wavefunction taking SharedMatrix by value, not by reference?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1382
https://github.com/psi4/psi4/pull/1382:747,Testability,test,tests,747,"## Description; Adds analytic dipole derivatives for RHF, allowing IR intensities to be computed; @loriab, @dsirianni and crew are working on the finite difference version for cases like DF-MP2, where finite differences of gradients are used for frequencies. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds dipole derivative code, and a test to verify that they match the CCQC programming project values. ## Questions; - [ ] Does anybody object to wavefunction holding these?; - [ ] Does anybody object to the various `set_` methods of wavefunction taking SharedMatrix by value, not by reference?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1382
https://github.com/psi4/psi4/pull/1382:838,Testability,test,tests,838,"## Description; Adds analytic dipole derivatives for RHF, allowing IR intensities to be computed; @loriab, @dsirianni and crew are working on the finite difference version for cases like DF-MP2, where finite differences of gradients are used for frequencies. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds dipole derivative code, and a test to verify that they match the CCQC programming project values. ## Questions; - [ ] Does anybody object to wavefunction holding these?; - [ ] Does anybody object to the various `set_` methods of wavefunction taking SharedMatrix by value, not by reference?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1382
https://github.com/psi4/psi4/pull/1383:508,Availability,error,error,508,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1383
https://github.com/psi4/psi4/pull/1383:854,Availability,error,errors,854,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1383
https://github.com/psi4/psi4/pull/1383:549,Deployability,update,updated,549,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1383
https://github.com/psi4/psi4/pull/1383:1340,Deployability,A/B,A/B,1340,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1383
https://github.com/psi4/psi4/pull/1383:514,Integrability,message,messages,514,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1383
https://github.com/psi4/psi4/pull/1383:523,Modifiability,variab,variables,523,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1383
https://github.com/psi4/psi4/pull/1383:901,Safety,avoid,avoid,901,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1383
https://github.com/psi4/psi4/pull/1383:1117,Safety,avoid,avoid,1117,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1383
https://github.com/psi4/psi4/pull/1383:1087,Testability,test,tests,1087,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1383
https://github.com/psi4/psi4/pull/1383:1352,Testability,log,logic,1352,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1383
https://github.com/psi4/psi4/pull/1383:1519,Testability,Test,Tests,1519,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1383
https://github.com/psi4/psi4/pull/1383:1593,Testability,test,tests,1593,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1383
https://github.com/psi4/psi4/pull/1383:1684,Testability,test,tests,1684,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1383
https://github.com/psi4/psi4/pull/1384:187,Energy Efficiency,adapt,adaptation,187,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1225. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1384
https://github.com/psi4/psi4/pull/1384:187,Modifiability,adapt,adaptation,187,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1225. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1384
https://github.com/psi4/psi4/pull/1384:366,Testability,Test,Tests,366,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1225. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1384
https://github.com/psi4/psi4/pull/1384:442,Testability,test,tests,442,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1225. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1384
https://github.com/psi4/psi4/pull/1384:533,Testability,test,tests,533,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1225. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1384
https://github.com/psi4/psi4/pull/1385:187,Energy Efficiency,adapt,adaptation,187,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1226. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1385
https://github.com/psi4/psi4/pull/1385:187,Modifiability,adapt,adaptation,187,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1226. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1385
https://github.com/psi4/psi4/pull/1385:366,Testability,Test,Tests,366,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1226. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1385
https://github.com/psi4/psi4/pull/1385:442,Testability,test,tests,442,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1226. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1385
https://github.com/psi4/psi4/pull/1385:533,Testability,test,tests,533,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1226. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1385
https://github.com/psi4/psi4/pull/1386:187,Energy Efficiency,adapt,adaptation,187,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1231. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1386
https://github.com/psi4/psi4/pull/1386:187,Modifiability,adapt,adaptation,187,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1231. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1386
https://github.com/psi4/psi4/pull/1386:366,Testability,Test,Tests,366,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1231. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1386
https://github.com/psi4/psi4/pull/1386:442,Testability,test,tests,442,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1231. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1386
https://github.com/psi4/psi4/pull/1386:533,Testability,test,tests,533,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1231. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1386
https://github.com/psi4/psi4/pull/1387:41,Deployability,update,updates,41,## Description; Fixes several OMP atomic updates likely causing #1366. Also:; - Switches from MiB to GiB memory user printing to match other areas.; - Switches internal copy loop to DCOPY for better vectorization. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1387
https://github.com/psi4/psi4/pull/1388:67,Testability,log,logos,67,## Todos; - [x] switch out badge from appveyor to azure; - [x] add logos. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1388
https://github.com/psi4/psi4/pull/1390:236,Availability,avail,available,236,"## Description; Replaces #824: Frozen Natural Orbitals were implemented for DF-CCSD and DF-CCSD(T) energies. ## Todos; - [x] FNOs are implemented for MP2.5, MP3, LCCD, CCD, CCSD, CCSD(T), and CCSD(AT).; - [x] Both DF and CD options are available (only for RHF ref for now). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1390
https://github.com/psi4/psi4/pull/1390:294,Testability,Test,Tests,294,"## Description; Replaces #824: Frozen Natural Orbitals were implemented for DF-CCSD and DF-CCSD(T) energies. ## Todos; - [x] FNOs are implemented for MP2.5, MP3, LCCD, CCD, CCSD, CCSD(T), and CCSD(AT).; - [x] Both DF and CD options are available (only for RHF ref for now). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1390
https://github.com/psi4/psi4/pull/1390:368,Testability,test,tests,368,"## Description; Replaces #824: Frozen Natural Orbitals were implemented for DF-CCSD and DF-CCSD(T) energies. ## Todos; - [x] FNOs are implemented for MP2.5, MP3, LCCD, CCD, CCSD, CCSD(T), and CCSD(AT).; - [x] Both DF and CD options are available (only for RHF ref for now). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1390
https://github.com/psi4/psi4/pull/1390:459,Testability,test,tests,459,"## Description; Replaces #824: Frozen Natural Orbitals were implemented for DF-CCSD and DF-CCSD(T) energies. ## Todos; - [x] FNOs are implemented for MP2.5, MP3, LCCD, CCD, CCSD, CCSD(T), and CCSD(AT).; - [x] Both DF and CD options are available (only for RHF ref for now). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1390
https://github.com/psi4/psi4/pull/1391:86,Safety,safe,safe,86,"## Description; Part of #1144. Way too long to scroll through. No PRs open on occ, so safe to format. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1391
https://github.com/psi4/psi4/pull/1392:158,Modifiability,plugin,plugin,158,"## Description; Part of #1144. DFOCC was already formatted in #797, so there's very few changes. DMRG we want to avoid formatting so can easily diff with the plugin in the CheMPS2 repo. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1392
https://github.com/psi4/psi4/pull/1392:113,Safety,avoid,avoid,113,"## Description; Part of #1144. DFOCC was already formatted in #797, so there's very few changes. DMRG we want to avoid formatting so can easily diff with the plugin in the CheMPS2 repo. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1392
https://github.com/psi4/psi4/pull/1393:250,Availability,down,downstream,250,"An implementation for #1375 PsiPEP 002. ## Todos; - [x] Standardizes function names surrounding scalar and array variables in globals & Wfn. Fills in missing methods.; - [x] C-side deprecates old names for Wfn variable access (compile-time for C-API downstream); - [x] Py-side deprecates old names for global and Wfn variable access (run-time for Py-API downstream, incl. Psithon inputs); - [x] New set of functions (reuse of many of the old fn names) for uniform access; - [x] Wfn variable access now case insensitive and storage always uppercase (as globals always has); - [x] array variable getters/setters now return _copies_ of the arrays; - [x] globals now throws instead of autovivifying to 0 when getter called for non-existant key (as Wfn always has); - [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is dep",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:354,Availability,down,downstream,354,"An implementation for #1375 PsiPEP 002. ## Todos; - [x] Standardizes function names surrounding scalar and array variables in globals & Wfn. Fills in missing methods.; - [x] C-side deprecates old names for Wfn variable access (compile-time for C-API downstream); - [x] Py-side deprecates old names for global and Wfn variable access (run-time for Py-API downstream, incl. Psithon inputs); - [x] New set of functions (reuse of many of the old fn names) for uniform access; - [x] Wfn variable access now case insensitive and storage always uppercase (as globals always has); - [x] array variable getters/setters now return _copies_ of the arrays; - [x] globals now throws instead of autovivifying to 0 when getter called for non-existant key (as Wfn always has); - [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is dep",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:1106,Deployability,update,updated,1106,"dizes function names surrounding scalar and array variables in globals & Wfn. Fills in missing methods.; - [x] C-side deprecates old names for Wfn variable access (compile-time for C-API downstream); - [x] Py-side deprecates old names for global and Wfn variable access (run-time for Py-API downstream, incl. Psithon inputs); - [x] New set of functions (reuse of many of the old fn names) for uniform access; - [x] Wfn variable access now case insensitive and storage always uppercase (as globals always has); - [x] array variable getters/setters now return _copies_ of the arrays; - [x] globals now throws instead of autovivifying to 0 when getter called for non-existant key (as Wfn always has); - [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. ```. ## Breaking Chan",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:1852,Energy Efficiency,energy,energy,1852,"(and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. ```. ## Breaking Changes; - Not many, as there's heavy use of deprecation; - Any access that expected `Wfn.variables` to return only scalars will now be surprised to get all types. Easy to replace with `Wfn.get_scalar_variables`.; - Any code that wrote to Wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needs to be changed to `""UPPER-CASE VAR""` or to `wfn.set_scalar_variables`; - Any code that tries to access a non-existent global will now throw, hence the fixes to the driver and test cases you see here. ## Checklist; - [x] Tests added for any new features; - [x] quick tests pass and I've run a full tests with this+other commits. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:113,Modifiability,variab,variables,113,"An implementation for #1375 PsiPEP 002. ## Todos; - [x] Standardizes function names surrounding scalar and array variables in globals & Wfn. Fills in missing methods.; - [x] C-side deprecates old names for Wfn variable access (compile-time for C-API downstream); - [x] Py-side deprecates old names for global and Wfn variable access (run-time for Py-API downstream, incl. Psithon inputs); - [x] New set of functions (reuse of many of the old fn names) for uniform access; - [x] Wfn variable access now case insensitive and storage always uppercase (as globals always has); - [x] array variable getters/setters now return _copies_ of the arrays; - [x] globals now throws instead of autovivifying to 0 when getter called for non-existant key (as Wfn always has); - [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is dep",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:210,Modifiability,variab,variable,210,"An implementation for #1375 PsiPEP 002. ## Todos; - [x] Standardizes function names surrounding scalar and array variables in globals & Wfn. Fills in missing methods.; - [x] C-side deprecates old names for Wfn variable access (compile-time for C-API downstream); - [x] Py-side deprecates old names for global and Wfn variable access (run-time for Py-API downstream, incl. Psithon inputs); - [x] New set of functions (reuse of many of the old fn names) for uniform access; - [x] Wfn variable access now case insensitive and storage always uppercase (as globals always has); - [x] array variable getters/setters now return _copies_ of the arrays; - [x] globals now throws instead of autovivifying to 0 when getter called for non-existant key (as Wfn always has); - [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is dep",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:317,Modifiability,variab,variable,317,"An implementation for #1375 PsiPEP 002. ## Todos; - [x] Standardizes function names surrounding scalar and array variables in globals & Wfn. Fills in missing methods.; - [x] C-side deprecates old names for Wfn variable access (compile-time for C-API downstream); - [x] Py-side deprecates old names for global and Wfn variable access (run-time for Py-API downstream, incl. Psithon inputs); - [x] New set of functions (reuse of many of the old fn names) for uniform access; - [x] Wfn variable access now case insensitive and storage always uppercase (as globals always has); - [x] array variable getters/setters now return _copies_ of the arrays; - [x] globals now throws instead of autovivifying to 0 when getter called for non-existant key (as Wfn always has); - [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is dep",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:482,Modifiability,variab,variable,482,"An implementation for #1375 PsiPEP 002. ## Todos; - [x] Standardizes function names surrounding scalar and array variables in globals & Wfn. Fills in missing methods.; - [x] C-side deprecates old names for Wfn variable access (compile-time for C-API downstream); - [x] Py-side deprecates old names for global and Wfn variable access (run-time for Py-API downstream, incl. Psithon inputs); - [x] New set of functions (reuse of many of the old fn names) for uniform access; - [x] Wfn variable access now case insensitive and storage always uppercase (as globals always has); - [x] array variable getters/setters now return _copies_ of the arrays; - [x] globals now throws instead of autovivifying to 0 when getter called for non-existant key (as Wfn always has); - [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is dep",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:585,Modifiability,variab,variable,585,"An implementation for #1375 PsiPEP 002. ## Todos; - [x] Standardizes function names surrounding scalar and array variables in globals & Wfn. Fills in missing methods.; - [x] C-side deprecates old names for Wfn variable access (compile-time for C-API downstream); - [x] Py-side deprecates old names for global and Wfn variable access (run-time for Py-API downstream, incl. Psithon inputs); - [x] New set of functions (reuse of many of the old fn names) for uniform access; - [x] Wfn variable access now case insensitive and storage always uppercase (as globals always has); - [x] array variable getters/setters now return _copies_ of the arrays; - [x] globals now throws instead of autovivifying to 0 when getter called for non-existant key (as Wfn always has); - [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is dep",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:859,Modifiability,variab,variable,859,"An implementation for #1375 PsiPEP 002. ## Todos; - [x] Standardizes function names surrounding scalar and array variables in globals & Wfn. Fills in missing methods.; - [x] C-side deprecates old names for Wfn variable access (compile-time for C-API downstream); - [x] Py-side deprecates old names for global and Wfn variable access (run-time for Py-API downstream, incl. Psithon inputs); - [x] New set of functions (reuse of many of the old fn names) for uniform access; - [x] Wfn variable access now case insensitive and storage always uppercase (as globals always has); - [x] array variable getters/setters now return _copies_ of the arrays; - [x] globals now throws instead of autovivifying to 0 when getter called for non-existant key (as Wfn always has); - [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is dep",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:1700,Modifiability,variab,variable,1700," called for non-existant key (as Wfn always has); - [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. ```. ## Breaking Changes; - Not many, as there's heavy use of deprecation; - Any access that expected `Wfn.variables` to return only scalars will now be surprised to get all types. Easy to replace with `Wfn.get_scalar_variables`.; - Any code that wrote to Wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needs to be changed to `""UPPER-CASE VAR""` or to `wfn.set_scalar_variables`; - Any code that tries to access a non-existent global will now throw, hence the fixes to the driver and test cases you see here. ## Checklist; - [x] Tests added for any new features; - [x] quick tests pass and I've run a full tests with this+other c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:1755,Modifiability,variab,variables,1755,"- [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. ```. ## Breaking Changes; - Not many, as there's heavy use of deprecation; - Any access that expected `Wfn.variables` to return only scalars will now be surprised to get all types. Easy to replace with `Wfn.get_scalar_variables`.; - Any code that wrote to Wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needs to be changed to `""UPPER-CASE VAR""` or to `wfn.set_scalar_variables`; - Any code that tries to access a non-existent global will now throw, hence the fixes to the driver and test cases you see here. ## Checklist; - [x] Tests added for any new features; - [x] quick tests pass and I've run a full tests with this+other commits. ## Status; - [x] Ready for review; - [x] R",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:1926,Modifiability,variab,variable,1926,"(and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. ```. ## Breaking Changes; - Not many, as there's heavy use of deprecation; - Any access that expected `Wfn.variables` to return only scalars will now be surprised to get all types. Easy to replace with `Wfn.get_scalar_variables`.; - Any code that wrote to Wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needs to be changed to `""UPPER-CASE VAR""` or to `wfn.set_scalar_variables`; - Any code that tries to access a non-existent global will now throw, hence the fixes to the driver and test cases you see here. ## Checklist; - [x] Tests added for any new features; - [x] quick tests pass and I've run a full tests with this+other commits. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:1979,Modifiability,variab,variables,1979,"(and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. ```. ## Breaking Changes; - Not many, as there's heavy use of deprecation; - Any access that expected `Wfn.variables` to return only scalars will now be surprised to get all types. Easy to replace with `Wfn.get_scalar_variables`.; - Any code that wrote to Wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needs to be changed to `""UPPER-CASE VAR""` or to `wfn.set_scalar_variables`; - Any code that tries to access a non-existent global will now throw, hence the fixes to the driver and test cases you see here. ## Checklist; - [x] Tests added for any new features; - [x] quick tests pass and I've run a full tests with this+other commits. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:2150,Modifiability,variab,variables,2150,"(and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. ```. ## Breaking Changes; - Not many, as there's heavy use of deprecation; - Any access that expected `Wfn.variables` to return only scalars will now be surprised to get all types. Easy to replace with `Wfn.get_scalar_variables`.; - Any code that wrote to Wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needs to be changed to `""UPPER-CASE VAR""` or to `wfn.set_scalar_variables`; - Any code that tries to access a non-existent global will now throw, hence the fixes to the driver and test cases you see here. ## Checklist; - [x] Tests added for any new features; - [x] quick tests pass and I've run a full tests with this+other commits. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:219,Security,access,access,219,"An implementation for #1375 PsiPEP 002. ## Todos; - [x] Standardizes function names surrounding scalar and array variables in globals & Wfn. Fills in missing methods.; - [x] C-side deprecates old names for Wfn variable access (compile-time for C-API downstream); - [x] Py-side deprecates old names for global and Wfn variable access (run-time for Py-API downstream, incl. Psithon inputs); - [x] New set of functions (reuse of many of the old fn names) for uniform access; - [x] Wfn variable access now case insensitive and storage always uppercase (as globals always has); - [x] array variable getters/setters now return _copies_ of the arrays; - [x] globals now throws instead of autovivifying to 0 when getter called for non-existant key (as Wfn always has); - [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is dep",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:326,Security,access,access,326,"An implementation for #1375 PsiPEP 002. ## Todos; - [x] Standardizes function names surrounding scalar and array variables in globals & Wfn. Fills in missing methods.; - [x] C-side deprecates old names for Wfn variable access (compile-time for C-API downstream); - [x] Py-side deprecates old names for global and Wfn variable access (run-time for Py-API downstream, incl. Psithon inputs); - [x] New set of functions (reuse of many of the old fn names) for uniform access; - [x] Wfn variable access now case insensitive and storage always uppercase (as globals always has); - [x] array variable getters/setters now return _copies_ of the arrays; - [x] globals now throws instead of autovivifying to 0 when getter called for non-existant key (as Wfn always has); - [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is dep",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:464,Security,access,access,464,"An implementation for #1375 PsiPEP 002. ## Todos; - [x] Standardizes function names surrounding scalar and array variables in globals & Wfn. Fills in missing methods.; - [x] C-side deprecates old names for Wfn variable access (compile-time for C-API downstream); - [x] Py-side deprecates old names for global and Wfn variable access (run-time for Py-API downstream, incl. Psithon inputs); - [x] New set of functions (reuse of many of the old fn names) for uniform access; - [x] Wfn variable access now case insensitive and storage always uppercase (as globals always has); - [x] array variable getters/setters now return _copies_ of the arrays; - [x] globals now throws instead of autovivifying to 0 when getter called for non-existant key (as Wfn always has); - [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is dep",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:491,Security,access,access,491,"An implementation for #1375 PsiPEP 002. ## Todos; - [x] Standardizes function names surrounding scalar and array variables in globals & Wfn. Fills in missing methods.; - [x] C-side deprecates old names for Wfn variable access (compile-time for C-API downstream); - [x] Py-side deprecates old names for global and Wfn variable access (run-time for Py-API downstream, incl. Psithon inputs); - [x] New set of functions (reuse of many of the old fn names) for uniform access; - [x] Wfn variable access now case insensitive and storage always uppercase (as globals always has); - [x] array variable getters/setters now return _copies_ of the arrays; - [x] globals now throws instead of autovivifying to 0 when getter called for non-existant key (as Wfn always has); - [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is dep",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:798,Security,access,access,798,"An implementation for #1375 PsiPEP 002. ## Todos; - [x] Standardizes function names surrounding scalar and array variables in globals & Wfn. Fills in missing methods.; - [x] C-side deprecates old names for Wfn variable access (compile-time for C-API downstream); - [x] Py-side deprecates old names for global and Wfn variable access (run-time for Py-API downstream, incl. Psithon inputs); - [x] New set of functions (reuse of many of the old fn names) for uniform access; - [x] Wfn variable access now case insensitive and storage always uppercase (as globals always has); - [x] array variable getters/setters now return _copies_ of the arrays; - [x] globals now throws instead of autovivifying to 0 when getter called for non-existant key (as Wfn always has); - [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is dep",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:2124,Security,access,access,2124,"(and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. ```. ## Breaking Changes; - Not many, as there's heavy use of deprecation; - Any access that expected `Wfn.variables` to return only scalars will now be surprised to get all types. Easy to replace with `Wfn.get_scalar_variables`.; - Any code that wrote to Wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needs to be changed to `""UPPER-CASE VAR""` or to `wfn.set_scalar_variables`; - Any code that tries to access a non-existent global will now throw, hence the fixes to the driver and test cases you see here. ## Checklist; - [x] Tests added for any new features; - [x] quick tests pass and I've run a full tests with this+other commits. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:2487,Security,access,access,2487,"(and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. ```. ## Breaking Changes; - Not many, as there's heavy use of deprecation; - Any access that expected `Wfn.variables` to return only scalars will now be surprised to get all types. Easy to replace with `Wfn.get_scalar_variables`.; - Any code that wrote to Wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needs to be changed to `""UPPER-CASE VAR""` or to `wfn.set_scalar_variables`; - Any code that tries to access a non-existent global will now throw, hence the fixes to the driver and test cases you see here. ## Checklist; - [x] Tests added for any new features; - [x] quick tests pass and I've run a full tests with this+other commits. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:2566,Testability,test,test,2566,"(and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. ```. ## Breaking Changes; - Not many, as there's heavy use of deprecation; - Any access that expected `Wfn.variables` to return only scalars will now be surprised to get all types. Easy to replace with `Wfn.get_scalar_variables`.; - Any code that wrote to Wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needs to be changed to `""UPPER-CASE VAR""` or to `wfn.set_scalar_variables`; - Any code that tries to access a non-existent global will now throw, hence the fixes to the driver and test cases you see here. ## Checklist; - [x] Tests added for any new features; - [x] quick tests pass and I've run a full tests with this+other commits. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:2611,Testability,Test,Tests,2611,"(and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. ```. ## Breaking Changes; - Not many, as there's heavy use of deprecation; - Any access that expected `Wfn.variables` to return only scalars will now be surprised to get all types. Easy to replace with `Wfn.get_scalar_variables`.; - Any code that wrote to Wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needs to be changed to `""UPPER-CASE VAR""` or to `wfn.set_scalar_variables`; - Any code that tries to access a non-existent global will now throw, hence the fixes to the driver and test cases you see here. ## Checklist; - [x] Tests added for any new features; - [x] quick tests pass and I've run a full tests with this+other commits. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:2657,Testability,test,tests,2657,"(and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. ```. ## Breaking Changes; - Not many, as there's heavy use of deprecation; - Any access that expected `Wfn.variables` to return only scalars will now be surprised to get all types. Easy to replace with `Wfn.get_scalar_variables`.; - Any code that wrote to Wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needs to be changed to `""UPPER-CASE VAR""` or to `wfn.set_scalar_variables`; - Any code that tries to access a non-existent global will now throw, hence the fixes to the driver and test cases you see here. ## Checklist; - [x] Tests added for any new features; - [x] quick tests pass and I've run a full tests with this+other commits. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1393:2688,Testability,test,tests,2688,"(and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. ```. ## Breaking Changes; - Not many, as there's heavy use of deprecation; - Any access that expected `Wfn.variables` to return only scalars will now be surprised to get all types. Easy to replace with `Wfn.get_scalar_variables`.; - Any code that wrote to Wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needs to be changed to `""UPPER-CASE VAR""` or to `wfn.set_scalar_variables`; - Any code that tries to access a non-existent global will now throw, hence the fixes to the driver and test cases you see here. ## Checklist; - [x] Tests added for any new features; - [x] quick tests pass and I've run a full tests with this+other commits. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1393
https://github.com/psi4/psi4/pull/1394:605,Availability,down,downstream,605,"## Description; Miscellaneous substantive changes short of moving vars from globals to wfn. ## Todos; - [x] for FINDIF, renamed some functions for easier comprehension (e.g., `compute_gradient_from_energy` --> `compute_gradient_from_energies`). speak up, @JonathonMisiewicz if I've misinterpreted anything (it won't count in GH's reckoning, but you're always welcome to review).; - [x] `core.get_gradient`/`core.set_gradient` aren't regularly set, even in v1.2, being used only in internal communication for OPTKING. I consider this effectively a silent deprecation in 1.2, so made that official (in case downstream using it), and renamed to `legacy_gradient` internally, until the demise of C-optking.; - [x] de-py2-adapted `psi4.driver.p4util`; - [x] fixed bug where in `driver_fn(..., kwargvar=None)`, `kwargvar` turned into `False`; - [x] deprecated many old fns in p4util -- see if you agree. Most for v1.4 but a few for v1.3.; - [x] added tolerance field to `compare_wavefunctions`; - [x] renamed and `_`-prefixed many functions in python_helpers.py so connection to demangled fn name easier to track and the `import *` doesn't contaminate namespace; - [x] for dfmp2, energy was starting the timer _after_ `scf_helper`, gradient was starting timer _before_ SCF, and properties wasn't timing at all. changed the latter two to match the first.; - [x] added `set_energy` to Wfn; - [x] `psi4 --fulltest -n NTHREAD` available to run full pytest test suite. Parallel only available if `pytest-xdist` installed (`conda install pytest-xdist`). ## Checklist; - [ ] ~Tests added for any new features~; - [x] quick tests is fine at this PR. full tests of this + other commits is fine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1394
https://github.com/psi4/psi4/pull/1394:945,Availability,toler,tolerance,945,"## Description; Miscellaneous substantive changes short of moving vars from globals to wfn. ## Todos; - [x] for FINDIF, renamed some functions for easier comprehension (e.g., `compute_gradient_from_energy` --> `compute_gradient_from_energies`). speak up, @JonathonMisiewicz if I've misinterpreted anything (it won't count in GH's reckoning, but you're always welcome to review).; - [x] `core.get_gradient`/`core.set_gradient` aren't regularly set, even in v1.2, being used only in internal communication for OPTKING. I consider this effectively a silent deprecation in 1.2, so made that official (in case downstream using it), and renamed to `legacy_gradient` internally, until the demise of C-optking.; - [x] de-py2-adapted `psi4.driver.p4util`; - [x] fixed bug where in `driver_fn(..., kwargvar=None)`, `kwargvar` turned into `False`; - [x] deprecated many old fns in p4util -- see if you agree. Most for v1.4 but a few for v1.3.; - [x] added tolerance field to `compare_wavefunctions`; - [x] renamed and `_`-prefixed many functions in python_helpers.py so connection to demangled fn name easier to track and the `import *` doesn't contaminate namespace; - [x] for dfmp2, energy was starting the timer _after_ `scf_helper`, gradient was starting timer _before_ SCF, and properties wasn't timing at all. changed the latter two to match the first.; - [x] added `set_energy` to Wfn; - [x] `psi4 --fulltest -n NTHREAD` available to run full pytest test suite. Parallel only available if `pytest-xdist` installed (`conda install pytest-xdist`). ## Checklist; - [ ] ~Tests added for any new features~; - [x] quick tests is fine at this PR. full tests of this + other commits is fine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1394
https://github.com/psi4/psi4/pull/1394:1417,Availability,avail,available,1417,"## Description; Miscellaneous substantive changes short of moving vars from globals to wfn. ## Todos; - [x] for FINDIF, renamed some functions for easier comprehension (e.g., `compute_gradient_from_energy` --> `compute_gradient_from_energies`). speak up, @JonathonMisiewicz if I've misinterpreted anything (it won't count in GH's reckoning, but you're always welcome to review).; - [x] `core.get_gradient`/`core.set_gradient` aren't regularly set, even in v1.2, being used only in internal communication for OPTKING. I consider this effectively a silent deprecation in 1.2, so made that official (in case downstream using it), and renamed to `legacy_gradient` internally, until the demise of C-optking.; - [x] de-py2-adapted `psi4.driver.p4util`; - [x] fixed bug where in `driver_fn(..., kwargvar=None)`, `kwargvar` turned into `False`; - [x] deprecated many old fns in p4util -- see if you agree. Most for v1.4 but a few for v1.3.; - [x] added tolerance field to `compare_wavefunctions`; - [x] renamed and `_`-prefixed many functions in python_helpers.py so connection to demangled fn name easier to track and the `import *` doesn't contaminate namespace; - [x] for dfmp2, energy was starting the timer _after_ `scf_helper`, gradient was starting timer _before_ SCF, and properties wasn't timing at all. changed the latter two to match the first.; - [x] added `set_energy` to Wfn; - [x] `psi4 --fulltest -n NTHREAD` available to run full pytest test suite. Parallel only available if `pytest-xdist` installed (`conda install pytest-xdist`). ## Checklist; - [ ] ~Tests added for any new features~; - [x] quick tests is fine at this PR. full tests of this + other commits is fine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1394
https://github.com/psi4/psi4/pull/1394:1472,Availability,avail,available,1472,"## Description; Miscellaneous substantive changes short of moving vars from globals to wfn. ## Todos; - [x] for FINDIF, renamed some functions for easier comprehension (e.g., `compute_gradient_from_energy` --> `compute_gradient_from_energies`). speak up, @JonathonMisiewicz if I've misinterpreted anything (it won't count in GH's reckoning, but you're always welcome to review).; - [x] `core.get_gradient`/`core.set_gradient` aren't regularly set, even in v1.2, being used only in internal communication for OPTKING. I consider this effectively a silent deprecation in 1.2, so made that official (in case downstream using it), and renamed to `legacy_gradient` internally, until the demise of C-optking.; - [x] de-py2-adapted `psi4.driver.p4util`; - [x] fixed bug where in `driver_fn(..., kwargvar=None)`, `kwargvar` turned into `False`; - [x] deprecated many old fns in p4util -- see if you agree. Most for v1.4 but a few for v1.3.; - [x] added tolerance field to `compare_wavefunctions`; - [x] renamed and `_`-prefixed many functions in python_helpers.py so connection to demangled fn name easier to track and the `import *` doesn't contaminate namespace; - [x] for dfmp2, energy was starting the timer _after_ `scf_helper`, gradient was starting timer _before_ SCF, and properties wasn't timing at all. changed the latter two to match the first.; - [x] added `set_energy` to Wfn; - [x] `psi4 --fulltest -n NTHREAD` available to run full pytest test suite. Parallel only available if `pytest-xdist` installed (`conda install pytest-xdist`). ## Checklist; - [ ] ~Tests added for any new features~; - [x] quick tests is fine at this PR. full tests of this + other commits is fine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1394
https://github.com/psi4/psi4/pull/1394:1500,Deployability,install,installed,1500,"## Description; Miscellaneous substantive changes short of moving vars from globals to wfn. ## Todos; - [x] for FINDIF, renamed some functions for easier comprehension (e.g., `compute_gradient_from_energy` --> `compute_gradient_from_energies`). speak up, @JonathonMisiewicz if I've misinterpreted anything (it won't count in GH's reckoning, but you're always welcome to review).; - [x] `core.get_gradient`/`core.set_gradient` aren't regularly set, even in v1.2, being used only in internal communication for OPTKING. I consider this effectively a silent deprecation in 1.2, so made that official (in case downstream using it), and renamed to `legacy_gradient` internally, until the demise of C-optking.; - [x] de-py2-adapted `psi4.driver.p4util`; - [x] fixed bug where in `driver_fn(..., kwargvar=None)`, `kwargvar` turned into `False`; - [x] deprecated many old fns in p4util -- see if you agree. Most for v1.4 but a few for v1.3.; - [x] added tolerance field to `compare_wavefunctions`; - [x] renamed and `_`-prefixed many functions in python_helpers.py so connection to demangled fn name easier to track and the `import *` doesn't contaminate namespace; - [x] for dfmp2, energy was starting the timer _after_ `scf_helper`, gradient was starting timer _before_ SCF, and properties wasn't timing at all. changed the latter two to match the first.; - [x] added `set_energy` to Wfn; - [x] `psi4 --fulltest -n NTHREAD` available to run full pytest test suite. Parallel only available if `pytest-xdist` installed (`conda install pytest-xdist`). ## Checklist; - [ ] ~Tests added for any new features~; - [x] quick tests is fine at this PR. full tests of this + other commits is fine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1394
https://github.com/psi4/psi4/pull/1394:1518,Deployability,install,install,1518,"## Description; Miscellaneous substantive changes short of moving vars from globals to wfn. ## Todos; - [x] for FINDIF, renamed some functions for easier comprehension (e.g., `compute_gradient_from_energy` --> `compute_gradient_from_energies`). speak up, @JonathonMisiewicz if I've misinterpreted anything (it won't count in GH's reckoning, but you're always welcome to review).; - [x] `core.get_gradient`/`core.set_gradient` aren't regularly set, even in v1.2, being used only in internal communication for OPTKING. I consider this effectively a silent deprecation in 1.2, so made that official (in case downstream using it), and renamed to `legacy_gradient` internally, until the demise of C-optking.; - [x] de-py2-adapted `psi4.driver.p4util`; - [x] fixed bug where in `driver_fn(..., kwargvar=None)`, `kwargvar` turned into `False`; - [x] deprecated many old fns in p4util -- see if you agree. Most for v1.4 but a few for v1.3.; - [x] added tolerance field to `compare_wavefunctions`; - [x] renamed and `_`-prefixed many functions in python_helpers.py so connection to demangled fn name easier to track and the `import *` doesn't contaminate namespace; - [x] for dfmp2, energy was starting the timer _after_ `scf_helper`, gradient was starting timer _before_ SCF, and properties wasn't timing at all. changed the latter two to match the first.; - [x] added `set_energy` to Wfn; - [x] `psi4 --fulltest -n NTHREAD` available to run full pytest test suite. Parallel only available if `pytest-xdist` installed (`conda install pytest-xdist`). ## Checklist; - [ ] ~Tests added for any new features~; - [x] quick tests is fine at this PR. full tests of this + other commits is fine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1394
https://github.com/psi4/psi4/pull/1394:717,Energy Efficiency,adapt,adapted,717,"## Description; Miscellaneous substantive changes short of moving vars from globals to wfn. ## Todos; - [x] for FINDIF, renamed some functions for easier comprehension (e.g., `compute_gradient_from_energy` --> `compute_gradient_from_energies`). speak up, @JonathonMisiewicz if I've misinterpreted anything (it won't count in GH's reckoning, but you're always welcome to review).; - [x] `core.get_gradient`/`core.set_gradient` aren't regularly set, even in v1.2, being used only in internal communication for OPTKING. I consider this effectively a silent deprecation in 1.2, so made that official (in case downstream using it), and renamed to `legacy_gradient` internally, until the demise of C-optking.; - [x] de-py2-adapted `psi4.driver.p4util`; - [x] fixed bug where in `driver_fn(..., kwargvar=None)`, `kwargvar` turned into `False`; - [x] deprecated many old fns in p4util -- see if you agree. Most for v1.4 but a few for v1.3.; - [x] added tolerance field to `compare_wavefunctions`; - [x] renamed and `_`-prefixed many functions in python_helpers.py so connection to demangled fn name easier to track and the `import *` doesn't contaminate namespace; - [x] for dfmp2, energy was starting the timer _after_ `scf_helper`, gradient was starting timer _before_ SCF, and properties wasn't timing at all. changed the latter two to match the first.; - [x] added `set_energy` to Wfn; - [x] `psi4 --fulltest -n NTHREAD` available to run full pytest test suite. Parallel only available if `pytest-xdist` installed (`conda install pytest-xdist`). ## Checklist; - [ ] ~Tests added for any new features~; - [x] quick tests is fine at this PR. full tests of this + other commits is fine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1394
https://github.com/psi4/psi4/pull/1394:1174,Energy Efficiency,energy,energy,1174,"## Description; Miscellaneous substantive changes short of moving vars from globals to wfn. ## Todos; - [x] for FINDIF, renamed some functions for easier comprehension (e.g., `compute_gradient_from_energy` --> `compute_gradient_from_energies`). speak up, @JonathonMisiewicz if I've misinterpreted anything (it won't count in GH's reckoning, but you're always welcome to review).; - [x] `core.get_gradient`/`core.set_gradient` aren't regularly set, even in v1.2, being used only in internal communication for OPTKING. I consider this effectively a silent deprecation in 1.2, so made that official (in case downstream using it), and renamed to `legacy_gradient` internally, until the demise of C-optking.; - [x] de-py2-adapted `psi4.driver.p4util`; - [x] fixed bug where in `driver_fn(..., kwargvar=None)`, `kwargvar` turned into `False`; - [x] deprecated many old fns in p4util -- see if you agree. Most for v1.4 but a few for v1.3.; - [x] added tolerance field to `compare_wavefunctions`; - [x] renamed and `_`-prefixed many functions in python_helpers.py so connection to demangled fn name easier to track and the `import *` doesn't contaminate namespace; - [x] for dfmp2, energy was starting the timer _after_ `scf_helper`, gradient was starting timer _before_ SCF, and properties wasn't timing at all. changed the latter two to match the first.; - [x] added `set_energy` to Wfn; - [x] `psi4 --fulltest -n NTHREAD` available to run full pytest test suite. Parallel only available if `pytest-xdist` installed (`conda install pytest-xdist`). ## Checklist; - [ ] ~Tests added for any new features~; - [x] quick tests is fine at this PR. full tests of this + other commits is fine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1394
https://github.com/psi4/psi4/pull/1394:717,Modifiability,adapt,adapted,717,"## Description; Miscellaneous substantive changes short of moving vars from globals to wfn. ## Todos; - [x] for FINDIF, renamed some functions for easier comprehension (e.g., `compute_gradient_from_energy` --> `compute_gradient_from_energies`). speak up, @JonathonMisiewicz if I've misinterpreted anything (it won't count in GH's reckoning, but you're always welcome to review).; - [x] `core.get_gradient`/`core.set_gradient` aren't regularly set, even in v1.2, being used only in internal communication for OPTKING. I consider this effectively a silent deprecation in 1.2, so made that official (in case downstream using it), and renamed to `legacy_gradient` internally, until the demise of C-optking.; - [x] de-py2-adapted `psi4.driver.p4util`; - [x] fixed bug where in `driver_fn(..., kwargvar=None)`, `kwargvar` turned into `False`; - [x] deprecated many old fns in p4util -- see if you agree. Most for v1.4 but a few for v1.3.; - [x] added tolerance field to `compare_wavefunctions`; - [x] renamed and `_`-prefixed many functions in python_helpers.py so connection to demangled fn name easier to track and the `import *` doesn't contaminate namespace; - [x] for dfmp2, energy was starting the timer _after_ `scf_helper`, gradient was starting timer _before_ SCF, and properties wasn't timing at all. changed the latter two to match the first.; - [x] added `set_energy` to Wfn; - [x] `psi4 --fulltest -n NTHREAD` available to run full pytest test suite. Parallel only available if `pytest-xdist` installed (`conda install pytest-xdist`). ## Checklist; - [ ] ~Tests added for any new features~; - [x] quick tests is fine at this PR. full tests of this + other commits is fine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1394
https://github.com/psi4/psi4/pull/1394:1446,Testability,test,test,1446,"## Description; Miscellaneous substantive changes short of moving vars from globals to wfn. ## Todos; - [x] for FINDIF, renamed some functions for easier comprehension (e.g., `compute_gradient_from_energy` --> `compute_gradient_from_energies`). speak up, @JonathonMisiewicz if I've misinterpreted anything (it won't count in GH's reckoning, but you're always welcome to review).; - [x] `core.get_gradient`/`core.set_gradient` aren't regularly set, even in v1.2, being used only in internal communication for OPTKING. I consider this effectively a silent deprecation in 1.2, so made that official (in case downstream using it), and renamed to `legacy_gradient` internally, until the demise of C-optking.; - [x] de-py2-adapted `psi4.driver.p4util`; - [x] fixed bug where in `driver_fn(..., kwargvar=None)`, `kwargvar` turned into `False`; - [x] deprecated many old fns in p4util -- see if you agree. Most for v1.4 but a few for v1.3.; - [x] added tolerance field to `compare_wavefunctions`; - [x] renamed and `_`-prefixed many functions in python_helpers.py so connection to demangled fn name easier to track and the `import *` doesn't contaminate namespace; - [x] for dfmp2, energy was starting the timer _after_ `scf_helper`, gradient was starting timer _before_ SCF, and properties wasn't timing at all. changed the latter two to match the first.; - [x] added `set_energy` to Wfn; - [x] `psi4 --fulltest -n NTHREAD` available to run full pytest test suite. Parallel only available if `pytest-xdist` installed (`conda install pytest-xdist`). ## Checklist; - [ ] ~Tests added for any new features~; - [x] quick tests is fine at this PR. full tests of this + other commits is fine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1394
https://github.com/psi4/psi4/pull/1394:1563,Testability,Test,Tests,1563,"## Description; Miscellaneous substantive changes short of moving vars from globals to wfn. ## Todos; - [x] for FINDIF, renamed some functions for easier comprehension (e.g., `compute_gradient_from_energy` --> `compute_gradient_from_energies`). speak up, @JonathonMisiewicz if I've misinterpreted anything (it won't count in GH's reckoning, but you're always welcome to review).; - [x] `core.get_gradient`/`core.set_gradient` aren't regularly set, even in v1.2, being used only in internal communication for OPTKING. I consider this effectively a silent deprecation in 1.2, so made that official (in case downstream using it), and renamed to `legacy_gradient` internally, until the demise of C-optking.; - [x] de-py2-adapted `psi4.driver.p4util`; - [x] fixed bug where in `driver_fn(..., kwargvar=None)`, `kwargvar` turned into `False`; - [x] deprecated many old fns in p4util -- see if you agree. Most for v1.4 but a few for v1.3.; - [x] added tolerance field to `compare_wavefunctions`; - [x] renamed and `_`-prefixed many functions in python_helpers.py so connection to demangled fn name easier to track and the `import *` doesn't contaminate namespace; - [x] for dfmp2, energy was starting the timer _after_ `scf_helper`, gradient was starting timer _before_ SCF, and properties wasn't timing at all. changed the latter two to match the first.; - [x] added `set_energy` to Wfn; - [x] `psi4 --fulltest -n NTHREAD` available to run full pytest test suite. Parallel only available if `pytest-xdist` installed (`conda install pytest-xdist`). ## Checklist; - [ ] ~Tests added for any new features~; - [x] quick tests is fine at this PR. full tests of this + other commits is fine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1394
https://github.com/psi4/psi4/pull/1394:1610,Testability,test,tests,1610,"## Description; Miscellaneous substantive changes short of moving vars from globals to wfn. ## Todos; - [x] for FINDIF, renamed some functions for easier comprehension (e.g., `compute_gradient_from_energy` --> `compute_gradient_from_energies`). speak up, @JonathonMisiewicz if I've misinterpreted anything (it won't count in GH's reckoning, but you're always welcome to review).; - [x] `core.get_gradient`/`core.set_gradient` aren't regularly set, even in v1.2, being used only in internal communication for OPTKING. I consider this effectively a silent deprecation in 1.2, so made that official (in case downstream using it), and renamed to `legacy_gradient` internally, until the demise of C-optking.; - [x] de-py2-adapted `psi4.driver.p4util`; - [x] fixed bug where in `driver_fn(..., kwargvar=None)`, `kwargvar` turned into `False`; - [x] deprecated many old fns in p4util -- see if you agree. Most for v1.4 but a few for v1.3.; - [x] added tolerance field to `compare_wavefunctions`; - [x] renamed and `_`-prefixed many functions in python_helpers.py so connection to demangled fn name easier to track and the `import *` doesn't contaminate namespace; - [x] for dfmp2, energy was starting the timer _after_ `scf_helper`, gradient was starting timer _before_ SCF, and properties wasn't timing at all. changed the latter two to match the first.; - [x] added `set_energy` to Wfn; - [x] `psi4 --fulltest -n NTHREAD` available to run full pytest test suite. Parallel only available if `pytest-xdist` installed (`conda install pytest-xdist`). ## Checklist; - [ ] ~Tests added for any new features~; - [x] quick tests is fine at this PR. full tests of this + other commits is fine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1394
https://github.com/psi4/psi4/pull/1394:1641,Testability,test,tests,1641,"## Description; Miscellaneous substantive changes short of moving vars from globals to wfn. ## Todos; - [x] for FINDIF, renamed some functions for easier comprehension (e.g., `compute_gradient_from_energy` --> `compute_gradient_from_energies`). speak up, @JonathonMisiewicz if I've misinterpreted anything (it won't count in GH's reckoning, but you're always welcome to review).; - [x] `core.get_gradient`/`core.set_gradient` aren't regularly set, even in v1.2, being used only in internal communication for OPTKING. I consider this effectively a silent deprecation in 1.2, so made that official (in case downstream using it), and renamed to `legacy_gradient` internally, until the demise of C-optking.; - [x] de-py2-adapted `psi4.driver.p4util`; - [x] fixed bug where in `driver_fn(..., kwargvar=None)`, `kwargvar` turned into `False`; - [x] deprecated many old fns in p4util -- see if you agree. Most for v1.4 but a few for v1.3.; - [x] added tolerance field to `compare_wavefunctions`; - [x] renamed and `_`-prefixed many functions in python_helpers.py so connection to demangled fn name easier to track and the `import *` doesn't contaminate namespace; - [x] for dfmp2, energy was starting the timer _after_ `scf_helper`, gradient was starting timer _before_ SCF, and properties wasn't timing at all. changed the latter two to match the first.; - [x] added `set_energy` to Wfn; - [x] `psi4 --fulltest -n NTHREAD` available to run full pytest test suite. Parallel only available if `pytest-xdist` installed (`conda install pytest-xdist`). ## Checklist; - [ ] ~Tests added for any new features~; - [x] quick tests is fine at this PR. full tests of this + other commits is fine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1394
https://github.com/psi4/psi4/pull/1395:16,Deployability,update,updates,16,"## Description; updates ixyz2database.py for py3, removes setenv.py, fixes #1367. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1395
https://github.com/psi4/psi4/pull/1398:1129,Availability,error,error,1129,"## Description; Set the minimum required C++ standard to C++14. Lower bounds on compilers can be found [here](https://en.cppreference.com/w/cpp/compiler_support#cpp14). Also addresses a bug in the SAPT code that resulted in a double free. ## About the SAPT bug; The Iterator class in SAPT contained an `int *` array that was cleaned up by the class's destructor. Iterator objects are constructed by a builder routine that first creates a local Iterator object, fills it, then returns it by value. The C++98 behavior of this design is problematic; a copy of the local temp Iterator is made and that copy is returned to the caller. When that copy is made, both the local temp and its copy have `int *` pointers that point to the same pool of memory because no deep-copy copy constructor exists for Iterator. Upon returning, the local temp object is destroyed, triggering the memory pointed to by the `int *` to be freed, causing the returned object to point to freed memory which is undefined behavior. When that returned object eventually goes out of scope, it will try to free the memory again, leading to the double free memory error we observed. Because we use C++11 most compilers appear to be able to correctly elide the copy, by implementing move semantics, so we haven't seen this before. The switch to C++14 with GCC5.4 caused consistent segfaults, revealing the issue. The fix is simple; don't use raw `int *`, but `std::vector<int>` instead; the lifetime of these is correctly managed automatically and the various move constructor/copy constructor/destructor can be generated correctly by the compiler. RAII for the win!. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix C++14 compliance CMake-side; - [x] Fix memory bug in SAPT code; - [x] Move Travis to Xenial. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1398
https://github.com/psi4/psi4/pull/1398:409,Integrability,rout,routine,409,"## Description; Set the minimum required C++ standard to C++14. Lower bounds on compilers can be found [here](https://en.cppreference.com/w/cpp/compiler_support#cpp14). Also addresses a bug in the SAPT code that resulted in a double free. ## About the SAPT bug; The Iterator class in SAPT contained an `int *` array that was cleaned up by the class's destructor. Iterator objects are constructed by a builder routine that first creates a local Iterator object, fills it, then returns it by value. The C++98 behavior of this design is problematic; a copy of the local temp Iterator is made and that copy is returned to the caller. When that copy is made, both the local temp and its copy have `int *` pointers that point to the same pool of memory because no deep-copy copy constructor exists for Iterator. Upon returning, the local temp object is destroyed, triggering the memory pointed to by the `int *` to be freed, causing the returned object to point to freed memory which is undefined behavior. When that returned object eventually goes out of scope, it will try to free the memory again, leading to the double free memory error we observed. Because we use C++11 most compilers appear to be able to correctly elide the copy, by implementing move semantics, so we haven't seen this before. The switch to C++14 with GCC5.4 caused consistent segfaults, revealing the issue. The fix is simple; don't use raw `int *`, but `std::vector<int>` instead; the lifetime of these is correctly managed automatically and the various move constructor/copy constructor/destructor can be generated correctly by the compiler. RAII for the win!. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix C++14 compliance CMake-side; - [x] Fix memory bug in SAPT code; - [x] Move Travis to Xenial. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1398
https://github.com/psi4/psi4/pull/1398:1388,Usability,simpl,simple,1388,"## Description; Set the minimum required C++ standard to C++14. Lower bounds on compilers can be found [here](https://en.cppreference.com/w/cpp/compiler_support#cpp14). Also addresses a bug in the SAPT code that resulted in a double free. ## About the SAPT bug; The Iterator class in SAPT contained an `int *` array that was cleaned up by the class's destructor. Iterator objects are constructed by a builder routine that first creates a local Iterator object, fills it, then returns it by value. The C++98 behavior of this design is problematic; a copy of the local temp Iterator is made and that copy is returned to the caller. When that copy is made, both the local temp and its copy have `int *` pointers that point to the same pool of memory because no deep-copy copy constructor exists for Iterator. Upon returning, the local temp object is destroyed, triggering the memory pointed to by the `int *` to be freed, causing the returned object to point to freed memory which is undefined behavior. When that returned object eventually goes out of scope, it will try to free the memory again, leading to the double free memory error we observed. Because we use C++11 most compilers appear to be able to correctly elide the copy, by implementing move semantics, so we haven't seen this before. The switch to C++14 with GCC5.4 caused consistent segfaults, revealing the issue. The fix is simple; don't use raw `int *`, but `std::vector<int>` instead; the lifetime of these is correctly managed automatically and the various move constructor/copy constructor/destructor can be generated correctly by the compiler. RAII for the win!. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix C++14 compliance CMake-side; - [x] Fix memory bug in SAPT code; - [x] Move Travis to Xenial. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1398
https://github.com/psi4/psi4/pull/1399:235,Deployability,Update,Update,235,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add the OpenMP test to Azure; - [x] Add failing ctests to Azure; - [x] Update pytest. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1399
https://github.com/psi4/psi4/pull/1399:179,Testability,test,test,179,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add the OpenMP test to Azure; - [x] Add failing ctests to Azure; - [x] Update pytest. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1399
https://github.com/psi4/psi4/pull/1399:272,Testability,Test,Tests,272,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add the OpenMP test to Azure; - [x] Add failing ctests to Azure; - [x] Update pytest. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1399
https://github.com/psi4/psi4/pull/1399:348,Testability,test,tests,348,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add the OpenMP test to Azure; - [x] Add failing ctests to Azure; - [x] Update pytest. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1399
https://github.com/psi4/psi4/pull/1399:439,Testability,test,tests,439,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add the OpenMP test to Azure; - [x] Add failing ctests to Azure; - [x] Update pytest. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1399
https://github.com/psi4/psi4/pull/1400:64,Modifiability,plugin,plugins,64,## Description; This PR exposes all of libmints and libciomr to plugins via the PSI_API macro. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Expose libmints; - [x] Expose libciomr; - [x] Expose JK and Denominator classes; - [x] Expose Options print functions. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1400
https://github.com/psi4/psi4/pull/1400:24,Security,expose,exposes,24,## Description; This PR exposes all of libmints and libciomr to plugins via the PSI_API macro. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Expose libmints; - [x] Expose libciomr; - [x] Expose JK and Denominator classes; - [x] Expose Options print functions. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1400
https://github.com/psi4/psi4/pull/1400:193,Security,Expose,Expose,193,## Description; This PR exposes all of libmints and libciomr to plugins via the PSI_API macro. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Expose libmints; - [x] Expose libciomr; - [x] Expose JK and Denominator classes; - [x] Expose Options print functions. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1400
https://github.com/psi4/psi4/pull/1400:216,Security,Expose,Expose,216,## Description; This PR exposes all of libmints and libciomr to plugins via the PSI_API macro. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Expose libmints; - [x] Expose libciomr; - [x] Expose JK and Denominator classes; - [x] Expose Options print functions. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1400
https://github.com/psi4/psi4/pull/1400:239,Security,Expose,Expose,239,## Description; This PR exposes all of libmints and libciomr to plugins via the PSI_API macro. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Expose libmints; - [x] Expose libciomr; - [x] Expose JK and Denominator classes; - [x] Expose Options print functions. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1400
https://github.com/psi4/psi4/pull/1400:280,Security,Expose,Expose,280,## Description; This PR exposes all of libmints and libciomr to plugins via the PSI_API macro. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Expose libmints; - [x] Expose libciomr; - [x] Expose JK and Denominator classes; - [x] Expose Options print functions. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1400
https://github.com/psi4/psi4/pull/1400:366,Testability,test,tests,366,## Description; This PR exposes all of libmints and libciomr to plugins via the PSI_API macro. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Expose libmints; - [x] Expose libciomr; - [x] Expose JK and Denominator classes; - [x] Expose Options print functions. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1400
https://github.com/psi4/psi4/pull/1400:457,Testability,test,tests,457,## Description; This PR exposes all of libmints and libciomr to plugins via the PSI_API macro. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Expose libmints; - [x] Expose libciomr; - [x] Expose JK and Denominator classes; - [x] Expose Options print functions. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1400
https://github.com/psi4/psi4/pull/1401:926,Deployability,release,released,926,"## Description; This PR's purpose is to add the Polarizable Embedding (PE) model to Psi4. In the [PE](https://pubs.acs.org/doi/10.1021/ct1003803) model, the environment is modeled by a multi-center multipole expansion with dipole-dipole polarizabilities placed at the expansion sites (similar to EFP). A tutorial on PE in general can be found [here](https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717). I added the PE model through my [CPPE](https://github.com/maxscheurer/cppe) library on the Python level. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Ground-state (HF and DFT) SCF calculations with PE; ~~- [ ] Perturbative state-specific (ptSS) corrections for EOM-CC calculations~~ can be done in user code on the Python layer; - [x] rebase once #1657 is merged; - [x] include `cppe` on the Python layer; - [x] remove C++ code; - [x] cleanup CMake; - [x] pin a released CPPE version; - [x] bump pybind to v2.3.0; - [x] simple documentation. ## Questions; - [x] The tests need a _potential_ input file (`*.pot`), currently residing in the `tests/cppe/scf-hf` folder. The path specification I have to put in the input file is currently a bit weird because the tests are not run from inside the test directory. Is there any nice solution to this issue?. ## Checklist; - [x] Tests added for any new features (SCF); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1401
https://github.com/psi4/psi4/pull/1401:1030,Testability,test,tests,1030,"## Description; This PR's purpose is to add the Polarizable Embedding (PE) model to Psi4. In the [PE](https://pubs.acs.org/doi/10.1021/ct1003803) model, the environment is modeled by a multi-center multipole expansion with dipole-dipole polarizabilities placed at the expansion sites (similar to EFP). A tutorial on PE in general can be found [here](https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717). I added the PE model through my [CPPE](https://github.com/maxscheurer/cppe) library on the Python level. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Ground-state (HF and DFT) SCF calculations with PE; ~~- [ ] Perturbative state-specific (ptSS) corrections for EOM-CC calculations~~ can be done in user code on the Python layer; - [x] rebase once #1657 is merged; - [x] include `cppe` on the Python layer; - [x] remove C++ code; - [x] cleanup CMake; - [x] pin a released CPPE version; - [x] bump pybind to v2.3.0; - [x] simple documentation. ## Questions; - [x] The tests need a _potential_ input file (`*.pot`), currently residing in the `tests/cppe/scf-hf` folder. The path specification I have to put in the input file is currently a bit weird because the tests are not run from inside the test directory. Is there any nice solution to this issue?. ## Checklist; - [x] Tests added for any new features (SCF); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1401
https://github.com/psi4/psi4/pull/1401:1104,Testability,test,tests,1104,"## Description; This PR's purpose is to add the Polarizable Embedding (PE) model to Psi4. In the [PE](https://pubs.acs.org/doi/10.1021/ct1003803) model, the environment is modeled by a multi-center multipole expansion with dipole-dipole polarizabilities placed at the expansion sites (similar to EFP). A tutorial on PE in general can be found [here](https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717). I added the PE model through my [CPPE](https://github.com/maxscheurer/cppe) library on the Python level. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Ground-state (HF and DFT) SCF calculations with PE; ~~- [ ] Perturbative state-specific (ptSS) corrections for EOM-CC calculations~~ can be done in user code on the Python layer; - [x] rebase once #1657 is merged; - [x] include `cppe` on the Python layer; - [x] remove C++ code; - [x] cleanup CMake; - [x] pin a released CPPE version; - [x] bump pybind to v2.3.0; - [x] simple documentation. ## Questions; - [x] The tests need a _potential_ input file (`*.pot`), currently residing in the `tests/cppe/scf-hf` folder. The path specification I have to put in the input file is currently a bit weird because the tests are not run from inside the test directory. Is there any nice solution to this issue?. ## Checklist; - [x] Tests added for any new features (SCF); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1401
https://github.com/psi4/psi4/pull/1401:1223,Testability,test,tests,1223,"## Description; This PR's purpose is to add the Polarizable Embedding (PE) model to Psi4. In the [PE](https://pubs.acs.org/doi/10.1021/ct1003803) model, the environment is modeled by a multi-center multipole expansion with dipole-dipole polarizabilities placed at the expansion sites (similar to EFP). A tutorial on PE in general can be found [here](https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717). I added the PE model through my [CPPE](https://github.com/maxscheurer/cppe) library on the Python level. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Ground-state (HF and DFT) SCF calculations with PE; ~~- [ ] Perturbative state-specific (ptSS) corrections for EOM-CC calculations~~ can be done in user code on the Python layer; - [x] rebase once #1657 is merged; - [x] include `cppe` on the Python layer; - [x] remove C++ code; - [x] cleanup CMake; - [x] pin a released CPPE version; - [x] bump pybind to v2.3.0; - [x] simple documentation. ## Questions; - [x] The tests need a _potential_ input file (`*.pot`), currently residing in the `tests/cppe/scf-hf` folder. The path specification I have to put in the input file is currently a bit weird because the tests are not run from inside the test directory. Is there any nice solution to this issue?. ## Checklist; - [x] Tests added for any new features (SCF); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1401
https://github.com/psi4/psi4/pull/1401:1257,Testability,test,test,1257,"## Description; This PR's purpose is to add the Polarizable Embedding (PE) model to Psi4. In the [PE](https://pubs.acs.org/doi/10.1021/ct1003803) model, the environment is modeled by a multi-center multipole expansion with dipole-dipole polarizabilities placed at the expansion sites (similar to EFP). A tutorial on PE in general can be found [here](https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717). I added the PE model through my [CPPE](https://github.com/maxscheurer/cppe) library on the Python level. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Ground-state (HF and DFT) SCF calculations with PE; ~~- [ ] Perturbative state-specific (ptSS) corrections for EOM-CC calculations~~ can be done in user code on the Python layer; - [x] rebase once #1657 is merged; - [x] include `cppe` on the Python layer; - [x] remove C++ code; - [x] cleanup CMake; - [x] pin a released CPPE version; - [x] bump pybind to v2.3.0; - [x] simple documentation. ## Questions; - [x] The tests need a _potential_ input file (`*.pot`), currently residing in the `tests/cppe/scf-hf` folder. The path specification I have to put in the input file is currently a bit weird because the tests are not run from inside the test directory. Is there any nice solution to this issue?. ## Checklist; - [x] Tests added for any new features (SCF); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1401
https://github.com/psi4/psi4/pull/1401:1336,Testability,Test,Tests,1336,"## Description; This PR's purpose is to add the Polarizable Embedding (PE) model to Psi4. In the [PE](https://pubs.acs.org/doi/10.1021/ct1003803) model, the environment is modeled by a multi-center multipole expansion with dipole-dipole polarizabilities placed at the expansion sites (similar to EFP). A tutorial on PE in general can be found [here](https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717). I added the PE model through my [CPPE](https://github.com/maxscheurer/cppe) library on the Python level. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Ground-state (HF and DFT) SCF calculations with PE; ~~- [ ] Perturbative state-specific (ptSS) corrections for EOM-CC calculations~~ can be done in user code on the Python layer; - [x] rebase once #1657 is merged; - [x] include `cppe` on the Python layer; - [x] remove C++ code; - [x] cleanup CMake; - [x] pin a released CPPE version; - [x] bump pybind to v2.3.0; - [x] simple documentation. ## Questions; - [x] The tests need a _potential_ input file (`*.pot`), currently residing in the `tests/cppe/scf-hf` folder. The path specification I have to put in the input file is currently a bit weird because the tests are not run from inside the test directory. Is there any nice solution to this issue?. ## Checklist; - [x] Tests added for any new features (SCF); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1401
https://github.com/psi4/psi4/pull/1401:1416,Testability,test,tests,1416,"## Description; This PR's purpose is to add the Polarizable Embedding (PE) model to Psi4. In the [PE](https://pubs.acs.org/doi/10.1021/ct1003803) model, the environment is modeled by a multi-center multipole expansion with dipole-dipole polarizabilities placed at the expansion sites (similar to EFP). A tutorial on PE in general can be found [here](https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717). I added the PE model through my [CPPE](https://github.com/maxscheurer/cppe) library on the Python level. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Ground-state (HF and DFT) SCF calculations with PE; ~~- [ ] Perturbative state-specific (ptSS) corrections for EOM-CC calculations~~ can be done in user code on the Python layer; - [x] rebase once #1657 is merged; - [x] include `cppe` on the Python layer; - [x] remove C++ code; - [x] cleanup CMake; - [x] pin a released CPPE version; - [x] bump pybind to v2.3.0; - [x] simple documentation. ## Questions; - [x] The tests need a _potential_ input file (`*.pot`), currently residing in the `tests/cppe/scf-hf` folder. The path specification I have to put in the input file is currently a bit weird because the tests are not run from inside the test directory. Is there any nice solution to this issue?. ## Checklist; - [x] Tests added for any new features (SCF); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1401
https://github.com/psi4/psi4/pull/1401:1507,Testability,test,tests,1507,"## Description; This PR's purpose is to add the Polarizable Embedding (PE) model to Psi4. In the [PE](https://pubs.acs.org/doi/10.1021/ct1003803) model, the environment is modeled by a multi-center multipole expansion with dipole-dipole polarizabilities placed at the expansion sites (similar to EFP). A tutorial on PE in general can be found [here](https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717). I added the PE model through my [CPPE](https://github.com/maxscheurer/cppe) library on the Python level. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Ground-state (HF and DFT) SCF calculations with PE; ~~- [ ] Perturbative state-specific (ptSS) corrections for EOM-CC calculations~~ can be done in user code on the Python layer; - [x] rebase once #1657 is merged; - [x] include `cppe` on the Python layer; - [x] remove C++ code; - [x] cleanup CMake; - [x] pin a released CPPE version; - [x] bump pybind to v2.3.0; - [x] simple documentation. ## Questions; - [x] The tests need a _potential_ input file (`*.pot`), currently residing in the `tests/cppe/scf-hf` folder. The path specification I have to put in the input file is currently a bit weird because the tests are not run from inside the test directory. Is there any nice solution to this issue?. ## Checklist; - [x] Tests added for any new features (SCF); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1401
https://github.com/psi4/psi4/pull/1401:984,Usability,simpl,simple,984,"## Description; This PR's purpose is to add the Polarizable Embedding (PE) model to Psi4. In the [PE](https://pubs.acs.org/doi/10.1021/ct1003803) model, the environment is modeled by a multi-center multipole expansion with dipole-dipole polarizabilities placed at the expansion sites (similar to EFP). A tutorial on PE in general can be found [here](https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717). I added the PE model through my [CPPE](https://github.com/maxscheurer/cppe) library on the Python level. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Ground-state (HF and DFT) SCF calculations with PE; ~~- [ ] Perturbative state-specific (ptSS) corrections for EOM-CC calculations~~ can be done in user code on the Python layer; - [x] rebase once #1657 is merged; - [x] include `cppe` on the Python layer; - [x] remove C++ code; - [x] cleanup CMake; - [x] pin a released CPPE version; - [x] bump pybind to v2.3.0; - [x] simple documentation. ## Questions; - [x] The tests need a _potential_ input file (`*.pot`), currently residing in the `tests/cppe/scf-hf` folder. The path specification I have to put in the input file is currently a bit weird because the tests are not run from inside the test directory. Is there any nice solution to this issue?. ## Checklist; - [x] Tests added for any new features (SCF); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1401
https://github.com/psi4/psi4/pull/1402:689,Availability,down,downstream,689,"## Description; This should follow directly after #1393 (for the moment, includes it) because otherwise users will get all the deprecation warnings not only from their own input files but from the driver itself. Think of how many times `get_variable` is called, and you'll see the magnitude. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] updates syntax py-side and c-side and example-side so that if all the deprecated functions went away (obviously, this is how I tested it), Psi4 would still work nicely. ## Notes; - snsmp2 raises a warning b/c it's using the `get_variable`. but that's the purpose of deprecation warnings -- to allow downstream to exist with multiple versions of upstream.; - I'll still need to investigate whether the ""culprit line"" is right, given our psithon/psiapi and namespace promotion complications. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full test suite, less a few addons. ## Status; - [x] Ready for review **look only at ""update driver for PsiPEP002"" commit. Previous are #1393 and following is just the tests**; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1402
https://github.com/psi4/psi4/pull/1402:390,Deployability,update,updates,390,"## Description; This should follow directly after #1393 (for the moment, includes it) because otherwise users will get all the deprecation warnings not only from their own input files but from the driver itself. Think of how many times `get_variable` is called, and you'll see the magnitude. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] updates syntax py-side and c-side and example-side so that if all the deprecated functions went away (obviously, this is how I tested it), Psi4 would still work nicely. ## Notes; - snsmp2 raises a warning b/c it's using the `get_variable`. but that's the purpose of deprecation warnings -- to allow downstream to exist with multiple versions of upstream.; - I'll still need to investigate whether the ""culprit line"" is right, given our psithon/psiapi and namespace promotion complications. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full test suite, less a few addons. ## Status; - [x] Ready for review **look only at ""update driver for PsiPEP002"" commit. Previous are #1393 and following is just the tests**; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1402
https://github.com/psi4/psi4/pull/1402:1028,Deployability,update,update,1028,"## Description; This should follow directly after #1393 (for the moment, includes it) because otherwise users will get all the deprecation warnings not only from their own input files but from the driver itself. Think of how many times `get_variable` is called, and you'll see the magnitude. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] updates syntax py-side and c-side and example-side so that if all the deprecated functions went away (obviously, this is how I tested it), Psi4 would still work nicely. ## Notes; - snsmp2 raises a warning b/c it's using the `get_variable`. but that's the purpose of deprecation warnings -- to allow downstream to exist with multiple versions of upstream.; - I'll still need to investigate whether the ""culprit line"" is right, given our psithon/psiapi and namespace promotion complications. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full test suite, less a few addons. ## Status; - [x] Ready for review **look only at ""update driver for PsiPEP002"" commit. Previous are #1393 and following is just the tests**; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1402
https://github.com/psi4/psi4/pull/1402:517,Testability,test,tested,517,"## Description; This should follow directly after #1393 (for the moment, includes it) because otherwise users will get all the deprecation warnings not only from their own input files but from the driver itself. Think of how many times `get_variable` is called, and you'll see the magnitude. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] updates syntax py-side and c-side and example-side so that if all the deprecated functions went away (obviously, this is how I tested it), Psi4 would still work nicely. ## Notes; - snsmp2 raises a warning b/c it's using the `get_variable`. but that's the purpose of deprecation warnings -- to allow downstream to exist with multiple versions of upstream.; - I'll still need to investigate whether the ""culprit line"" is right, given our psithon/psiapi and namespace promotion complications. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full test suite, less a few addons. ## Status; - [x] Ready for review **look only at ""update driver for PsiPEP002"" commit. Previous are #1393 and following is just the tests**; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1402
https://github.com/psi4/psi4/pull/1402:901,Testability,Test,Tests,901,"## Description; This should follow directly after #1393 (for the moment, includes it) because otherwise users will get all the deprecation warnings not only from their own input files but from the driver itself. Think of how many times `get_variable` is called, and you'll see the magnitude. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] updates syntax py-side and c-side and example-side so that if all the deprecated functions went away (obviously, this is how I tested it), Psi4 would still work nicely. ## Notes; - snsmp2 raises a warning b/c it's using the `get_variable`. but that's the purpose of deprecation warnings -- to allow downstream to exist with multiple versions of upstream.; - I'll still need to investigate whether the ""culprit line"" is right, given our psithon/psiapi and namespace promotion complications. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full test suite, less a few addons. ## Status; - [x] Ready for review **look only at ""update driver for PsiPEP002"" commit. Previous are #1393 and following is just the tests**; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1402
https://github.com/psi4/psi4/pull/1402:947,Testability,test,test,947,"## Description; This should follow directly after #1393 (for the moment, includes it) because otherwise users will get all the deprecation warnings not only from their own input files but from the driver itself. Think of how many times `get_variable` is called, and you'll see the magnitude. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] updates syntax py-side and c-side and example-side so that if all the deprecated functions went away (obviously, this is how I tested it), Psi4 would still work nicely. ## Notes; - snsmp2 raises a warning b/c it's using the `get_variable`. but that's the purpose of deprecation warnings -- to allow downstream to exist with multiple versions of upstream.; - I'll still need to investigate whether the ""culprit line"" is right, given our psithon/psiapi and namespace promotion complications. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full test suite, less a few addons. ## Status; - [x] Ready for review **look only at ""update driver for PsiPEP002"" commit. Previous are #1393 and following is just the tests**; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1402
https://github.com/psi4/psi4/pull/1402:1110,Testability,test,tests,1110,"## Description; This should follow directly after #1393 (for the moment, includes it) because otherwise users will get all the deprecation warnings not only from their own input files but from the driver itself. Think of how many times `get_variable` is called, and you'll see the magnitude. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] updates syntax py-side and c-side and example-side so that if all the deprecated functions went away (obviously, this is how I tested it), Psi4 would still work nicely. ## Notes; - snsmp2 raises a warning b/c it's using the `get_variable`. but that's the purpose of deprecation warnings -- to allow downstream to exist with multiple versions of upstream.; - I'll still need to investigate whether the ""culprit line"" is right, given our psithon/psiapi and namespace promotion complications. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full test suite, less a few addons. ## Status; - [x] Ready for review **look only at ""update driver for PsiPEP002"" commit. Previous are #1393 and following is just the tests**; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1402
https://github.com/psi4/psi4/pull/1403:169,Energy Efficiency,energy,energy,169,"## Description; So the reason there haven't been conda packages for a while is `dft1-alt` is non-deterministically broken on py35. Further investigation shows that the `energy('b97-d')` call was sometimes Grimme GGA for XC and sometimes Becke hybrid but always Grimme dispersion (unordered dicts, remember). Probably introduced by #1151 when I stopped listing `b97-d` as an XC of its own and special casing the processing. The proposed sol'n -- conceding ""B97"" to Grimme and calling the original hyb ""B97-0"" -- isn't great or historically sound. But I think it's workable. ## Checklist; - [x] a ctest command in py35 that failed 2/6 runs before failed 0/6 runs after. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1403
https://github.com/psi4/psi4/pull/1405:1617,Testability,test,tests,1617,"## Description; Resolves #1404. This makes `dsd-blyp-d3(bj)` pull data from `dsd-blyp-d3bj`, as opposed to `dsd-blyp` + `dashparam[""d3bj""][""dsd-blyp""]`. Currently affected functionals are:. ```; created b97-0-d2 from b97-d2; created b97-0-d from b97-d2; created b97-d from b97-d2; created b97-0-d3bj from b97-d3bj; created b97-0-d3(bj) from b97-d3bj; created b97-d3(bj) from b97-d3bj; created b97-0-d3mbj from b97-d3mbj; created b97-0-d3m(bj) from b97-d3mbj; created b97-d3m(bj) from b97-d3mbj; created dsd-blyp-d from dsd-blyp-d2; created dsd-blyp-d3(bj) from dsd-blyp-d3bj; created dsdpbep86-d2 from dsd-pbep86-d2; created dsdpbep86-d from dsd-pbep86-d2; created dsd-pbep86-d from dsd-pbep86-d2; created dsdpbep86-d3bj from dsd-pbep86-d3bj; created dsdpbep86-d3(bj) from dsd-pbep86-d3bj; created dsd-pbep86-d3(bj) from dsd-pbep86-d3bj; created dsdpbep86-nl from dsd-pbep86-nl; created dsdpbepbe-d2 from dsd-pbepbe-d2; created dsdpbepbe-d from dsd-pbepbe-d2; created dsd-pbepbe-d from dsd-pbepbe-d2; created dsdpbepbe-d3bj from dsd-pbepbe-d3bj; created dsdpbepbe-d3(bj) from dsd-pbepbe-d3bj; created dsd-pbepbe-d3(bj) from dsd-pbepbe-d3bj; created dsdpbepbe-nl from dsd-pbepbe-nl; created dsd-pbeb95-d from dsd-pbeb95-d2; created dsd-pbeb95-d3(bj) from dsd-pbeb95-d3bj; ```. The `B97-0` and `B97-D2` mess will have to wait until #1403 is merged. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] When a functional has a defined dispersion version, aliases are copied from that, as opposed to the `dashparam` data. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1405
https://github.com/psi4/psi4/pull/1405:1708,Testability,test,tests,1708,"## Description; Resolves #1404. This makes `dsd-blyp-d3(bj)` pull data from `dsd-blyp-d3bj`, as opposed to `dsd-blyp` + `dashparam[""d3bj""][""dsd-blyp""]`. Currently affected functionals are:. ```; created b97-0-d2 from b97-d2; created b97-0-d from b97-d2; created b97-d from b97-d2; created b97-0-d3bj from b97-d3bj; created b97-0-d3(bj) from b97-d3bj; created b97-d3(bj) from b97-d3bj; created b97-0-d3mbj from b97-d3mbj; created b97-0-d3m(bj) from b97-d3mbj; created b97-d3m(bj) from b97-d3mbj; created dsd-blyp-d from dsd-blyp-d2; created dsd-blyp-d3(bj) from dsd-blyp-d3bj; created dsdpbep86-d2 from dsd-pbep86-d2; created dsdpbep86-d from dsd-pbep86-d2; created dsd-pbep86-d from dsd-pbep86-d2; created dsdpbep86-d3bj from dsd-pbep86-d3bj; created dsdpbep86-d3(bj) from dsd-pbep86-d3bj; created dsd-pbep86-d3(bj) from dsd-pbep86-d3bj; created dsdpbep86-nl from dsd-pbep86-nl; created dsdpbepbe-d2 from dsd-pbepbe-d2; created dsdpbepbe-d from dsd-pbepbe-d2; created dsd-pbepbe-d from dsd-pbepbe-d2; created dsdpbepbe-d3bj from dsd-pbepbe-d3bj; created dsdpbepbe-d3(bj) from dsd-pbepbe-d3bj; created dsd-pbepbe-d3(bj) from dsd-pbepbe-d3bj; created dsdpbepbe-nl from dsd-pbepbe-nl; created dsd-pbeb95-d from dsd-pbeb95-d2; created dsd-pbeb95-d3(bj) from dsd-pbeb95-d3bj; ```. The `B97-0` and `B97-D2` mess will have to wait until #1403 is merged. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [X] When a functional has a defined dispersion version, aliases are copied from that, as opposed to the `dashparam` data. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1405
https://github.com/psi4/psi4/issues/1406:1244,Availability,avail,available,1244," items need to be highlighted more and categorical division can be improved. Note: Psi4 1.3 starts around PR #1065. TODO: Document #1393, . ##. # Major Points of Interest. - Added native Windows compatibility without the WSL requirement.; - DFT collocation grids can now be cache in-memory to avoid extra computation and lowering the total cost of DFT by up to a factor of two (#1233).; - Wavefunctions can now be serialized to disk and back using `Wavefunction.to_file/from_file` (#1304).; - Psi4 is now Python 3.5+ only, Psi4 1.4 will be Python 3.6+ only. Potential:; - A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, #1100, #1097; - @zachglick #1453, #1304, #1291; - @tovrstra #1510, #1506, #1500; - @timostrunk #1133, #1128, #1127; - @mdav2 #1374, #1142; - @chapincavender #1364; - @janisozaur #1321; - @rainli323 #1131; - @yxie326 #1083. # Additional Non-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1406
https://github.com/psi4/psi4/issues/1406:3975,Availability,error,error,3975,"ide; - Psi4 now requires C++14 (up from C++11); - The C++ code base was reformatted using clang-format and the provided format file (many PRs). # Developer Interests; - Cleans up the Matrix class for non-totally symmetric irrupts (#1383).; - Psi4 is now C++17 compatible (#1345).; - DFT grid generation is now threaded (#1291).; - `findif` is now ""metadata""-based to allow for greater serialization (#1289).; - Additional documentation and notes on alpha/beta for DFT functionals (#1260).; - `dpd.gbl` has been removed (#1254).; - The CC* modules are moving to a CCWavefunction based solution (#1253).; - CBS has been reworked to be dictionary based to allow for greater flexibility (#1235).; - Updated conversion factors to CODATA 2014 (#1213).; - `pthreads` has been removed from Psi4 (shall not return, #1199).; - Empirical Dispersion has been refactored to a new unified interface (#1151).; - OEProp has been split into many small modules allowing greater flexibility (#1133).; - SCF now throws a SCFConverenceError upon reaching maximum iterations (#1130).; - Standardizes memory printing to `[GiB]` (#1097, ...). # Documentation; - NYI. # Miscelaneous; - NYI. # Bug Fixes; - Fixes an error where the CBS extrapolation technology was not comparable with FNO-CC* methods (#1377); - Fixes an issue where relativistic basis sets were not compatible with SCF stability analysis (#1374).; - Fixes an issue where JSON called from the command line did not correctly write an output (#1369).; - Fixed an error where float options when set as integer were not correctly cast (#1352 ).; - Correctly throws when Yukawa functionals are called from LibXC (#1260).; - Prevents the code from incorrectly trying cast densities between symmetries in some circumstances (#1139).; - Ghost atoms where incorrectly attributing to `core` electron counts (#1139).; - Fixes an issue in DFHelper memory estimation (#1100).; - Fixes range-separate disk gradient paging (backported in v1.2.1, #1096 ) . # Known Bugs; - NYI",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1406
https://github.com/psi4/psi4/issues/1406:4286,Availability,error,error,4286,"ide; - Psi4 now requires C++14 (up from C++11); - The C++ code base was reformatted using clang-format and the provided format file (many PRs). # Developer Interests; - Cleans up the Matrix class for non-totally symmetric irrupts (#1383).; - Psi4 is now C++17 compatible (#1345).; - DFT grid generation is now threaded (#1291).; - `findif` is now ""metadata""-based to allow for greater serialization (#1289).; - Additional documentation and notes on alpha/beta for DFT functionals (#1260).; - `dpd.gbl` has been removed (#1254).; - The CC* modules are moving to a CCWavefunction based solution (#1253).; - CBS has been reworked to be dictionary based to allow for greater flexibility (#1235).; - Updated conversion factors to CODATA 2014 (#1213).; - `pthreads` has been removed from Psi4 (shall not return, #1199).; - Empirical Dispersion has been refactored to a new unified interface (#1151).; - OEProp has been split into many small modules allowing greater flexibility (#1133).; - SCF now throws a SCFConverenceError upon reaching maximum iterations (#1130).; - Standardizes memory printing to `[GiB]` (#1097, ...). # Documentation; - NYI. # Miscelaneous; - NYI. # Bug Fixes; - Fixes an error where the CBS extrapolation technology was not comparable with FNO-CC* methods (#1377); - Fixes an issue where relativistic basis sets were not compatible with SCF stability analysis (#1374).; - Fixes an issue where JSON called from the command line did not correctly write an output (#1369).; - Fixed an error where float options when set as integer were not correctly cast (#1352 ).; - Correctly throws when Yukawa functionals are called from LibXC (#1260).; - Prevents the code from incorrectly trying cast densities between symmetries in some circumstances (#1139).; - Ghost atoms where incorrectly attributing to `core` electron counts (#1139).; - Fixes an issue in DFHelper memory estimation (#1100).; - Fixes range-separate disk gradient paging (backported in v1.2.1, #1096 ) . # Known Bugs; - NYI",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1406
https://github.com/psi4/psi4/issues/1406:18,Deployability,release,release,18,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. Note: Psi4 1.3 starts around PR #1065. TODO: Document #1393, . ##. # Major Points of Interest. - Added native Windows compatibility without the WSL requirement.; - DFT collocation grids can now be cache in-memory to avoid extra computation and lowering the total cost of DFT by up to a factor of two (#1233).; - Wavefunctions can now be serialized to disk and back using `Wavefunction.to_file/from_file` (#1304).; - Psi4 is now Python 3.5+ only, Psi4 1.4 will be Python 3.6+ only. Potential:; - A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1406
https://github.com/psi4/psi4/issues/1406:1001,Deployability,install,installers,1001,"lease notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. Note: Psi4 1.3 starts around PR #1065. TODO: Document #1393, . ##. # Major Points of Interest. - Added native Windows compatibility without the WSL requirement.; - DFT collocation grids can now be cache in-memory to avoid extra computation and lowering the total cost of DFT by up to a factor of two (#1233).; - Wavefunctions can now be serialized to disk and back using `Wavefunction.to_file/from_file` (#1304).; - Psi4 is now Python 3.5+ only, Psi4 1.4 will be Python 3.6+ only. Potential:; - A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, #1100, #1097; - @zac",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1406
https://github.com/psi4/psi4/issues/1406:1041,Deployability,install,install,1041,"lease notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. Note: Psi4 1.3 starts around PR #1065. TODO: Document #1393, . ##. # Major Points of Interest. - Added native Windows compatibility without the WSL requirement.; - DFT collocation grids can now be cache in-memory to avoid extra computation and lowering the total cost of DFT by up to a factor of two (#1233).; - Wavefunctions can now be serialized to disk and back using `Wavefunction.to_file/from_file` (#1304).; - Psi4 is now Python 3.5+ only, Psi4 1.4 will be Python 3.6+ only. Potential:; - A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, #1100, #1097; - @zac",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1406
https://github.com/psi4/psi4/issues/1406:2775,Deployability,Upgrade,Upgrade,2775,"ptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, #1100, #1097; - @zachglick #1453, #1304, #1291; - @tovrstra #1510, #1506, #1500; - @timostrunk #1133, #1128, #1127; - @mdav2 #1374, #1142; - @chapincavender #1364; - @janisozaur #1321; - @rainli323 #1131; - @yxie326 #1083. # Additional Non-Core Contributors to v1.3. - @JonathonMisiewicz #1517, #1487, #1379, #1424, #1435, #1378, #1352, #1337, #1336, #1289, #1310, #1299, #1214, #1150, #1024, #1139, #1108; - @susilehtola #1475, #1493, #1481, #1479, #1472, #1458, #1460, #1468, #1456, #1452, #1451, #1260; - @PeterKraus #1470, #1350, #1405, #1235, #1303, #1262, #1232, #1138, #1123, #1119, #1109; - @hokru #1320, #1377, #1346, #1300, #1244, #1241; - @alenaizan #1365, #1042, #1294; - @tyzhang1993 #1437; - @tomspur #1257. # Performance Optimizations; - NYI. # Psi Developer Upgrade Guide; - Psi4 now requires C++14 (up from C++11); - The C++ code base was reformatted using clang-format and the provided format file (many PRs). # Developer Interests; - Cleans up the Matrix class for non-totally symmetric irrupts (#1383).; - Psi4 is now C++17 compatible (#1345).; - DFT grid generation is now threaded (#1291).; - `findif` is now ""metadata""-based to allow for greater serialization (#1289).; - Additional documentation and notes on alpha/beta for DFT functionals (#1260).; - `dpd.gbl` has been removed (#1254).; - The CC* modules are moving to a CCWavefunction based solution (#1253).; - CBS has been reworked to be dictionary based to allow for greater flexibility (#1235).; - Updated conversion factors to CODATA 2014 (#1213).; - `pthreads` has been removed from Psi4 (shall not return, #1199).; - Empirical Dispersion has been refactored to a new unified interface (#1151).; - OEProp has been split into many small modules allowing greater flexibility (#1133).; - SCF now throws a SCFConverenceError upon reaching maximum iterations (#113",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1406
https://github.com/psi4/psi4/issues/1406:3480,Deployability,Update,Updated,3480,"60; - @PeterKraus #1470, #1350, #1405, #1235, #1303, #1262, #1232, #1138, #1123, #1119, #1109; - @hokru #1320, #1377, #1346, #1300, #1244, #1241; - @alenaizan #1365, #1042, #1294; - @tyzhang1993 #1437; - @tomspur #1257. # Performance Optimizations; - NYI. # Psi Developer Upgrade Guide; - Psi4 now requires C++14 (up from C++11); - The C++ code base was reformatted using clang-format and the provided format file (many PRs). # Developer Interests; - Cleans up the Matrix class for non-totally symmetric irrupts (#1383).; - Psi4 is now C++17 compatible (#1345).; - DFT grid generation is now threaded (#1291).; - `findif` is now ""metadata""-based to allow for greater serialization (#1289).; - Additional documentation and notes on alpha/beta for DFT functionals (#1260).; - `dpd.gbl` has been removed (#1254).; - The CC* modules are moving to a CCWavefunction based solution (#1253).; - CBS has been reworked to be dictionary based to allow for greater flexibility (#1235).; - Updated conversion factors to CODATA 2014 (#1213).; - `pthreads` has been removed from Psi4 (shall not return, #1199).; - Empirical Dispersion has been refactored to a new unified interface (#1151).; - OEProp has been split into many small modules allowing greater flexibility (#1133).; - SCF now throws a SCFConverenceError upon reaching maximum iterations (#1130).; - Standardizes memory printing to `[GiB]` (#1097, ...). # Documentation; - NYI. # Miscelaneous; - NYI. # Bug Fixes; - Fixes an error where the CBS extrapolation technology was not comparable with FNO-CC* methods (#1377); - Fixes an issue where relativistic basis sets were not compatible with SCF stability analysis (#1374).; - Fixes an issue where JSON called from the command line did not correctly write an output (#1369).; - Fixed an error where float options when set as integer were not correctly cast (#1352 ).; - Correctly throws when Yukawa functionals are called from LibXC (#1260).; - Prevents the code from incorrectly trying cast densities be",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1406
https://github.com/psi4/psi4/issues/1406:880,Integrability,depend,depending,880,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. Note: Psi4 1.3 starts around PR #1065. TODO: Document #1393, . ##. # Major Points of Interest. - Added native Windows compatibility without the WSL requirement.; - DFT collocation grids can now be cache in-memory to avoid extra computation and lowering the total cost of DFT by up to a factor of two (#1233).; - Wavefunctions can now be serialized to disk and back using `Wavefunction.to_file/from_file` (#1304).; - Psi4 is now Python 3.5+ only, Psi4 1.4 will be Python 3.6+ only. Potential:; - A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1406
https://github.com/psi4/psi4/issues/1406:1142,Integrability,interface,interface,1142,"engthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. Note: Psi4 1.3 starts around PR #1065. TODO: Document #1393, . ##. # Major Points of Interest. - Added native Windows compatibility without the WSL requirement.; - DFT collocation grids can now be cache in-memory to avoid extra computation and lowering the total cost of DFT by up to a factor of two (#1233).; - Wavefunctions can now be serialized to disk and back using `Wavefunction.to_file/from_file` (#1304).; - Psi4 is now Python 3.5+ only, Psi4 1.4 will be Python 3.6+ only. Potential:; - A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, #1100, #1097; - @zachglick #1453, #1304, #1291; - @tovrstra #1510, #1506, #1500; - @timostrunk #1133, #1128, #1127; - @mdav2 #1374, #1142; - @chapincav",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1406
https://github.com/psi4/psi4/issues/1406:1598,Integrability,rout,routines,1598,"t of DFT by up to a factor of two (#1233).; - Wavefunctions can now be serialized to disk and back using `Wavefunction.to_file/from_file` (#1304).; - Psi4 is now Python 3.5+ only, Psi4 1.4 will be Python 3.6+ only. Potential:; - A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, #1100, #1097; - @zachglick #1453, #1304, #1291; - @tovrstra #1510, #1506, #1500; - @timostrunk #1133, #1128, #1127; - @mdav2 #1374, #1142; - @chapincavender #1364; - @janisozaur #1321; - @rainli323 #1131; - @yxie326 #1083. # Additional Non-Core Contributors to v1.3. - @JonathonMisiewicz #1517, #1487, #1379, #1424, #1435, #1378, #1352, #1337, #1336, #1289, #1310, #1299, #1214, #1150, #1024, #1139, #1108; - @susilehtola #1475, #1493, #1481, #1479, #1472, #1458, #1460, #1468, #1456, #1452, #1451, #1260; - @PeterKraus #1470, #1350, #1405, #1235, #1303, #1262, #1232, #1138, #1123, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1406
https://github.com/psi4/psi4/issues/1406:3660,Integrability,interface,interface,3660,"44, #1241; - @alenaizan #1365, #1042, #1294; - @tyzhang1993 #1437; - @tomspur #1257. # Performance Optimizations; - NYI. # Psi Developer Upgrade Guide; - Psi4 now requires C++14 (up from C++11); - The C++ code base was reformatted using clang-format and the provided format file (many PRs). # Developer Interests; - Cleans up the Matrix class for non-totally symmetric irrupts (#1383).; - Psi4 is now C++17 compatible (#1345).; - DFT grid generation is now threaded (#1291).; - `findif` is now ""metadata""-based to allow for greater serialization (#1289).; - Additional documentation and notes on alpha/beta for DFT functionals (#1260).; - `dpd.gbl` has been removed (#1254).; - The CC* modules are moving to a CCWavefunction based solution (#1253).; - CBS has been reworked to be dictionary based to allow for greater flexibility (#1235).; - Updated conversion factors to CODATA 2014 (#1213).; - `pthreads` has been removed from Psi4 (shall not return, #1199).; - Empirical Dispersion has been refactored to a new unified interface (#1151).; - OEProp has been split into many small modules allowing greater flexibility (#1133).; - SCF now throws a SCFConverenceError upon reaching maximum iterations (#1130).; - Standardizes memory printing to `[GiB]` (#1097, ...). # Documentation; - NYI. # Miscelaneous; - NYI. # Bug Fixes; - Fixes an error where the CBS extrapolation technology was not comparable with FNO-CC* methods (#1377); - Fixes an issue where relativistic basis sets were not compatible with SCF stability analysis (#1374).; - Fixes an issue where JSON called from the command line did not correctly write an output (#1369).; - Fixed an error where float options when set as integer were not correctly cast (#1352 ).; - Correctly throws when Yukawa functionals are called from LibXC (#1260).; - Prevents the code from incorrectly trying cast densities between symmetries in some circumstances (#1139).; - Ghost atoms where incorrectly attributing to `core` electron counts (#1139).; - Fixe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1406
https://github.com/psi4/psi4/issues/1406:3632,Modifiability,refactor,refactored,3632,"44, #1241; - @alenaizan #1365, #1042, #1294; - @tyzhang1993 #1437; - @tomspur #1257. # Performance Optimizations; - NYI. # Psi Developer Upgrade Guide; - Psi4 now requires C++14 (up from C++11); - The C++ code base was reformatted using clang-format and the provided format file (many PRs). # Developer Interests; - Cleans up the Matrix class for non-totally symmetric irrupts (#1383).; - Psi4 is now C++17 compatible (#1345).; - DFT grid generation is now threaded (#1291).; - `findif` is now ""metadata""-based to allow for greater serialization (#1289).; - Additional documentation and notes on alpha/beta for DFT functionals (#1260).; - `dpd.gbl` has been removed (#1254).; - The CC* modules are moving to a CCWavefunction based solution (#1253).; - CBS has been reworked to be dictionary based to allow for greater flexibility (#1235).; - Updated conversion factors to CODATA 2014 (#1213).; - `pthreads` has been removed from Psi4 (shall not return, #1199).; - Empirical Dispersion has been refactored to a new unified interface (#1151).; - OEProp has been split into many small modules allowing greater flexibility (#1133).; - SCF now throws a SCFConverenceError upon reaching maximum iterations (#1130).; - Standardizes memory printing to `[GiB]` (#1097, ...). # Documentation; - NYI. # Miscelaneous; - NYI. # Bug Fixes; - Fixes an error where the CBS extrapolation technology was not comparable with FNO-CC* methods (#1377); - Fixes an issue where relativistic basis sets were not compatible with SCF stability analysis (#1374).; - Fixes an issue where JSON called from the command line did not correctly write an output (#1369).; - Fixed an error where float options when set as integer were not correctly cast (#1352 ).; - Correctly throws when Yukawa functionals are called from LibXC (#1260).; - Prevents the code from incorrectly trying cast densities between symmetries in some circumstances (#1139).; - Ghost atoms where incorrectly attributing to `core` electron counts (#1139).; - Fixe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1406
https://github.com/psi4/psi4/issues/1406:514,Performance,cache,cache,514,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. Note: Psi4 1.3 starts around PR #1065. TODO: Document #1393, . ##. # Major Points of Interest. - Added native Windows compatibility without the WSL requirement.; - DFT collocation grids can now be cache in-memory to avoid extra computation and lowering the total cost of DFT by up to a factor of two (#1233).; - Wavefunctions can now be serialized to disk and back using `Wavefunction.to_file/from_file` (#1304).; - Psi4 is now Python 3.5+ only, Psi4 1.4 will be Python 3.6+ only. Potential:; - A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1406
https://github.com/psi4/psi4/issues/1406:1859,Performance,optimiz,optimization,1859,"t can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, #1100, #1097; - @zachglick #1453, #1304, #1291; - @tovrstra #1510, #1506, #1500; - @timostrunk #1133, #1128, #1127; - @mdav2 #1374, #1142; - @chapincavender #1364; - @janisozaur #1321; - @rainli323 #1131; - @yxie326 #1083. # Additional Non-Core Contributors to v1.3. - @JonathonMisiewicz #1517, #1487, #1379, #1424, #1435, #1378, #1352, #1337, #1336, #1289, #1310, #1299, #1214, #1150, #1024, #1139, #1108; - @susilehtola #1475, #1493, #1481, #1479, #1472, #1458, #1460, #1468, #1456, #1452, #1451, #1260; - @PeterKraus #1470, #1350, #1405, #1235, #1303, #1262, #1232, #1138, #1123, #1119, #1109; - @hokru #1320, #1377, #1346, #1300, #1244, #1241; - @alenaizan #1365, #1042, #1294; - @tyzhang1993 #1437; - @tomspur #1257. # Performance Optimizations; - NYI. # Psi Developer Upgrade Guide; - Psi4 now requires C++14 (up from C++11); -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1406
https://github.com/psi4/psi4/issues/1406:2725,Performance,Perform,Performance,2725,"ostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, #1100, #1097; - @zachglick #1453, #1304, #1291; - @tovrstra #1510, #1506, #1500; - @timostrunk #1133, #1128, #1127; - @mdav2 #1374, #1142; - @chapincavender #1364; - @janisozaur #1321; - @rainli323 #1131; - @yxie326 #1083. # Additional Non-Core Contributors to v1.3. - @JonathonMisiewicz #1517, #1487, #1379, #1424, #1435, #1378, #1352, #1337, #1336, #1289, #1310, #1299, #1214, #1150, #1024, #1139, #1108; - @susilehtola #1475, #1493, #1481, #1479, #1472, #1458, #1460, #1468, #1456, #1452, #1451, #1260; - @PeterKraus #1470, #1350, #1405, #1235, #1303, #1262, #1232, #1138, #1123, #1119, #1109; - @hokru #1320, #1377, #1346, #1300, #1244, #1241; - @alenaizan #1365, #1042, #1294; - @tyzhang1993 #1437; - @tomspur #1257. # Performance Optimizations; - NYI. # Psi Developer Upgrade Guide; - Psi4 now requires C++14 (up from C++11); - The C++ code base was reformatted using clang-format and the provided format file (many PRs). # Developer Interests; - Cleans up the Matrix class for non-totally symmetric irrupts (#1383).; - Psi4 is now C++17 compatible (#1345).; - DFT grid generation is now threaded (#1291).; - `findif` is now ""metadata""-based to allow for greater serialization (#1289).; - Additional documentation and notes on alpha/beta for DFT functionals (#1260).; - `dpd.gbl` has been removed (#1254).; - The CC* modules are moving to a CCWavefunction based solution (#1253).; - CBS has been reworked to be dictionary based to allow for greater flexibility (#1235).; - Updated conversion factors to CODATA 2014 (#1213).; - `pthreads` has been removed from Psi4 (shall not return, #1199).; - Empirical Dispersion has been refactored to a new unified interface (#1151).; - OEProp has been split into many small modules allowing gre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1406
https://github.com/psi4/psi4/issues/1406:2737,Performance,Optimiz,Optimizations,2737,"ostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, #1100, #1097; - @zachglick #1453, #1304, #1291; - @tovrstra #1510, #1506, #1500; - @timostrunk #1133, #1128, #1127; - @mdav2 #1374, #1142; - @chapincavender #1364; - @janisozaur #1321; - @rainli323 #1131; - @yxie326 #1083. # Additional Non-Core Contributors to v1.3. - @JonathonMisiewicz #1517, #1487, #1379, #1424, #1435, #1378, #1352, #1337, #1336, #1289, #1310, #1299, #1214, #1150, #1024, #1139, #1108; - @susilehtola #1475, #1493, #1481, #1479, #1472, #1458, #1460, #1468, #1456, #1452, #1451, #1260; - @PeterKraus #1470, #1350, #1405, #1235, #1303, #1262, #1232, #1138, #1123, #1119, #1109; - @hokru #1320, #1377, #1346, #1300, #1244, #1241; - @alenaizan #1365, #1042, #1294; - @tyzhang1993 #1437; - @tomspur #1257. # Performance Optimizations; - NYI. # Psi Developer Upgrade Guide; - Psi4 now requires C++14 (up from C++11); - The C++ code base was reformatted using clang-format and the provided format file (many PRs). # Developer Interests; - Cleans up the Matrix class for non-totally symmetric irrupts (#1383).; - Psi4 is now C++17 compatible (#1345).; - DFT grid generation is now threaded (#1291).; - `findif` is now ""metadata""-based to allow for greater serialization (#1289).; - Additional documentation and notes on alpha/beta for DFT functionals (#1260).; - `dpd.gbl` has been removed (#1254).; - The CC* modules are moving to a CCWavefunction based solution (#1253).; - CBS has been reworked to be dictionary based to allow for greater flexibility (#1235).; - Updated conversion factors to CODATA 2014 (#1213).; - `pthreads` has been removed from Psi4 (shall not return, #1199).; - Empirical Dispersion has been refactored to a new unified interface (#1151).; - OEProp has been split into many small modules allowing gre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1406
https://github.com/psi4/psi4/issues/1406:533,Safety,avoid,avoid,533,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. Note: Psi4 1.3 starts around PR #1065. TODO: Document #1393, . ##. # Major Points of Interest. - Added native Windows compatibility without the WSL requirement.; - DFT collocation grids can now be cache in-memory to avoid extra computation and lowering the total cost of DFT by up to a factor of two (#1233).; - Wavefunctions can now be serialized to disk and back using `Wavefunction.to_file/from_file` (#1304).; - Psi4 is now Python 3.5+ only, Psi4 1.4 will be Python 3.6+ only. Potential:; - A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1406
https://github.com/psi4/psi4/issues/1406:2783,Usability,Guid,Guide,2783,"ptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, #1100, #1097; - @zachglick #1453, #1304, #1291; - @tovrstra #1510, #1506, #1500; - @timostrunk #1133, #1128, #1127; - @mdav2 #1374, #1142; - @chapincavender #1364; - @janisozaur #1321; - @rainli323 #1131; - @yxie326 #1083. # Additional Non-Core Contributors to v1.3. - @JonathonMisiewicz #1517, #1487, #1379, #1424, #1435, #1378, #1352, #1337, #1336, #1289, #1310, #1299, #1214, #1150, #1024, #1139, #1108; - @susilehtola #1475, #1493, #1481, #1479, #1472, #1458, #1460, #1468, #1456, #1452, #1451, #1260; - @PeterKraus #1470, #1350, #1405, #1235, #1303, #1262, #1232, #1138, #1123, #1119, #1109; - @hokru #1320, #1377, #1346, #1300, #1244, #1241; - @alenaizan #1365, #1042, #1294; - @tyzhang1993 #1437; - @tomspur #1257. # Performance Optimizations; - NYI. # Psi Developer Upgrade Guide; - Psi4 now requires C++14 (up from C++11); - The C++ code base was reformatted using clang-format and the provided format file (many PRs). # Developer Interests; - Cleans up the Matrix class for non-totally symmetric irrupts (#1383).; - Psi4 is now C++17 compatible (#1345).; - DFT grid generation is now threaded (#1291).; - `findif` is now ""metadata""-based to allow for greater serialization (#1289).; - Additional documentation and notes on alpha/beta for DFT functionals (#1260).; - `dpd.gbl` has been removed (#1254).; - The CC* modules are moving to a CCWavefunction based solution (#1253).; - CBS has been reworked to be dictionary based to allow for greater flexibility (#1235).; - Updated conversion factors to CODATA 2014 (#1213).; - `pthreads` has been removed from Psi4 (shall not return, #1199).; - Empirical Dispersion has been refactored to a new unified interface (#1151).; - OEProp has been split into many small modules allowing greater flexibility (#1133).; - SCF now throws a SCFConverenceError upon reaching maximum iterations (#113",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1406
https://github.com/psi4/psi4/issues/1407:220,Integrability,interface,interface,220,"This issue is a follow up on discussions [here](https://github.com/psi4/psi4/pull/1151#issuecomment-417101476) about adding ATM dispersion to psi4 through `dftd3 -abc`. There were concerns that when run through the psi4 interface, dftd3 wasn't producing the damping-function independent ATM corrections that it should. Running dftd3 command-line with input below _does_ produce uniform values for `E6(ABC)`:; ```; >>> dftd3 s22_16.xyz -func b-p -abc -zero; >>> dftd3 s22_16.xyz -func b-p -abc -bj; >>> dftd3 s22_16.xyz -func b-p -abc -zerom; >>> dftd3 s22_16.xyz -func b-p -abc -bjm; ```; ```; Edisp /kcal,au: -2.0736 -0.00330456; Edisp /kcal,au: -4.4003 -0.00701230; Edisp /kcal,au: -2.0377 -0.00324733; Edisp /kcal,au: -5.2756 -0.00840720; ```; ```; E6(ABC) "" : -0.000110; E6(ABC) "" : -0.000110; E6(ABC) "" : -0.000110; E6(ABC) "" : -0.000110; ```; `s22_16.xyz`; ```; 10; etylene-ethyne dimer; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; ```. If you run the `-bj` through a parameter file. `.dftd3par.local` `1.000000 0.394600 3.282200 4.851600 0.000000 4`. Get the same energies as above; ```; >>> dftd3 s22_16.xyz; _________________________________; ; | DFTD3 V3.1 Rev 1 |; | S.Grimme, University Bonn |; | October 2015 |; | see dftd3 -h for options |; _________________________________; ; Please cite DFT-D3 work done with this code as:; S. Grimme, J. Antony, S. Ehrlich and H. Krieg,; J. Chem. Phys. 132 (2010), 154104; If used with BJ-damping cite also; S. Grimme, S. Ehrlich and L. Goerigk,; J. Comput. Chem. 32 (2011), 1456-1465; For DFT-D2 the reference is; S. Grimme, J. Comput. Chem., 27 (2006), 1787-1799; For DFT-D3M or DFT-D3M(BJ) the reference is; D.G.A. Smith, L.A. Burns, K. Patkowski, and ; C.D. Sherrill, J. Phys. Ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1407
https://github.com/psi4/psi4/pull/1408:331,Testability,Test,Tests,331,"## Description; This is part of *Psi4* porting to Windows (#933). Some time ago (#1240), MKL version had to be pinned for Windows builds. Now it is fixed and the latest version could be used. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Unpin MKL version. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1408
https://github.com/psi4/psi4/pull/1408:407,Testability,test,tests,407,"## Description; This is part of *Psi4* porting to Windows (#933). Some time ago (#1240), MKL version had to be pinned for Windows builds. Now it is fixed and the latest version could be used. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Unpin MKL version. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1408
https://github.com/psi4/psi4/pull/1408:498,Testability,test,tests,498,"## Description; This is part of *Psi4* porting to Windows (#933). Some time ago (#1240), MKL version had to be pinned for Windows builds. Now it is fixed and the latest version could be used. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Unpin MKL version. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1408
https://github.com/psi4/psi4/pull/1409:104,Modifiability,config,configured,104,## Description; The default `MAX_AM_ERI` isn't high enough to perform this test. Add it only when it is configured high enough. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1409
https://github.com/psi4/psi4/pull/1409:62,Performance,perform,perform,62,## Description; The default `MAX_AM_ERI` isn't high enough to perform this test. Add it only when it is configured high enough. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1409
https://github.com/psi4/psi4/pull/1409:75,Testability,test,test,75,## Description; The default `MAX_AM_ERI` isn't high enough to perform this test. Add it only when it is configured high enough. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1409
https://github.com/psi4/psi4/pull/1410:242,Energy Efficiency,energy,energy,242,"## Description. This is part of Psi4 porting to Windows (#933). `psithon2` test fails on Windows:; ```; 2018-12-05T15:52:01.1057243Z 8/9 Test #307: psithon2 .........................***Failed 24.86 sec; 2018-12-05T15:52:01.1057730Z 	Built-in energy...................................................PASSED; 2018-12-05T15:52:01.1059103Z 	PSIPATH database..................................................PASSED; 2018-12-05T15:52:01.1059291Z 	Built-in database.................................................PASSED; 2018-12-05T15:52:01.1059763Z 	PSIPATH plugin....................................................PASSED; 2018-12-05T15:52:01.1059834Z ; 2018-12-05T15:52:01.1060236Z QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; 2018-12-05T15:52:01.1060376Z Shell Entries: ['O']; 2018-12-05T15:52:01.1060874Z Basis Sets: [('MYSTO3G', 'MYSTO3G', None)]; 2018-12-05T15:52:01.1061043Z File Path: D:\a\1\b\build\tests\psithon2, D:\a\1\b\build\tests\psithon2\psiaux1:psiaux2, D:\a\1\b\build\stage\share\psi4\basis; 2018-12-05T15:52:01.1061446Z Input Blocks: ; 2018-12-05T15:52:01.1061509Z ; 2018-12-05T15:52:01.1061540Z ; 2018-12-05T15:52:01.1061649Z ; 2018-12-05T15:52:01.1061699Z Traceback (most recent call last):; 2018-12-05T15:52:01.1062102Z File ""D:/a/1/b/build/stage/bin/psi4"", line 272, in <module>; 2018-12-05T15:52:01.1062185Z exec(content); 2018-12-05T15:52:01.1062629Z File ""<string>"", line 68, in <module>; 2018-12-05T15:52:01.1062767Z File ""D:\a\1\b\build\stage\lib\psi4\driver\driver.py"", line 545, in energy; 2018-12-05T15:52:01.1063166Z wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); 2018-12-05T15:52:01.1063257Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 2022, in run_scf; 2018-12-05T15:52:01.1063640Z scf_wfn = scf_helper(name, post_scf=False, **kwargs); 2018-12-05T15:52:01.1063739Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 1281, in sc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1410
https://github.com/psi4/psi4/pull/1410:1575,Energy Efficiency,energy,energy,1575,"...............................PASSED; 2018-12-05T15:52:01.1059834Z ; 2018-12-05T15:52:01.1060236Z QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; 2018-12-05T15:52:01.1060376Z Shell Entries: ['O']; 2018-12-05T15:52:01.1060874Z Basis Sets: [('MYSTO3G', 'MYSTO3G', None)]; 2018-12-05T15:52:01.1061043Z File Path: D:\a\1\b\build\tests\psithon2, D:\a\1\b\build\tests\psithon2\psiaux1:psiaux2, D:\a\1\b\build\stage\share\psi4\basis; 2018-12-05T15:52:01.1061446Z Input Blocks: ; 2018-12-05T15:52:01.1061509Z ; 2018-12-05T15:52:01.1061540Z ; 2018-12-05T15:52:01.1061649Z ; 2018-12-05T15:52:01.1061699Z Traceback (most recent call last):; 2018-12-05T15:52:01.1062102Z File ""D:/a/1/b/build/stage/bin/psi4"", line 272, in <module>; 2018-12-05T15:52:01.1062185Z exec(content); 2018-12-05T15:52:01.1062629Z File ""<string>"", line 68, in <module>; 2018-12-05T15:52:01.1062767Z File ""D:\a\1\b\build\stage\lib\psi4\driver\driver.py"", line 545, in energy; 2018-12-05T15:52:01.1063166Z wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); 2018-12-05T15:52:01.1063257Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 2022, in run_scf; 2018-12-05T15:52:01.1063640Z scf_wfn = scf_helper(name, post_scf=False, **kwargs); 2018-12-05T15:52:01.1063739Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 1281, in scf_helper; 2018-12-05T15:52:01.1064223Z base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); 2018-12-05T15:52:01.1064321Z File ""D:\a\1\b\build\stage\lib\psi4\driver\p4util\python_helpers.py"", line 116, in pybuild_wavefunction; 2018-12-05T15:52:01.1064724Z basis = core.BasisSet.build(mol, ""ORBITAL"", basis); 2018-12-05T15:52:01.1064814Z File ""D:\a\1\b\build\stage\lib\psi4\driver\p4util\python_helpers.py"", line 78, in pybuild_basis; 2018-12-05T15:52:01.1065478Z return_atomlist=return_atomlist); 2018-12-05T15:52:01.1065645Z File ""D:\a\1\b\build\sta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1410
https://github.com/psi4/psi4/pull/1410:1630,Energy Efficiency,energy,energy,1630,"-05T15:52:01.1060236Z QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; 2018-12-05T15:52:01.1060376Z Shell Entries: ['O']; 2018-12-05T15:52:01.1060874Z Basis Sets: [('MYSTO3G', 'MYSTO3G', None)]; 2018-12-05T15:52:01.1061043Z File Path: D:\a\1\b\build\tests\psithon2, D:\a\1\b\build\tests\psithon2\psiaux1:psiaux2, D:\a\1\b\build\stage\share\psi4\basis; 2018-12-05T15:52:01.1061446Z Input Blocks: ; 2018-12-05T15:52:01.1061509Z ; 2018-12-05T15:52:01.1061540Z ; 2018-12-05T15:52:01.1061649Z ; 2018-12-05T15:52:01.1061699Z Traceback (most recent call last):; 2018-12-05T15:52:01.1062102Z File ""D:/a/1/b/build/stage/bin/psi4"", line 272, in <module>; 2018-12-05T15:52:01.1062185Z exec(content); 2018-12-05T15:52:01.1062629Z File ""<string>"", line 68, in <module>; 2018-12-05T15:52:01.1062767Z File ""D:\a\1\b\build\stage\lib\psi4\driver\driver.py"", line 545, in energy; 2018-12-05T15:52:01.1063166Z wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); 2018-12-05T15:52:01.1063257Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 2022, in run_scf; 2018-12-05T15:52:01.1063640Z scf_wfn = scf_helper(name, post_scf=False, **kwargs); 2018-12-05T15:52:01.1063739Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 1281, in scf_helper; 2018-12-05T15:52:01.1064223Z base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); 2018-12-05T15:52:01.1064321Z File ""D:\a\1\b\build\stage\lib\psi4\driver\p4util\python_helpers.py"", line 116, in pybuild_wavefunction; 2018-12-05T15:52:01.1064724Z basis = core.BasisSet.build(mol, ""ORBITAL"", basis); 2018-12-05T15:52:01.1064814Z File ""D:\a\1\b\build\stage\lib\psi4\driver\p4util\python_helpers.py"", line 78, in pybuild_basis; 2018-12-05T15:52:01.1065478Z return_atomlist=return_atomlist); 2018-12-05T15:52:01.1065645Z File ""D:\a\1\b\build\stage\lib\psi4\driver\qcdb\libmintsbasisset.py"", line 684, in pyconstruct; 2018-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1410
https://github.com/psi4/psi4/pull/1410:553,Modifiability,plugin,plugin,553,"## Description. This is part of Psi4 porting to Windows (#933). `psithon2` test fails on Windows:; ```; 2018-12-05T15:52:01.1057243Z 8/9 Test #307: psithon2 .........................***Failed 24.86 sec; 2018-12-05T15:52:01.1057730Z 	Built-in energy...................................................PASSED; 2018-12-05T15:52:01.1059103Z 	PSIPATH database..................................................PASSED; 2018-12-05T15:52:01.1059291Z 	Built-in database.................................................PASSED; 2018-12-05T15:52:01.1059763Z 	PSIPATH plugin....................................................PASSED; 2018-12-05T15:52:01.1059834Z ; 2018-12-05T15:52:01.1060236Z QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; 2018-12-05T15:52:01.1060376Z Shell Entries: ['O']; 2018-12-05T15:52:01.1060874Z Basis Sets: [('MYSTO3G', 'MYSTO3G', None)]; 2018-12-05T15:52:01.1061043Z File Path: D:\a\1\b\build\tests\psithon2, D:\a\1\b\build\tests\psithon2\psiaux1:psiaux2, D:\a\1\b\build\stage\share\psi4\basis; 2018-12-05T15:52:01.1061446Z Input Blocks: ; 2018-12-05T15:52:01.1061509Z ; 2018-12-05T15:52:01.1061540Z ; 2018-12-05T15:52:01.1061649Z ; 2018-12-05T15:52:01.1061699Z Traceback (most recent call last):; 2018-12-05T15:52:01.1062102Z File ""D:/a/1/b/build/stage/bin/psi4"", line 272, in <module>; 2018-12-05T15:52:01.1062185Z exec(content); 2018-12-05T15:52:01.1062629Z File ""<string>"", line 68, in <module>; 2018-12-05T15:52:01.1062767Z File ""D:\a\1\b\build\stage\lib\psi4\driver\driver.py"", line 545, in energy; 2018-12-05T15:52:01.1063166Z wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); 2018-12-05T15:52:01.1063257Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 2022, in run_scf; 2018-12-05T15:52:01.1063640Z scf_wfn = scf_helper(name, post_scf=False, **kwargs); 2018-12-05T15:52:01.1063739Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 1281, in sc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1410
https://github.com/psi4/psi4/pull/1410:75,Testability,test,test,75,"## Description. This is part of Psi4 porting to Windows (#933). `psithon2` test fails on Windows:; ```; 2018-12-05T15:52:01.1057243Z 8/9 Test #307: psithon2 .........................***Failed 24.86 sec; 2018-12-05T15:52:01.1057730Z 	Built-in energy...................................................PASSED; 2018-12-05T15:52:01.1059103Z 	PSIPATH database..................................................PASSED; 2018-12-05T15:52:01.1059291Z 	Built-in database.................................................PASSED; 2018-12-05T15:52:01.1059763Z 	PSIPATH plugin....................................................PASSED; 2018-12-05T15:52:01.1059834Z ; 2018-12-05T15:52:01.1060236Z QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; 2018-12-05T15:52:01.1060376Z Shell Entries: ['O']; 2018-12-05T15:52:01.1060874Z Basis Sets: [('MYSTO3G', 'MYSTO3G', None)]; 2018-12-05T15:52:01.1061043Z File Path: D:\a\1\b\build\tests\psithon2, D:\a\1\b\build\tests\psithon2\psiaux1:psiaux2, D:\a\1\b\build\stage\share\psi4\basis; 2018-12-05T15:52:01.1061446Z Input Blocks: ; 2018-12-05T15:52:01.1061509Z ; 2018-12-05T15:52:01.1061540Z ; 2018-12-05T15:52:01.1061649Z ; 2018-12-05T15:52:01.1061699Z Traceback (most recent call last):; 2018-12-05T15:52:01.1062102Z File ""D:/a/1/b/build/stage/bin/psi4"", line 272, in <module>; 2018-12-05T15:52:01.1062185Z exec(content); 2018-12-05T15:52:01.1062629Z File ""<string>"", line 68, in <module>; 2018-12-05T15:52:01.1062767Z File ""D:\a\1\b\build\stage\lib\psi4\driver\driver.py"", line 545, in energy; 2018-12-05T15:52:01.1063166Z wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); 2018-12-05T15:52:01.1063257Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 2022, in run_scf; 2018-12-05T15:52:01.1063640Z scf_wfn = scf_helper(name, post_scf=False, **kwargs); 2018-12-05T15:52:01.1063739Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 1281, in sc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1410
https://github.com/psi4/psi4/pull/1410:137,Testability,Test,Test,137,"## Description. This is part of Psi4 porting to Windows (#933). `psithon2` test fails on Windows:; ```; 2018-12-05T15:52:01.1057243Z 8/9 Test #307: psithon2 .........................***Failed 24.86 sec; 2018-12-05T15:52:01.1057730Z 	Built-in energy...................................................PASSED; 2018-12-05T15:52:01.1059103Z 	PSIPATH database..................................................PASSED; 2018-12-05T15:52:01.1059291Z 	Built-in database.................................................PASSED; 2018-12-05T15:52:01.1059763Z 	PSIPATH plugin....................................................PASSED; 2018-12-05T15:52:01.1059834Z ; 2018-12-05T15:52:01.1060236Z QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; 2018-12-05T15:52:01.1060376Z Shell Entries: ['O']; 2018-12-05T15:52:01.1060874Z Basis Sets: [('MYSTO3G', 'MYSTO3G', None)]; 2018-12-05T15:52:01.1061043Z File Path: D:\a\1\b\build\tests\psithon2, D:\a\1\b\build\tests\psithon2\psiaux1:psiaux2, D:\a\1\b\build\stage\share\psi4\basis; 2018-12-05T15:52:01.1061446Z Input Blocks: ; 2018-12-05T15:52:01.1061509Z ; 2018-12-05T15:52:01.1061540Z ; 2018-12-05T15:52:01.1061649Z ; 2018-12-05T15:52:01.1061699Z Traceback (most recent call last):; 2018-12-05T15:52:01.1062102Z File ""D:/a/1/b/build/stage/bin/psi4"", line 272, in <module>; 2018-12-05T15:52:01.1062185Z exec(content); 2018-12-05T15:52:01.1062629Z File ""<string>"", line 68, in <module>; 2018-12-05T15:52:01.1062767Z File ""D:\a\1\b\build\stage\lib\psi4\driver\driver.py"", line 545, in energy; 2018-12-05T15:52:01.1063166Z wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); 2018-12-05T15:52:01.1063257Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 2022, in run_scf; 2018-12-05T15:52:01.1063640Z scf_wfn = scf_helper(name, post_scf=False, **kwargs); 2018-12-05T15:52:01.1063739Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 1281, in sc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1410
https://github.com/psi4/psi4/pull/1410:971,Testability,test,tests,971,". This is part of Psi4 porting to Windows (#933). `psithon2` test fails on Windows:; ```; 2018-12-05T15:52:01.1057243Z 8/9 Test #307: psithon2 .........................***Failed 24.86 sec; 2018-12-05T15:52:01.1057730Z 	Built-in energy...................................................PASSED; 2018-12-05T15:52:01.1059103Z 	PSIPATH database..................................................PASSED; 2018-12-05T15:52:01.1059291Z 	Built-in database.................................................PASSED; 2018-12-05T15:52:01.1059763Z 	PSIPATH plugin....................................................PASSED; 2018-12-05T15:52:01.1059834Z ; 2018-12-05T15:52:01.1060236Z QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; 2018-12-05T15:52:01.1060376Z Shell Entries: ['O']; 2018-12-05T15:52:01.1060874Z Basis Sets: [('MYSTO3G', 'MYSTO3G', None)]; 2018-12-05T15:52:01.1061043Z File Path: D:\a\1\b\build\tests\psithon2, D:\a\1\b\build\tests\psithon2\psiaux1:psiaux2, D:\a\1\b\build\stage\share\psi4\basis; 2018-12-05T15:52:01.1061446Z Input Blocks: ; 2018-12-05T15:52:01.1061509Z ; 2018-12-05T15:52:01.1061540Z ; 2018-12-05T15:52:01.1061649Z ; 2018-12-05T15:52:01.1061699Z Traceback (most recent call last):; 2018-12-05T15:52:01.1062102Z File ""D:/a/1/b/build/stage/bin/psi4"", line 272, in <module>; 2018-12-05T15:52:01.1062185Z exec(content); 2018-12-05T15:52:01.1062629Z File ""<string>"", line 68, in <module>; 2018-12-05T15:52:01.1062767Z File ""D:\a\1\b\build\stage\lib\psi4\driver\driver.py"", line 545, in energy; 2018-12-05T15:52:01.1063166Z wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); 2018-12-05T15:52:01.1063257Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 2022, in run_scf; 2018-12-05T15:52:01.1063640Z scf_wfn = scf_helper(name, post_scf=False, **kwargs); 2018-12-05T15:52:01.1063739Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 1281, in scf_helper; 2018",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1410
https://github.com/psi4/psi4/pull/1410:1002,Testability,test,tests,1002,". This is part of Psi4 porting to Windows (#933). `psithon2` test fails on Windows:; ```; 2018-12-05T15:52:01.1057243Z 8/9 Test #307: psithon2 .........................***Failed 24.86 sec; 2018-12-05T15:52:01.1057730Z 	Built-in energy...................................................PASSED; 2018-12-05T15:52:01.1059103Z 	PSIPATH database..................................................PASSED; 2018-12-05T15:52:01.1059291Z 	Built-in database.................................................PASSED; 2018-12-05T15:52:01.1059763Z 	PSIPATH plugin....................................................PASSED; 2018-12-05T15:52:01.1059834Z ; 2018-12-05T15:52:01.1060236Z QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; 2018-12-05T15:52:01.1060376Z Shell Entries: ['O']; 2018-12-05T15:52:01.1060874Z Basis Sets: [('MYSTO3G', 'MYSTO3G', None)]; 2018-12-05T15:52:01.1061043Z File Path: D:\a\1\b\build\tests\psithon2, D:\a\1\b\build\tests\psithon2\psiaux1:psiaux2, D:\a\1\b\build\stage\share\psi4\basis; 2018-12-05T15:52:01.1061446Z Input Blocks: ; 2018-12-05T15:52:01.1061509Z ; 2018-12-05T15:52:01.1061540Z ; 2018-12-05T15:52:01.1061649Z ; 2018-12-05T15:52:01.1061699Z Traceback (most recent call last):; 2018-12-05T15:52:01.1062102Z File ""D:/a/1/b/build/stage/bin/psi4"", line 272, in <module>; 2018-12-05T15:52:01.1062185Z exec(content); 2018-12-05T15:52:01.1062629Z File ""<string>"", line 68, in <module>; 2018-12-05T15:52:01.1062767Z File ""D:\a\1\b\build\stage\lib\psi4\driver\driver.py"", line 545, in energy; 2018-12-05T15:52:01.1063166Z wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); 2018-12-05T15:52:01.1063257Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 2022, in run_scf; 2018-12-05T15:52:01.1063640Z scf_wfn = scf_helper(name, post_scf=False, **kwargs); 2018-12-05T15:52:01.1063739Z File ""D:\a\1\b\build\stage\lib\psi4\driver\procrouting\proc.py"", line 1281, in scf_helper; 2018",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1410
https://github.com/psi4/psi4/pull/1410:3212,Testability,test,tests,3212,"4223Z base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); 2018-12-05T15:52:01.1064321Z File ""D:\a\1\b\build\stage\lib\psi4\driver\p4util\python_helpers.py"", line 116, in pybuild_wavefunction; 2018-12-05T15:52:01.1064724Z basis = core.BasisSet.build(mol, ""ORBITAL"", basis); 2018-12-05T15:52:01.1064814Z File ""D:\a\1\b\build\stage\lib\psi4\driver\p4util\python_helpers.py"", line 78, in pybuild_basis; 2018-12-05T15:52:01.1065478Z return_atomlist=return_atomlist); 2018-12-05T15:52:01.1065645Z File ""D:\a\1\b\build\stage\lib\psi4\driver\qcdb\libmintsbasisset.py"", line 684, in pyconstruct; 2018-12-05T15:52:01.1065754Z verbose=verbose); 2018-12-05T15:52:01.1065810Z File ""D:\a\1\b\build\stage\lib\psi4\driver\qcdb\libmintsbasisset.py"", line 902, in construct; 2018-12-05T15:52:01.1065961Z (at + 1, key, text2)); 2018-12-05T15:52:01.1066510Z ; 2018-12-05T15:52:01.1066674Z BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; 2018-12-05T15:52:01.1067070Z Shell Entries: ['O']; 2018-12-05T15:52:01.1067208Z Basis Sets: [('MYSTO3G', 'MYSTO3G', None)]; 2018-12-05T15:52:01.1067274Z File Path: D:\a\1\b\build\tests\psithon2, D:\a\1\b\build\tests\psithon2\psiaux1:psiaux2, D:\a\1\b\build\stage\share\psi4\basis; 2018-12-05T15:52:01.1067365Z Input Blocks: ; 2018-12-05T15:52:01.1067711Z ; 2018-12-05T15:52:01.1067830Z Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); 2018-12-05T15:52:01.1067917Z ; ```. The result of the fix will be visible when #1399 is merged. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix path handling in `psi4.driver.wrapper_dababase.dabatabe`; - [x] Fix `psithon2` test. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1410
https://github.com/psi4/psi4/pull/1410:3243,Testability,test,tests,3243,"4223Z base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); 2018-12-05T15:52:01.1064321Z File ""D:\a\1\b\build\stage\lib\psi4\driver\p4util\python_helpers.py"", line 116, in pybuild_wavefunction; 2018-12-05T15:52:01.1064724Z basis = core.BasisSet.build(mol, ""ORBITAL"", basis); 2018-12-05T15:52:01.1064814Z File ""D:\a\1\b\build\stage\lib\psi4\driver\p4util\python_helpers.py"", line 78, in pybuild_basis; 2018-12-05T15:52:01.1065478Z return_atomlist=return_atomlist); 2018-12-05T15:52:01.1065645Z File ""D:\a\1\b\build\stage\lib\psi4\driver\qcdb\libmintsbasisset.py"", line 684, in pyconstruct; 2018-12-05T15:52:01.1065754Z verbose=verbose); 2018-12-05T15:52:01.1065810Z File ""D:\a\1\b\build\stage\lib\psi4\driver\qcdb\libmintsbasisset.py"", line 902, in construct; 2018-12-05T15:52:01.1065961Z (at + 1, key, text2)); 2018-12-05T15:52:01.1066510Z ; 2018-12-05T15:52:01.1066674Z BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; 2018-12-05T15:52:01.1067070Z Shell Entries: ['O']; 2018-12-05T15:52:01.1067208Z Basis Sets: [('MYSTO3G', 'MYSTO3G', None)]; 2018-12-05T15:52:01.1067274Z File Path: D:\a\1\b\build\tests\psithon2, D:\a\1\b\build\tests\psithon2\psiaux1:psiaux2, D:\a\1\b\build\stage\share\psi4\basis; 2018-12-05T15:52:01.1067365Z Input Blocks: ; 2018-12-05T15:52:01.1067711Z ; 2018-12-05T15:52:01.1067830Z Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); 2018-12-05T15:52:01.1067917Z ; ```. The result of the fix will be visible when #1399 is merged. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix path handling in `psi4.driver.wrapper_dababase.dabatabe`; - [x] Fix `psithon2` test. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1410
https://github.com/psi4/psi4/pull/1410:3775,Testability,test,test,3775,"4223Z base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); 2018-12-05T15:52:01.1064321Z File ""D:\a\1\b\build\stage\lib\psi4\driver\p4util\python_helpers.py"", line 116, in pybuild_wavefunction; 2018-12-05T15:52:01.1064724Z basis = core.BasisSet.build(mol, ""ORBITAL"", basis); 2018-12-05T15:52:01.1064814Z File ""D:\a\1\b\build\stage\lib\psi4\driver\p4util\python_helpers.py"", line 78, in pybuild_basis; 2018-12-05T15:52:01.1065478Z return_atomlist=return_atomlist); 2018-12-05T15:52:01.1065645Z File ""D:\a\1\b\build\stage\lib\psi4\driver\qcdb\libmintsbasisset.py"", line 684, in pyconstruct; 2018-12-05T15:52:01.1065754Z verbose=verbose); 2018-12-05T15:52:01.1065810Z File ""D:\a\1\b\build\stage\lib\psi4\driver\qcdb\libmintsbasisset.py"", line 902, in construct; 2018-12-05T15:52:01.1065961Z (at + 1, key, text2)); 2018-12-05T15:52:01.1066510Z ; 2018-12-05T15:52:01.1066674Z BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; 2018-12-05T15:52:01.1067070Z Shell Entries: ['O']; 2018-12-05T15:52:01.1067208Z Basis Sets: [('MYSTO3G', 'MYSTO3G', None)]; 2018-12-05T15:52:01.1067274Z File Path: D:\a\1\b\build\tests\psithon2, D:\a\1\b\build\tests\psithon2\psiaux1:psiaux2, D:\a\1\b\build\stage\share\psi4\basis; 2018-12-05T15:52:01.1067365Z Input Blocks: ; 2018-12-05T15:52:01.1067711Z ; 2018-12-05T15:52:01.1067830Z Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); 2018-12-05T15:52:01.1067917Z ; ```. The result of the fix will be visible when #1399 is merged. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix path handling in `psi4.driver.wrapper_dababase.dabatabe`; - [x] Fix `psithon2` test. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1410
https://github.com/psi4/psi4/pull/1410:3803,Testability,Test,Tests,3803,"4223Z base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); 2018-12-05T15:52:01.1064321Z File ""D:\a\1\b\build\stage\lib\psi4\driver\p4util\python_helpers.py"", line 116, in pybuild_wavefunction; 2018-12-05T15:52:01.1064724Z basis = core.BasisSet.build(mol, ""ORBITAL"", basis); 2018-12-05T15:52:01.1064814Z File ""D:\a\1\b\build\stage\lib\psi4\driver\p4util\python_helpers.py"", line 78, in pybuild_basis; 2018-12-05T15:52:01.1065478Z return_atomlist=return_atomlist); 2018-12-05T15:52:01.1065645Z File ""D:\a\1\b\build\stage\lib\psi4\driver\qcdb\libmintsbasisset.py"", line 684, in pyconstruct; 2018-12-05T15:52:01.1065754Z verbose=verbose); 2018-12-05T15:52:01.1065810Z File ""D:\a\1\b\build\stage\lib\psi4\driver\qcdb\libmintsbasisset.py"", line 902, in construct; 2018-12-05T15:52:01.1065961Z (at + 1, key, text2)); 2018-12-05T15:52:01.1066510Z ; 2018-12-05T15:52:01.1066674Z BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; 2018-12-05T15:52:01.1067070Z Shell Entries: ['O']; 2018-12-05T15:52:01.1067208Z Basis Sets: [('MYSTO3G', 'MYSTO3G', None)]; 2018-12-05T15:52:01.1067274Z File Path: D:\a\1\b\build\tests\psithon2, D:\a\1\b\build\tests\psithon2\psiaux1:psiaux2, D:\a\1\b\build\stage\share\psi4\basis; 2018-12-05T15:52:01.1067365Z Input Blocks: ; 2018-12-05T15:52:01.1067711Z ; 2018-12-05T15:52:01.1067830Z Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); 2018-12-05T15:52:01.1067917Z ; ```. The result of the fix will be visible when #1399 is merged. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix path handling in `psi4.driver.wrapper_dababase.dabatabe`; - [x] Fix `psithon2` test. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1410
https://github.com/psi4/psi4/pull/1410:3879,Testability,test,tests,3879,"4223Z base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); 2018-12-05T15:52:01.1064321Z File ""D:\a\1\b\build\stage\lib\psi4\driver\p4util\python_helpers.py"", line 116, in pybuild_wavefunction; 2018-12-05T15:52:01.1064724Z basis = core.BasisSet.build(mol, ""ORBITAL"", basis); 2018-12-05T15:52:01.1064814Z File ""D:\a\1\b\build\stage\lib\psi4\driver\p4util\python_helpers.py"", line 78, in pybuild_basis; 2018-12-05T15:52:01.1065478Z return_atomlist=return_atomlist); 2018-12-05T15:52:01.1065645Z File ""D:\a\1\b\build\stage\lib\psi4\driver\qcdb\libmintsbasisset.py"", line 684, in pyconstruct; 2018-12-05T15:52:01.1065754Z verbose=verbose); 2018-12-05T15:52:01.1065810Z File ""D:\a\1\b\build\stage\lib\psi4\driver\qcdb\libmintsbasisset.py"", line 902, in construct; 2018-12-05T15:52:01.1065961Z (at + 1, key, text2)); 2018-12-05T15:52:01.1066510Z ; 2018-12-05T15:52:01.1066674Z BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; 2018-12-05T15:52:01.1067070Z Shell Entries: ['O']; 2018-12-05T15:52:01.1067208Z Basis Sets: [('MYSTO3G', 'MYSTO3G', None)]; 2018-12-05T15:52:01.1067274Z File Path: D:\a\1\b\build\tests\psithon2, D:\a\1\b\build\tests\psithon2\psiaux1:psiaux2, D:\a\1\b\build\stage\share\psi4\basis; 2018-12-05T15:52:01.1067365Z Input Blocks: ; 2018-12-05T15:52:01.1067711Z ; 2018-12-05T15:52:01.1067830Z Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); 2018-12-05T15:52:01.1067917Z ; ```. The result of the fix will be visible when #1399 is merged. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix path handling in `psi4.driver.wrapper_dababase.dabatabe`; - [x] Fix `psithon2` test. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1410
https://github.com/psi4/psi4/pull/1410:3970,Testability,test,tests,3970,"4223Z base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); 2018-12-05T15:52:01.1064321Z File ""D:\a\1\b\build\stage\lib\psi4\driver\p4util\python_helpers.py"", line 116, in pybuild_wavefunction; 2018-12-05T15:52:01.1064724Z basis = core.BasisSet.build(mol, ""ORBITAL"", basis); 2018-12-05T15:52:01.1064814Z File ""D:\a\1\b\build\stage\lib\psi4\driver\p4util\python_helpers.py"", line 78, in pybuild_basis; 2018-12-05T15:52:01.1065478Z return_atomlist=return_atomlist); 2018-12-05T15:52:01.1065645Z File ""D:\a\1\b\build\stage\lib\psi4\driver\qcdb\libmintsbasisset.py"", line 684, in pyconstruct; 2018-12-05T15:52:01.1065754Z verbose=verbose); 2018-12-05T15:52:01.1065810Z File ""D:\a\1\b\build\stage\lib\psi4\driver\qcdb\libmintsbasisset.py"", line 902, in construct; 2018-12-05T15:52:01.1065961Z (at + 1, key, text2)); 2018-12-05T15:52:01.1066510Z ; 2018-12-05T15:52:01.1066674Z BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; 2018-12-05T15:52:01.1067070Z Shell Entries: ['O']; 2018-12-05T15:52:01.1067208Z Basis Sets: [('MYSTO3G', 'MYSTO3G', None)]; 2018-12-05T15:52:01.1067274Z File Path: D:\a\1\b\build\tests\psithon2, D:\a\1\b\build\tests\psithon2\psiaux1:psiaux2, D:\a\1\b\build\stage\share\psi4\basis; 2018-12-05T15:52:01.1067365Z Input Blocks: ; 2018-12-05T15:52:01.1067711Z ; 2018-12-05T15:52:01.1067830Z Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); 2018-12-05T15:52:01.1067917Z ; ```. The result of the fix will be visible when #1399 is merged. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix path handling in `psi4.driver.wrapper_dababase.dabatabe`; - [x] Fix `psithon2` test. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1410
https://github.com/psi4/psi4/pull/1411:908,Energy Efficiency,energy,energy,908,## Description; Addresses #1362 . This PR will modify the ShellPair struct used throughout the ERI code. This object is an intermediate in integral calculations that describes the overlap between two basis set shells. Each shell pair is composed of gaussian primitives pairs. Many of these primitive pairs don't make a significant contribution to the integral calculations and can be screened via the overlap term. This PR will also modernize the ShellPair object by replacing C++ arrays with `std::vector` and remove explicit memory-related operations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Functional `std::vector` based ShellPair; - [x] Primitive Screening in new ShellPair; - [x] Remove old ShellPair struct. ## Questions; - [ ] What should we use for the overlap threshold? It's currently set at ~~10e-10~~ 10e-12. This doesn't affect the SCF energy in the handful of molecules I've tested. I may have to investigate other codes. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All ~~or relevant fraction of full~~ tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1411
https://github.com/psi4/psi4/pull/1411:948,Testability,test,tested,948,## Description; Addresses #1362 . This PR will modify the ShellPair struct used throughout the ERI code. This object is an intermediate in integral calculations that describes the overlap between two basis set shells. Each shell pair is composed of gaussian primitives pairs. Many of these primitive pairs don't make a significant contribution to the integral calculations and can be screened via the overlap term. This PR will also modernize the ShellPair object by replacing C++ arrays with `std::vector` and remove explicit memory-related operations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Functional `std::vector` based ShellPair; - [x] Primitive Screening in new ShellPair; - [x] Remove old ShellPair struct. ## Questions; - [ ] What should we use for the overlap threshold? It's currently set at ~~10e-10~~ 10e-12. This doesn't affect the SCF energy in the handful of molecules I've tested. I may have to investigate other codes. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All ~~or relevant fraction of full~~ tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1411
https://github.com/psi4/psi4/pull/1411:1017,Testability,Test,Tests,1017,## Description; Addresses #1362 . This PR will modify the ShellPair struct used throughout the ERI code. This object is an intermediate in integral calculations that describes the overlap between two basis set shells. Each shell pair is composed of gaussian primitives pairs. Many of these primitive pairs don't make a significant contribution to the integral calculations and can be screened via the overlap term. This PR will also modernize the ShellPair object by replacing C++ arrays with `std::vector` and remove explicit memory-related operations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Functional `std::vector` based ShellPair; - [x] Primitive Screening in new ShellPair; - [x] Remove old ShellPair struct. ## Questions; - [ ] What should we use for the overlap threshold? It's currently set at ~~10e-10~~ 10e-12. This doesn't affect the SCF energy in the handful of molecules I've tested. I may have to investigate other codes. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All ~~or relevant fraction of full~~ tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1411
https://github.com/psi4/psi4/pull/1411:1097,Testability,test,tests,1097,## Description; Addresses #1362 . This PR will modify the ShellPair struct used throughout the ERI code. This object is an intermediate in integral calculations that describes the overlap between two basis set shells. Each shell pair is composed of gaussian primitives pairs. Many of these primitive pairs don't make a significant contribution to the integral calculations and can be screened via the overlap term. This PR will also modernize the ShellPair object by replacing C++ arrays with `std::vector` and remove explicit memory-related operations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Functional `std::vector` based ShellPair; - [x] Primitive Screening in new ShellPair; - [x] Remove old ShellPair struct. ## Questions; - [ ] What should we use for the overlap threshold? It's currently set at ~~10e-10~~ 10e-12. This doesn't affect the SCF energy in the handful of molecules I've tested. I may have to investigate other codes. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All ~~or relevant fraction of full~~ tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1411
https://github.com/psi4/psi4/pull/1411:1188,Testability,test,tests,1188,## Description; Addresses #1362 . This PR will modify the ShellPair struct used throughout the ERI code. This object is an intermediate in integral calculations that describes the overlap between two basis set shells. Each shell pair is composed of gaussian primitives pairs. Many of these primitive pairs don't make a significant contribution to the integral calculations and can be screened via the overlap term. This PR will also modernize the ShellPair object by replacing C++ arrays with `std::vector` and remove explicit memory-related operations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Functional `std::vector` based ShellPair; - [x] Primitive Screening in new ShellPair; - [x] Remove old ShellPair struct. ## Questions; - [ ] What should we use for the overlap threshold? It's currently set at ~~10e-10~~ 10e-12. This doesn't affect the SCF energy in the handful of molecules I've tested. I may have to investigate other codes. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All ~~or relevant fraction of full~~ tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1411
https://github.com/psi4/psi4/pull/1412:83,Availability,error,error,83,"## Description; Small bug fix that prevents adding local options to a module. This error shows only for `string` and `int` type options, but I potentially also in `array` and `python` data types. This PR addresses all four cases. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix option reading bug. ## Questions; - In the following part of the code one can potentially encounter the same problem. This can be fixed by adding `module` to the list of parameters passed to this function. Any reason why there is no `std::string module` in the parameter list? Adding it would also make this function consistent with other `set_local_x` functions.; https://github.com/psi4/psi4/blob/396b4c51d6902301baeed41386c49ccb9099a30b/psi4/src/core.cc#L705-L707. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1412
https://github.com/psi4/psi4/pull/1412:854,Testability,test,tests,854,"## Description; Small bug fix that prevents adding local options to a module. This error shows only for `string` and `int` type options, but I potentially also in `array` and `python` data types. This PR addresses all four cases. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix option reading bug. ## Questions; - In the following part of the code one can potentially encounter the same problem. This can be fixed by adding `module` to the list of parameters passed to this function. Any reason why there is no `std::string module` in the parameter list? Adding it would also make this function consistent with other `set_local_x` functions.; https://github.com/psi4/psi4/blob/396b4c51d6902301baeed41386c49ccb9099a30b/psi4/src/core.cc#L705-L707. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1412
https://github.com/psi4/psi4/pull/1412:945,Testability,test,tests,945,"## Description; Small bug fix that prevents adding local options to a module. This error shows only for `string` and `int` type options, but I potentially also in `array` and `python` data types. This PR addresses all four cases. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix option reading bug. ## Questions; - In the following part of the code one can potentially encounter the same problem. This can be fixed by adding `module` to the list of parameters passed to this function. Any reason why there is no `std::string module` in the parameter list? Adding it would also make this function consistent with other `set_local_x` functions.; https://github.com/psi4/psi4/blob/396b4c51d6902301baeed41386c49ccb9099a30b/psi4/src/core.cc#L705-L707. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1412
https://github.com/psi4/psi4/pull/1413:284,Testability,Test,Tests,284,## Description; This is part of *Psi4* porting to Windows (#933). Make *Psi4* to work without setting `PSI_SCRATCH`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Set the default path to `TEMP` or `TMP` value. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1413
https://github.com/psi4/psi4/pull/1413:360,Testability,test,tests,360,## Description; This is part of *Psi4* porting to Windows (#933). Make *Psi4* to work without setting `PSI_SCRATCH`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Set the default path to `TEMP` or `TMP` value. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1413
https://github.com/psi4/psi4/pull/1413:451,Testability,test,tests,451,## Description; This is part of *Psi4* porting to Windows (#933). Make *Psi4* to work without setting `PSI_SCRATCH`. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Set the default path to `TEMP` or `TMP` value. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1413
https://github.com/psi4/psi4/pull/1414:443,Integrability,rout,routinely,443,## Description; move dft-bench and vibanalysis tests to pytest. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] move the 4 dft-bench tests to pytest with parameterization; - [x] move the vibanalysis test to pytest; - [x] add IR intensity benchmarks from Cfour so #1382 has something to test against; - [x] delete the ctest versions; - [x] add in `pytest.mark.long` to avoid running some bench routinely. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1414
https://github.com/psi4/psi4/pull/1414:204,Modifiability,parameteriz,parameterization,204,## Description; move dft-bench and vibanalysis tests to pytest. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] move the 4 dft-bench tests to pytest with parameterization; - [x] move the vibanalysis test to pytest; - [x] add IR intensity benchmarks from Cfour so #1382 has something to test against; - [x] delete the ctest versions; - [x] add in `pytest.mark.long` to avoid running some bench routinely. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1414
https://github.com/psi4/psi4/pull/1414:418,Safety,avoid,avoid,418,## Description; move dft-bench and vibanalysis tests to pytest. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] move the 4 dft-bench tests to pytest with parameterization; - [x] move the vibanalysis test to pytest; - [x] add IR intensity benchmarks from Cfour so #1382 has something to test against; - [x] delete the ctest versions; - [x] add in `pytest.mark.long` to avoid running some bench routinely. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1414
https://github.com/psi4/psi4/pull/1414:47,Testability,test,tests,47,## Description; move dft-bench and vibanalysis tests to pytest. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] move the 4 dft-bench tests to pytest with parameterization; - [x] move the vibanalysis test to pytest; - [x] add IR intensity benchmarks from Cfour so #1382 has something to test against; - [x] delete the ctest versions; - [x] add in `pytest.mark.long` to avoid running some bench routinely. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1414
https://github.com/psi4/psi4/pull/1414:183,Testability,test,tests,183,## Description; move dft-bench and vibanalysis tests to pytest. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] move the 4 dft-bench tests to pytest with parameterization; - [x] move the vibanalysis test to pytest; - [x] add IR intensity benchmarks from Cfour so #1382 has something to test against; - [x] delete the ctest versions; - [x] add in `pytest.mark.long` to avoid running some bench routinely. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1414
https://github.com/psi4/psi4/pull/1414:249,Testability,test,test,249,## Description; move dft-bench and vibanalysis tests to pytest. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] move the 4 dft-bench tests to pytest with parameterization; - [x] move the vibanalysis test to pytest; - [x] add IR intensity benchmarks from Cfour so #1382 has something to test against; - [x] delete the ctest versions; - [x] add in `pytest.mark.long` to avoid running some bench routinely. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1414
https://github.com/psi4/psi4/pull/1414:288,Testability,benchmark,benchmarks,288,## Description; move dft-bench and vibanalysis tests to pytest. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] move the 4 dft-bench tests to pytest with parameterization; - [x] move the vibanalysis test to pytest; - [x] add IR intensity benchmarks from Cfour so #1382 has something to test against; - [x] delete the ctest versions; - [x] add in `pytest.mark.long` to avoid running some bench routinely. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1414
https://github.com/psi4/psi4/pull/1414:336,Testability,test,test,336,## Description; move dft-bench and vibanalysis tests to pytest. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] move the 4 dft-bench tests to pytest with parameterization; - [x] move the vibanalysis test to pytest; - [x] add IR intensity benchmarks from Cfour so #1382 has something to test against; - [x] delete the ctest versions; - [x] add in `pytest.mark.long` to avoid running some bench routinely. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1414
https://github.com/psi4/psi4/pull/1414:505,Testability,Test,Tests,505,## Description; move dft-bench and vibanalysis tests to pytest. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] move the 4 dft-bench tests to pytest with parameterization; - [x] move the vibanalysis test to pytest; - [x] add IR intensity benchmarks from Cfour so #1382 has something to test against; - [x] delete the ctest versions; - [x] add in `pytest.mark.long` to avoid running some bench routinely. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1414
https://github.com/psi4/psi4/pull/1414:579,Testability,test,tests,579,## Description; move dft-bench and vibanalysis tests to pytest. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] move the 4 dft-bench tests to pytest with parameterization; - [x] move the vibanalysis test to pytest; - [x] add IR intensity benchmarks from Cfour so #1382 has something to test against; - [x] delete the ctest versions; - [x] add in `pytest.mark.long` to avoid running some bench routinely. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1414
https://github.com/psi4/psi4/pull/1414:670,Testability,test,tests,670,## Description; move dft-bench and vibanalysis tests to pytest. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] move the 4 dft-bench tests to pytest with parameterization; - [x] move the vibanalysis test to pytest; - [x] add IR intensity benchmarks from Cfour so #1382 has something to test against; - [x] delete the ctest versions; - [x] add in `pytest.mark.long` to avoid running some bench routinely. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1414
https://github.com/psi4/psi4/pull/1415:168,Integrability,depend,dependent,168,"## Description; I found a few classes that shouldn't be exported. From ecpint.h, `AngularIntegral` and `RadialIntegral` are only used internally and are implementation dependent. In potentialint.h, the functors reside fully in the header and thus don't need to be ""exported"". ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1415
https://github.com/psi4/psi4/pull/1417:824,Testability,Test,Tests,824,"## Description; add function to reset options state from dictionary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] all the non-optking misc. from #1335 ; - [x] if you call `run_json` from within the same `import psi4` instance (as opposed to `subprocess` of `psi4 --json`), your options are all cleared by the call. Even if you just call something else that does the psi4 json call (like pyoptking), this happens. This is a little function that lets you continue **for global options only**. ```; # collect options; all_options = p4util.prepare_options_for_modules(changedOnly=True, commandsInsteadDict=False). # destroys options; optking_json_dict = optking.run_json_dict(optking_schema). # restore options; p4util.reset_pe_options(all_options); ```. ## Checklist; - [ ] Tests added for any new features; - [x] it worked a month ago. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1417
https://github.com/psi4/psi4/pull/1417:347,Usability,clear,cleared,347,"## Description; add function to reset options state from dictionary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] all the non-optking misc. from #1335 ; - [x] if you call `run_json` from within the same `import psi4` instance (as opposed to `subprocess` of `psi4 --json`), your options are all cleared by the call. Even if you just call something else that does the psi4 json call (like pyoptking), this happens. This is a little function that lets you continue **for global options only**. ```; # collect options; all_options = p4util.prepare_options_for_modules(changedOnly=True, commandsInsteadDict=False). # destroys options; optking_json_dict = optking.run_json_dict(optking_schema). # restore options; p4util.reset_pe_options(all_options); ```. ## Checklist; - [ ] Tests added for any new features; - [x] it worked a month ago. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1417
https://github.com/psi4/psi4/issues/1418:136,Availability,failure,failure,136,"`dft-grad-lr3` test fails with the current master (64aa80aa96983bec51d40732d18f3def5eb9e844):; ```; $ ctest -R dft-grad-lr3 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 158: dft-grad-lr3; 1/1 Test #158: dft-grad-lr3 .....................***Failed 85.00 sec; 	Analytic vs Reference wB97X-D Gradients...........................PASSED; Traceback (most recent call last):; File ""/home/raimis/psi4.git/linux_build/stage/bin/psi4"", line 290, in <module>; exec(content); File ""<string>"", line 74, in <module>; File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/driver.py"", line 680, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2084, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2022, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/empirical_dispersion.py"", line 195, in compute_energy; verbose=1); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/qcdb/intf_dftd3/runner.py"", line 136, in run_dftd3_from_arrays; jobrec['qcvars']['CURRENT ENERGY'] = copy.deepcopy(jobrec['qcvars']['DISPERSION CORRECTION ENERGY']). KeyError: 'qcvars'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; dft = 85.00 sec*proc (1 test); psi = 85.00 sec*proc (1 test); scf = 85.00 sec*proc (1 test). Total Test time (real) = 85.06 sec. The following tests FAILED:; 	158 - dft-grad-lr3 (Failed); Errors while running CTest; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1418
https://github.com/psi4/psi4/issues/1418:1924,Availability,Error,Errors,1924,"`dft-grad-lr3` test fails with the current master (64aa80aa96983bec51d40732d18f3def5eb9e844):; ```; $ ctest -R dft-grad-lr3 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 158: dft-grad-lr3; 1/1 Test #158: dft-grad-lr3 .....................***Failed 85.00 sec; 	Analytic vs Reference wB97X-D Gradients...........................PASSED; Traceback (most recent call last):; File ""/home/raimis/psi4.git/linux_build/stage/bin/psi4"", line 290, in <module>; exec(content); File ""<string>"", line 74, in <module>; File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/driver.py"", line 680, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2084, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2022, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/empirical_dispersion.py"", line 195, in compute_energy; verbose=1); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/qcdb/intf_dftd3/runner.py"", line 136, in run_dftd3_from_arrays; jobrec['qcvars']['CURRENT ENERGY'] = copy.deepcopy(jobrec['qcvars']['DISPERSION CORRECTION ENERGY']). KeyError: 'qcvars'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; dft = 85.00 sec*proc (1 test); psi = 85.00 sec*proc (1 test); scf = 85.00 sec*proc (1 test). Total Test time (real) = 85.06 sec. The following tests FAILED:; 	158 - dft-grad-lr3 (Failed); Errors while running CTest; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1418
https://github.com/psi4/psi4/issues/1418:1498,Energy Efficiency,ENERGY,ENERGY,1498,"`dft-grad-lr3` test fails with the current master (64aa80aa96983bec51d40732d18f3def5eb9e844):; ```; $ ctest -R dft-grad-lr3 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 158: dft-grad-lr3; 1/1 Test #158: dft-grad-lr3 .....................***Failed 85.00 sec; 	Analytic vs Reference wB97X-D Gradients...........................PASSED; Traceback (most recent call last):; File ""/home/raimis/psi4.git/linux_build/stage/bin/psi4"", line 290, in <module>; exec(content); File ""<string>"", line 74, in <module>; File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/driver.py"", line 680, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2084, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2022, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/empirical_dispersion.py"", line 195, in compute_energy; verbose=1); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/qcdb/intf_dftd3/runner.py"", line 136, in run_dftd3_from_arrays; jobrec['qcvars']['CURRENT ENERGY'] = copy.deepcopy(jobrec['qcvars']['DISPERSION CORRECTION ENERGY']). KeyError: 'qcvars'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; dft = 85.00 sec*proc (1 test); psi = 85.00 sec*proc (1 test); scf = 85.00 sec*proc (1 test). Total Test time (real) = 85.06 sec. The following tests FAILED:; 	158 - dft-grad-lr3 (Failed); Errors while running CTest; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1418
https://github.com/psi4/psi4/issues/1418:1563,Energy Efficiency,ENERGY,ENERGY,1563,"`dft-grad-lr3` test fails with the current master (64aa80aa96983bec51d40732d18f3def5eb9e844):; ```; $ ctest -R dft-grad-lr3 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 158: dft-grad-lr3; 1/1 Test #158: dft-grad-lr3 .....................***Failed 85.00 sec; 	Analytic vs Reference wB97X-D Gradients...........................PASSED; Traceback (most recent call last):; File ""/home/raimis/psi4.git/linux_build/stage/bin/psi4"", line 290, in <module>; exec(content); File ""<string>"", line 74, in <module>; File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/driver.py"", line 680, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2084, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2022, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/empirical_dispersion.py"", line 195, in compute_energy; verbose=1); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/qcdb/intf_dftd3/runner.py"", line 136, in run_dftd3_from_arrays; jobrec['qcvars']['CURRENT ENERGY'] = copy.deepcopy(jobrec['qcvars']['DISPERSION CORRECTION ENERGY']). KeyError: 'qcvars'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; dft = 85.00 sec*proc (1 test); psi = 85.00 sec*proc (1 test); scf = 85.00 sec*proc (1 test). Total Test time (real) = 85.06 sec. The following tests FAILED:; 	158 - dft-grad-lr3 (Failed); Errors while running CTest; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1418
https://github.com/psi4/psi4/issues/1418:15,Testability,test,test,15,"`dft-grad-lr3` test fails with the current master (64aa80aa96983bec51d40732d18f3def5eb9e844):; ```; $ ctest -R dft-grad-lr3 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 158: dft-grad-lr3; 1/1 Test #158: dft-grad-lr3 .....................***Failed 85.00 sec; 	Analytic vs Reference wB97X-D Gradients...........................PASSED; Traceback (most recent call last):; File ""/home/raimis/psi4.git/linux_build/stage/bin/psi4"", line 290, in <module>; exec(content); File ""<string>"", line 74, in <module>; File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/driver.py"", line 680, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2084, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2022, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/empirical_dispersion.py"", line 195, in compute_energy; verbose=1); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/qcdb/intf_dftd3/runner.py"", line 136, in run_dftd3_from_arrays; jobrec['qcvars']['CURRENT ENERGY'] = copy.deepcopy(jobrec['qcvars']['DISPERSION CORRECTION ENERGY']). KeyError: 'qcvars'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; dft = 85.00 sec*proc (1 test); psi = 85.00 sec*proc (1 test); scf = 85.00 sec*proc (1 test). Total Test time (real) = 85.06 sec. The following tests FAILED:; 	158 - dft-grad-lr3 (Failed); Errors while running CTest; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1418
https://github.com/psi4/psi4/issues/1418:145,Testability,Test,Test,145,"`dft-grad-lr3` test fails with the current master (64aa80aa96983bec51d40732d18f3def5eb9e844):; ```; $ ctest -R dft-grad-lr3 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 158: dft-grad-lr3; 1/1 Test #158: dft-grad-lr3 .....................***Failed 85.00 sec; 	Analytic vs Reference wB97X-D Gradients...........................PASSED; Traceback (most recent call last):; File ""/home/raimis/psi4.git/linux_build/stage/bin/psi4"", line 290, in <module>; exec(content); File ""<string>"", line 74, in <module>; File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/driver.py"", line 680, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2084, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2022, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/empirical_dispersion.py"", line 195, in compute_energy; verbose=1); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/qcdb/intf_dftd3/runner.py"", line 136, in run_dftd3_from_arrays; jobrec['qcvars']['CURRENT ENERGY'] = copy.deepcopy(jobrec['qcvars']['DISPERSION CORRECTION ENERGY']). KeyError: 'qcvars'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; dft = 85.00 sec*proc (1 test); psi = 85.00 sec*proc (1 test); scf = 85.00 sec*proc (1 test). Total Test time (real) = 85.06 sec. The following tests FAILED:; 	158 - dft-grad-lr3 (Failed); Errors while running CTest; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1418
https://github.com/psi4/psi4/issues/1418:222,Testability,Test,Test,222,"`dft-grad-lr3` test fails with the current master (64aa80aa96983bec51d40732d18f3def5eb9e844):; ```; $ ctest -R dft-grad-lr3 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 158: dft-grad-lr3; 1/1 Test #158: dft-grad-lr3 .....................***Failed 85.00 sec; 	Analytic vs Reference wB97X-D Gradients...........................PASSED; Traceback (most recent call last):; File ""/home/raimis/psi4.git/linux_build/stage/bin/psi4"", line 290, in <module>; exec(content); File ""<string>"", line 74, in <module>; File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/driver.py"", line 680, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2084, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2022, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/empirical_dispersion.py"", line 195, in compute_energy; verbose=1); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/qcdb/intf_dftd3/runner.py"", line 136, in run_dftd3_from_arrays; jobrec['qcvars']['CURRENT ENERGY'] = copy.deepcopy(jobrec['qcvars']['DISPERSION CORRECTION ENERGY']). KeyError: 'qcvars'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; dft = 85.00 sec*proc (1 test); psi = 85.00 sec*proc (1 test); scf = 85.00 sec*proc (1 test). Total Test time (real) = 85.06 sec. The following tests FAILED:; 	158 - dft-grad-lr3 (Failed); Errors while running CTest; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1418
https://github.com/psi4/psi4/issues/1418:1676,Testability,test,tests,1676,"`dft-grad-lr3` test fails with the current master (64aa80aa96983bec51d40732d18f3def5eb9e844):; ```; $ ctest -R dft-grad-lr3 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 158: dft-grad-lr3; 1/1 Test #158: dft-grad-lr3 .....................***Failed 85.00 sec; 	Analytic vs Reference wB97X-D Gradients...........................PASSED; Traceback (most recent call last):; File ""/home/raimis/psi4.git/linux_build/stage/bin/psi4"", line 290, in <module>; exec(content); File ""<string>"", line 74, in <module>; File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/driver.py"", line 680, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2084, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2022, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/empirical_dispersion.py"", line 195, in compute_energy; verbose=1); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/qcdb/intf_dftd3/runner.py"", line 136, in run_dftd3_from_arrays; jobrec['qcvars']['CURRENT ENERGY'] = copy.deepcopy(jobrec['qcvars']['DISPERSION CORRECTION ENERGY']). KeyError: 'qcvars'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; dft = 85.00 sec*proc (1 test); psi = 85.00 sec*proc (1 test); scf = 85.00 sec*proc (1 test). Total Test time (real) = 85.06 sec. The following tests FAILED:; 	158 - dft-grad-lr3 (Failed); Errors while running CTest; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1418
https://github.com/psi4/psi4/issues/1418:1692,Testability,test,tests,1692,"`dft-grad-lr3` test fails with the current master (64aa80aa96983bec51d40732d18f3def5eb9e844):; ```; $ ctest -R dft-grad-lr3 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 158: dft-grad-lr3; 1/1 Test #158: dft-grad-lr3 .....................***Failed 85.00 sec; 	Analytic vs Reference wB97X-D Gradients...........................PASSED; Traceback (most recent call last):; File ""/home/raimis/psi4.git/linux_build/stage/bin/psi4"", line 290, in <module>; exec(content); File ""<string>"", line 74, in <module>; File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/driver.py"", line 680, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2084, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2022, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/empirical_dispersion.py"", line 195, in compute_energy; verbose=1); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/qcdb/intf_dftd3/runner.py"", line 136, in run_dftd3_from_arrays; jobrec['qcvars']['CURRENT ENERGY'] = copy.deepcopy(jobrec['qcvars']['DISPERSION CORRECTION ENERGY']). KeyError: 'qcvars'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; dft = 85.00 sec*proc (1 test); psi = 85.00 sec*proc (1 test); scf = 85.00 sec*proc (1 test). Total Test time (real) = 85.06 sec. The following tests FAILED:; 	158 - dft-grad-lr3 (Failed); Errors while running CTest; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1418
https://github.com/psi4/psi4/issues/1418:1760,Testability,test,test,1760,"`dft-grad-lr3` test fails with the current master (64aa80aa96983bec51d40732d18f3def5eb9e844):; ```; $ ctest -R dft-grad-lr3 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 158: dft-grad-lr3; 1/1 Test #158: dft-grad-lr3 .....................***Failed 85.00 sec; 	Analytic vs Reference wB97X-D Gradients...........................PASSED; Traceback (most recent call last):; File ""/home/raimis/psi4.git/linux_build/stage/bin/psi4"", line 290, in <module>; exec(content); File ""<string>"", line 74, in <module>; File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/driver.py"", line 680, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2084, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2022, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/empirical_dispersion.py"", line 195, in compute_energy; verbose=1); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/qcdb/intf_dftd3/runner.py"", line 136, in run_dftd3_from_arrays; jobrec['qcvars']['CURRENT ENERGY'] = copy.deepcopy(jobrec['qcvars']['DISPERSION CORRECTION ENERGY']). KeyError: 'qcvars'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; dft = 85.00 sec*proc (1 test); psi = 85.00 sec*proc (1 test); scf = 85.00 sec*proc (1 test). Total Test time (real) = 85.06 sec. The following tests FAILED:; 	158 - dft-grad-lr3 (Failed); Errors while running CTest; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1418
https://github.com/psi4/psi4/issues/1418:1791,Testability,test,test,1791,"`dft-grad-lr3` test fails with the current master (64aa80aa96983bec51d40732d18f3def5eb9e844):; ```; $ ctest -R dft-grad-lr3 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 158: dft-grad-lr3; 1/1 Test #158: dft-grad-lr3 .....................***Failed 85.00 sec; 	Analytic vs Reference wB97X-D Gradients...........................PASSED; Traceback (most recent call last):; File ""/home/raimis/psi4.git/linux_build/stage/bin/psi4"", line 290, in <module>; exec(content); File ""<string>"", line 74, in <module>; File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/driver.py"", line 680, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2084, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2022, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/empirical_dispersion.py"", line 195, in compute_energy; verbose=1); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/qcdb/intf_dftd3/runner.py"", line 136, in run_dftd3_from_arrays; jobrec['qcvars']['CURRENT ENERGY'] = copy.deepcopy(jobrec['qcvars']['DISPERSION CORRECTION ENERGY']). KeyError: 'qcvars'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; dft = 85.00 sec*proc (1 test); psi = 85.00 sec*proc (1 test); scf = 85.00 sec*proc (1 test). Total Test time (real) = 85.06 sec. The following tests FAILED:; 	158 - dft-grad-lr3 (Failed); Errors while running CTest; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1418
https://github.com/psi4/psi4/issues/1418:1822,Testability,test,test,1822,"`dft-grad-lr3` test fails with the current master (64aa80aa96983bec51d40732d18f3def5eb9e844):; ```; $ ctest -R dft-grad-lr3 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 158: dft-grad-lr3; 1/1 Test #158: dft-grad-lr3 .....................***Failed 85.00 sec; 	Analytic vs Reference wB97X-D Gradients...........................PASSED; Traceback (most recent call last):; File ""/home/raimis/psi4.git/linux_build/stage/bin/psi4"", line 290, in <module>; exec(content); File ""<string>"", line 74, in <module>; File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/driver.py"", line 680, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2084, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2022, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/empirical_dispersion.py"", line 195, in compute_energy; verbose=1); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/qcdb/intf_dftd3/runner.py"", line 136, in run_dftd3_from_arrays; jobrec['qcvars']['CURRENT ENERGY'] = copy.deepcopy(jobrec['qcvars']['DISPERSION CORRECTION ENERGY']). KeyError: 'qcvars'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; dft = 85.00 sec*proc (1 test); psi = 85.00 sec*proc (1 test); scf = 85.00 sec*proc (1 test). Total Test time (real) = 85.06 sec. The following tests FAILED:; 	158 - dft-grad-lr3 (Failed); Errors while running CTest; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1418
https://github.com/psi4/psi4/issues/1418:1835,Testability,Test,Test,1835,"`dft-grad-lr3` test fails with the current master (64aa80aa96983bec51d40732d18f3def5eb9e844):; ```; $ ctest -R dft-grad-lr3 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 158: dft-grad-lr3; 1/1 Test #158: dft-grad-lr3 .....................***Failed 85.00 sec; 	Analytic vs Reference wB97X-D Gradients...........................PASSED; Traceback (most recent call last):; File ""/home/raimis/psi4.git/linux_build/stage/bin/psi4"", line 290, in <module>; exec(content); File ""<string>"", line 74, in <module>; File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/driver.py"", line 680, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2084, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2022, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/empirical_dispersion.py"", line 195, in compute_energy; verbose=1); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/qcdb/intf_dftd3/runner.py"", line 136, in run_dftd3_from_arrays; jobrec['qcvars']['CURRENT ENERGY'] = copy.deepcopy(jobrec['qcvars']['DISPERSION CORRECTION ENERGY']). KeyError: 'qcvars'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; dft = 85.00 sec*proc (1 test); psi = 85.00 sec*proc (1 test); scf = 85.00 sec*proc (1 test). Total Test time (real) = 85.06 sec. The following tests FAILED:; 	158 - dft-grad-lr3 (Failed); Errors while running CTest; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1418
https://github.com/psi4/psi4/issues/1418:1879,Testability,test,tests,1879,"`dft-grad-lr3` test fails with the current master (64aa80aa96983bec51d40732d18f3def5eb9e844):; ```; $ ctest -R dft-grad-lr3 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 158: dft-grad-lr3; 1/1 Test #158: dft-grad-lr3 .....................***Failed 85.00 sec; 	Analytic vs Reference wB97X-D Gradients...........................PASSED; Traceback (most recent call last):; File ""/home/raimis/psi4.git/linux_build/stage/bin/psi4"", line 290, in <module>; exec(content); File ""<string>"", line 74, in <module>; File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/driver.py"", line 680, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2084, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2022, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/empirical_dispersion.py"", line 195, in compute_energy; verbose=1); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/qcdb/intf_dftd3/runner.py"", line 136, in run_dftd3_from_arrays; jobrec['qcvars']['CURRENT ENERGY'] = copy.deepcopy(jobrec['qcvars']['DISPERSION CORRECTION ENERGY']). KeyError: 'qcvars'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; dft = 85.00 sec*proc (1 test); psi = 85.00 sec*proc (1 test); scf = 85.00 sec*proc (1 test). Total Test time (real) = 85.06 sec. The following tests FAILED:; 	158 - dft-grad-lr3 (Failed); Errors while running CTest; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1418
https://github.com/psi4/psi4/pull/1419:5897,Availability,error,error,5897,"\liboptions\options.lib src\psi4\libplugin\plugin.lib src\psi4\libpsi4util\psi4util.lib src\psi4\libpsio\psio.lib src\psi4\libqt\qt.lib src\psi4\libsapt_solver\sapt_solver.lib src\psi4\libscf_solver\scf_solver.lib src\psi4\libtrans\trans.lib Ws2_32.lib C:\tools\miniconda3\libs\Python36.lib D:\a\1\b\build\stage\lib\gg.lib D:\a\1\b\build\stage\lib\xc.lib D:\a\1\b\build\stage\lib\deriv.lib D:\a\1\b\build\stage\lib\int.lib C:\tools\miniconda3\Library\lib\mkl_rt.lib C:\tools\miniconda3\Library\lib\libiomp5md.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:src\core.cp36-win_amd64.pyd.manifest"" failed (exit code 1120) with the following output:; Creating library src\core.lib and object src\core.exp; cc.lib(lmp2.cc.obj) : error LNK2019: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ) referenced in function ""public: virtual void * __cdecl psi::MaxIterationsExceeded<int>::`scalar deleting destructor'(unsigned int)"" (??_G?$MaxIterationsExceeded@H@psi@@UEAAPEAXI@Z); dcft.lib(dcft_compute_RHF.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); dcft.lib(dcft_compute_UHF.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); dcft.lib(dcft_qc.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); src\core.cp36-win_amd64.pyd : fatal error LNK1120: 1 unresolved externals; ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1419
https://github.com/psi4/psi4/pull/1419:6294,Availability,error,error,6294,"tage\lib\gg.lib D:\a\1\b\build\stage\lib\xc.lib D:\a\1\b\build\stage\lib\deriv.lib D:\a\1\b\build\stage\lib\int.lib C:\tools\miniconda3\Library\lib\mkl_rt.lib C:\tools\miniconda3\Library\lib\libiomp5md.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:src\core.cp36-win_amd64.pyd.manifest"" failed (exit code 1120) with the following output:; Creating library src\core.lib and object src\core.exp; cc.lib(lmp2.cc.obj) : error LNK2019: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ) referenced in function ""public: virtual void * __cdecl psi::MaxIterationsExceeded<int>::`scalar deleting destructor'(unsigned int)"" (??_G?$MaxIterationsExceeded@H@psi@@UEAAPEAXI@Z); dcft.lib(dcft_compute_RHF.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); dcft.lib(dcft_compute_UHF.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); dcft.lib(dcft_qc.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); src\core.cp36-win_amd64.pyd : fatal error LNK1120: 1 unresolved externals; ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `psi::MaxIterationsExceeded` implementation; - [x] Fix `psi::ConvergenceError` implementation; - [x] Clean up includes. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1419
https://github.com/psi4/psi4/pull/1419:6510,Availability,error,error,6510,"age\lib\deriv.lib D:\a\1\b\build\stage\lib\int.lib C:\tools\miniconda3\Library\lib\mkl_rt.lib C:\tools\miniconda3\Library\lib\libiomp5md.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:src\core.cp36-win_amd64.pyd.manifest"" failed (exit code 1120) with the following output:; Creating library src\core.lib and object src\core.exp; cc.lib(lmp2.cc.obj) : error LNK2019: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ) referenced in function ""public: virtual void * __cdecl psi::MaxIterationsExceeded<int>::`scalar deleting destructor'(unsigned int)"" (??_G?$MaxIterationsExceeded@H@psi@@UEAAPEAXI@Z); dcft.lib(dcft_compute_RHF.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); dcft.lib(dcft_compute_UHF.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); dcft.lib(dcft_qc.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); src\core.cp36-win_amd64.pyd : fatal error LNK1120: 1 unresolved externals; ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `psi::MaxIterationsExceeded` implementation; - [x] Fix `psi::ConvergenceError` implementation; - [x] Clean up includes. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1419
https://github.com/psi4/psi4/pull/1419:6717,Availability,error,error,6717,"age\lib\deriv.lib D:\a\1\b\build\stage\lib\int.lib C:\tools\miniconda3\Library\lib\mkl_rt.lib C:\tools\miniconda3\Library\lib\libiomp5md.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:src\core.cp36-win_amd64.pyd.manifest"" failed (exit code 1120) with the following output:; Creating library src\core.lib and object src\core.exp; cc.lib(lmp2.cc.obj) : error LNK2019: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ) referenced in function ""public: virtual void * __cdecl psi::MaxIterationsExceeded<int>::`scalar deleting destructor'(unsigned int)"" (??_G?$MaxIterationsExceeded@H@psi@@UEAAPEAXI@Z); dcft.lib(dcft_compute_RHF.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); dcft.lib(dcft_compute_UHF.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); dcft.lib(dcft_qc.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); src\core.cp36-win_amd64.pyd : fatal error LNK1120: 1 unresolved externals; ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `psi::MaxIterationsExceeded` implementation; - [x] Fix `psi::ConvergenceError` implementation; - [x] Clean up includes. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1419
https://github.com/psi4/psi4/pull/1419:6933,Availability,error,error,6933,"age\lib\deriv.lib D:\a\1\b\build\stage\lib\int.lib C:\tools\miniconda3\Library\lib\mkl_rt.lib C:\tools\miniconda3\Library\lib\libiomp5md.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:src\core.cp36-win_amd64.pyd.manifest"" failed (exit code 1120) with the following output:; Creating library src\core.lib and object src\core.exp; cc.lib(lmp2.cc.obj) : error LNK2019: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ) referenced in function ""public: virtual void * __cdecl psi::MaxIterationsExceeded<int>::`scalar deleting destructor'(unsigned int)"" (??_G?$MaxIterationsExceeded@H@psi@@UEAAPEAXI@Z); dcft.lib(dcft_compute_RHF.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); dcft.lib(dcft_compute_UHF.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); dcft.lib(dcft_qc.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); src\core.cp36-win_amd64.pyd : fatal error LNK1120: 1 unresolved externals; ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `psi::MaxIterationsExceeded` implementation; - [x] Fix `psi::ConvergenceError` implementation; - [x] Clean up includes. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1419
https://github.com/psi4/psi4/pull/1419:2572,Modifiability,plugin,plugin,2572,"core.cp36-win_amd64.pyd /implib:src\core.lib /pdb:src\core.pdb /dll /version:0.0 /machine:x64 /INCREMENTAL:NO src\psi4\adc\adc.lib src\psi4\cc\cc.lib src\psi4\cctransort\cctransort.lib src\psi4\dcft\dcft.lib src\psi4\detci\detci.lib src\psi4\dfep2\dfep2.lib src\psi4\dfmp2\dfmp2.lib src\psi4\dfocc\dfocc.lib src\psi4\dmrg\dmrg.lib src\psi4\fisapt\fisapt.lib src\psi4\fnocc\fnocc.lib src\psi4\gdma_interface\gdma_interface.lib src\psi4\mcscf\mcscf.lib src\psi4\mrcc\mrcc.lib src\psi4\occ\occ.lib src\psi4\optking\optking.lib src\psi4\psimrcc\psimrcc.lib src\psi4\sapt\sapt.lib src\psi4\scfgrad\scfgrad.lib src\psi4\lib3index\3index.lib src\psi4\libciomr\ciomr.lib src\psi4\libcubeprop\cubeprop.lib src\psi4\libdiis\diis.lib src\psi4\libdisp\disp.lib src\psi4\libdpd\dpd.lib src\psi4\libfilesystem\filesystem.lib src\psi4\libfock\fock.lib src\psi4\libfunctional\functional.lib src\psi4\libiwl\iwl.lib src\psi4\libmints\mints.lib src\psi4\libmoinfo\moinfo.lib src\psi4\liboptions\options.lib src\psi4\libplugin\plugin.lib src\psi4\libpsi4util\psi4util.lib src\psi4\libpsio\psio.lib src\psi4\libqt\qt.lib src\psi4\libsapt_solver\sapt_solver.lib src\psi4\libscf_solver\scf_solver.lib src\psi4\libtrans\trans.lib Ws2_32.lib C:\tools\miniconda3\libs\Python36.lib D:\a\1\b\build\stage\lib\gg.lib D:\a\1\b\build\stage\lib\xc.lib D:\a\1\b\build\stage\lib\deriv.lib D:\a\1\b\build\stage\lib\int.lib C:\tools\miniconda3\Library\lib\mkl_rt.lib C:\tools\miniconda3\Library\lib\libiomp5md.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib && cd .""; LINK: command ""C:\PROGRA~2\MI0E91~1.0\VC\bin\X86_AM~1\link.exe /nologo src\CMakeFiles\core.dir\export_benchmarks.cc.obj src\CMakeFiles\core.dir\export_blas_lapack.cc.obj src\CMakeFiles\core.dir\export_cubeprop.cc.obj src\CMakeFiles\core.dir\export_diis.cc.obj src\CMakeFiles\core.dir\export_fock.cc.obj src\CMakeFiles\core.dir\export_functional.cc.obj src\CMakeFiles\core.dir\export_mints.cc.obj",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1419
https://github.com/psi4/psi4/pull/1419:5119,Modifiability,plugin,plugin,5119,"core.cp36-win_amd64.pyd /implib:src\core.lib /pdb:src\core.pdb /dll /version:0.0 /machine:x64 /INCREMENTAL:NO src\psi4\adc\adc.lib src\psi4\cc\cc.lib src\psi4\cctransort\cctransort.lib src\psi4\dcft\dcft.lib src\psi4\detci\detci.lib src\psi4\dfep2\dfep2.lib src\psi4\dfmp2\dfmp2.lib src\psi4\dfocc\dfocc.lib src\psi4\dmrg\dmrg.lib src\psi4\fisapt\fisapt.lib src\psi4\fnocc\fnocc.lib src\psi4\gdma_interface\gdma_interface.lib src\psi4\mcscf\mcscf.lib src\psi4\mrcc\mrcc.lib src\psi4\occ\occ.lib src\psi4\optking\optking.lib src\psi4\psimrcc\psimrcc.lib src\psi4\sapt\sapt.lib src\psi4\scfgrad\scfgrad.lib src\psi4\lib3index\3index.lib src\psi4\libciomr\ciomr.lib src\psi4\libcubeprop\cubeprop.lib src\psi4\libdiis\diis.lib src\psi4\libdisp\disp.lib src\psi4\libdpd\dpd.lib src\psi4\libfilesystem\filesystem.lib src\psi4\libfock\fock.lib src\psi4\libfunctional\functional.lib src\psi4\libiwl\iwl.lib src\psi4\libmints\mints.lib src\psi4\libmoinfo\moinfo.lib src\psi4\liboptions\options.lib src\psi4\libplugin\plugin.lib src\psi4\libpsi4util\psi4util.lib src\psi4\libpsio\psio.lib src\psi4\libqt\qt.lib src\psi4\libsapt_solver\sapt_solver.lib src\psi4\libscf_solver\scf_solver.lib src\psi4\libtrans\trans.lib Ws2_32.lib C:\tools\miniconda3\libs\Python36.lib D:\a\1\b\build\stage\lib\gg.lib D:\a\1\b\build\stage\lib\xc.lib D:\a\1\b\build\stage\lib\deriv.lib D:\a\1\b\build\stage\lib\int.lib C:\tools\miniconda3\Library\lib\mkl_rt.lib C:\tools\miniconda3\Library\lib\libiomp5md.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:src\core.cp36-win_amd64.pyd.manifest"" failed (exit code 1120) with the following output:; Creating library src\core.lib and object src\core.exp; cc.lib(lmp2.cc.obj) : error LNK2019: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ) referenced in function ""public: vir",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1419
https://github.com/psi4/psi4/pull/1419:369,Performance,optimiz,optimized,369,"## Description; This is part of *Psi4* porting to Windows (#933). A templated class declaration and implementation has to be in the same translation unit. That is not a case for `psi::MaxIterationsExceeded` and `psi::ConvergenceError`. It is hacked by using template specialisation: `template <> ConvergenceError<int>`. However, it does not work with `MSVC` linker for optimized builds:; ```; [1262/1262] Linking CXX shared library src\core.cp36-win_amd64.pyd; FAILED: src/core.cp36-win_amd64.pyd src/core.lib ; cmd.exe /C ""cd . && C:\tools\miniconda3\Library\bin\cmake.exe -E vs_link_dll --intdir=src\CMakeFiles\core.dir --manifests -- C:\PROGRA~2\MI0E91~1.0\VC\bin\X86_AM~1\link.exe /nologo src\CMakeFiles\core.dir\export_benchmarks.cc.obj src\CMakeFiles\core.dir\export_blas_lapack.cc.obj src\CMakeFiles\core.dir\export_cubeprop.cc.obj src\CMakeFiles\core.dir\export_diis.cc.obj src\CMakeFiles\core.dir\export_fock.cc.obj src\CMakeFiles\core.dir\export_functional.cc.obj src\CMakeFiles\core.dir\export_mints.cc.obj src\CMakeFiles\core.dir\export_misc.cc.obj src\CMakeFiles\core.dir\export_oeprop.cc.obj src\CMakeFiles\core.dir\export_pcm.cc.obj src\CMakeFiles\core.dir\export_plugins.cc.obj src\CMakeFiles\core.dir\export_psio.cc.obj src\CMakeFiles\core.dir\export_trans.cc.obj src\CMakeFiles\core.dir\export_wavefunction.cc.obj src\CMakeFiles\core.dir\export_options.cc.obj src\CMakeFiles\core.dir\create_new_plugin.cc.obj src\CMakeFiles\core.dir\read_options.cc.obj src\CMakeFiles\core.dir\python_data_type.cc.obj src\CMakeFiles\core.dir\core.cc.obj /out:src\core.cp36-win_amd64.pyd /implib:src\core.lib /pdb:src\core.pdb /dll /version:0.0 /machine:x64 /INCREMENTAL:NO src\psi4\adc\adc.lib src\psi4\cc\cc.lib src\psi4\cctransort\cctransort.lib src\psi4\dcft\dcft.lib src\psi4\detci\detci.lib src\psi4\dfep2\dfep2.lib src\psi4\dfmp2\dfmp2.lib src\psi4\dfocc\dfocc.lib src\psi4\dmrg\dmrg.lib src\psi4\fisapt\fisapt.lib src\psi4\fnocc\fnocc.lib src\psi4\gdma_interface\gdma_interface.lib src\psi4\mc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1419
https://github.com/psi4/psi4/pull/1419:7219,Testability,Test,Tests,7219,"age\lib\deriv.lib D:\a\1\b\build\stage\lib\int.lib C:\tools\miniconda3\Library\lib\mkl_rt.lib C:\tools\miniconda3\Library\lib\libiomp5md.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:src\core.cp36-win_amd64.pyd.manifest"" failed (exit code 1120) with the following output:; Creating library src\core.lib and object src\core.exp; cc.lib(lmp2.cc.obj) : error LNK2019: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ) referenced in function ""public: virtual void * __cdecl psi::MaxIterationsExceeded<int>::`scalar deleting destructor'(unsigned int)"" (??_G?$MaxIterationsExceeded@H@psi@@UEAAPEAXI@Z); dcft.lib(dcft_compute_RHF.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); dcft.lib(dcft_compute_UHF.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); dcft.lib(dcft_qc.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); src\core.cp36-win_amd64.pyd : fatal error LNK1120: 1 unresolved externals; ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `psi::MaxIterationsExceeded` implementation; - [x] Fix `psi::ConvergenceError` implementation; - [x] Clean up includes. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1419
https://github.com/psi4/psi4/pull/1419:7293,Testability,test,tests,7293,"age\lib\deriv.lib D:\a\1\b\build\stage\lib\int.lib C:\tools\miniconda3\Library\lib\mkl_rt.lib C:\tools\miniconda3\Library\lib\libiomp5md.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:src\core.cp36-win_amd64.pyd.manifest"" failed (exit code 1120) with the following output:; Creating library src\core.lib and object src\core.exp; cc.lib(lmp2.cc.obj) : error LNK2019: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ) referenced in function ""public: virtual void * __cdecl psi::MaxIterationsExceeded<int>::`scalar deleting destructor'(unsigned int)"" (??_G?$MaxIterationsExceeded@H@psi@@UEAAPEAXI@Z); dcft.lib(dcft_compute_RHF.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); dcft.lib(dcft_compute_UHF.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); dcft.lib(dcft_qc.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); src\core.cp36-win_amd64.pyd : fatal error LNK1120: 1 unresolved externals; ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `psi::MaxIterationsExceeded` implementation; - [x] Fix `psi::ConvergenceError` implementation; - [x] Clean up includes. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1419
https://github.com/psi4/psi4/pull/1419:7384,Testability,test,tests,7384,"age\lib\deriv.lib D:\a\1\b\build\stage\lib\int.lib C:\tools\miniconda3\Library\lib\mkl_rt.lib C:\tools\miniconda3\Library\lib\libiomp5md.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:src\core.cp36-win_amd64.pyd.manifest"" failed (exit code 1120) with the following output:; Creating library src\core.lib and object src\core.exp; cc.lib(lmp2.cc.obj) : error LNK2019: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ) referenced in function ""public: virtual void * __cdecl psi::MaxIterationsExceeded<int>::`scalar deleting destructor'(unsigned int)"" (??_G?$MaxIterationsExceeded@H@psi@@UEAAPEAXI@Z); dcft.lib(dcft_compute_RHF.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); dcft.lib(dcft_compute_UHF.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); dcft.lib(dcft_qc.cc.obj) : error LNK2001: unresolved external symbol ""public: virtual __cdecl psi::MaxIterationsExceeded<int>::~MaxIterationsExceeded<int>(void)"" (??1?$MaxIterationsExceeded@H@psi@@UEAA@XZ); src\core.cp36-win_amd64.pyd : fatal error LNK1120: 1 unresolved externals; ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix `psi::MaxIterationsExceeded` implementation; - [x] Fix `psi::ConvergenceError` implementation; - [x] Clean up includes. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1419
https://github.com/psi4/psi4/pull/1420:214,Deployability,install,install,214,## Description; This is part of *Psi4* porting to Windows (#933). Implement `psi4` command on Windows. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Generate and install `psi4.bat`; - [x] Test `psi4` command. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1420
https://github.com/psi4/psi4/pull/1420:240,Testability,Test,Test,240,## Description; This is part of *Psi4* porting to Windows (#933). Implement `psi4` command on Windows. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Generate and install `psi4.bat`; - [x] Test `psi4` command. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1420
https://github.com/psi4/psi4/pull/1420:281,Testability,Test,Tests,281,## Description; This is part of *Psi4* porting to Windows (#933). Implement `psi4` command on Windows. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Generate and install `psi4.bat`; - [x] Test `psi4` command. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1420
https://github.com/psi4/psi4/pull/1420:355,Testability,test,tests,355,## Description; This is part of *Psi4* porting to Windows (#933). Implement `psi4` command on Windows. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Generate and install `psi4.bat`; - [x] Test `psi4` command. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1420
https://github.com/psi4/psi4/pull/1420:446,Testability,test,tests,446,## Description; This is part of *Psi4* porting to Windows (#933). Implement `psi4` command on Windows. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Generate and install `psi4.bat`; - [x] Test `psi4` command. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1420
https://github.com/psi4/psi4/pull/1421:16,Deployability,Update,Updates,16,"## Description; Updates the SCF one-electron properties computation to allow users to specify which properties should be computed. This applies to all computations besides property computations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Allows arbitrary one-electron properties to be computed upon SCF energy calls.; - [x] Moves QCSchema to a more flexible metadata approach, this section of code will certainly evolve over time.; - [x] Removes Psi4 v1.1 JSON specification for 1.3 as per the deprecation warning. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1421
https://github.com/psi4/psi4/pull/1421:358,Energy Efficiency,energy,energy,358,"## Description; Updates the SCF one-electron properties computation to allow users to specify which properties should be computed. This applies to all computations besides property computations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Allows arbitrary one-electron properties to be computed upon SCF energy calls.; - [x] Moves QCSchema to a more flexible metadata approach, this section of code will certainly evolve over time.; - [x] Removes Psi4 v1.1 JSON specification for 1.3 as per the deprecation warning. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1421
https://github.com/psi4/psi4/pull/1421:404,Modifiability,flexible,flexible,404,"## Description; Updates the SCF one-electron properties computation to allow users to specify which properties should be computed. This applies to all computations besides property computations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Allows arbitrary one-electron properties to be computed upon SCF energy calls.; - [x] Moves QCSchema to a more flexible metadata approach, this section of code will certainly evolve over time.; - [x] Removes Psi4 v1.1 JSON specification for 1.3 as per the deprecation warning. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1421
https://github.com/psi4/psi4/pull/1421:468,Modifiability,evolve,evolve,468,"## Description; Updates the SCF one-electron properties computation to allow users to specify which properties should be computed. This applies to all computations besides property computations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Allows arbitrary one-electron properties to be computed upon SCF energy calls.; - [x] Moves QCSchema to a more flexible metadata approach, this section of code will certainly evolve over time.; - [x] Removes Psi4 v1.1 JSON specification for 1.3 as per the deprecation warning. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1421
https://github.com/psi4/psi4/pull/1421:590,Testability,Test,Tests,590,"## Description; Updates the SCF one-electron properties computation to allow users to specify which properties should be computed. This applies to all computations besides property computations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Allows arbitrary one-electron properties to be computed upon SCF energy calls.; - [x] Moves QCSchema to a more flexible metadata approach, this section of code will certainly evolve over time.; - [x] Removes Psi4 v1.1 JSON specification for 1.3 as per the deprecation warning. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1421
https://github.com/psi4/psi4/pull/1421:664,Testability,test,tests,664,"## Description; Updates the SCF one-electron properties computation to allow users to specify which properties should be computed. This applies to all computations besides property computations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Allows arbitrary one-electron properties to be computed upon SCF energy calls.; - [x] Moves QCSchema to a more flexible metadata approach, this section of code will certainly evolve over time.; - [x] Removes Psi4 v1.1 JSON specification for 1.3 as per the deprecation warning. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1421
https://github.com/psi4/psi4/pull/1421:755,Testability,test,tests,755,"## Description; Updates the SCF one-electron properties computation to allow users to specify which properties should be computed. This applies to all computations besides property computations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Allows arbitrary one-electron properties to be computed upon SCF energy calls.; - [x] Moves QCSchema to a more flexible metadata approach, this section of code will certainly evolve over time.; - [x] Removes Psi4 v1.1 JSON specification for 1.3 as per the deprecation warning. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1421
https://github.com/psi4/psi4/pull/1422:218,Security,access,access,218,## Description; This is part of *Psi4* porting to Windows (#933). The problem was reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix invalid memory access in `psi::cceom::get_moinfo`; - [x] Fix `cc46` and `cc47` tests on Windows. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1422
https://github.com/psi4/psi4/pull/1422:282,Testability,test,tests,282,## Description; This is part of *Psi4* porting to Windows (#933). The problem was reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix invalid memory access in `psi::cceom::get_moinfo`; - [x] Fix `cc46` and `cc47` tests on Windows. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1422
https://github.com/psi4/psi4/pull/1422:322,Testability,Test,Tests,322,## Description; This is part of *Psi4* porting to Windows (#933). The problem was reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix invalid memory access in `psi::cceom::get_moinfo`; - [x] Fix `cc46` and `cc47` tests on Windows. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1422
https://github.com/psi4/psi4/pull/1422:398,Testability,test,tests,398,## Description; This is part of *Psi4* porting to Windows (#933). The problem was reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix invalid memory access in `psi::cceom::get_moinfo`; - [x] Fix `cc46` and `cc47` tests on Windows. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1422
https://github.com/psi4/psi4/pull/1422:489,Testability,test,tests,489,## Description; This is part of *Psi4* porting to Windows (#933). The problem was reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix invalid memory access in `psi::cceom::get_moinfo`; - [x] Fix `cc46` and `cc47` tests on Windows. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1422
https://github.com/psi4/psi4/pull/1423:51,Modifiability,config,config,51,## Description; As the title says: calls to `conda config` are not saved in the cache. It works!. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1423
https://github.com/psi4/psi4/pull/1423:80,Performance,cache,cache,80,## Description; As the title says: calls to `conda config` are not saved in the cache. It works!. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1423
https://github.com/psi4/psi4/pull/1424:849,Security,Expose,Exposes,849,"## Description; Fixes #1052 at long, long last: when the user explicitly declares a symmetry, findif is now smart enough to put displacements in the proper subgroup. As part of the fix, control over molecule cloning for finite difference has passed to `_process_displacement`. It seemed easier (and more appropriate) than adding code to make a new clone in each for loop. The clone would be necessary so that each displacement can have its own symmetry. Since I was touching that part of the code anyways, I have reorganized so that the reference is guaranteed to be the first displacement. This has the advantage that if orbital reading is enabled, the following displacements will be able to read from the reference, as intended. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes #1052; - [x] Exposes more C functions to Python; - [x] Move the reference geometry first for ease of orbital reads. ## Checklist; - [x] Tests modified to account for bug fix; - [x] All findif tests passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1424
https://github.com/psi4/psi4/pull/1424:972,Testability,Test,Tests,972,"## Description; Fixes #1052 at long, long last: when the user explicitly declares a symmetry, findif is now smart enough to put displacements in the proper subgroup. As part of the fix, control over molecule cloning for finite difference has passed to `_process_displacement`. It seemed easier (and more appropriate) than adding code to make a new clone in each for loop. The clone would be necessary so that each displacement can have its own symmetry. Since I was touching that part of the code anyways, I have reorganized so that the reference is guaranteed to be the first displacement. This has the advantage that if orbital reading is enabled, the following displacements will be able to read from the reference, as intended. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes #1052; - [x] Exposes more C functions to Python; - [x] Move the reference geometry first for ease of orbital reads. ## Checklist; - [x] Tests modified to account for bug fix; - [x] All findif tests passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1424
https://github.com/psi4/psi4/pull/1424:1028,Testability,test,tests,1028,"## Description; Fixes #1052 at long, long last: when the user explicitly declares a symmetry, findif is now smart enough to put displacements in the proper subgroup. As part of the fix, control over molecule cloning for finite difference has passed to `_process_displacement`. It seemed easier (and more appropriate) than adding code to make a new clone in each for loop. The clone would be necessary so that each displacement can have its own symmetry. Since I was touching that part of the code anyways, I have reorganized so that the reference is guaranteed to be the first displacement. This has the advantage that if orbital reading is enabled, the following displacements will be able to read from the reference, as intended. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes #1052; - [x] Exposes more C functions to Python; - [x] Move the reference geometry first for ease of orbital reads. ## Checklist; - [x] Tests modified to account for bug fix; - [x] All findif tests passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1424
https://github.com/psi4/psi4/issues/1425:59,Availability,down,download,59,I'm compiling the latest master of Psi4. SNS-MP2 automatic download failed with ; ``Cloning into 'snsmp2_external'...; fatal: invalid reference: a035c27; CMake Error at /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/snsmp2/snsmp2_external-prefix/tmp/snsmp2_external-gitclone.cmake:75 (message):; Failed to checkout tag: 'a035c27'; ``; Looking up the SNS-MP2 Git I found the tag of the current release to be dd286d3. I replaced it in ``external/downstream/snsmp2/CMakeLists.txt`` and the compilation proceeded.; Is this actually the correct version for SNS-MP2? Should I submit a PR with this tiny change?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1425
https://github.com/psi4/psi4/issues/1425:160,Availability,Error,Error,160,I'm compiling the latest master of Psi4. SNS-MP2 automatic download failed with ; ``Cloning into 'snsmp2_external'...; fatal: invalid reference: a035c27; CMake Error at /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/snsmp2/snsmp2_external-prefix/tmp/snsmp2_external-gitclone.cmake:75 (message):; Failed to checkout tag: 'a035c27'; ``; Looking up the SNS-MP2 Git I found the tag of the current release to be dd286d3. I replaced it in ``external/downstream/snsmp2/CMakeLists.txt`` and the compilation proceeded.; Is this actually the correct version for SNS-MP2? Should I submit a PR with this tiny change?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1425
https://github.com/psi4/psi4/issues/1425:240,Availability,down,downstream,240,I'm compiling the latest master of Psi4. SNS-MP2 automatic download failed with ; ``Cloning into 'snsmp2_external'...; fatal: invalid reference: a035c27; CMake Error at /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/snsmp2/snsmp2_external-prefix/tmp/snsmp2_external-gitclone.cmake:75 (message):; Failed to checkout tag: 'a035c27'; ``; Looking up the SNS-MP2 Git I found the tag of the current release to be dd286d3. I replaced it in ``external/downstream/snsmp2/CMakeLists.txt`` and the compilation proceeded.; Is this actually the correct version for SNS-MP2? Should I submit a PR with this tiny change?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1425
https://github.com/psi4/psi4/issues/1425:479,Availability,down,downstream,479,I'm compiling the latest master of Psi4. SNS-MP2 automatic download failed with ; ``Cloning into 'snsmp2_external'...; fatal: invalid reference: a035c27; CMake Error at /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/snsmp2/snsmp2_external-prefix/tmp/snsmp2_external-gitclone.cmake:75 (message):; Failed to checkout tag: 'a035c27'; ``; Looking up the SNS-MP2 Git I found the tag of the current release to be dd286d3. I replaced it in ``external/downstream/snsmp2/CMakeLists.txt`` and the compilation proceeded.; Is this actually the correct version for SNS-MP2? Should I submit a PR with this tiny change?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1425
https://github.com/psi4/psi4/issues/1425:428,Deployability,release,release,428,I'm compiling the latest master of Psi4. SNS-MP2 automatic download failed with ; ``Cloning into 'snsmp2_external'...; fatal: invalid reference: a035c27; CMake Error at /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/snsmp2/snsmp2_external-prefix/tmp/snsmp2_external-gitclone.cmake:75 (message):; Failed to checkout tag: 'a035c27'; ``; Looking up the SNS-MP2 Git I found the tag of the current release to be dd286d3. I replaced it in ``external/downstream/snsmp2/CMakeLists.txt`` and the compilation proceeded.; Is this actually the correct version for SNS-MP2? Should I submit a PR with this tiny change?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1425
https://github.com/psi4/psi4/issues/1425:320,Integrability,message,message,320,I'm compiling the latest master of Psi4. SNS-MP2 automatic download failed with ; ``Cloning into 'snsmp2_external'...; fatal: invalid reference: a035c27; CMake Error at /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/snsmp2/snsmp2_external-prefix/tmp/snsmp2_external-gitclone.cmake:75 (message):; Failed to checkout tag: 'a035c27'; ``; Looking up the SNS-MP2 Git I found the tag of the current release to be dd286d3. I replaced it in ``external/downstream/snsmp2/CMakeLists.txt`` and the compilation proceeded.; Is this actually the correct version for SNS-MP2? Should I submit a PR with this tiny change?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1425
https://github.com/psi4/psi4/issues/1426:675,Availability,down,downstream,675,"I'm trying to build a rather complete version of Psi4 using the configure line:; ``cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DOpenMP_LIBRARY_DIRS=/opt/intel/lib/intel64_lin/``. Everything built (once the SNS-MP2 tag was corrected) except for v2rdm_casscf which complains about something I don't quite understand:; ```; [ 92%] Performing configure step for 'v2rdm_casscf_external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/M",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1426
https://github.com/psi4/psi4/issues/1426:1424,Availability,Error,Error,1424,"KE_BUILD_TYPE=Release -DOpenMP_LIBRARY_DIRS=/opt/intel/lib/intel64_lin/``. Everything built (once the SNS-MP2 tag was corrected) except for v2rdm_casscf which complains about something I don't quite understand:; ```; [ 92%] Performing configure step for 'v2rdm_casscf_external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:44 (find_dependency); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/psi4/psi4Config.cmake",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1426
https://github.com/psi4/psi4/issues/1426:2381,Availability,error,errors,2381,"downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:44 (find_dependency); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/psi4/psi4Config.cmake:145 (find_package); CMakeLists.txt:31 (find_package). -- Configuring incomplete, errors occurred!; ```; I'm using cmake version 3.10.2, GNU compilers version 7.3.0 and Intel MKL 2019.1.144; I noticed that ``stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake`` doesn't seem to use ``OpenMP_LIBRARY_DIRS`` but I don't know anything about CMake so I might just be wrong here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1426
https://github.com/psi4/psi4/issues/1426:312,Deployability,Release,Release,312,"I'm trying to build a rather complete version of Psi4 using the configure line:; ``cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DOpenMP_LIBRARY_DIRS=/opt/intel/lib/intel64_lin/``. Everything built (once the SNS-MP2 tag was corrected) except for v2rdm_casscf which complains about something I don't quite understand:; ```; [ 92%] Performing configure step for 'v2rdm_casscf_external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/M",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1426
https://github.com/psi4/psi4/issues/1426:760,Deployability,Release,Release,760,"I'm trying to build a rather complete version of Psi4 using the configure line:; ``cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DOpenMP_LIBRARY_DIRS=/opt/intel/lib/intel64_lin/``. Everything built (once the SNS-MP2 tag was corrected) except for v2rdm_casscf which complains about something I don't quite understand:; ```; [ 92%] Performing configure step for 'v2rdm_casscf_external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/M",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1426
https://github.com/psi4/psi4/issues/1426:1504,Integrability,message,message,1504,"external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:44 (find_dependency); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/psi4/psi4Config.cmake:145 (find_package); CMakeLists.txt:31 (find_package). -- Configuring incomplete, errors occurred!; ```; I'm using cmake version 3.10.2, GNU compilers version 7.3.0 and Intel MKL 2019.1.144; I noticed that ``stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake`` does",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1426
https://github.com/psi4/psi4/issues/1426:64,Modifiability,config,configure,64,"I'm trying to build a rather complete version of Psi4 using the configure line:; ``cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DOpenMP_LIBRARY_DIRS=/opt/intel/lib/intel64_lin/``. Everything built (once the SNS-MP2 tag was corrected) except for v2rdm_casscf which complains about something I don't quite understand:; ```; [ 92%] Performing configure step for 'v2rdm_casscf_external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/M",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1426
https://github.com/psi4/psi4/issues/1426:533,Modifiability,config,configure,533,"I'm trying to build a rather complete version of Psi4 using the configure line:; ``cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DOpenMP_LIBRARY_DIRS=/opt/intel/lib/intel64_lin/``. Everything built (once the SNS-MP2 tag was corrected) except for v2rdm_casscf which complains about something I don't quite understand:; ```; [ 92%] Performing configure step for 'v2rdm_casscf_external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/M",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1426
https://github.com/psi4/psi4/issues/1426:2357,Modifiability,Config,Configuring,2357,"downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:44 (find_dependency); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/psi4/psi4Config.cmake:145 (find_package); CMakeLists.txt:31 (find_package). -- Configuring incomplete, errors occurred!; ```; I'm using cmake version 3.10.2, GNU compilers version 7.3.0 and Intel MKL 2019.1.144; I noticed that ``stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake`` doesn't seem to use ``OpenMP_LIBRARY_DIRS`` but I don't know anything about CMake so I might just be wrong here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1426
https://github.com/psi4/psi4/issues/1426:522,Performance,Perform,Performing,522,"I'm trying to build a rather complete version of Psi4 using the configure line:; ``cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DOpenMP_LIBRARY_DIRS=/opt/intel/lib/intel64_lin/``. Everything built (once the SNS-MP2 tag was corrected) except for v2rdm_casscf which complains about something I don't quite understand:; ```; [ 92%] Performing configure step for 'v2rdm_casscf_external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/M",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1426
https://github.com/psi4/psi4/issues/1426:577,Performance,load,loading,577,"I'm trying to build a rather complete version of Psi4 using the configure line:; ``cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DOpenMP_LIBRARY_DIRS=/opt/intel/lib/intel64_lin/``. Everything built (once the SNS-MP2 tag was corrected) except for v2rdm_casscf which complains about something I don't quite understand:; ```; [ 92%] Performing configure step for 'v2rdm_casscf_external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/M",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1426
https://github.com/psi4/psi4/issues/1426:593,Performance,cache,cache,593,"I'm trying to build a rather complete version of Psi4 using the configure line:; ``cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DOpenMP_LIBRARY_DIRS=/opt/intel/lib/intel64_lin/``. Everything built (once the SNS-MP2 tag was corrected) except for v2rdm_casscf which complains about something I don't quite understand:; ```; [ 92%] Performing configure step for 'v2rdm_casscf_external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/M",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1426
https://github.com/psi4/psi4/issues/1426:754,Performance,cache,cache-Release,754,"I'm trying to build a rather complete version of Psi4 using the configure line:; ``cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DOpenMP_LIBRARY_DIRS=/opt/intel/lib/intel64_lin/``. Everything built (once the SNS-MP2 tag was corrected) except for v2rdm_casscf which complains about something I don't quite understand:; ```; [ 92%] Performing configure step for 'v2rdm_casscf_external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/M",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1426
https://github.com/psi4/psi4/issues/1426:1329,Safety,Detect,Detecting,1329,"KE_BUILD_TYPE=Release -DOpenMP_LIBRARY_DIRS=/opt/intel/lib/intel64_lin/``. Everything built (once the SNS-MP2 tag was corrected) except for v2rdm_casscf which complains about something I don't quite understand:; ```; [ 92%] Performing configure step for 'v2rdm_casscf_external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:44 (find_dependency); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/psi4/psi4Config.cmake",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1426
https://github.com/psi4/psi4/pull/1427:220,Availability,error,error,220,## Description; This is part of *Psi4* porting to Windows (#933). The problem was already reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a memory error in `psi::MOInfo::read_mo_spaces`; - [x] Fix `psimrcc-fd-freq2` test on Windows. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1427
https://github.com/psi4/psi4/pull/1427:289,Testability,test,test,289,## Description; This is part of *Psi4* porting to Windows (#933). The problem was already reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a memory error in `psi::MOInfo::read_mo_spaces`; - [x] Fix `psimrcc-fd-freq2` test on Windows. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1427
https://github.com/psi4/psi4/pull/1427:326,Testability,Test,Tests,326,## Description; This is part of *Psi4* porting to Windows (#933). The problem was already reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a memory error in `psi::MOInfo::read_mo_spaces`; - [x] Fix `psimrcc-fd-freq2` test on Windows. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1427
https://github.com/psi4/psi4/pull/1427:400,Testability,test,tests,400,## Description; This is part of *Psi4* porting to Windows (#933). The problem was already reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a memory error in `psi::MOInfo::read_mo_spaces`; - [x] Fix `psimrcc-fd-freq2` test on Windows. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1427
https://github.com/psi4/psi4/pull/1427:491,Testability,test,tests,491,## Description; This is part of *Psi4* porting to Windows (#933). The problem was already reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a memory error in `psi::MOInfo::read_mo_spaces`; - [x] Fix `psimrcc-fd-freq2` test on Windows. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1427
https://github.com/psi4/psi4/pull/1428:287,Testability,test,tests,287,## Description; This fixes a bug in the load_plugin function that incorrectly converted `_` to `-` instead of the opposite. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a bug. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1428
https://github.com/psi4/psi4/pull/1428:378,Testability,test,tests,378,## Description; This fixes a bug in the load_plugin function that incorrectly converted `_` to `-` instead of the opposite. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a bug. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1428
https://github.com/psi4/psi4/pull/1429:1034,Energy Efficiency,energy,energy,1034,"## Description; This PR modifies the SAD guess so that it first runs a plain Fock build and diagonalizes the obtained Fock matrix. This allows the SAD guess to also work for ROHF, as well as allowing one to manually set the orbital occupations in combination with the SAD guess. Test calculation on the quintet state of Cr(N2)6 in aug-pcseg-1:; ```; molecule {; 2 5; Cr 0.0000925386 0.0000682032 0.0019012828; N 0.0004102713 2.3625659492 0.0026269619; N 0.0005967051 3.4672101357 0.0029548744; N 2.3620320503 -0.0004101212 0.0009507667; N 3.4666734940 -0.0002636830 0.0034835308; N -0.0003928082 -2.3624420331 0.0002298447; N -0.0001812896 -3.4670841683 0.0023676850; N -2.3618731053 0.0004033492 0.0009468195; N -3.4665147528 0.0006033882 0.0034481887; N 0.0000117173 -0.0007732394 2.1429780137; N -0.0000350947 -0.0013203851 3.2475238798; N 0.0002480331 0.0009562329 -2.1392146821; N 0.0003478216 0.0015074164 -3.2437570404; }. set reference rohf; set basis aug-pcseg-1; set guess core; set scf_type direct; set df_scf_guess false; energy('scf'); ```; * ```CORE``` 24 iterations, energy -1696.14766109152993; * ```SAD``` 29 iterations, energy -1696.14766127128701; * ```GWH``` 38 iterations, energy -1696.14766117804697. Due to the high symmetry of the test case, ```CORE``` is surprisingly efficient. ```SAD``` still beats the current default, ```GWH```, by a large margin. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess working for ROHF; - [x] SAD guess working with manually set occupations; - [x] Default guess switched to SAD. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1429
https://github.com/psi4/psi4/pull/1429:1082,Energy Efficiency,energy,energy,1082,"## Description; This PR modifies the SAD guess so that it first runs a plain Fock build and diagonalizes the obtained Fock matrix. This allows the SAD guess to also work for ROHF, as well as allowing one to manually set the orbital occupations in combination with the SAD guess. Test calculation on the quintet state of Cr(N2)6 in aug-pcseg-1:; ```; molecule {; 2 5; Cr 0.0000925386 0.0000682032 0.0019012828; N 0.0004102713 2.3625659492 0.0026269619; N 0.0005967051 3.4672101357 0.0029548744; N 2.3620320503 -0.0004101212 0.0009507667; N 3.4666734940 -0.0002636830 0.0034835308; N -0.0003928082 -2.3624420331 0.0002298447; N -0.0001812896 -3.4670841683 0.0023676850; N -2.3618731053 0.0004033492 0.0009468195; N -3.4665147528 0.0006033882 0.0034481887; N 0.0000117173 -0.0007732394 2.1429780137; N -0.0000350947 -0.0013203851 3.2475238798; N 0.0002480331 0.0009562329 -2.1392146821; N 0.0003478216 0.0015074164 -3.2437570404; }. set reference rohf; set basis aug-pcseg-1; set guess core; set scf_type direct; set df_scf_guess false; energy('scf'); ```; * ```CORE``` 24 iterations, energy -1696.14766109152993; * ```SAD``` 29 iterations, energy -1696.14766127128701; * ```GWH``` 38 iterations, energy -1696.14766117804697. Due to the high symmetry of the test case, ```CORE``` is surprisingly efficient. ```SAD``` still beats the current default, ```GWH```, by a large margin. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess working for ROHF; - [x] SAD guess working with manually set occupations; - [x] Default guess switched to SAD. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1429
https://github.com/psi4/psi4/pull/1429:1138,Energy Efficiency,energy,energy,1138,"## Description; This PR modifies the SAD guess so that it first runs a plain Fock build and diagonalizes the obtained Fock matrix. This allows the SAD guess to also work for ROHF, as well as allowing one to manually set the orbital occupations in combination with the SAD guess. Test calculation on the quintet state of Cr(N2)6 in aug-pcseg-1:; ```; molecule {; 2 5; Cr 0.0000925386 0.0000682032 0.0019012828; N 0.0004102713 2.3625659492 0.0026269619; N 0.0005967051 3.4672101357 0.0029548744; N 2.3620320503 -0.0004101212 0.0009507667; N 3.4666734940 -0.0002636830 0.0034835308; N -0.0003928082 -2.3624420331 0.0002298447; N -0.0001812896 -3.4670841683 0.0023676850; N -2.3618731053 0.0004033492 0.0009468195; N -3.4665147528 0.0006033882 0.0034481887; N 0.0000117173 -0.0007732394 2.1429780137; N -0.0000350947 -0.0013203851 3.2475238798; N 0.0002480331 0.0009562329 -2.1392146821; N 0.0003478216 0.0015074164 -3.2437570404; }. set reference rohf; set basis aug-pcseg-1; set guess core; set scf_type direct; set df_scf_guess false; energy('scf'); ```; * ```CORE``` 24 iterations, energy -1696.14766109152993; * ```SAD``` 29 iterations, energy -1696.14766127128701; * ```GWH``` 38 iterations, energy -1696.14766117804697. Due to the high symmetry of the test case, ```CORE``` is surprisingly efficient. ```SAD``` still beats the current default, ```GWH```, by a large margin. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess working for ROHF; - [x] SAD guess working with manually set occupations; - [x] Default guess switched to SAD. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1429
https://github.com/psi4/psi4/pull/1429:1194,Energy Efficiency,energy,energy,1194,"## Description; This PR modifies the SAD guess so that it first runs a plain Fock build and diagonalizes the obtained Fock matrix. This allows the SAD guess to also work for ROHF, as well as allowing one to manually set the orbital occupations in combination with the SAD guess. Test calculation on the quintet state of Cr(N2)6 in aug-pcseg-1:; ```; molecule {; 2 5; Cr 0.0000925386 0.0000682032 0.0019012828; N 0.0004102713 2.3625659492 0.0026269619; N 0.0005967051 3.4672101357 0.0029548744; N 2.3620320503 -0.0004101212 0.0009507667; N 3.4666734940 -0.0002636830 0.0034835308; N -0.0003928082 -2.3624420331 0.0002298447; N -0.0001812896 -3.4670841683 0.0023676850; N -2.3618731053 0.0004033492 0.0009468195; N -3.4665147528 0.0006033882 0.0034481887; N 0.0000117173 -0.0007732394 2.1429780137; N -0.0000350947 -0.0013203851 3.2475238798; N 0.0002480331 0.0009562329 -2.1392146821; N 0.0003478216 0.0015074164 -3.2437570404; }. set reference rohf; set basis aug-pcseg-1; set guess core; set scf_type direct; set df_scf_guess false; energy('scf'); ```; * ```CORE``` 24 iterations, energy -1696.14766109152993; * ```SAD``` 29 iterations, energy -1696.14766127128701; * ```GWH``` 38 iterations, energy -1696.14766117804697. Due to the high symmetry of the test case, ```CORE``` is surprisingly efficient. ```SAD``` still beats the current default, ```GWH```, by a large margin. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess working for ROHF; - [x] SAD guess working with manually set occupations; - [x] Default guess switched to SAD. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1429
https://github.com/psi4/psi4/pull/1429:1293,Energy Efficiency,efficient,efficient,1293,"## Description; This PR modifies the SAD guess so that it first runs a plain Fock build and diagonalizes the obtained Fock matrix. This allows the SAD guess to also work for ROHF, as well as allowing one to manually set the orbital occupations in combination with the SAD guess. Test calculation on the quintet state of Cr(N2)6 in aug-pcseg-1:; ```; molecule {; 2 5; Cr 0.0000925386 0.0000682032 0.0019012828; N 0.0004102713 2.3625659492 0.0026269619; N 0.0005967051 3.4672101357 0.0029548744; N 2.3620320503 -0.0004101212 0.0009507667; N 3.4666734940 -0.0002636830 0.0034835308; N -0.0003928082 -2.3624420331 0.0002298447; N -0.0001812896 -3.4670841683 0.0023676850; N -2.3618731053 0.0004033492 0.0009468195; N -3.4665147528 0.0006033882 0.0034481887; N 0.0000117173 -0.0007732394 2.1429780137; N -0.0000350947 -0.0013203851 3.2475238798; N 0.0002480331 0.0009562329 -2.1392146821; N 0.0003478216 0.0015074164 -3.2437570404; }. set reference rohf; set basis aug-pcseg-1; set guess core; set scf_type direct; set df_scf_guess false; energy('scf'); ```; * ```CORE``` 24 iterations, energy -1696.14766109152993; * ```SAD``` 29 iterations, energy -1696.14766127128701; * ```GWH``` 38 iterations, energy -1696.14766117804697. Due to the high symmetry of the test case, ```CORE``` is surprisingly efficient. ```SAD``` still beats the current default, ```GWH```, by a large margin. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess working for ROHF; - [x] SAD guess working with manually set occupations; - [x] Default guess switched to SAD. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1429
https://github.com/psi4/psi4/pull/1429:279,Testability,Test,Test,279,"## Description; This PR modifies the SAD guess so that it first runs a plain Fock build and diagonalizes the obtained Fock matrix. This allows the SAD guess to also work for ROHF, as well as allowing one to manually set the orbital occupations in combination with the SAD guess. Test calculation on the quintet state of Cr(N2)6 in aug-pcseg-1:; ```; molecule {; 2 5; Cr 0.0000925386 0.0000682032 0.0019012828; N 0.0004102713 2.3625659492 0.0026269619; N 0.0005967051 3.4672101357 0.0029548744; N 2.3620320503 -0.0004101212 0.0009507667; N 3.4666734940 -0.0002636830 0.0034835308; N -0.0003928082 -2.3624420331 0.0002298447; N -0.0001812896 -3.4670841683 0.0023676850; N -2.3618731053 0.0004033492 0.0009468195; N -3.4665147528 0.0006033882 0.0034481887; N 0.0000117173 -0.0007732394 2.1429780137; N -0.0000350947 -0.0013203851 3.2475238798; N 0.0002480331 0.0009562329 -2.1392146821; N 0.0003478216 0.0015074164 -3.2437570404; }. set reference rohf; set basis aug-pcseg-1; set guess core; set scf_type direct; set df_scf_guess false; energy('scf'); ```; * ```CORE``` 24 iterations, energy -1696.14766109152993; * ```SAD``` 29 iterations, energy -1696.14766127128701; * ```GWH``` 38 iterations, energy -1696.14766117804697. Due to the high symmetry of the test case, ```CORE``` is surprisingly efficient. ```SAD``` still beats the current default, ```GWH```, by a large margin. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess working for ROHF; - [x] SAD guess working with manually set occupations; - [x] Default guess switched to SAD. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1429
https://github.com/psi4/psi4/pull/1429:1255,Testability,test,test,1255,"## Description; This PR modifies the SAD guess so that it first runs a plain Fock build and diagonalizes the obtained Fock matrix. This allows the SAD guess to also work for ROHF, as well as allowing one to manually set the orbital occupations in combination with the SAD guess. Test calculation on the quintet state of Cr(N2)6 in aug-pcseg-1:; ```; molecule {; 2 5; Cr 0.0000925386 0.0000682032 0.0019012828; N 0.0004102713 2.3625659492 0.0026269619; N 0.0005967051 3.4672101357 0.0029548744; N 2.3620320503 -0.0004101212 0.0009507667; N 3.4666734940 -0.0002636830 0.0034835308; N -0.0003928082 -2.3624420331 0.0002298447; N -0.0001812896 -3.4670841683 0.0023676850; N -2.3618731053 0.0004033492 0.0009468195; N -3.4665147528 0.0006033882 0.0034481887; N 0.0000117173 -0.0007732394 2.1429780137; N -0.0000350947 -0.0013203851 3.2475238798; N 0.0002480331 0.0009562329 -2.1392146821; N 0.0003478216 0.0015074164 -3.2437570404; }. set reference rohf; set basis aug-pcseg-1; set guess core; set scf_type direct; set df_scf_guess false; energy('scf'); ```; * ```CORE``` 24 iterations, energy -1696.14766109152993; * ```SAD``` 29 iterations, energy -1696.14766127128701; * ```GWH``` 38 iterations, energy -1696.14766117804697. Due to the high symmetry of the test case, ```CORE``` is surprisingly efficient. ```SAD``` still beats the current default, ```GWH```, by a large margin. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess working for ROHF; - [x] SAD guess working with manually set occupations; - [x] Default guess switched to SAD. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1429
https://github.com/psi4/psi4/pull/1429:1646,Testability,Test,Tests,1646,"## Description; This PR modifies the SAD guess so that it first runs a plain Fock build and diagonalizes the obtained Fock matrix. This allows the SAD guess to also work for ROHF, as well as allowing one to manually set the orbital occupations in combination with the SAD guess. Test calculation on the quintet state of Cr(N2)6 in aug-pcseg-1:; ```; molecule {; 2 5; Cr 0.0000925386 0.0000682032 0.0019012828; N 0.0004102713 2.3625659492 0.0026269619; N 0.0005967051 3.4672101357 0.0029548744; N 2.3620320503 -0.0004101212 0.0009507667; N 3.4666734940 -0.0002636830 0.0034835308; N -0.0003928082 -2.3624420331 0.0002298447; N -0.0001812896 -3.4670841683 0.0023676850; N -2.3618731053 0.0004033492 0.0009468195; N -3.4665147528 0.0006033882 0.0034481887; N 0.0000117173 -0.0007732394 2.1429780137; N -0.0000350947 -0.0013203851 3.2475238798; N 0.0002480331 0.0009562329 -2.1392146821; N 0.0003478216 0.0015074164 -3.2437570404; }. set reference rohf; set basis aug-pcseg-1; set guess core; set scf_type direct; set df_scf_guess false; energy('scf'); ```; * ```CORE``` 24 iterations, energy -1696.14766109152993; * ```SAD``` 29 iterations, energy -1696.14766127128701; * ```GWH``` 38 iterations, energy -1696.14766117804697. Due to the high symmetry of the test case, ```CORE``` is surprisingly efficient. ```SAD``` still beats the current default, ```GWH```, by a large margin. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess working for ROHF; - [x] SAD guess working with manually set occupations; - [x] Default guess switched to SAD. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1429
https://github.com/psi4/psi4/pull/1429:1720,Testability,test,tests,1720,"## Description; This PR modifies the SAD guess so that it first runs a plain Fock build and diagonalizes the obtained Fock matrix. This allows the SAD guess to also work for ROHF, as well as allowing one to manually set the orbital occupations in combination with the SAD guess. Test calculation on the quintet state of Cr(N2)6 in aug-pcseg-1:; ```; molecule {; 2 5; Cr 0.0000925386 0.0000682032 0.0019012828; N 0.0004102713 2.3625659492 0.0026269619; N 0.0005967051 3.4672101357 0.0029548744; N 2.3620320503 -0.0004101212 0.0009507667; N 3.4666734940 -0.0002636830 0.0034835308; N -0.0003928082 -2.3624420331 0.0002298447; N -0.0001812896 -3.4670841683 0.0023676850; N -2.3618731053 0.0004033492 0.0009468195; N -3.4665147528 0.0006033882 0.0034481887; N 0.0000117173 -0.0007732394 2.1429780137; N -0.0000350947 -0.0013203851 3.2475238798; N 0.0002480331 0.0009562329 -2.1392146821; N 0.0003478216 0.0015074164 -3.2437570404; }. set reference rohf; set basis aug-pcseg-1; set guess core; set scf_type direct; set df_scf_guess false; energy('scf'); ```; * ```CORE``` 24 iterations, energy -1696.14766109152993; * ```SAD``` 29 iterations, energy -1696.14766127128701; * ```GWH``` 38 iterations, energy -1696.14766117804697. Due to the high symmetry of the test case, ```CORE``` is surprisingly efficient. ```SAD``` still beats the current default, ```GWH```, by a large margin. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess working for ROHF; - [x] SAD guess working with manually set occupations; - [x] Default guess switched to SAD. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1429
https://github.com/psi4/psi4/pull/1429:1811,Testability,test,tests,1811,"## Description; This PR modifies the SAD guess so that it first runs a plain Fock build and diagonalizes the obtained Fock matrix. This allows the SAD guess to also work for ROHF, as well as allowing one to manually set the orbital occupations in combination with the SAD guess. Test calculation on the quintet state of Cr(N2)6 in aug-pcseg-1:; ```; molecule {; 2 5; Cr 0.0000925386 0.0000682032 0.0019012828; N 0.0004102713 2.3625659492 0.0026269619; N 0.0005967051 3.4672101357 0.0029548744; N 2.3620320503 -0.0004101212 0.0009507667; N 3.4666734940 -0.0002636830 0.0034835308; N -0.0003928082 -2.3624420331 0.0002298447; N -0.0001812896 -3.4670841683 0.0023676850; N -2.3618731053 0.0004033492 0.0009468195; N -3.4665147528 0.0006033882 0.0034481887; N 0.0000117173 -0.0007732394 2.1429780137; N -0.0000350947 -0.0013203851 3.2475238798; N 0.0002480331 0.0009562329 -2.1392146821; N 0.0003478216 0.0015074164 -3.2437570404; }. set reference rohf; set basis aug-pcseg-1; set guess core; set scf_type direct; set df_scf_guess false; energy('scf'); ```; * ```CORE``` 24 iterations, energy -1696.14766109152993; * ```SAD``` 29 iterations, energy -1696.14766127128701; * ```GWH``` 38 iterations, energy -1696.14766117804697. Due to the high symmetry of the test case, ```CORE``` is surprisingly efficient. ```SAD``` still beats the current default, ```GWH```, by a large margin. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess working for ROHF; - [x] SAD guess working with manually set occupations; - [x] Default guess switched to SAD. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1429
https://github.com/psi4/psi4/pull/1432:521,Testability,Test,Tests,521,"## Description; This is part of *Psi4* porting to Windows (#933). Fix the crash reported by @tonigi (https://github.com/psi4/psi4/issues/933#issuecomment-446601070). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Clean up `psi::psio_volseek`; - [x] Fix integer overflow: `lseek` returns `off_t` (i.e. `long` or `long long`), which is written to `int`.; - [x] Change `_lseek` to `_lseeki64` on Windows, as it doesn't support large files implicitly. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1432
https://github.com/psi4/psi4/pull/1432:597,Testability,test,tests,597,"## Description; This is part of *Psi4* porting to Windows (#933). Fix the crash reported by @tonigi (https://github.com/psi4/psi4/issues/933#issuecomment-446601070). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Clean up `psi::psio_volseek`; - [x] Fix integer overflow: `lseek` returns `off_t` (i.e. `long` or `long long`), which is written to `int`.; - [x] Change `_lseek` to `_lseeki64` on Windows, as it doesn't support large files implicitly. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1432
https://github.com/psi4/psi4/pull/1432:688,Testability,test,tests,688,"## Description; This is part of *Psi4* porting to Windows (#933). Fix the crash reported by @tonigi (https://github.com/psi4/psi4/issues/933#issuecomment-446601070). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Clean up `psi::psio_volseek`; - [x] Fix integer overflow: `lseek` returns `off_t` (i.e. `long` or `long long`), which is written to `int`.; - [x] Change `_lseek` to `_lseeki64` on Windows, as it doesn't support large files implicitly. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1432
https://github.com/psi4/psi4/issues/1433:2765,Availability,error,error,2765,"-312.91138860100165 1.97759e+00 3.74941e-01 DIIS; @DF-RHF iter 13: -313.42095297268111 -5.09564e-01 3.75328e-01 DIIS; @DF-RHF iter 14: -314.00208386703940 -5.81131e-01 3.74845e-01 DIIS; @DF-RHF iter 15: -313.82934050347035 1.72743e-01 3.74976e-01 DIIS; @DF-RHF iter 16: -315.89990741359236 -2.07057e+00 3.76160e-01 DIIS; @DF-RHF iter 17: -313.12609734973461 2.77381e+00 3.74988e-01 DIIS; @DF-RHF iter 18: -312.92378783647285 2.02310e-01 3.74498e-01 DIIS; @DF-RHF iter 19: -317.24645796226451 -4.32267e+00 3.77492e-01 DIIS; @DF-RHF iter 20: -317.60418344797176 -3.57725e-01 3.78088e-01 DIIS; @DF-RHF iter 21: -316.25416490484400 1.35002e+00 3.76492e-01 DIIS; @DF-RHF iter 22: -315.51131292261630 7.42852e-01 3.75711e-01 DIIS; @DF-RHF iter 23: -315.37233230819385 1.38981e-01 3.75579e-01 DIIS; @DF-RHF iter 24: -315.37427315424492 -1.94085e-03 3.75585e-01 DIIS; @DF-RHF iter 25: -315.36730485039720 6.96830e-03 3.75579e-01 DIIS; @DF-RHF iter 26: -315.36589297460404 1.41188e-03 3.75578e-01 DIIS; @DF-RHF iter 27: -315.36543355687996 4.59418e-04 3.75578e-01 DIIS; @DF-RHF iter 28: -315.36456132195099 8.72235e-04 3.75577e-01 DIIS; @DF-RHF iter 29: -315.36496171844306 -4.00396e-04 3.75577e-01 DIIS; @DF-RHF iter 30: -315.36444779551914 5.13923e-04 3.75577e-01 DIIS; @DF-RHF iter 31: -315.36454935016326 -1.01555e-04 3.75577e-01 DIIS; @DF-RHF iter 32: -315.36429506717400 2.54283e-04 3.75577e-01 DIIS; @DF-RHF iter 33: -315.36492875519383 -6.33688e-04 3.75577e-01 DIIS; @DF-RHF iter 34: -315.36475459725352 1.74158e-04 3.75577e-01 DIIS; @DF-RHF iter 35: -315.36472123328099 3.33640e-05 3.75577e-01 DIIS; @DF-RHF iter 36: -315.36482066630248 -9.94330e-05 3.75577e-01 DIIS; ```; The DIIS error hangs around the same number as with the new version of the SAD guess. The above output is especially weird, since the energy error becomes small while the DIIS error is large. Could the ECP contribution to the Fock matrix asymmetric? This can yield an energy that appears converged but a large orbital gradient.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1433
https://github.com/psi4/psi4/issues/1433:2897,Availability,error,error,2897,"-312.91138860100165 1.97759e+00 3.74941e-01 DIIS; @DF-RHF iter 13: -313.42095297268111 -5.09564e-01 3.75328e-01 DIIS; @DF-RHF iter 14: -314.00208386703940 -5.81131e-01 3.74845e-01 DIIS; @DF-RHF iter 15: -313.82934050347035 1.72743e-01 3.74976e-01 DIIS; @DF-RHF iter 16: -315.89990741359236 -2.07057e+00 3.76160e-01 DIIS; @DF-RHF iter 17: -313.12609734973461 2.77381e+00 3.74988e-01 DIIS; @DF-RHF iter 18: -312.92378783647285 2.02310e-01 3.74498e-01 DIIS; @DF-RHF iter 19: -317.24645796226451 -4.32267e+00 3.77492e-01 DIIS; @DF-RHF iter 20: -317.60418344797176 -3.57725e-01 3.78088e-01 DIIS; @DF-RHF iter 21: -316.25416490484400 1.35002e+00 3.76492e-01 DIIS; @DF-RHF iter 22: -315.51131292261630 7.42852e-01 3.75711e-01 DIIS; @DF-RHF iter 23: -315.37233230819385 1.38981e-01 3.75579e-01 DIIS; @DF-RHF iter 24: -315.37427315424492 -1.94085e-03 3.75585e-01 DIIS; @DF-RHF iter 25: -315.36730485039720 6.96830e-03 3.75579e-01 DIIS; @DF-RHF iter 26: -315.36589297460404 1.41188e-03 3.75578e-01 DIIS; @DF-RHF iter 27: -315.36543355687996 4.59418e-04 3.75578e-01 DIIS; @DF-RHF iter 28: -315.36456132195099 8.72235e-04 3.75577e-01 DIIS; @DF-RHF iter 29: -315.36496171844306 -4.00396e-04 3.75577e-01 DIIS; @DF-RHF iter 30: -315.36444779551914 5.13923e-04 3.75577e-01 DIIS; @DF-RHF iter 31: -315.36454935016326 -1.01555e-04 3.75577e-01 DIIS; @DF-RHF iter 32: -315.36429506717400 2.54283e-04 3.75577e-01 DIIS; @DF-RHF iter 33: -315.36492875519383 -6.33688e-04 3.75577e-01 DIIS; @DF-RHF iter 34: -315.36475459725352 1.74158e-04 3.75577e-01 DIIS; @DF-RHF iter 35: -315.36472123328099 3.33640e-05 3.75577e-01 DIIS; @DF-RHF iter 36: -315.36482066630248 -9.94330e-05 3.75577e-01 DIIS; ```; The DIIS error hangs around the same number as with the new version of the SAD guess. The above output is especially weird, since the energy error becomes small while the DIIS error is large. Could the ECP contribution to the Fock matrix asymmetric? This can yield an energy that appears converged but a large orbital gradient.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1433
https://github.com/psi4/psi4/issues/1433:2932,Availability,error,error,2932,"-312.91138860100165 1.97759e+00 3.74941e-01 DIIS; @DF-RHF iter 13: -313.42095297268111 -5.09564e-01 3.75328e-01 DIIS; @DF-RHF iter 14: -314.00208386703940 -5.81131e-01 3.74845e-01 DIIS; @DF-RHF iter 15: -313.82934050347035 1.72743e-01 3.74976e-01 DIIS; @DF-RHF iter 16: -315.89990741359236 -2.07057e+00 3.76160e-01 DIIS; @DF-RHF iter 17: -313.12609734973461 2.77381e+00 3.74988e-01 DIIS; @DF-RHF iter 18: -312.92378783647285 2.02310e-01 3.74498e-01 DIIS; @DF-RHF iter 19: -317.24645796226451 -4.32267e+00 3.77492e-01 DIIS; @DF-RHF iter 20: -317.60418344797176 -3.57725e-01 3.78088e-01 DIIS; @DF-RHF iter 21: -316.25416490484400 1.35002e+00 3.76492e-01 DIIS; @DF-RHF iter 22: -315.51131292261630 7.42852e-01 3.75711e-01 DIIS; @DF-RHF iter 23: -315.37233230819385 1.38981e-01 3.75579e-01 DIIS; @DF-RHF iter 24: -315.37427315424492 -1.94085e-03 3.75585e-01 DIIS; @DF-RHF iter 25: -315.36730485039720 6.96830e-03 3.75579e-01 DIIS; @DF-RHF iter 26: -315.36589297460404 1.41188e-03 3.75578e-01 DIIS; @DF-RHF iter 27: -315.36543355687996 4.59418e-04 3.75578e-01 DIIS; @DF-RHF iter 28: -315.36456132195099 8.72235e-04 3.75577e-01 DIIS; @DF-RHF iter 29: -315.36496171844306 -4.00396e-04 3.75577e-01 DIIS; @DF-RHF iter 30: -315.36444779551914 5.13923e-04 3.75577e-01 DIIS; @DF-RHF iter 31: -315.36454935016326 -1.01555e-04 3.75577e-01 DIIS; @DF-RHF iter 32: -315.36429506717400 2.54283e-04 3.75577e-01 DIIS; @DF-RHF iter 33: -315.36492875519383 -6.33688e-04 3.75577e-01 DIIS; @DF-RHF iter 34: -315.36475459725352 1.74158e-04 3.75577e-01 DIIS; @DF-RHF iter 35: -315.36472123328099 3.33640e-05 3.75577e-01 DIIS; @DF-RHF iter 36: -315.36482066630248 -9.94330e-05 3.75577e-01 DIIS; ```; The DIIS error hangs around the same number as with the new version of the SAD guess. The above output is especially weird, since the energy error becomes small while the DIIS error is large. Could the ECP contribution to the Fock matrix asymmetric? This can yield an energy that appears converged but a large orbital gradient.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1433
https://github.com/psi4/psi4/issues/1433:192,Energy Efficiency,Energy,Energy,192,"Trying to debug why #1429 is failing, I realized that ```dfmp2-ecp``` is broken also in master. Namely, if you change the guess to ```core```, the output shows; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. Occupation by irrep:; A1 A2 B1 B2 ; DOCC [ 9, 1, 4, 4 ]. @DF-RHF iter 1: -308.91202925462852 -3.08912e+02 3.76534e-01 ; Occupation by irrep:; A1 A2 B1 B2 ; DOCC [ 8, 2, 4, 4 ]. @DF-RHF iter 2: -50.26696275258255 2.58645e+02 1.14194e-01 DIIS; @DF-RHF iter 3: -312.20691537679136 -2.61940e+02 3.74738e-01 DIIS; @DF-RHF iter 4: -312.28132654669946 -7.44112e-02 3.74788e-01 DIIS; @DF-RHF iter 5: -312.28135900254506 -3.24558e-05 3.74789e-01 DIIS; @DF-RHF iter 6: -312.69660060629286 -4.15242e-01 3.74879e-01 DIIS; @DF-RHF iter 7: -314.97714389188246 -2.28054e+00 3.75872e-01 DIIS; @DF-RHF iter 8: -315.30129310258837 -3.24149e-01 3.76020e-01 DIIS; @DF-RHF iter 9: -315.76973734256387 -4.68444e-01 3.76541e-01 DIIS; @DF-RHF iter 10: -314.13107099910633 1.63867e+00 3.75335e-01 DIIS; @DF-RHF iter 11: -314.88897775403694 -7.57907e-01 3.75895e-01 DIIS; @DF-RHF iter 12: -312.91138860100165 1.97759e+00 3.74941e-01 DIIS; @DF-RHF iter 13: -313.42095297268111 -5.09564e-01 3.75328e-01 DIIS; @DF-RHF iter 14: -314.00208386703940 -5.81131e-01 3.74845e-01 DIIS; @DF-RHF iter 15: -313.82934050347035 1.72743e-01 3.74976e-01 DIIS; @DF-RHF iter 16: -315.89990741359236 -2.07057e+00 3.76160e-01 DIIS; @DF-RHF iter 17: -313.12609734973461 2.77381e+00 3.74988e-01 DIIS; @DF-RHF iter 18: -312.92378783647285 2.02310e-01 3.74498e-01 DIIS; @DF-RHF iter 19: -317.24645796226451 -4.32267e+00 3.77492e-01 DIIS; @DF-RHF iter 20: -317.60418344797176 -3.57725e-01 3.78088e-01 DIIS; @DF-RHF iter 21: -316.25416490484400 1.35002e+00 3.76492e-01 DIIS; @DF-RHF iter 22: -315.51131292261630 7.42852e-01 3.75711e-01 DIIS; @DF-RHF iter 23: -315.37233230819385 1.38981e-01 3.75579e-01 DIIS; @DF-RHF iter 24: -315.37427315424492 -1.94085e-03 3.75585e-01 DIIS; @DF-RHF iter 25: -315.36730485039720 6.96830e-03 3.75579e-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1433
https://github.com/psi4/psi4/issues/1433:2890,Energy Efficiency,energy,energy,2890,"-312.91138860100165 1.97759e+00 3.74941e-01 DIIS; @DF-RHF iter 13: -313.42095297268111 -5.09564e-01 3.75328e-01 DIIS; @DF-RHF iter 14: -314.00208386703940 -5.81131e-01 3.74845e-01 DIIS; @DF-RHF iter 15: -313.82934050347035 1.72743e-01 3.74976e-01 DIIS; @DF-RHF iter 16: -315.89990741359236 -2.07057e+00 3.76160e-01 DIIS; @DF-RHF iter 17: -313.12609734973461 2.77381e+00 3.74988e-01 DIIS; @DF-RHF iter 18: -312.92378783647285 2.02310e-01 3.74498e-01 DIIS; @DF-RHF iter 19: -317.24645796226451 -4.32267e+00 3.77492e-01 DIIS; @DF-RHF iter 20: -317.60418344797176 -3.57725e-01 3.78088e-01 DIIS; @DF-RHF iter 21: -316.25416490484400 1.35002e+00 3.76492e-01 DIIS; @DF-RHF iter 22: -315.51131292261630 7.42852e-01 3.75711e-01 DIIS; @DF-RHF iter 23: -315.37233230819385 1.38981e-01 3.75579e-01 DIIS; @DF-RHF iter 24: -315.37427315424492 -1.94085e-03 3.75585e-01 DIIS; @DF-RHF iter 25: -315.36730485039720 6.96830e-03 3.75579e-01 DIIS; @DF-RHF iter 26: -315.36589297460404 1.41188e-03 3.75578e-01 DIIS; @DF-RHF iter 27: -315.36543355687996 4.59418e-04 3.75578e-01 DIIS; @DF-RHF iter 28: -315.36456132195099 8.72235e-04 3.75577e-01 DIIS; @DF-RHF iter 29: -315.36496171844306 -4.00396e-04 3.75577e-01 DIIS; @DF-RHF iter 30: -315.36444779551914 5.13923e-04 3.75577e-01 DIIS; @DF-RHF iter 31: -315.36454935016326 -1.01555e-04 3.75577e-01 DIIS; @DF-RHF iter 32: -315.36429506717400 2.54283e-04 3.75577e-01 DIIS; @DF-RHF iter 33: -315.36492875519383 -6.33688e-04 3.75577e-01 DIIS; @DF-RHF iter 34: -315.36475459725352 1.74158e-04 3.75577e-01 DIIS; @DF-RHF iter 35: -315.36472123328099 3.33640e-05 3.75577e-01 DIIS; @DF-RHF iter 36: -315.36482066630248 -9.94330e-05 3.75577e-01 DIIS; ```; The DIIS error hangs around the same number as with the new version of the SAD guess. The above output is especially weird, since the energy error becomes small while the DIIS error is large. Could the ECP contribution to the Fock matrix asymmetric? This can yield an energy that appears converged but a large orbital gradient.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1433
https://github.com/psi4/psi4/issues/1433:3024,Energy Efficiency,energy,energy,3024,"-312.91138860100165 1.97759e+00 3.74941e-01 DIIS; @DF-RHF iter 13: -313.42095297268111 -5.09564e-01 3.75328e-01 DIIS; @DF-RHF iter 14: -314.00208386703940 -5.81131e-01 3.74845e-01 DIIS; @DF-RHF iter 15: -313.82934050347035 1.72743e-01 3.74976e-01 DIIS; @DF-RHF iter 16: -315.89990741359236 -2.07057e+00 3.76160e-01 DIIS; @DF-RHF iter 17: -313.12609734973461 2.77381e+00 3.74988e-01 DIIS; @DF-RHF iter 18: -312.92378783647285 2.02310e-01 3.74498e-01 DIIS; @DF-RHF iter 19: -317.24645796226451 -4.32267e+00 3.77492e-01 DIIS; @DF-RHF iter 20: -317.60418344797176 -3.57725e-01 3.78088e-01 DIIS; @DF-RHF iter 21: -316.25416490484400 1.35002e+00 3.76492e-01 DIIS; @DF-RHF iter 22: -315.51131292261630 7.42852e-01 3.75711e-01 DIIS; @DF-RHF iter 23: -315.37233230819385 1.38981e-01 3.75579e-01 DIIS; @DF-RHF iter 24: -315.37427315424492 -1.94085e-03 3.75585e-01 DIIS; @DF-RHF iter 25: -315.36730485039720 6.96830e-03 3.75579e-01 DIIS; @DF-RHF iter 26: -315.36589297460404 1.41188e-03 3.75578e-01 DIIS; @DF-RHF iter 27: -315.36543355687996 4.59418e-04 3.75578e-01 DIIS; @DF-RHF iter 28: -315.36456132195099 8.72235e-04 3.75577e-01 DIIS; @DF-RHF iter 29: -315.36496171844306 -4.00396e-04 3.75577e-01 DIIS; @DF-RHF iter 30: -315.36444779551914 5.13923e-04 3.75577e-01 DIIS; @DF-RHF iter 31: -315.36454935016326 -1.01555e-04 3.75577e-01 DIIS; @DF-RHF iter 32: -315.36429506717400 2.54283e-04 3.75577e-01 DIIS; @DF-RHF iter 33: -315.36492875519383 -6.33688e-04 3.75577e-01 DIIS; @DF-RHF iter 34: -315.36475459725352 1.74158e-04 3.75577e-01 DIIS; @DF-RHF iter 35: -315.36472123328099 3.33640e-05 3.75577e-01 DIIS; @DF-RHF iter 36: -315.36482066630248 -9.94330e-05 3.75577e-01 DIIS; ```; The DIIS error hangs around the same number as with the new version of the SAD guess. The above output is especially weird, since the energy error becomes small while the DIIS error is large. Could the ECP contribution to the Fock matrix asymmetric? This can yield an energy that appears converged but a large orbital gradient.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1433
https://github.com/psi4/psi4/pull/1435:141,Testability,Test,Tested,141,"## Description; Does exactly what it says in the title. We need the maximum value of `maxGradient` _across all threads_. ## Checklist; - [x] Tested that even in parallel, orbital gradients are now deterministic. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1435
https://github.com/psi4/psi4/pull/1436:149,Testability,Test,Tests,149,"## Description; Continuing #1403. Since we want to check Becke fctl here, better call it B97-0 since surrendered B97 to Grimme. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1436
https://github.com/psi4/psi4/pull/1436:224,Testability,test,tests,224,"## Description; Continuing #1403. Since we want to check Becke fctl here, better call it B97-0 since surrendered B97 to Grimme. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1436
https://github.com/psi4/psi4/pull/1436:315,Testability,test,tests,315,"## Description; Continuing #1403. Since we want to check Becke fctl here, better call it B97-0 since surrendered B97 to Grimme. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1436
https://github.com/psi4/psi4/pull/1437:44,Modifiability,variab,variables,44,"## Description; This PR added missing class variables in the assignment operator to reflect the current status of Options, which ensures a correct copy behavior. ## Todos; - [x] Add missing class variables in Options::operator=. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1437
https://github.com/psi4/psi4/pull/1437:196,Modifiability,variab,variables,196,"## Description; This PR added missing class variables in the assignment operator to reflect the current status of Options, which ensures a correct copy behavior. ## Todos; - [x] Add missing class variables in Options::operator=. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1437
https://github.com/psi4/psi4/pull/1438:425,Availability,ERROR,ERROR,425,"## Description; This is part of *Psi4* porting to Windows (#933). `EaT_RHF.cc` and `ET_RHF.cc` contain incompatible declarations of `psi::cctriples::thread_data`. During compilation, templates (i.e. `std::vector<psi::cctriples::thread_data>`) are generated once and reused, while memory access instructions to `psi::cctriples::thread_data` are generate at each translation unit. That results into an overflow:; ```; ==29447==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60800007a380 at pc 0x7fa994502627 bp 0x7fffc3cb6560 sp 0x7fffc3cb6558; WRITE of size 4 at 0x60800007a380 thread T0; #0 0x7fa994502626 in psi::cctriples::EaT_RHF() /home/raimis/prj/psi4.git/psi4/src/psi4/cc/cctriples/EaT_RHF.cc:206; #1 0x7fa993ee2cec in psi::cctriples::cctriples(std::shared_ptr<psi::Wavefunction>, psi::Options&) /home/raimis/prj/psi4.git/psi4/src/psi4/cc/cctriples/triples.cc:154; #2 0x7fa993dfd890 in psi::cclambda::CCLambdaWavefunction::compute_energy() /home/raimis/prj/psi4.git/psi4/src/psi4/cc/cclambda/cclambda.cc:324; #3 0x7fa9937cfa84 in py_psi_cclambda(std::shared_ptr<psi::Wavefunction>) /home/raimis/prj/psi4.git/psi4/src/core.cc:382; #4 0x7fa9938b8a3c in std::shared_ptr<psi::Wavefunction> pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::Wavefunction> (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(std::shared_ptr<psi::Wavefunction> (*&)(std::shared_ptr<psi::Wavefunction>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/cast.h:1874; #5 0x7fa9938a441c in std::enable_if<!std::is_void<std::shared_ptr<psi::Wavefunction> >::value, std::shared_ptr<psi::Wavefunction> >::type pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call<std::shared_ptr<psi::Wavefunction>, pybind11::detail::void_type, std::shared_ptr<psi::Wavefunction> (*&)(std::shared_ptr<psi::Wa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1438
https://github.com/psi4/psi4/pull/1438:6313,Energy Efficiency,allocate,allocated,6313,"bltinmodule.c.h:283; #35 0x7fa9b5205c1d in _PyCFunction_FastCallDict Objects/methodobject.c:234; #36 0x7fa9b529f0d9 in call_function Python/ceval.c:4837; #37 0x7fa9b52a2901 in _PyEval_EvalFrameDefault Python/ceval.c:3335; #38 0x7fa9b529ecdd in _PyEval_EvalCodeWithName Python/ceval.c:4166; #39 0x7fa9b529f30c in PyEval_EvalCodeEx Python/ceval.c:4187; #40 0x7fa9b529f35a in PyEval_EvalCode Python/ceval.c:731; #41 0x7fa9b52db3b1 in run_mod Python/pythonrun.c:1025; #42 0x7fa9b52db3b1 in PyRun_FileExFlags Python/pythonrun.c:978; #43 0x7fa9b52db516 in PyRun_SimpleFileExFlags Python/pythonrun.c:419; #44 0x7fa9b52f7b0c in run_file Modules/main.c:340; #45 0x7fa9b52f7b0c in Py_Main Modules/main.c:810; #46 0x400bbb in main Programs/python.c:69; #47 0x7fa9b422cfe9 in __libc_start_main (/lib64/libc.so.6+0x20fe9); #48 0x400c7c (/home/raimis/opt/conda/envs/psi4/bin/python3.6+0x400c7c). 0x60800007a380 is located 0 bytes to the right of 96-byte region [0x60800007a320,0x60800007a380); allocated by thread T0 here:; #0 0x7fa9b5721e10 in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_new_delete.cc:80; #1 0x7fa9944a3281 in __gnu_cxx::new_allocator<psi::cctriples::thread_data>::allocate(unsigned long, void const*) /usr/include/c++/7/ext/new_allocator.h:111; #2 0x7fa9944a2ba8 in std::allocator_traits<std::allocator<psi::cctriples::thread_data> >::allocate(std::allocator<psi::cctriples::thread_data>&, unsigned long) /usr/include/c++/7/bits/alloc_traits.h:436; #3 0x7fa9944a2892 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_M_allocate(unsigned long) /usr/include/c++/7/bits/stl_vector.h:172; #4 0x7fa9944a2506 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_M_create_storage(unsigned long) (/home/raimis/prj/psi4.git/linux_build/stage/lib/psi4/core.cpython-36m-x86_64-linux-gnu.so+0xcf0a506); #5 0x7fa9944a1e64 in std",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1438
https://github.com/psi4/psi4/pull/1438:6589,Energy Efficiency,allocate,allocate,6589,"_EvalCodeWithName Python/ceval.c:4166; #39 0x7fa9b529f30c in PyEval_EvalCodeEx Python/ceval.c:4187; #40 0x7fa9b529f35a in PyEval_EvalCode Python/ceval.c:731; #41 0x7fa9b52db3b1 in run_mod Python/pythonrun.c:1025; #42 0x7fa9b52db3b1 in PyRun_FileExFlags Python/pythonrun.c:978; #43 0x7fa9b52db516 in PyRun_SimpleFileExFlags Python/pythonrun.c:419; #44 0x7fa9b52f7b0c in run_file Modules/main.c:340; #45 0x7fa9b52f7b0c in Py_Main Modules/main.c:810; #46 0x400bbb in main Programs/python.c:69; #47 0x7fa9b422cfe9 in __libc_start_main (/lib64/libc.so.6+0x20fe9); #48 0x400c7c (/home/raimis/opt/conda/envs/psi4/bin/python3.6+0x400c7c). 0x60800007a380 is located 0 bytes to the right of 96-byte region [0x60800007a320,0x60800007a380); allocated by thread T0 here:; #0 0x7fa9b5721e10 in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_new_delete.cc:80; #1 0x7fa9944a3281 in __gnu_cxx::new_allocator<psi::cctriples::thread_data>::allocate(unsigned long, void const*) /usr/include/c++/7/ext/new_allocator.h:111; #2 0x7fa9944a2ba8 in std::allocator_traits<std::allocator<psi::cctriples::thread_data> >::allocate(std::allocator<psi::cctriples::thread_data>&, unsigned long) /usr/include/c++/7/bits/alloc_traits.h:436; #3 0x7fa9944a2892 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_M_allocate(unsigned long) /usr/include/c++/7/bits/stl_vector.h:172; #4 0x7fa9944a2506 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_M_create_storage(unsigned long) (/home/raimis/prj/psi4.git/linux_build/stage/lib/psi4/core.cpython-36m-x86_64-linux-gnu.so+0xcf0a506); #5 0x7fa9944a1e64 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_Vector_base(unsigned long, std::allocator<psi::cctriples::thread_data> const&) /usr/include/c++/7/bits/stl_vector.h:138; #6 0x7fa9944a18a0 in std::vector<psi::c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1438
https://github.com/psi4/psi4/pull/1438:6760,Energy Efficiency,allocate,allocate,6760,"un_mod Python/pythonrun.c:1025; #42 0x7fa9b52db3b1 in PyRun_FileExFlags Python/pythonrun.c:978; #43 0x7fa9b52db516 in PyRun_SimpleFileExFlags Python/pythonrun.c:419; #44 0x7fa9b52f7b0c in run_file Modules/main.c:340; #45 0x7fa9b52f7b0c in Py_Main Modules/main.c:810; #46 0x400bbb in main Programs/python.c:69; #47 0x7fa9b422cfe9 in __libc_start_main (/lib64/libc.so.6+0x20fe9); #48 0x400c7c (/home/raimis/opt/conda/envs/psi4/bin/python3.6+0x400c7c). 0x60800007a380 is located 0 bytes to the right of 96-byte region [0x60800007a320,0x60800007a380); allocated by thread T0 here:; #0 0x7fa9b5721e10 in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_new_delete.cc:80; #1 0x7fa9944a3281 in __gnu_cxx::new_allocator<psi::cctriples::thread_data>::allocate(unsigned long, void const*) /usr/include/c++/7/ext/new_allocator.h:111; #2 0x7fa9944a2ba8 in std::allocator_traits<std::allocator<psi::cctriples::thread_data> >::allocate(std::allocator<psi::cctriples::thread_data>&, unsigned long) /usr/include/c++/7/bits/alloc_traits.h:436; #3 0x7fa9944a2892 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_M_allocate(unsigned long) /usr/include/c++/7/bits/stl_vector.h:172; #4 0x7fa9944a2506 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_M_create_storage(unsigned long) (/home/raimis/prj/psi4.git/linux_build/stage/lib/psi4/core.cpython-36m-x86_64-linux-gnu.so+0xcf0a506); #5 0x7fa9944a1e64 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_Vector_base(unsigned long, std::allocator<psi::cctriples::thread_data> const&) /usr/include/c++/7/bits/stl_vector.h:138; #6 0x7fa9944a18a0 in std::vector<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::vector(unsigned long, std::allocator<psi::cctriples::thread_data> const&) /usr/include/c++/7/bits/stl_vector.h",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1438
https://github.com/psi4/psi4/pull/1438:12379,Safety,ABORT,ABORTING,12379,"9261be8f in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/pybind11.h:627; #16 0x7fa9b5205cbc in _PyCFunction_FastCallDict Objects/methodobject.c:231. SUMMARY: AddressSanitizer: heap-buffer-overflow /home/raimis/prj/psi4.git/psi4/src/psi4/cc/cctriples/EaT_RHF.cc:206 in psi::cctriples::EaT_RHF(); Shadow bytes around the buggy address:; 0x0c1080007420: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c1080007430: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007440: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007450: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c1080007460: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00; =>0x0c1080007470:[fa]fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007480: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007490: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c10800074a0: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c10800074b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c10800074c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==29447==ABORTING; ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Rename `psi::cctriples::thread_data` (in `EaT_RHF.cc`) to `psi::cctriples::EaT_RHF_thread_data`; - [x] Rename `psi::cctriples::thread_data` (in `ET_RHF.cc`) to `psi::cctriples::ET_RHF_thread_data`. ## Checklist; - [x] ~~Tests added for any ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1438
https://github.com/psi4/psi4/pull/1438:287,Security,access,access,287,"## Description; This is part of *Psi4* porting to Windows (#933). `EaT_RHF.cc` and `ET_RHF.cc` contain incompatible declarations of `psi::cctriples::thread_data`. During compilation, templates (i.e. `std::vector<psi::cctriples::thread_data>`) are generated once and reused, while memory access instructions to `psi::cctriples::thread_data` are generate at each translation unit. That results into an overflow:; ```; ==29447==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60800007a380 at pc 0x7fa994502627 bp 0x7fffc3cb6560 sp 0x7fffc3cb6558; WRITE of size 4 at 0x60800007a380 thread T0; #0 0x7fa994502626 in psi::cctriples::EaT_RHF() /home/raimis/prj/psi4.git/psi4/src/psi4/cc/cctriples/EaT_RHF.cc:206; #1 0x7fa993ee2cec in psi::cctriples::cctriples(std::shared_ptr<psi::Wavefunction>, psi::Options&) /home/raimis/prj/psi4.git/psi4/src/psi4/cc/cctriples/triples.cc:154; #2 0x7fa993dfd890 in psi::cclambda::CCLambdaWavefunction::compute_energy() /home/raimis/prj/psi4.git/psi4/src/psi4/cc/cclambda/cclambda.cc:324; #3 0x7fa9937cfa84 in py_psi_cclambda(std::shared_ptr<psi::Wavefunction>) /home/raimis/prj/psi4.git/psi4/src/core.cc:382; #4 0x7fa9938b8a3c in std::shared_ptr<psi::Wavefunction> pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::Wavefunction> (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(std::shared_ptr<psi::Wavefunction> (*&)(std::shared_ptr<psi::Wavefunction>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/cast.h:1874; #5 0x7fa9938a441c in std::enable_if<!std::is_void<std::shared_ptr<psi::Wavefunction> >::value, std::shared_ptr<psi::Wavefunction> >::type pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call<std::shared_ptr<psi::Wavefunction>, pybind11::detail::void_type, std::shared_ptr<psi::Wavefunction> (*&)(std::shared_ptr<psi::Wa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1438
https://github.com/psi4/psi4/pull/1438:12712,Testability,Test,Tests,12712,ethodobject.c:231. SUMMARY: AddressSanitizer: heap-buffer-overflow /home/raimis/prj/psi4.git/psi4/src/psi4/cc/cctriples/EaT_RHF.cc:206 in psi::cctriples::EaT_RHF(); Shadow bytes around the buggy address:; 0x0c1080007420: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c1080007430: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007440: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007450: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c1080007460: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00; =>0x0c1080007470:[fa]fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007480: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007490: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c10800074a0: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c10800074b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c10800074c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==29447==ABORTING; ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Rename `psi::cctriples::thread_data` (in `EaT_RHF.cc`) to `psi::cctriples::EaT_RHF_thread_data`; - [x] Rename `psi::cctriples::thread_data` (in `ET_RHF.cc`) to `psi::cctriples::ET_RHF_thread_data`. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1438
https://github.com/psi4/psi4/pull/1438:12788,Testability,test,tests,12788,ethodobject.c:231. SUMMARY: AddressSanitizer: heap-buffer-overflow /home/raimis/prj/psi4.git/psi4/src/psi4/cc/cctriples/EaT_RHF.cc:206 in psi::cctriples::EaT_RHF(); Shadow bytes around the buggy address:; 0x0c1080007420: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c1080007430: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007440: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007450: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c1080007460: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00; =>0x0c1080007470:[fa]fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007480: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007490: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c10800074a0: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c10800074b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c10800074c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==29447==ABORTING; ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Rename `psi::cctriples::thread_data` (in `EaT_RHF.cc`) to `psi::cctriples::EaT_RHF_thread_data`; - [x] Rename `psi::cctriples::thread_data` (in `ET_RHF.cc`) to `psi::cctriples::ET_RHF_thread_data`. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1438
https://github.com/psi4/psi4/pull/1438:12879,Testability,test,tests,12879,ethodobject.c:231. SUMMARY: AddressSanitizer: heap-buffer-overflow /home/raimis/prj/psi4.git/psi4/src/psi4/cc/cctriples/EaT_RHF.cc:206 in psi::cctriples::EaT_RHF(); Shadow bytes around the buggy address:; 0x0c1080007420: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c1080007430: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007440: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007450: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c1080007460: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00; =>0x0c1080007470:[fa]fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007480: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007490: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c10800074a0: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c10800074b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c10800074c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==29447==ABORTING; ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Rename `psi::cctriples::thread_data` (in `EaT_RHF.cc`) to `psi::cctriples::EaT_RHF_thread_data`; - [x] Rename `psi::cctriples::thread_data` (in `ET_RHF.cc`) to `psi::cctriples::ET_RHF_thread_data`. ## Checklist; - [x] ~~Tests added for any new features~~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1438
https://github.com/psi4/psi4/issues/1439:186,Energy Efficiency,energy,energy,186,"The following input file gives absurd results using the current dev version of Psi:; ```; memory 1000 mb. molecule {; -1 1; I; }. basis {; assign I def2-tzvppd; }. set basis_guess true. energy('scf'); ```. The small basis computation ends with; ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 9, 2, 2, 2, 0, 4, 4, 4 ] . @DF-RHF Final Energy: -6892.35157729932507; ```. Here's how the large basis computation went:; ```; @DF-RHF iter 0: 590.08005432721836 5.90080e+02 2.80084e-01; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 5, 2, 2, 2, 1, 5, 5, 5 ] . @DF-RHF iter 1: -67.13552163426122 -6.57216e+02 3.44500e-01 ; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 7, 2, 2, 2, 0, 5, 4, 5 ] . @DF-RHF iter 2: -5.42420113211885 6.17113e+01 6.71875e-01 DIIS; @DF-RHF iter 3: -208.00917694080209 -2.02585e+02 3.53265e-01 DIIS; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 8, 2, 2, 3, 0, 4, 4, 4 ] . @DF-RHF iter 4: -213.73836050769307 -5.72918e+00 3.05852e-01 DIIS; @DF-RHF iter 5: -229.29046486569237 -1.55521e+01 1.60752e-01 DIIS; @DF-RHF iter 6: -231.83352362698204 -2.54306e+00 8.54643e-02 DIIS; @DF-RHF iter 7: -233.14739556085581 -1.31387e+00 1.00459e-02 DIIS; @DF-RHF iter 8: -233.26115993293257 -1.13764e-01 6.01984e-03 DIIS; @DF-RHF iter 9: -233.30679760470645 -4.56377e-02 2.25206e-03 DIIS; @DF-RHF iter 10: -233.31593146369286 -9.13386e-03 6.80191e-04 DIIS; @DF-RHF iter 11: -233.31660737631540 -6.75913e-04 2.28951e-04 DIIS; @DF-RHF iter 12: -233.31678610778147 -1.78731e-04 1.58902e-04 DIIS; @DF-RHF iter 13: -233.31696020659965 -1.74099e-04 1.02174e-04 DIIS; @DF-RHF iter 14: -233.31707462571032 -1.14419e-04 1.37466e-05 DIIS; @DF-RHF iter 15: -233.31707485378129 -2.28071e-07 3.16438e-06 DIIS; @DF-RHF iter 16: -233.31707486465362 -1.08723e-08 5.35650e-07 DIIS; Energy converged.; ```. (Are ECP electrons supposed to be included in DOCC?). The listed doubly occupied orbitals are; ```; Doubly Occupied:. 1Ag -1.892135 1B1u 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1439
https://github.com/psi4/psi4/issues/1439:358,Energy Efficiency,Energy,Energy,358,"The following input file gives absurd results using the current dev version of Psi:; ```; memory 1000 mb. molecule {; -1 1; I; }. basis {; assign I def2-tzvppd; }. set basis_guess true. energy('scf'); ```. The small basis computation ends with; ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 9, 2, 2, 2, 0, 4, 4, 4 ] . @DF-RHF Final Energy: -6892.35157729932507; ```. Here's how the large basis computation went:; ```; @DF-RHF iter 0: 590.08005432721836 5.90080e+02 2.80084e-01; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 5, 2, 2, 2, 1, 5, 5, 5 ] . @DF-RHF iter 1: -67.13552163426122 -6.57216e+02 3.44500e-01 ; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 7, 2, 2, 2, 0, 5, 4, 5 ] . @DF-RHF iter 2: -5.42420113211885 6.17113e+01 6.71875e-01 DIIS; @DF-RHF iter 3: -208.00917694080209 -2.02585e+02 3.53265e-01 DIIS; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 8, 2, 2, 3, 0, 4, 4, 4 ] . @DF-RHF iter 4: -213.73836050769307 -5.72918e+00 3.05852e-01 DIIS; @DF-RHF iter 5: -229.29046486569237 -1.55521e+01 1.60752e-01 DIIS; @DF-RHF iter 6: -231.83352362698204 -2.54306e+00 8.54643e-02 DIIS; @DF-RHF iter 7: -233.14739556085581 -1.31387e+00 1.00459e-02 DIIS; @DF-RHF iter 8: -233.26115993293257 -1.13764e-01 6.01984e-03 DIIS; @DF-RHF iter 9: -233.30679760470645 -4.56377e-02 2.25206e-03 DIIS; @DF-RHF iter 10: -233.31593146369286 -9.13386e-03 6.80191e-04 DIIS; @DF-RHF iter 11: -233.31660737631540 -6.75913e-04 2.28951e-04 DIIS; @DF-RHF iter 12: -233.31678610778147 -1.78731e-04 1.58902e-04 DIIS; @DF-RHF iter 13: -233.31696020659965 -1.74099e-04 1.02174e-04 DIIS; @DF-RHF iter 14: -233.31707462571032 -1.14419e-04 1.37466e-05 DIIS; @DF-RHF iter 15: -233.31707485378129 -2.28071e-07 3.16438e-06 DIIS; @DF-RHF iter 16: -233.31707486465362 -1.08723e-08 5.35650e-07 DIIS; Energy converged.; ```. (Are ECP electrons supposed to be included in DOCC?). The listed doubly occupied orbitals are; ```; Doubly Occupied:. 1Ag -1.892135 1B1u 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1439
https://github.com/psi4/psi4/issues/1439:1839,Energy Efficiency,Energy,Energy,1839,"ion by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 7, 2, 2, 2, 0, 5, 4, 5 ] . @DF-RHF iter 2: -5.42420113211885 6.17113e+01 6.71875e-01 DIIS; @DF-RHF iter 3: -208.00917694080209 -2.02585e+02 3.53265e-01 DIIS; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 8, 2, 2, 3, 0, 4, 4, 4 ] . @DF-RHF iter 4: -213.73836050769307 -5.72918e+00 3.05852e-01 DIIS; @DF-RHF iter 5: -229.29046486569237 -1.55521e+01 1.60752e-01 DIIS; @DF-RHF iter 6: -231.83352362698204 -2.54306e+00 8.54643e-02 DIIS; @DF-RHF iter 7: -233.14739556085581 -1.31387e+00 1.00459e-02 DIIS; @DF-RHF iter 8: -233.26115993293257 -1.13764e-01 6.01984e-03 DIIS; @DF-RHF iter 9: -233.30679760470645 -4.56377e-02 2.25206e-03 DIIS; @DF-RHF iter 10: -233.31593146369286 -9.13386e-03 6.80191e-04 DIIS; @DF-RHF iter 11: -233.31660737631540 -6.75913e-04 2.28951e-04 DIIS; @DF-RHF iter 12: -233.31678610778147 -1.78731e-04 1.58902e-04 DIIS; @DF-RHF iter 13: -233.31696020659965 -1.74099e-04 1.02174e-04 DIIS; @DF-RHF iter 14: -233.31707462571032 -1.14419e-04 1.37466e-05 DIIS; @DF-RHF iter 15: -233.31707485378129 -2.28071e-07 3.16438e-06 DIIS; @DF-RHF iter 16: -233.31707486465362 -1.08723e-08 5.35650e-07 DIIS; Energy converged.; ```. (Are ECP electrons supposed to be included in DOCC?). The listed doubly occupied orbitals are; ```; Doubly Occupied:. 1Ag -1.892135 1B1u 0.256341 1B3u 0.256341; 1B2u 0.256341 2B1u 2.685551 2B3u 2.685551; 2B2u 2.685551 2Ag 3.556568 1B3g 3.556568; 1B2g 3.561885 3Ag 3.561885 1B1g 3.561885; 4Ag 3.830228 5Ag 3.956522 2B2g 3.956522; 2B1g 3.956522 2B3g 3.967605 6Ag 3.967605; 3B1u 4.573133 3B3u 4.573133 3B2u 4.573133; 7Ag 4.839905 4B1u 5.327348 4B3u 5.327348; 4B2u 5.327348 8Ag 5.637776 3B3g 5.637776; ```. (Surely ECP electrons shouldn't be included here?). Switching out the ECP-containing basis for a manually defined Pople basis set resolved all strangeness. Needless to say, basis guess and ECP really don't play nicely. I'll leave it to the people working on ECPs to decide what the right fix is.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1439
https://github.com/psi4/psi4/pull/1440:206,Availability,failure,failures,206,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Repeat `ci-property` test to catch random failures; - [x] Remove memory error in `psi::MultipolePropCalc::compute_mo_extents`.; - [x] Fix `ci-property` test on Windows. ## Questions; - [x] Removed some dead code, including the part with `C_DDOT`, which was segment-faulting. Could you check, it was really a dead code, not some incomplete implementation? --> Dead!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1440
https://github.com/psi4/psi4/pull/1440:236,Availability,error,error,236,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Repeat `ci-property` test to catch random failures; - [x] Remove memory error in `psi::MultipolePropCalc::compute_mo_extents`.; - [x] Fix `ci-property` test on Windows. ## Questions; - [x] Removed some dead code, including the part with `C_DDOT`, which was segment-faulting. Could you check, it was really a dead code, not some incomplete implementation? --> Dead!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1440
https://github.com/psi4/psi4/pull/1440:429,Availability,fault,faulting,429,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Repeat `ci-property` test to catch random failures; - [x] Remove memory error in `psi::MultipolePropCalc::compute_mo_extents`.; - [x] Fix `ci-property` test on Windows. ## Questions; - [x] Removed some dead code, including the part with `C_DDOT`, which was segment-faulting. Could you check, it was really a dead code, not some incomplete implementation? --> Dead!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1440
https://github.com/psi4/psi4/pull/1440:185,Testability,test,test,185,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Repeat `ci-property` test to catch random failures; - [x] Remove memory error in `psi::MultipolePropCalc::compute_mo_extents`.; - [x] Fix `ci-property` test on Windows. ## Questions; - [x] Removed some dead code, including the part with `C_DDOT`, which was segment-faulting. Could you check, it was really a dead code, not some incomplete implementation? --> Dead!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1440
https://github.com/psi4/psi4/pull/1440:316,Testability,test,test,316,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Repeat `ci-property` test to catch random failures; - [x] Remove memory error in `psi::MultipolePropCalc::compute_mo_extents`.; - [x] Fix `ci-property` test on Windows. ## Questions; - [x] Removed some dead code, including the part with `C_DDOT`, which was segment-faulting. Could you check, it was really a dead code, not some incomplete implementation? --> Dead!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1440
https://github.com/psi4/psi4/pull/1440:550,Testability,Test,Tests,550,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Repeat `ci-property` test to catch random failures; - [x] Remove memory error in `psi::MultipolePropCalc::compute_mo_extents`.; - [x] Fix `ci-property` test on Windows. ## Questions; - [x] Removed some dead code, including the part with `C_DDOT`, which was segment-faulting. Could you check, it was really a dead code, not some incomplete implementation? --> Dead!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1440
https://github.com/psi4/psi4/pull/1440:624,Testability,test,tests,624,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Repeat `ci-property` test to catch random failures; - [x] Remove memory error in `psi::MultipolePropCalc::compute_mo_extents`.; - [x] Fix `ci-property` test on Windows. ## Questions; - [x] Removed some dead code, including the part with `C_DDOT`, which was segment-faulting. Could you check, it was really a dead code, not some incomplete implementation? --> Dead!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1440
https://github.com/psi4/psi4/pull/1440:715,Testability,test,tests,715,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Repeat `ci-property` test to catch random failures; - [x] Remove memory error in `psi::MultipolePropCalc::compute_mo_extents`.; - [x] Fix `ci-property` test on Windows. ## Questions; - [x] Removed some dead code, including the part with `C_DDOT`, which was segment-faulting. Could you check, it was really a dead code, not some incomplete implementation? --> Dead!. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1440
https://github.com/psi4/psi4/pull/1441:221,Security,access,access,221,"## Description; This is part of *Psi4* porting to Windows (#933). The problem was reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix an invalid memory access in `psi::CIWavefunction::sem_iter`; - [x] Fix `fci-tdm` test on Winodows; - [x] Fix `fci-tdm-2` test on Winodows. ## Questions; - [x] This needs an actual fix, but I'm not enough familiar with the method. Who knows how to fix? --> Fixed. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1441
https://github.com/psi4/psi4/pull/1441:284,Testability,test,test,284,"## Description; This is part of *Psi4* porting to Windows (#933). The problem was reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix an invalid memory access in `psi::CIWavefunction::sem_iter`; - [x] Fix `fci-tdm` test on Winodows; - [x] Fix `fci-tdm-2` test on Winodows. ## Questions; - [x] This needs an actual fix, but I'm not enough familiar with the method. Who knows how to fix? --> Fixed. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1441
https://github.com/psi4/psi4/pull/1441:324,Testability,test,test,324,"## Description; This is part of *Psi4* porting to Windows (#933). The problem was reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix an invalid memory access in `psi::CIWavefunction::sem_iter`; - [x] Fix `fci-tdm` test on Winodows; - [x] Fix `fci-tdm-2` test on Winodows. ## Questions; - [x] This needs an actual fix, but I'm not enough familiar with the method. Who knows how to fix? --> Fixed. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1441
https://github.com/psi4/psi4/pull/1441:488,Testability,Test,Tests,488,"## Description; This is part of *Psi4* porting to Windows (#933). The problem was reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix an invalid memory access in `psi::CIWavefunction::sem_iter`; - [x] Fix `fci-tdm` test on Winodows; - [x] Fix `fci-tdm-2` test on Winodows. ## Questions; - [x] This needs an actual fix, but I'm not enough familiar with the method. Who knows how to fix? --> Fixed. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1441
https://github.com/psi4/psi4/pull/1441:564,Testability,test,tests,564,"## Description; This is part of *Psi4* porting to Windows (#933). The problem was reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix an invalid memory access in `psi::CIWavefunction::sem_iter`; - [x] Fix `fci-tdm` test on Winodows; - [x] Fix `fci-tdm-2` test on Winodows. ## Questions; - [x] This needs an actual fix, but I'm not enough familiar with the method. Who knows how to fix? --> Fixed. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1441
https://github.com/psi4/psi4/pull/1441:655,Testability,test,tests,655,"## Description; This is part of *Psi4* porting to Windows (#933). The problem was reported in #1255. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix an invalid memory access in `psi::CIWavefunction::sem_iter`; - [x] Fix `fci-tdm` test on Winodows; - [x] Fix `fci-tdm-2` test on Winodows. ## Questions; - [x] This needs an actual fix, but I'm not enough familiar with the method. Who knows how to fix? --> Fixed. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1441
https://github.com/psi4/psi4/pull/1442:181,Availability,error,error,181,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a filesystem error in `psi.driver.cbs`. Windows does not support `*` in filenames.; - [x] Fix `cbs-parser` test on Windows. ## Questions; - [x] How *Psi4* is suppose to sanitize filenames? Have I missed some function? --> That suppose to be removed in 1.4, so just a quick fix for now. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1442
https://github.com/psi4/psi4/pull/1442:337,Security,sanitiz,sanitize,337,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a filesystem error in `psi.driver.cbs`. Windows does not support `*` in filenames.; - [x] Fix `cbs-parser` test on Windows. ## Questions; - [x] How *Psi4* is suppose to sanitize filenames? Have I missed some function? --> That suppose to be removed in 1.4, so just a quick fix for now. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1442
https://github.com/psi4/psi4/pull/1442:275,Testability,test,test,275,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a filesystem error in `psi.driver.cbs`. Windows does not support `*` in filenames.; - [x] Fix `cbs-parser` test on Windows. ## Questions; - [x] How *Psi4* is suppose to sanitize filenames? Have I missed some function? --> That suppose to be removed in 1.4, so just a quick fix for now. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1442
https://github.com/psi4/psi4/pull/1442:476,Testability,Test,Tests,476,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a filesystem error in `psi.driver.cbs`. Windows does not support `*` in filenames.; - [x] Fix `cbs-parser` test on Windows. ## Questions; - [x] How *Psi4* is suppose to sanitize filenames? Have I missed some function? --> That suppose to be removed in 1.4, so just a quick fix for now. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1442
https://github.com/psi4/psi4/pull/1442:552,Testability,test,tests,552,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a filesystem error in `psi.driver.cbs`. Windows does not support `*` in filenames.; - [x] Fix `cbs-parser` test on Windows. ## Questions; - [x] How *Psi4* is suppose to sanitize filenames? Have I missed some function? --> That suppose to be removed in 1.4, so just a quick fix for now. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1442
https://github.com/psi4/psi4/pull/1442:643,Testability,test,tests,643,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a filesystem error in `psi.driver.cbs`. Windows does not support `*` in filenames.; - [x] Fix `cbs-parser` test on Windows. ## Questions; - [x] How *Psi4* is suppose to sanitize filenames? Have I missed some function? --> That suppose to be removed in 1.4, so just a quick fix for now. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1442
https://github.com/psi4/psi4/pull/1443:349,Deployability,update,update,349,"## Description; It was agreed at PsiCon that the `Matrix` and `Vector` class be rewritten to use xtensor as storage backend. This is my work on this so far. It is not complete - indeed `Matrix` and `Vector` are still used everywhere - but I think it's better to put this up early because it will take time to transition to the new classes. **Easter update**. The Python bindings for the `Tensor` class mostly come for free through `xtensor-python`. They allow to:; * Access blocks _via_ the subscript operator.; * Assign a NumPy array to a block.; * Get a block and update it in NumPy.; ```; import numpy as np. from psi4.core import Dimension, Matrix_D. dim_row = Dimension([3, 2, 1, 4]); dim_col = Dimension([4, 2, 0, 2]); m3 = Matrix_D('m3', dim_row, dim_col); m3[0] = np.random.rand(*m3[3].shape); block = m3[3]; block[:] = np.arange(m3[3].size, dtype=float).reshape(*m3[3].shape); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `_a` literal in pybind11 export sources rather that `py::arg` --> Split and merged with #1448 ; - [x] Basic templated `Tensor` class with Python bindings.; - [x] `doublet` for `Tensor<double, 2>` aka a `Matrix` of `double`-s working. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1443
https://github.com/psi4/psi4/pull/1443:566,Deployability,update,update,566,"## Description; It was agreed at PsiCon that the `Matrix` and `Vector` class be rewritten to use xtensor as storage backend. This is my work on this so far. It is not complete - indeed `Matrix` and `Vector` are still used everywhere - but I think it's better to put this up early because it will take time to transition to the new classes. **Easter update**. The Python bindings for the `Tensor` class mostly come for free through `xtensor-python`. They allow to:; * Access blocks _via_ the subscript operator.; * Assign a NumPy array to a block.; * Get a block and update it in NumPy.; ```; import numpy as np. from psi4.core import Dimension, Matrix_D. dim_row = Dimension([3, 2, 1, 4]); dim_col = Dimension([4, 2, 0, 2]); m3 = Matrix_D('m3', dim_row, dim_col); m3[0] = np.random.rand(*m3[3].shape); block = m3[3]; block[:] = np.arange(m3[3].size, dtype=float).reshape(*m3[3].shape); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `_a` literal in pybind11 export sources rather that `py::arg` --> Split and merged with #1448 ; - [x] Basic templated `Tensor` class with Python bindings.; - [x] `doublet` for `Tensor<double, 2>` aka a `Matrix` of `double`-s working. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1443
https://github.com/psi4/psi4/pull/1443:467,Security,Access,Access,467,"## Description; It was agreed at PsiCon that the `Matrix` and `Vector` class be rewritten to use xtensor as storage backend. This is my work on this so far. It is not complete - indeed `Matrix` and `Vector` are still used everywhere - but I think it's better to put this up early because it will take time to transition to the new classes. **Easter update**. The Python bindings for the `Tensor` class mostly come for free through `xtensor-python`. They allow to:; * Access blocks _via_ the subscript operator.; * Assign a NumPy array to a block.; * Get a block and update it in NumPy.; ```; import numpy as np. from psi4.core import Dimension, Matrix_D. dim_row = Dimension([3, 2, 1, 4]); dim_col = Dimension([4, 2, 0, 2]); m3 = Matrix_D('m3', dim_row, dim_col); m3[0] = np.random.rand(*m3[3].shape); block = m3[3]; block[:] = np.arange(m3[3].size, dtype=float).reshape(*m3[3].shape); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `_a` literal in pybind11 export sources rather that `py::arg` --> Split and merged with #1448 ; - [x] Basic templated `Tensor` class with Python bindings.; - [x] `doublet` for `Tensor<double, 2>` aka a `Matrix` of `double`-s working. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1443
https://github.com/psi4/psi4/pull/1443:1247,Testability,Test,Tests,1247,"## Description; It was agreed at PsiCon that the `Matrix` and `Vector` class be rewritten to use xtensor as storage backend. This is my work on this so far. It is not complete - indeed `Matrix` and `Vector` are still used everywhere - but I think it's better to put this up early because it will take time to transition to the new classes. **Easter update**. The Python bindings for the `Tensor` class mostly come for free through `xtensor-python`. They allow to:; * Access blocks _via_ the subscript operator.; * Assign a NumPy array to a block.; * Get a block and update it in NumPy.; ```; import numpy as np. from psi4.core import Dimension, Matrix_D. dim_row = Dimension([3, 2, 1, 4]); dim_col = Dimension([4, 2, 0, 2]); m3 = Matrix_D('m3', dim_row, dim_col); m3[0] = np.random.rand(*m3[3].shape); block = m3[3]; block[:] = np.arange(m3[3].size, dtype=float).reshape(*m3[3].shape); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `_a` literal in pybind11 export sources rather that `py::arg` --> Split and merged with #1448 ; - [x] Basic templated `Tensor` class with Python bindings.; - [x] `doublet` for `Tensor<double, 2>` aka a `Matrix` of `double`-s working. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1443
https://github.com/psi4/psi4/pull/1443:1321,Testability,test,tests,1321,"## Description; It was agreed at PsiCon that the `Matrix` and `Vector` class be rewritten to use xtensor as storage backend. This is my work on this so far. It is not complete - indeed `Matrix` and `Vector` are still used everywhere - but I think it's better to put this up early because it will take time to transition to the new classes. **Easter update**. The Python bindings for the `Tensor` class mostly come for free through `xtensor-python`. They allow to:; * Access blocks _via_ the subscript operator.; * Assign a NumPy array to a block.; * Get a block and update it in NumPy.; ```; import numpy as np. from psi4.core import Dimension, Matrix_D. dim_row = Dimension([3, 2, 1, 4]); dim_col = Dimension([4, 2, 0, 2]); m3 = Matrix_D('m3', dim_row, dim_col); m3[0] = np.random.rand(*m3[3].shape); block = m3[3]; block[:] = np.arange(m3[3].size, dtype=float).reshape(*m3[3].shape); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `_a` literal in pybind11 export sources rather that `py::arg` --> Split and merged with #1448 ; - [x] Basic templated `Tensor` class with Python bindings.; - [x] `doublet` for `Tensor<double, 2>` aka a `Matrix` of `double`-s working. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1443
https://github.com/psi4/psi4/pull/1443:1412,Testability,test,tests,1412,"## Description; It was agreed at PsiCon that the `Matrix` and `Vector` class be rewritten to use xtensor as storage backend. This is my work on this so far. It is not complete - indeed `Matrix` and `Vector` are still used everywhere - but I think it's better to put this up early because it will take time to transition to the new classes. **Easter update**. The Python bindings for the `Tensor` class mostly come for free through `xtensor-python`. They allow to:; * Access blocks _via_ the subscript operator.; * Assign a NumPy array to a block.; * Get a block and update it in NumPy.; ```; import numpy as np. from psi4.core import Dimension, Matrix_D. dim_row = Dimension([3, 2, 1, 4]); dim_col = Dimension([4, 2, 0, 2]); m3 = Matrix_D('m3', dim_row, dim_col); m3[0] = np.random.rand(*m3[3].shape); block = m3[3]; block[:] = np.arange(m3[3].size, dtype=float).reshape(*m3[3].shape); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `_a` literal in pybind11 export sources rather that `py::arg` --> Split and merged with #1448 ; - [x] Basic templated `Tensor` class with Python bindings.; - [x] `doublet` for `Tensor<double, 2>` aka a `Matrix` of `double`-s working. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1443
https://github.com/psi4/psi4/pull/1445:583,Energy Efficiency,ENERGY,ENERGY,583,"## Description; Suceeds #1381 as a step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on wfn c-side, then just copy into P::e.globals in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`. ## Notes; - reference E for detci https://github.com/psi4/psi4/pull/1381#discussion_r237680985. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1445
https://github.com/psi4/psi4/pull/1445:626,Energy Efficiency,ENERGY,ENERGY,626,"## Description; Suceeds #1381 as a step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on wfn c-side, then just copy into P::e.globals in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`. ## Notes; - reference E for detci https://github.com/psi4/psi4/pull/1381#discussion_r237680985. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1445
https://github.com/psi4/psi4/pull/1445:742,Energy Efficiency,ENERGY,ENERGY,742,"## Description; Suceeds #1381 as a step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on wfn c-side, then just copy into P::e.globals in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`. ## Notes; - reference E for detci https://github.com/psi4/psi4/pull/1381#discussion_r237680985. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1445
https://github.com/psi4/psi4/pull/1445:845,Energy Efficiency,ENERGY,ENERGY,845,"## Description; Suceeds #1381 as a step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on wfn c-side, then just copy into P::e.globals in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`. ## Notes; - reference E for detci https://github.com/psi4/psi4/pull/1381#discussion_r237680985. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1445
https://github.com/psi4/psi4/pull/1445:659,Modifiability,variab,variables,659,"## Description; Suceeds #1381 as a step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on wfn c-side, then just copy into P::e.globals in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`. ## Notes; - reference E for detci https://github.com/psi4/psi4/pull/1381#discussion_r237680985. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1445
https://github.com/psi4/psi4/pull/1445:970,Testability,Test,Tests,970,"## Description; Suceeds #1381 as a step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on wfn c-side, then just copy into P::e.globals in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`. ## Notes; - reference E for detci https://github.com/psi4/psi4/pull/1381#discussion_r237680985. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1445
https://github.com/psi4/psi4/pull/1445:1044,Testability,test,tests,1044,"## Description; Suceeds #1381 as a step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on wfn c-side, then just copy into P::e.globals in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`. ## Notes; - reference E for detci https://github.com/psi4/psi4/pull/1381#discussion_r237680985. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1445
https://github.com/psi4/psi4/pull/1445:1135,Testability,test,tests,1135,"## Description; Suceeds #1381 as a step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on wfn c-side, then just copy into P::e.globals in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`. ## Notes; - reference E for detci https://github.com/psi4/psi4/pull/1381#discussion_r237680985. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1445
https://github.com/psi4/psi4/pull/1446:184,Availability,error,errors,184,## Description; Several bug fixes and enhancements promised for 1.3. Primary goal for these changes is to localize the estimation of DF memory in a single location to prevent some odd errors. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove class method attribute for `Wavefunction.to_file`.; - [x] Reworks SCF `save_orbitals` to use canonical Wavefunction serialization.; - [x] `JK.name()` returns the name of the JK object.; - [x] `JK.memory_estimate()` attempts to estimate the amount of in-core memory required.; - [x] Reworks DFT cache size logic to account for Schwarz screening.; - [x] Removes SCF initialize JK from C++ for better initialization control; - [x] Attempts to close #1218. ## Questions; - [ ] Can we get better estimates on PK memory usage @jgonthier.; - [ ] Does IWL use virtually zero memory? @andysim . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1446
https://github.com/psi4/psi4/pull/1446:38,Modifiability,enhance,enhancements,38,## Description; Several bug fixes and enhancements promised for 1.3. Primary goal for these changes is to localize the estimation of DF memory in a single location to prevent some odd errors. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove class method attribute for `Wavefunction.to_file`.; - [x] Reworks SCF `save_orbitals` to use canonical Wavefunction serialization.; - [x] `JK.name()` returns the name of the JK object.; - [x] `JK.memory_estimate()` attempts to estimate the amount of in-core memory required.; - [x] Reworks DFT cache size logic to account for Schwarz screening.; - [x] Removes SCF initialize JK from C++ for better initialization control; - [x] Attempts to close #1218. ## Questions; - [ ] Can we get better estimates on PK memory usage @jgonthier.; - [ ] Does IWL use virtually zero memory? @andysim . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1446
https://github.com/psi4/psi4/pull/1446:591,Performance,cache,cache,591,## Description; Several bug fixes and enhancements promised for 1.3. Primary goal for these changes is to localize the estimation of DF memory in a single location to prevent some odd errors. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove class method attribute for `Wavefunction.to_file`.; - [x] Reworks SCF `save_orbitals` to use canonical Wavefunction serialization.; - [x] `JK.name()` returns the name of the JK object.; - [x] `JK.memory_estimate()` attempts to estimate the amount of in-core memory required.; - [x] Reworks DFT cache size logic to account for Schwarz screening.; - [x] Removes SCF initialize JK from C++ for better initialization control; - [x] Attempts to close #1218. ## Questions; - [ ] Can we get better estimates on PK memory usage @jgonthier.; - [ ] Does IWL use virtually zero memory? @andysim . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1446
https://github.com/psi4/psi4/pull/1446:602,Testability,log,logic,602,## Description; Several bug fixes and enhancements promised for 1.3. Primary goal for these changes is to localize the estimation of DF memory in a single location to prevent some odd errors. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove class method attribute for `Wavefunction.to_file`.; - [x] Reworks SCF `save_orbitals` to use canonical Wavefunction serialization.; - [x] `JK.name()` returns the name of the JK object.; - [x] `JK.memory_estimate()` attempts to estimate the amount of in-core memory required.; - [x] Reworks DFT cache size logic to account for Schwarz screening.; - [x] Removes SCF initialize JK from C++ for better initialization control; - [x] Attempts to close #1218. ## Questions; - [ ] Can we get better estimates on PK memory usage @jgonthier.; - [ ] Does IWL use virtually zero memory? @andysim . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1446
https://github.com/psi4/psi4/pull/1446:903,Testability,Test,Tests,903,## Description; Several bug fixes and enhancements promised for 1.3. Primary goal for these changes is to localize the estimation of DF memory in a single location to prevent some odd errors. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove class method attribute for `Wavefunction.to_file`.; - [x] Reworks SCF `save_orbitals` to use canonical Wavefunction serialization.; - [x] `JK.name()` returns the name of the JK object.; - [x] `JK.memory_estimate()` attempts to estimate the amount of in-core memory required.; - [x] Reworks DFT cache size logic to account for Schwarz screening.; - [x] Removes SCF initialize JK from C++ for better initialization control; - [x] Attempts to close #1218. ## Questions; - [ ] Can we get better estimates on PK memory usage @jgonthier.; - [ ] Does IWL use virtually zero memory? @andysim . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1446
https://github.com/psi4/psi4/pull/1446:977,Testability,test,tests,977,## Description; Several bug fixes and enhancements promised for 1.3. Primary goal for these changes is to localize the estimation of DF memory in a single location to prevent some odd errors. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove class method attribute for `Wavefunction.to_file`.; - [x] Reworks SCF `save_orbitals` to use canonical Wavefunction serialization.; - [x] `JK.name()` returns the name of the JK object.; - [x] `JK.memory_estimate()` attempts to estimate the amount of in-core memory required.; - [x] Reworks DFT cache size logic to account for Schwarz screening.; - [x] Removes SCF initialize JK from C++ for better initialization control; - [x] Attempts to close #1218. ## Questions; - [ ] Can we get better estimates on PK memory usage @jgonthier.; - [ ] Does IWL use virtually zero memory? @andysim . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1446
https://github.com/psi4/psi4/pull/1446:1068,Testability,test,tests,1068,## Description; Several bug fixes and enhancements promised for 1.3. Primary goal for these changes is to localize the estimation of DF memory in a single location to prevent some odd errors. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove class method attribute for `Wavefunction.to_file`.; - [x] Reworks SCF `save_orbitals` to use canonical Wavefunction serialization.; - [x] `JK.name()` returns the name of the JK object.; - [x] `JK.memory_estimate()` attempts to estimate the amount of in-core memory required.; - [x] Reworks DFT cache size logic to account for Schwarz screening.; - [x] Removes SCF initialize JK from C++ for better initialization control; - [x] Attempts to close #1218. ## Questions; - [ ] Can we get better estimates on PK memory usage @jgonthier.; - [ ] Does IWL use virtually zero memory? @andysim . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1446
https://github.com/psi4/psi4/pull/1447:506,Testability,Test,Tests,506,"## Description; Some functions in the `Vector` and `Matrix` have been ""freed"". Separated from #1443, as requested. ## Todos; - [x] `doublet`, `triplet`, `create`, `horzcat`, `vertcat` and the blocked matrix ""new"" and ""delete"" are now free functions, rather than static methods in `Matrix`; - [x] `create` for `Vector` also a free function now.; - [x] Removal of various unused functions in `Vector`; - [x] Remove the `defines.h` header in DCFT folder. File numbers are in `psifiles.h`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1447
https://github.com/psi4/psi4/pull/1447:580,Testability,test,tests,580,"## Description; Some functions in the `Vector` and `Matrix` have been ""freed"". Separated from #1443, as requested. ## Todos; - [x] `doublet`, `triplet`, `create`, `horzcat`, `vertcat` and the blocked matrix ""new"" and ""delete"" are now free functions, rather than static methods in `Matrix`; - [x] `create` for `Vector` also a free function now.; - [x] Removal of various unused functions in `Vector`; - [x] Remove the `defines.h` header in DCFT folder. File numbers are in `psifiles.h`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1447
https://github.com/psi4/psi4/pull/1447:671,Testability,test,tests,671,"## Description; Some functions in the `Vector` and `Matrix` have been ""freed"". Separated from #1443, as requested. ## Todos; - [x] `doublet`, `triplet`, `create`, `horzcat`, `vertcat` and the blocked matrix ""new"" and ""delete"" are now free functions, rather than static methods in `Matrix`; - [x] `create` for `Vector` also a free function now.; - [x] Removal of various unused functions in `Vector`; - [x] Remove the `defines.h` header in DCFT folder. File numbers are in `psifiles.h`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1447
https://github.com/psi4/psi4/pull/1448:281,Testability,Test,Tests,281,"## Description; Switches to use `_a` rather than more verbose `py::arg`. Separated from #1443, as requested. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `_a` literal.; - [x] Formatting pass at bindings. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1448
https://github.com/psi4/psi4/pull/1448:355,Testability,test,tests,355,"## Description; Switches to use `_a` rather than more verbose `py::arg`. Separated from #1443, as requested. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `_a` literal.; - [x] Formatting pass at bindings. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1448
https://github.com/psi4/psi4/pull/1448:446,Testability,test,tests,446,"## Description; Switches to use `_a` rather than more verbose `py::arg`. Separated from #1443, as requested. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `_a` literal.; - [x] Formatting pass at bindings. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1448
https://github.com/psi4/psi4/pull/1449:35,Modifiability,config,configure,35,"## Description; at least let v2rdm configure, compile, and load. the openmp find_components was broken for plugins by #1348. ## Checklist; - [x] tests1--4 work. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1449
https://github.com/psi4/psi4/pull/1449:107,Modifiability,plugin,plugins,107,"## Description; at least let v2rdm configure, compile, and load. the openmp find_components was broken for plugins by #1348. ## Checklist; - [x] tests1--4 work. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1449
https://github.com/psi4/psi4/pull/1449:59,Performance,load,load,59,"## Description; at least let v2rdm configure, compile, and load. the openmp find_components was broken for plugins by #1348. ## Checklist; - [x] tests1--4 work. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1449
https://github.com/psi4/psi4/pull/1450:358,Testability,Test,Tests,358,## Description; Fractional SAD now honors the atomic spin state. The code also now supports all elements up to Og. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Density corresponds to right spin state; - [x] Code supports the whole of the periodic table. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1450
https://github.com/psi4/psi4/pull/1450:432,Testability,test,tests,432,## Description; Fractional SAD now honors the atomic spin state. The code also now supports all elements up to Og. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Density corresponds to right spin state; - [x] Code supports the whole of the periodic table. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1450
https://github.com/psi4/psi4/pull/1450:523,Testability,test,tests,523,## Description; Fractional SAD now honors the atomic spin state. The code also now supports all elements up to Og. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Density corresponds to right spin state; - [x] Code supports the whole of the periodic table. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1450
https://github.com/psi4/psi4/pull/1451:319,Testability,Test,Tests,319,## Description; The SAD fractional density matrix didn't actually use fractional densities. This is fixed in the present PR. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD density matrix is fractionally occupied. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1451
https://github.com/psi4/psi4/pull/1451:393,Testability,test,tests,393,## Description; The SAD fractional density matrix didn't actually use fractional densities. This is fixed in the present PR. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD density matrix is fractionally occupied. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1451
https://github.com/psi4/psi4/pull/1451:484,Testability,test,tests,484,## Description; The SAD fractional density matrix didn't actually use fractional densities. This is fixed in the present PR. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD density matrix is fractionally occupied. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1451
https://github.com/psi4/psi4/pull/1452:121,Availability,avail,available,121,## Description; Fractional SAD now honors the atomic ground spin state. A guess with spin-restricted occupations is also available. The fractional code now supports all elements up to Og. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1452
https://github.com/psi4/psi4/pull/1452:363,Testability,Test,Tests,363,## Description; Fractional SAD now honors the atomic ground spin state. A guess with spin-restricted occupations is also available. The fractional code now supports all elements up to Og. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1452
https://github.com/psi4/psi4/pull/1452:437,Testability,test,tests,437,## Description; Fractional SAD now honors the atomic ground spin state. A guess with spin-restricted occupations is also available. The fractional code now supports all elements up to Og. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1452
https://github.com/psi4/psi4/pull/1452:528,Testability,test,tests,528,## Description; Fractional SAD now honors the atomic ground spin state. A guess with spin-restricted occupations is also available. The fractional code now supports all elements up to Og. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1452
https://github.com/psi4/psi4/pull/1453:332,Deployability,Update,Updates,332,"## Description; Addresses #1431 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Changes ORBSYM (the symmetry of each orbital) from Psi4's internal convention of ordering irreps to the traditional FCIDUMP ordering; - [x] Adds ISYM (the symmetry of the overall wavefunction); - [x] Updates the `fcidump` test to match new ordering. ## Questions; - [x] Does this change in convention break anything in Psi4? (Or anything that uses Psi4?); - [x] Since I altered the tests to match the output, how to verify correctness of this change?. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1453
https://github.com/psi4/psi4/pull/1453:354,Testability,test,test,354,"## Description; Addresses #1431 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Changes ORBSYM (the symmetry of each orbital) from Psi4's internal convention of ordering irreps to the traditional FCIDUMP ordering; - [x] Adds ISYM (the symmetry of the overall wavefunction); - [x] Updates the `fcidump` test to match new ordering. ## Questions; - [x] Does this change in convention break anything in Psi4? (Or anything that uses Psi4?); - [x] Since I altered the tests to match the output, how to verify correctness of this change?. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1453
https://github.com/psi4/psi4/pull/1453:514,Testability,test,tests,514,"## Description; Addresses #1431 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Changes ORBSYM (the symmetry of each orbital) from Psi4's internal convention of ordering irreps to the traditional FCIDUMP ordering; - [x] Adds ISYM (the symmetry of the overall wavefunction); - [x] Updates the `fcidump` test to match new ordering. ## Questions; - [x] Does this change in convention break anything in Psi4? (Or anything that uses Psi4?); - [x] Since I altered the tests to match the output, how to verify correctness of this change?. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1453
https://github.com/psi4/psi4/pull/1453:638,Testability,test,tests,638,"## Description; Addresses #1431 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Changes ORBSYM (the symmetry of each orbital) from Psi4's internal convention of ordering irreps to the traditional FCIDUMP ordering; - [x] Adds ISYM (the symmetry of the overall wavefunction); - [x] Updates the `fcidump` test to match new ordering. ## Questions; - [x] Does this change in convention break anything in Psi4? (Or anything that uses Psi4?); - [x] Since I altered the tests to match the output, how to verify correctness of this change?. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1453
https://github.com/psi4/psi4/pull/1453:729,Testability,test,tests,729,"## Description; Addresses #1431 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Changes ORBSYM (the symmetry of each orbital) from Psi4's internal convention of ordering irreps to the traditional FCIDUMP ordering; - [x] Adds ISYM (the symmetry of the overall wavefunction); - [x] Updates the `fcidump` test to match new ordering. ## Questions; - [x] Does this change in convention break anything in Psi4? (Or anything that uses Psi4?); - [x] Since I altered the tests to match the output, how to verify correctness of this change?. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1453
https://github.com/psi4/psi4/pull/1454:344,Testability,Test,Tests,344,## Description; `overload_cast` from #1448 does not play nicely with Intel compilers and pybind11 https://github.com/pybind/pybind11/issues/1649. This reverts just enough of #1448 to build again. . ## Questions; - [ ] Should we `#ifdef __INTEL_COMPILER` around the block so that gnu/clang are still using `overload_cast`?. ## Checklist; - [ ] ~Tests added for any new features~; - [x] compiles and runs a few tests. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1454
https://github.com/psi4/psi4/pull/1454:409,Testability,test,tests,409,## Description; `overload_cast` from #1448 does not play nicely with Intel compilers and pybind11 https://github.com/pybind/pybind11/issues/1649. This reverts just enough of #1448 to build again. . ## Questions; - [ ] Should we `#ifdef __INTEL_COMPILER` around the block so that gnu/clang are still using `overload_cast`?. ## Checklist; - [ ] ~Tests added for any new features~; - [x] compiles and runs a few tests. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1454
https://github.com/psi4/psi4/pull/1455:623,Availability,error,errors,623,## Description; Cramming a few more deprecations into v1.2. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `Wavefunction.reference_energy()` --> `Wavefunction.energy()` in keeping with grad/hess and because reference is not apt. py-side was already plain `energy()`.; - [x] deprecate the c-side `Wavefunction.frequencies` member data and getter/setter. getter now reads off the py-side member data. setter will go away entirely. ## Questions; - [ ] can one suppress compile-time deprecation warnings for two lines? the export_mints legacy_freq lines are properly throwing errors and disrupting the clean build. ## Checklist; - [ ] ~Tests added for any new features~; - [x] ran the freq tests with earlier v of code. ## Status; - [x] Ready for review. ~This has got bits of #1454 and #1449 in it. I'll rebase once they're in.~; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1455
https://github.com/psi4/psi4/pull/1455:210,Energy Efficiency,energy,energy,210,## Description; Cramming a few more deprecations into v1.2. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `Wavefunction.reference_energy()` --> `Wavefunction.energy()` in keeping with grad/hess and because reference is not apt. py-side was already plain `energy()`.; - [x] deprecate the c-side `Wavefunction.frequencies` member data and getter/setter. getter now reads off the py-side member data. setter will go away entirely. ## Questions; - [ ] can one suppress compile-time deprecation warnings for two lines? the export_mints legacy_freq lines are properly throwing errors and disrupting the clean build. ## Checklist; - [ ] ~Tests added for any new features~; - [x] ran the freq tests with earlier v of code. ## Status; - [x] Ready for review. ~This has got bits of #1454 and #1449 in it. I'll rebase once they're in.~; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1455
https://github.com/psi4/psi4/pull/1455:307,Energy Efficiency,energy,energy,307,## Description; Cramming a few more deprecations into v1.2. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `Wavefunction.reference_energy()` --> `Wavefunction.energy()` in keeping with grad/hess and because reference is not apt. py-side was already plain `energy()`.; - [x] deprecate the c-side `Wavefunction.frequencies` member data and getter/setter. getter now reads off the py-side member data. setter will go away entirely. ## Questions; - [ ] can one suppress compile-time deprecation warnings for two lines? the export_mints legacy_freq lines are properly throwing errors and disrupting the clean build. ## Checklist; - [ ] ~Tests added for any new features~; - [x] ran the freq tests with earlier v of code. ## Status; - [x] Ready for review. ~This has got bits of #1454 and #1449 in it. I'll rebase once they're in.~; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1455
https://github.com/psi4/psi4/pull/1455:683,Testability,Test,Tests,683,## Description; Cramming a few more deprecations into v1.2. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `Wavefunction.reference_energy()` --> `Wavefunction.energy()` in keeping with grad/hess and because reference is not apt. py-side was already plain `energy()`.; - [x] deprecate the c-side `Wavefunction.frequencies` member data and getter/setter. getter now reads off the py-side member data. setter will go away entirely. ## Questions; - [ ] can one suppress compile-time deprecation warnings for two lines? the export_mints legacy_freq lines are properly throwing errors and disrupting the clean build. ## Checklist; - [ ] ~Tests added for any new features~; - [x] ran the freq tests with earlier v of code. ## Status; - [x] Ready for review. ~This has got bits of #1454 and #1449 in it. I'll rebase once they're in.~; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1455
https://github.com/psi4/psi4/pull/1455:737,Testability,test,tests,737,## Description; Cramming a few more deprecations into v1.2. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `Wavefunction.reference_energy()` --> `Wavefunction.energy()` in keeping with grad/hess and because reference is not apt. py-side was already plain `energy()`.; - [x] deprecate the c-side `Wavefunction.frequencies` member data and getter/setter. getter now reads off the py-side member data. setter will go away entirely. ## Questions; - [ ] can one suppress compile-time deprecation warnings for two lines? the export_mints legacy_freq lines are properly throwing errors and disrupting the clean build. ## Checklist; - [ ] ~Tests added for any new features~; - [x] ran the freq tests with earlier v of code. ## Status; - [x] Ready for review. ~This has got bits of #1454 and #1449 in it. I'll rebase once they're in.~; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1455
https://github.com/psi4/psi4/pull/1456:1034,Energy Efficiency,energy,energy,1034,"## Description; This PR modifies the SAD guess so that it first runs a plain Fock build and diagonalizes the obtained Fock matrix. This allows the SAD guess to also work for ROHF, as well as allowing one to manually set the orbital occupations in combination with the SAD guess. Test calculation on the quintet state of Cr(N2)6 in aug-pcseg-1:; ```; molecule {; 2 5; Cr 0.0000925386 0.0000682032 0.0019012828; N 0.0004102713 2.3625659492 0.0026269619; N 0.0005967051 3.4672101357 0.0029548744; N 2.3620320503 -0.0004101212 0.0009507667; N 3.4666734940 -0.0002636830 0.0034835308; N -0.0003928082 -2.3624420331 0.0002298447; N -0.0001812896 -3.4670841683 0.0023676850; N -2.3618731053 0.0004033492 0.0009468195; N -3.4665147528 0.0006033882 0.0034481887; N 0.0000117173 -0.0007732394 2.1429780137; N -0.0000350947 -0.0013203851 3.2475238798; N 0.0002480331 0.0009562329 -2.1392146821; N 0.0003478216 0.0015074164 -3.2437570404; }. set reference rohf; set basis aug-pcseg-1; set guess core; set scf_type direct; set df_scf_guess false; energy('scf'); ```. Results:. | Guess | num iter | final energy |; | -- | -- | -- |; | GWH | 38 | -1696.14766117804697 |; | CORE | 24 | -1696.14766109152993 |; | SAD, atomic occupations | 33 | -1696.14766127808366 |; | SAD, fractional occupations | 25 | -1696.14766099831081 |; | SAD, fractional spin-restricted occupations | 22 | -1696.14766111108497 |. Due to the high symmetry of the test case, CORE is surprisingly efficient. SAD still beats the current default, GWH, by a large margin. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess working for ROHF; - [x] SAD guess working with manually set occupations. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1456
https://github.com/psi4/psi4/pull/1456:1091,Energy Efficiency,energy,energy,1091,"## Description; This PR modifies the SAD guess so that it first runs a plain Fock build and diagonalizes the obtained Fock matrix. This allows the SAD guess to also work for ROHF, as well as allowing one to manually set the orbital occupations in combination with the SAD guess. Test calculation on the quintet state of Cr(N2)6 in aug-pcseg-1:; ```; molecule {; 2 5; Cr 0.0000925386 0.0000682032 0.0019012828; N 0.0004102713 2.3625659492 0.0026269619; N 0.0005967051 3.4672101357 0.0029548744; N 2.3620320503 -0.0004101212 0.0009507667; N 3.4666734940 -0.0002636830 0.0034835308; N -0.0003928082 -2.3624420331 0.0002298447; N -0.0001812896 -3.4670841683 0.0023676850; N -2.3618731053 0.0004033492 0.0009468195; N -3.4665147528 0.0006033882 0.0034481887; N 0.0000117173 -0.0007732394 2.1429780137; N -0.0000350947 -0.0013203851 3.2475238798; N 0.0002480331 0.0009562329 -2.1392146821; N 0.0003478216 0.0015074164 -3.2437570404; }. set reference rohf; set basis aug-pcseg-1; set guess core; set scf_type direct; set df_scf_guess false; energy('scf'); ```. Results:. | Guess | num iter | final energy |; | -- | -- | -- |; | GWH | 38 | -1696.14766117804697 |; | CORE | 24 | -1696.14766109152993 |; | SAD, atomic occupations | 33 | -1696.14766127808366 |; | SAD, fractional occupations | 25 | -1696.14766099831081 |; | SAD, fractional spin-restricted occupations | 22 | -1696.14766111108497 |. Due to the high symmetry of the test case, CORE is surprisingly efficient. SAD still beats the current default, GWH, by a large margin. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess working for ROHF; - [x] SAD guess working with manually set occupations. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1456
https://github.com/psi4/psi4/pull/1456:1453,Energy Efficiency,efficient,efficient,1453,"## Description; This PR modifies the SAD guess so that it first runs a plain Fock build and diagonalizes the obtained Fock matrix. This allows the SAD guess to also work for ROHF, as well as allowing one to manually set the orbital occupations in combination with the SAD guess. Test calculation on the quintet state of Cr(N2)6 in aug-pcseg-1:; ```; molecule {; 2 5; Cr 0.0000925386 0.0000682032 0.0019012828; N 0.0004102713 2.3625659492 0.0026269619; N 0.0005967051 3.4672101357 0.0029548744; N 2.3620320503 -0.0004101212 0.0009507667; N 3.4666734940 -0.0002636830 0.0034835308; N -0.0003928082 -2.3624420331 0.0002298447; N -0.0001812896 -3.4670841683 0.0023676850; N -2.3618731053 0.0004033492 0.0009468195; N -3.4665147528 0.0006033882 0.0034481887; N 0.0000117173 -0.0007732394 2.1429780137; N -0.0000350947 -0.0013203851 3.2475238798; N 0.0002480331 0.0009562329 -2.1392146821; N 0.0003478216 0.0015074164 -3.2437570404; }. set reference rohf; set basis aug-pcseg-1; set guess core; set scf_type direct; set df_scf_guess false; energy('scf'); ```. Results:. | Guess | num iter | final energy |; | -- | -- | -- |; | GWH | 38 | -1696.14766117804697 |; | CORE | 24 | -1696.14766109152993 |; | SAD, atomic occupations | 33 | -1696.14766127808366 |; | SAD, fractional occupations | 25 | -1696.14766099831081 |; | SAD, fractional spin-restricted occupations | 22 | -1696.14766111108497 |. Due to the high symmetry of the test case, CORE is surprisingly efficient. SAD still beats the current default, GWH, by a large margin. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess working for ROHF; - [x] SAD guess working with manually set occupations. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1456
https://github.com/psi4/psi4/pull/1456:279,Testability,Test,Test,279,"## Description; This PR modifies the SAD guess so that it first runs a plain Fock build and diagonalizes the obtained Fock matrix. This allows the SAD guess to also work for ROHF, as well as allowing one to manually set the orbital occupations in combination with the SAD guess. Test calculation on the quintet state of Cr(N2)6 in aug-pcseg-1:; ```; molecule {; 2 5; Cr 0.0000925386 0.0000682032 0.0019012828; N 0.0004102713 2.3625659492 0.0026269619; N 0.0005967051 3.4672101357 0.0029548744; N 2.3620320503 -0.0004101212 0.0009507667; N 3.4666734940 -0.0002636830 0.0034835308; N -0.0003928082 -2.3624420331 0.0002298447; N -0.0001812896 -3.4670841683 0.0023676850; N -2.3618731053 0.0004033492 0.0009468195; N -3.4665147528 0.0006033882 0.0034481887; N 0.0000117173 -0.0007732394 2.1429780137; N -0.0000350947 -0.0013203851 3.2475238798; N 0.0002480331 0.0009562329 -2.1392146821; N 0.0003478216 0.0015074164 -3.2437570404; }. set reference rohf; set basis aug-pcseg-1; set guess core; set scf_type direct; set df_scf_guess false; energy('scf'); ```. Results:. | Guess | num iter | final energy |; | -- | -- | -- |; | GWH | 38 | -1696.14766117804697 |; | CORE | 24 | -1696.14766109152993 |; | SAD, atomic occupations | 33 | -1696.14766127808366 |; | SAD, fractional occupations | 25 | -1696.14766099831081 |; | SAD, fractional spin-restricted occupations | 22 | -1696.14766111108497 |. Due to the high symmetry of the test case, CORE is surprisingly efficient. SAD still beats the current default, GWH, by a large margin. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess working for ROHF; - [x] SAD guess working with manually set occupations. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1456
https://github.com/psi4/psi4/pull/1456:1421,Testability,test,test,1421,"## Description; This PR modifies the SAD guess so that it first runs a plain Fock build and diagonalizes the obtained Fock matrix. This allows the SAD guess to also work for ROHF, as well as allowing one to manually set the orbital occupations in combination with the SAD guess. Test calculation on the quintet state of Cr(N2)6 in aug-pcseg-1:; ```; molecule {; 2 5; Cr 0.0000925386 0.0000682032 0.0019012828; N 0.0004102713 2.3625659492 0.0026269619; N 0.0005967051 3.4672101357 0.0029548744; N 2.3620320503 -0.0004101212 0.0009507667; N 3.4666734940 -0.0002636830 0.0034835308; N -0.0003928082 -2.3624420331 0.0002298447; N -0.0001812896 -3.4670841683 0.0023676850; N -2.3618731053 0.0004033492 0.0009468195; N -3.4665147528 0.0006033882 0.0034481887; N 0.0000117173 -0.0007732394 2.1429780137; N -0.0000350947 -0.0013203851 3.2475238798; N 0.0002480331 0.0009562329 -2.1392146821; N 0.0003478216 0.0015074164 -3.2437570404; }. set reference rohf; set basis aug-pcseg-1; set guess core; set scf_type direct; set df_scf_guess false; energy('scf'); ```. Results:. | Guess | num iter | final energy |; | -- | -- | -- |; | GWH | 38 | -1696.14766117804697 |; | CORE | 24 | -1696.14766109152993 |; | SAD, atomic occupations | 33 | -1696.14766127808366 |; | SAD, fractional occupations | 25 | -1696.14766099831081 |; | SAD, fractional spin-restricted occupations | 22 | -1696.14766111108497 |. Due to the high symmetry of the test case, CORE is surprisingly efficient. SAD still beats the current default, GWH, by a large margin. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess working for ROHF; - [x] SAD guess working with manually set occupations. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1456
https://github.com/psi4/psi4/pull/1456:1757,Testability,Test,Tests,1757,"## Description; This PR modifies the SAD guess so that it first runs a plain Fock build and diagonalizes the obtained Fock matrix. This allows the SAD guess to also work for ROHF, as well as allowing one to manually set the orbital occupations in combination with the SAD guess. Test calculation on the quintet state of Cr(N2)6 in aug-pcseg-1:; ```; molecule {; 2 5; Cr 0.0000925386 0.0000682032 0.0019012828; N 0.0004102713 2.3625659492 0.0026269619; N 0.0005967051 3.4672101357 0.0029548744; N 2.3620320503 -0.0004101212 0.0009507667; N 3.4666734940 -0.0002636830 0.0034835308; N -0.0003928082 -2.3624420331 0.0002298447; N -0.0001812896 -3.4670841683 0.0023676850; N -2.3618731053 0.0004033492 0.0009468195; N -3.4665147528 0.0006033882 0.0034481887; N 0.0000117173 -0.0007732394 2.1429780137; N -0.0000350947 -0.0013203851 3.2475238798; N 0.0002480331 0.0009562329 -2.1392146821; N 0.0003478216 0.0015074164 -3.2437570404; }. set reference rohf; set basis aug-pcseg-1; set guess core; set scf_type direct; set df_scf_guess false; energy('scf'); ```. Results:. | Guess | num iter | final energy |; | -- | -- | -- |; | GWH | 38 | -1696.14766117804697 |; | CORE | 24 | -1696.14766109152993 |; | SAD, atomic occupations | 33 | -1696.14766127808366 |; | SAD, fractional occupations | 25 | -1696.14766099831081 |; | SAD, fractional spin-restricted occupations | 22 | -1696.14766111108497 |. Due to the high symmetry of the test case, CORE is surprisingly efficient. SAD still beats the current default, GWH, by a large margin. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess working for ROHF; - [x] SAD guess working with manually set occupations. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1456
https://github.com/psi4/psi4/pull/1456:1831,Testability,test,tests,1831,"## Description; This PR modifies the SAD guess so that it first runs a plain Fock build and diagonalizes the obtained Fock matrix. This allows the SAD guess to also work for ROHF, as well as allowing one to manually set the orbital occupations in combination with the SAD guess. Test calculation on the quintet state of Cr(N2)6 in aug-pcseg-1:; ```; molecule {; 2 5; Cr 0.0000925386 0.0000682032 0.0019012828; N 0.0004102713 2.3625659492 0.0026269619; N 0.0005967051 3.4672101357 0.0029548744; N 2.3620320503 -0.0004101212 0.0009507667; N 3.4666734940 -0.0002636830 0.0034835308; N -0.0003928082 -2.3624420331 0.0002298447; N -0.0001812896 -3.4670841683 0.0023676850; N -2.3618731053 0.0004033492 0.0009468195; N -3.4665147528 0.0006033882 0.0034481887; N 0.0000117173 -0.0007732394 2.1429780137; N -0.0000350947 -0.0013203851 3.2475238798; N 0.0002480331 0.0009562329 -2.1392146821; N 0.0003478216 0.0015074164 -3.2437570404; }. set reference rohf; set basis aug-pcseg-1; set guess core; set scf_type direct; set df_scf_guess false; energy('scf'); ```. Results:. | Guess | num iter | final energy |; | -- | -- | -- |; | GWH | 38 | -1696.14766117804697 |; | CORE | 24 | -1696.14766109152993 |; | SAD, atomic occupations | 33 | -1696.14766127808366 |; | SAD, fractional occupations | 25 | -1696.14766099831081 |; | SAD, fractional spin-restricted occupations | 22 | -1696.14766111108497 |. Due to the high symmetry of the test case, CORE is surprisingly efficient. SAD still beats the current default, GWH, by a large margin. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess working for ROHF; - [x] SAD guess working with manually set occupations. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1456
https://github.com/psi4/psi4/pull/1456:1922,Testability,test,tests,1922,"## Description; This PR modifies the SAD guess so that it first runs a plain Fock build and diagonalizes the obtained Fock matrix. This allows the SAD guess to also work for ROHF, as well as allowing one to manually set the orbital occupations in combination with the SAD guess. Test calculation on the quintet state of Cr(N2)6 in aug-pcseg-1:; ```; molecule {; 2 5; Cr 0.0000925386 0.0000682032 0.0019012828; N 0.0004102713 2.3625659492 0.0026269619; N 0.0005967051 3.4672101357 0.0029548744; N 2.3620320503 -0.0004101212 0.0009507667; N 3.4666734940 -0.0002636830 0.0034835308; N -0.0003928082 -2.3624420331 0.0002298447; N -0.0001812896 -3.4670841683 0.0023676850; N -2.3618731053 0.0004033492 0.0009468195; N -3.4665147528 0.0006033882 0.0034481887; N 0.0000117173 -0.0007732394 2.1429780137; N -0.0000350947 -0.0013203851 3.2475238798; N 0.0002480331 0.0009562329 -2.1392146821; N 0.0003478216 0.0015074164 -3.2437570404; }. set reference rohf; set basis aug-pcseg-1; set guess core; set scf_type direct; set df_scf_guess false; energy('scf'); ```. Results:. | Guess | num iter | final energy |; | -- | -- | -- |; | GWH | 38 | -1696.14766117804697 |; | CORE | 24 | -1696.14766109152993 |; | SAD, atomic occupations | 33 | -1696.14766127808366 |; | SAD, fractional occupations | 25 | -1696.14766099831081 |; | SAD, fractional spin-restricted occupations | 22 | -1696.14766111108497 |. Due to the high symmetry of the test case, CORE is surprisingly efficient. SAD still beats the current default, GWH, by a large margin. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess working for ROHF; - [x] SAD guess working with manually set occupations. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1456
https://github.com/psi4/psi4/issues/1457:255,Modifiability,variab,variables,255,"Those `Exit Status: infile ( -11 );` are segfaults (`SIGSEGV` is 11), I've pasted the backtrace here: http://paste.debian.net/1058664 The `output.dat` (`fsapt2` testcase) is here: http://paste.debian.net/1058665. Do I need to maybe setup some environment variables, e.g. for scratch space in order to run the tests?. _Originally posted by @mbanck in https://github.com/psi4/psi4/issue_comments#issuecomment-451527924_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1457
https://github.com/psi4/psi4/issues/1457:161,Testability,test,testcase,161,"Those `Exit Status: infile ( -11 );` are segfaults (`SIGSEGV` is 11), I've pasted the backtrace here: http://paste.debian.net/1058664 The `output.dat` (`fsapt2` testcase) is here: http://paste.debian.net/1058665. Do I need to maybe setup some environment variables, e.g. for scratch space in order to run the tests?. _Originally posted by @mbanck in https://github.com/psi4/psi4/issue_comments#issuecomment-451527924_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1457
https://github.com/psi4/psi4/issues/1457:309,Testability,test,tests,309,"Those `Exit Status: infile ( -11 );` are segfaults (`SIGSEGV` is 11), I've pasted the backtrace here: http://paste.debian.net/1058664 The `output.dat` (`fsapt2` testcase) is here: http://paste.debian.net/1058665. Do I need to maybe setup some environment variables, e.g. for scratch space in order to run the tests?. _Originally posted by @mbanck in https://github.com/psi4/psi4/issue_comments#issuecomment-451527924_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1457
https://github.com/psi4/psi4/pull/1458:929,Testability,Test,Tests,929,"## Description; This PR finishes the reorganization of the SAD code. Renames ```SAD_FRAC_SR_OCC``` to ```SAD_SPIN_AVERAGE```, which is also valid without fractional occupations. Fixes the guess in the presence of ghost atoms. I also turn fractional occupations and spin-averaging on by default, because; * fractional occupations are well-known to give better results than integer ones; * differences between spin-averaged SAD and atomic ground state SAD appear to be small when fractional occupations are used; * the spin-averaged code not limited to Z <= Rn. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Turn fractional averaging in SAD on by default; - [x] Turn spin-averaging in SAD on by default; - [x] SAD works in the presence of ghost atoms; - [x] SAD works in the presence of ECPs; - [x] Make SAD the default guess . ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1458
https://github.com/psi4/psi4/pull/1458:1003,Testability,test,tests,1003,"## Description; This PR finishes the reorganization of the SAD code. Renames ```SAD_FRAC_SR_OCC``` to ```SAD_SPIN_AVERAGE```, which is also valid without fractional occupations. Fixes the guess in the presence of ghost atoms. I also turn fractional occupations and spin-averaging on by default, because; * fractional occupations are well-known to give better results than integer ones; * differences between spin-averaged SAD and atomic ground state SAD appear to be small when fractional occupations are used; * the spin-averaged code not limited to Z <= Rn. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Turn fractional averaging in SAD on by default; - [x] Turn spin-averaging in SAD on by default; - [x] SAD works in the presence of ghost atoms; - [x] SAD works in the presence of ECPs; - [x] Make SAD the default guess . ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1458
https://github.com/psi4/psi4/pull/1458:1094,Testability,test,tests,1094,"## Description; This PR finishes the reorganization of the SAD code. Renames ```SAD_FRAC_SR_OCC``` to ```SAD_SPIN_AVERAGE```, which is also valid without fractional occupations. Fixes the guess in the presence of ghost atoms. I also turn fractional occupations and spin-averaging on by default, because; * fractional occupations are well-known to give better results than integer ones; * differences between spin-averaged SAD and atomic ground state SAD appear to be small when fractional occupations are used; * the spin-averaged code not limited to Z <= Rn. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Turn fractional averaging in SAD on by default; - [x] Turn spin-averaging in SAD on by default; - [x] SAD works in the presence of ghost atoms; - [x] SAD works in the presence of ECPs; - [x] Make SAD the default guess . ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1458
https://github.com/psi4/psi4/pull/1460:145,Availability,robust,robust,145,"## Description; Psi4 is currently using the RMS norm to check for wave function convergence. However, it's well known that the RMS norm isn't as robust as the absolute error in some pathological cases: even though the RMS error is small, you may still have significant gradients for a few orbitals. This PR implements the maximum absolute norm for DIIS in SCF calculations, which can be toggled by setting ```DIIS_RMS_ERROR false```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Implemented absolute error criterion for DIIS. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1460
https://github.com/psi4/psi4/pull/1460:168,Availability,error,error,168,"## Description; Psi4 is currently using the RMS norm to check for wave function convergence. However, it's well known that the RMS norm isn't as robust as the absolute error in some pathological cases: even though the RMS error is small, you may still have significant gradients for a few orbitals. This PR implements the maximum absolute norm for DIIS in SCF calculations, which can be toggled by setting ```DIIS_RMS_ERROR false```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Implemented absolute error criterion for DIIS. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1460
https://github.com/psi4/psi4/pull/1460:222,Availability,error,error,222,"## Description; Psi4 is currently using the RMS norm to check for wave function convergence. However, it's well known that the RMS norm isn't as robust as the absolute error in some pathological cases: even though the RMS error is small, you may still have significant gradients for a few orbitals. This PR implements the maximum absolute norm for DIIS in SCF calculations, which can be toggled by setting ```DIIS_RMS_ERROR false```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Implemented absolute error criterion for DIIS. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1460
https://github.com/psi4/psi4/pull/1460:553,Availability,error,error,553,"## Description; Psi4 is currently using the RMS norm to check for wave function convergence. However, it's well known that the RMS norm isn't as robust as the absolute error in some pathological cases: even though the RMS error is small, you may still have significant gradients for a few orbitals. This PR implements the maximum absolute norm for DIIS in SCF calculations, which can be toggled by setting ```DIIS_RMS_ERROR false```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Implemented absolute error criterion for DIIS. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1460
https://github.com/psi4/psi4/pull/1460:387,Deployability,toggle,toggled,387,"## Description; Psi4 is currently using the RMS norm to check for wave function convergence. However, it's well known that the RMS norm isn't as robust as the absolute error in some pathological cases: even though the RMS error is small, you may still have significant gradients for a few orbitals. This PR implements the maximum absolute norm for DIIS in SCF calculations, which can be toggled by setting ```DIIS_RMS_ERROR false```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Implemented absolute error criterion for DIIS. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1460
https://github.com/psi4/psi4/pull/1460:630,Testability,Test,Tests,630,"## Description; Psi4 is currently using the RMS norm to check for wave function convergence. However, it's well known that the RMS norm isn't as robust as the absolute error in some pathological cases: even though the RMS error is small, you may still have significant gradients for a few orbitals. This PR implements the maximum absolute norm for DIIS in SCF calculations, which can be toggled by setting ```DIIS_RMS_ERROR false```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Implemented absolute error criterion for DIIS. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1460
https://github.com/psi4/psi4/pull/1460:704,Testability,test,tests,704,"## Description; Psi4 is currently using the RMS norm to check for wave function convergence. However, it's well known that the RMS norm isn't as robust as the absolute error in some pathological cases: even though the RMS error is small, you may still have significant gradients for a few orbitals. This PR implements the maximum absolute norm for DIIS in SCF calculations, which can be toggled by setting ```DIIS_RMS_ERROR false```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Implemented absolute error criterion for DIIS. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1460
https://github.com/psi4/psi4/pull/1460:795,Testability,test,tests,795,"## Description; Psi4 is currently using the RMS norm to check for wave function convergence. However, it's well known that the RMS norm isn't as robust as the absolute error in some pathological cases: even though the RMS error is small, you may still have significant gradients for a few orbitals. This PR implements the maximum absolute norm for DIIS in SCF calculations, which can be toggled by setting ```DIIS_RMS_ERROR false```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Implemented absolute error criterion for DIIS. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1460
https://github.com/psi4/psi4/issues/1461:30,Availability,failure,failure,30,"The only remaining test suite failure now is:. ```; 22/140 Test #84: cdomp2-2 .........................***Failed 1.17 sec; 	Nuclear Repulsion Energy (a.u.)...................................PASSED; 	CD-HF Energy (a.u.)...............................................PASSED; 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 39, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/x86_64-linux-gnu/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. _Originally posted by @mbanck in https://github.com/psi4/psi4/issues/1457#issuecomment-451647367_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1461
https://github.com/psi4/psi4/issues/1461:142,Energy Efficiency,Energy,Energy,142,"The only remaining test suite failure now is:. ```; 22/140 Test #84: cdomp2-2 .........................***Failed 1.17 sec; 	Nuclear Repulsion Energy (a.u.)...................................PASSED; 	CD-HF Energy (a.u.)...............................................PASSED; 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 39, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/x86_64-linux-gnu/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. _Originally posted by @mbanck in https://github.com/psi4/psi4/issues/1457#issuecomment-451647367_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1461
https://github.com/psi4/psi4/issues/1461:205,Energy Efficiency,Energy,Energy,205,"The only remaining test suite failure now is:. ```; 22/140 Test #84: cdomp2-2 .........................***Failed 1.17 sec; 	Nuclear Repulsion Energy (a.u.)...................................PASSED; 	CD-HF Energy (a.u.)...............................................PASSED; 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 39, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/x86_64-linux-gnu/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. _Originally posted by @mbanck in https://github.com/psi4/psi4/issues/1457#issuecomment-451647367_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1461
https://github.com/psi4/psi4/issues/1461:288,Energy Efficiency,Energy,Energy,288,"The only remaining test suite failure now is:. ```; 22/140 Test #84: cdomp2-2 .........................***Failed 1.17 sec; 	Nuclear Repulsion Energy (a.u.)...................................PASSED; 	CD-HF Energy (a.u.)...............................................PASSED; 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 39, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/x86_64-linux-gnu/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. _Originally posted by @mbanck in https://github.com/psi4/psi4/issues/1457#issuecomment-451647367_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1461
https://github.com/psi4/psi4/issues/1461:736,Energy Efficiency,Energy,Energy,736,"The only remaining test suite failure now is:. ```; 22/140 Test #84: cdomp2-2 .........................***Failed 1.17 sec; 	Nuclear Repulsion Energy (a.u.)...................................PASSED; 	CD-HF Energy (a.u.)...............................................PASSED; 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 39, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/x86_64-linux-gnu/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. _Originally posted by @mbanck in https://github.com/psi4/psi4/issues/1457#issuecomment-451647367_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1461
https://github.com/psi4/psi4/issues/1461:690,Integrability,message,message,690,"The only remaining test suite failure now is:. ```; 22/140 Test #84: cdomp2-2 .........................***Failed 1.17 sec; 	Nuclear Repulsion Energy (a.u.)...................................PASSED; 	CD-HF Energy (a.u.)...............................................PASSED; 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 39, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/x86_64-linux-gnu/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. _Originally posted by @mbanck in https://github.com/psi4/psi4/issues/1457#issuecomment-451647367_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1461
https://github.com/psi4/psi4/issues/1461:19,Testability,test,test,19,"The only remaining test suite failure now is:. ```; 22/140 Test #84: cdomp2-2 .........................***Failed 1.17 sec; 	Nuclear Repulsion Energy (a.u.)...................................PASSED; 	CD-HF Energy (a.u.)...............................................PASSED; 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 39, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/x86_64-linux-gnu/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. _Originally posted by @mbanck in https://github.com/psi4/psi4/issues/1457#issuecomment-451647367_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1461
https://github.com/psi4/psi4/issues/1461:59,Testability,Test,Test,59,"The only remaining test suite failure now is:. ```; 22/140 Test #84: cdomp2-2 .........................***Failed 1.17 sec; 	Nuclear Repulsion Energy (a.u.)...................................PASSED; 	CD-HF Energy (a.u.)...............................................PASSED; 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 39, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/x86_64-linux-gnu/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. _Originally posted by @mbanck in https://github.com/psi4/psi4/issues/1457#issuecomment-451647367_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1461
https://github.com/psi4/psi4/issues/1461:670,Testability,Test,TestComparisonError,670,"The only remaining test suite failure now is:. ```; 22/140 Test #84: cdomp2-2 .........................***Failed 1.17 sec; 	Nuclear Repulsion Energy (a.u.)...................................PASSED; 	CD-HF Energy (a.u.)...............................................PASSED; 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 39, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/x86_64-linux-gnu/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. _Originally posted by @mbanck in https://github.com/psi4/psi4/issues/1457#issuecomment-451647367_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1461
https://github.com/psi4/psi4/issues/1461:700,Testability,Test,TestComparisonError,700,"The only remaining test suite failure now is:. ```; 22/140 Test #84: cdomp2-2 .........................***Failed 1.17 sec; 	Nuclear Repulsion Energy (a.u.)...................................PASSED; 	CD-HF Energy (a.u.)...............................................PASSED; 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 39, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/x86_64-linux-gnu/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. _Originally posted by @mbanck in https://github.com/psi4/psi4/issues/1457#issuecomment-451647367_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1461
https://github.com/psi4/psi4/issues/1462:46,Availability,failure,failures,46,"Psi4-1.2.1 on Debian shows several test suite failures on non-Intel hardware in the SAPT code that go like this:. ```; 90/140 Test #315: sapt1 ............................***Failed 7.40 sec; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/procrouting/proc.py"", line 3438, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError: ; Fatal Error: Laplace Quadrature requested for (E_HUMO - E_LOMO)/(E_LUMO-E_HOMO) > 7.0 * 10^12, quadratures are not designed for this range.; Error occurred in file: /<<PKGBUILDDIR>>/psi4/src/psi4/lib3index/denominator.cc on line: 609; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```; See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=s390x&ver=1%3A1.2.1-2&stamp=1546705364&raw=0 for the full log. Failing test cases from `quicktests` are `sapt1`, `sapt-dft1`, `tu5-sapt` and `pywrap-db1`, failing architectures are (so far) `s390x` and `powerpc`. Anything I can do to investigate?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1462
https://github.com/psi4/psi4/issues/1462:744,Availability,Error,Error,744,"Psi4-1.2.1 on Debian shows several test suite failures on non-Intel hardware in the SAPT code that go like this:. ```; 90/140 Test #315: sapt1 ............................***Failed 7.40 sec; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/procrouting/proc.py"", line 3438, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError: ; Fatal Error: Laplace Quadrature requested for (E_HUMO - E_LOMO)/(E_LUMO-E_HOMO) > 7.0 * 10^12, quadratures are not designed for this range.; Error occurred in file: /<<PKGBUILDDIR>>/psi4/src/psi4/lib3index/denominator.cc on line: 609; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```; See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=s390x&ver=1%3A1.2.1-2&stamp=1546705364&raw=0 for the full log. Failing test cases from `quicktests` are `sapt1`, `sapt-dft1`, `tu5-sapt` and `pywrap-db1`, failing architectures are (so far) `s390x` and `powerpc`. Anything I can do to investigate?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1462
https://github.com/psi4/psi4/issues/1462:879,Availability,Error,Error,879,"Psi4-1.2.1 on Debian shows several test suite failures on non-Intel hardware in the SAPT code that go like this:. ```; 90/140 Test #315: sapt1 ............................***Failed 7.40 sec; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/procrouting/proc.py"", line 3438, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError: ; Fatal Error: Laplace Quadrature requested for (E_HUMO - E_LOMO)/(E_LUMO-E_HOMO) > 7.0 * 10^12, quadratures are not designed for this range.; Error occurred in file: /<<PKGBUILDDIR>>/psi4/src/psi4/lib3index/denominator.cc on line: 609; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```; See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=s390x&ver=1%3A1.2.1-2&stamp=1546705364&raw=0 for the full log. Failing test cases from `quicktests` are `sapt1`, `sapt-dft1`, `tu5-sapt` and `pywrap-db1`, failing architectures are (so far) `s390x` and `powerpc`. Anything I can do to investigate?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1462
https://github.com/psi4/psi4/issues/1462:456,Energy Efficiency,energy,energy,456,"Psi4-1.2.1 on Debian shows several test suite failures on non-Intel hardware in the SAPT code that go like this:. ```; 90/140 Test #315: sapt1 ............................***Failed 7.40 sec; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/procrouting/proc.py"", line 3438, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError: ; Fatal Error: Laplace Quadrature requested for (E_HUMO - E_LOMO)/(E_LUMO-E_HOMO) > 7.0 * 10^12, quadratures are not designed for this range.; Error occurred in file: /<<PKGBUILDDIR>>/psi4/src/psi4/lib3index/denominator.cc on line: 609; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```; See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=s390x&ver=1%3A1.2.1-2&stamp=1546705364&raw=0 for the full log. Failing test cases from `quicktests` are `sapt1`, `sapt-dft1`, `tu5-sapt` and `pywrap-db1`, failing architectures are (so far) `s390x` and `powerpc`. Anything I can do to investigate?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1462
https://github.com/psi4/psi4/issues/1462:482,Energy Efficiency,energy,energy,482,"Psi4-1.2.1 on Debian shows several test suite failures on non-Intel hardware in the SAPT code that go like this:. ```; 90/140 Test #315: sapt1 ............................***Failed 7.40 sec; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/procrouting/proc.py"", line 3438, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError: ; Fatal Error: Laplace Quadrature requested for (E_HUMO - E_LOMO)/(E_LUMO-E_HOMO) > 7.0 * 10^12, quadratures are not designed for this range.; Error occurred in file: /<<PKGBUILDDIR>>/psi4/src/psi4/lib3index/denominator.cc on line: 609; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```; See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=s390x&ver=1%3A1.2.1-2&stamp=1546705364&raw=0 for the full log. Failing test cases from `quicktests` are `sapt1`, `sapt-dft1`, `tu5-sapt` and `pywrap-db1`, failing architectures are (so far) `s390x` and `powerpc`. Anything I can do to investigate?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1462
https://github.com/psi4/psi4/issues/1462:1493,Energy Efficiency,power,powerpc,1493,"Psi4-1.2.1 on Debian shows several test suite failures on non-Intel hardware in the SAPT code that go like this:. ```; 90/140 Test #315: sapt1 ............................***Failed 7.40 sec; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/procrouting/proc.py"", line 3438, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError: ; Fatal Error: Laplace Quadrature requested for (E_HUMO - E_LOMO)/(E_LUMO-E_HOMO) > 7.0 * 10^12, quadratures are not designed for this range.; Error occurred in file: /<<PKGBUILDDIR>>/psi4/src/psi4/lib3index/denominator.cc on line: 609; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```; See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=s390x&ver=1%3A1.2.1-2&stamp=1546705364&raw=0 for the full log. Failing test cases from `quicktests` are `sapt1`, `sapt-dft1`, `tu5-sapt` and `pywrap-db1`, failing architectures are (so far) `s390x` and `powerpc`. Anything I can do to investigate?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1462
https://github.com/psi4/psi4/issues/1462:35,Testability,test,test,35,"Psi4-1.2.1 on Debian shows several test suite failures on non-Intel hardware in the SAPT code that go like this:. ```; 90/140 Test #315: sapt1 ............................***Failed 7.40 sec; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/procrouting/proc.py"", line 3438, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError: ; Fatal Error: Laplace Quadrature requested for (E_HUMO - E_LOMO)/(E_LUMO-E_HOMO) > 7.0 * 10^12, quadratures are not designed for this range.; Error occurred in file: /<<PKGBUILDDIR>>/psi4/src/psi4/lib3index/denominator.cc on line: 609; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```; See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=s390x&ver=1%3A1.2.1-2&stamp=1546705364&raw=0 for the full log. Failing test cases from `quicktests` are `sapt1`, `sapt-dft1`, `tu5-sapt` and `pywrap-db1`, failing architectures are (so far) `s390x` and `powerpc`. Anything I can do to investigate?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1462
https://github.com/psi4/psi4/issues/1462:126,Testability,Test,Test,126,"Psi4-1.2.1 on Debian shows several test suite failures on non-Intel hardware in the SAPT code that go like this:. ```; 90/140 Test #315: sapt1 ............................***Failed 7.40 sec; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/procrouting/proc.py"", line 3438, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError: ; Fatal Error: Laplace Quadrature requested for (E_HUMO - E_LOMO)/(E_LUMO-E_HOMO) > 7.0 * 10^12, quadratures are not designed for this range.; Error occurred in file: /<<PKGBUILDDIR>>/psi4/src/psi4/lib3index/denominator.cc on line: 609; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```; See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=s390x&ver=1%3A1.2.1-2&stamp=1546705364&raw=0 for the full log. Failing test cases from `quicktests` are `sapt1`, `sapt-dft1`, `tu5-sapt` and `pywrap-db1`, failing architectures are (so far) `s390x` and `powerpc`. Anything I can do to investigate?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1462
https://github.com/psi4/psi4/issues/1462:1348,Testability,log,log,1348,"Psi4-1.2.1 on Debian shows several test suite failures on non-Intel hardware in the SAPT code that go like this:. ```; 90/140 Test #315: sapt1 ............................***Failed 7.40 sec; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/procrouting/proc.py"", line 3438, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError: ; Fatal Error: Laplace Quadrature requested for (E_HUMO - E_LOMO)/(E_LUMO-E_HOMO) > 7.0 * 10^12, quadratures are not designed for this range.; Error occurred in file: /<<PKGBUILDDIR>>/psi4/src/psi4/lib3index/denominator.cc on line: 609; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```; See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=s390x&ver=1%3A1.2.1-2&stamp=1546705364&raw=0 for the full log. Failing test cases from `quicktests` are `sapt1`, `sapt-dft1`, `tu5-sapt` and `pywrap-db1`, failing architectures are (so far) `s390x` and `powerpc`. Anything I can do to investigate?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1462
https://github.com/psi4/psi4/issues/1462:1361,Testability,test,test,1361,"Psi4-1.2.1 on Debian shows several test suite failures on non-Intel hardware in the SAPT code that go like this:. ```; 90/140 Test #315: sapt1 ............................***Failed 7.40 sec; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/procrouting/proc.py"", line 3438, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError: ; Fatal Error: Laplace Quadrature requested for (E_HUMO - E_LOMO)/(E_LUMO-E_HOMO) > 7.0 * 10^12, quadratures are not designed for this range.; Error occurred in file: /<<PKGBUILDDIR>>/psi4/src/psi4/lib3index/denominator.cc on line: 609; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```; See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=s390x&ver=1%3A1.2.1-2&stamp=1546705364&raw=0 for the full log. Failing test cases from `quicktests` are `sapt1`, `sapt-dft1`, `tu5-sapt` and `pywrap-db1`, failing architectures are (so far) `s390x` and `powerpc`. Anything I can do to investigate?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1462
https://github.com/psi4/psi4/pull/1464:102,Deployability,install,installing,102,"## Description; Solve #1462 by creating both big-endian and little-endian quadrature data files, then installing the proper one via cmake. Will probably fail cross-compile, but I don't know of such cases. ## Checklist; - [ ] no big endian machine to test on. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1464
https://github.com/psi4/psi4/pull/1464:250,Testability,test,test,250,"## Description; Solve #1462 by creating both big-endian and little-endian quadrature data files, then installing the proper one via cmake. Will probably fail cross-compile, but I don't know of such cases. ## Checklist; - [ ] no big endian machine to test on. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1464
https://github.com/psi4/psi4/issues/1465:41,Availability,error,errors,41,"On some architectures, the testsuite has errors like:. ```; 52/140 Test #191: fcidump ..........................***Failed 0.47 sec; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 32, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/p4util/fcidump.py"", line 339, in compare_fcidumps; ref_energies = _energies_from_fcidump(ref_intdump); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/p4util/fcidump.py"", line 363, in _energies_from_fcidump; intdump['uhf']); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/p4util/fcidump.py"", line 379, in _scf_energy; exchange = np.einsum('ijij->', ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]); File ""/usr/lib/python3/dist-packages/numpy/core/einsumfunc.py"", line 1346, in einsum; return c_einsum(*operands, **kwargs). ValueError: dimensions in operand 0 for collapsing index 'þ' don't match (-168832168 != 5); Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. These are the lines, it is failing during the `exchange`:. ```; coulomb = np.einsum('iijj->', ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]); exchange = np.einsum('ijij->', ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]); ```. Now when I duplicate the `coulomb` line in place of the `exchange` line, it runs fine. Also, if I dump out something between the two, e.g. `print(occ_sl)`, it runs fine, so there is probably some subtle issue in NumPy's `einsum`. I was not able to produce a minimal test-case, mostly because my Python/NumPy-fu is not strong enough to figure out what `ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]` really is. Any idea what it could be and whether there's a robust was (some barrier?) to get around it?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1465
https://github.com/psi4/psi4/issues/1465:1798,Availability,robust,robust,1798,"On some architectures, the testsuite has errors like:. ```; 52/140 Test #191: fcidump ..........................***Failed 0.47 sec; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 32, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/p4util/fcidump.py"", line 339, in compare_fcidumps; ref_energies = _energies_from_fcidump(ref_intdump); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/p4util/fcidump.py"", line 363, in _energies_from_fcidump; intdump['uhf']); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/p4util/fcidump.py"", line 379, in _scf_energy; exchange = np.einsum('ijij->', ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]); File ""/usr/lib/python3/dist-packages/numpy/core/einsumfunc.py"", line 1346, in einsum; return c_einsum(*operands, **kwargs). ValueError: dimensions in operand 0 for collapsing index 'þ' don't match (-168832168 != 5); Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. These are the lines, it is failing during the `exchange`:. ```; coulomb = np.einsum('iijj->', ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]); exchange = np.einsum('ijij->', ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]); ```. Now when I duplicate the `coulomb` line in place of the `exchange` line, it runs fine. Also, if I dump out something between the two, e.g. `print(occ_sl)`, it runs fine, so there is probably some subtle issue in NumPy's `einsum`. I was not able to produce a minimal test-case, mostly because my Python/NumPy-fu is not strong enough to figure out what `ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]` really is. Any idea what it could be and whether there's a robust was (some barrier?) to get around it?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1465
https://github.com/psi4/psi4/issues/1465:27,Testability,test,testsuite,27,"On some architectures, the testsuite has errors like:. ```; 52/140 Test #191: fcidump ..........................***Failed 0.47 sec; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 32, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/p4util/fcidump.py"", line 339, in compare_fcidumps; ref_energies = _energies_from_fcidump(ref_intdump); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/p4util/fcidump.py"", line 363, in _energies_from_fcidump; intdump['uhf']); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/p4util/fcidump.py"", line 379, in _scf_energy; exchange = np.einsum('ijij->', ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]); File ""/usr/lib/python3/dist-packages/numpy/core/einsumfunc.py"", line 1346, in einsum; return c_einsum(*operands, **kwargs). ValueError: dimensions in operand 0 for collapsing index 'þ' don't match (-168832168 != 5); Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. These are the lines, it is failing during the `exchange`:. ```; coulomb = np.einsum('iijj->', ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]); exchange = np.einsum('ijij->', ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]); ```. Now when I duplicate the `coulomb` line in place of the `exchange` line, it runs fine. Also, if I dump out something between the two, e.g. `print(occ_sl)`, it runs fine, so there is probably some subtle issue in NumPy's `einsum`. I was not able to produce a minimal test-case, mostly because my Python/NumPy-fu is not strong enough to figure out what `ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]` really is. Any idea what it could be and whether there's a robust was (some barrier?) to get around it?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1465
https://github.com/psi4/psi4/issues/1465:67,Testability,Test,Test,67,"On some architectures, the testsuite has errors like:. ```; 52/140 Test #191: fcidump ..........................***Failed 0.47 sec; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 32, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/p4util/fcidump.py"", line 339, in compare_fcidumps; ref_energies = _energies_from_fcidump(ref_intdump); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/p4util/fcidump.py"", line 363, in _energies_from_fcidump; intdump['uhf']); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/p4util/fcidump.py"", line 379, in _scf_energy; exchange = np.einsum('ijij->', ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]); File ""/usr/lib/python3/dist-packages/numpy/core/einsumfunc.py"", line 1346, in einsum; return c_einsum(*operands, **kwargs). ValueError: dimensions in operand 0 for collapsing index 'þ' don't match (-168832168 != 5); Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. These are the lines, it is failing during the `exchange`:. ```; coulomb = np.einsum('iijj->', ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]); exchange = np.einsum('ijij->', ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]); ```. Now when I duplicate the `coulomb` line in place of the `exchange` line, it runs fine. Also, if I dump out something between the two, e.g. `print(occ_sl)`, it runs fine, so there is probably some subtle issue in NumPy's `einsum`. I was not able to produce a minimal test-case, mostly because my Python/NumPy-fu is not strong enough to figure out what `ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]` really is. Any idea what it could be and whether there's a robust was (some barrier?) to get around it?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1465
https://github.com/psi4/psi4/issues/1465:1608,Testability,test,test-case,1608,"On some architectures, the testsuite has errors like:. ```; 52/140 Test #191: fcidump ..........................***Failed 0.47 sec; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 32, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/p4util/fcidump.py"", line 339, in compare_fcidumps; ref_energies = _energies_from_fcidump(ref_intdump); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/p4util/fcidump.py"", line 363, in _energies_from_fcidump; intdump['uhf']); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/p4util/fcidump.py"", line 379, in _scf_energy; exchange = np.einsum('ijij->', ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]); File ""/usr/lib/python3/dist-packages/numpy/core/einsumfunc.py"", line 1346, in einsum; return c_einsum(*operands, **kwargs). ValueError: dimensions in operand 0 for collapsing index 'þ' don't match (-168832168 != 5); Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. These are the lines, it is failing during the `exchange`:. ```; coulomb = np.einsum('iijj->', ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]); exchange = np.einsum('ijij->', ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]); ```. Now when I duplicate the `coulomb` line in place of the `exchange` line, it runs fine. Also, if I dump out something between the two, e.g. `print(occ_sl)`, it runs fine, so there is probably some subtle issue in NumPy's `einsum`. I was not able to produce a minimal test-case, mostly because my Python/NumPy-fu is not strong enough to figure out what `ERI[np.ix_(occ_sl, occ_sl, occ_sl, occ_sl)]` really is. Any idea what it could be and whether there's a robust was (some barrier?) to get around it?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1465
https://github.com/psi4/psi4/issues/1467:55,Testability,test,test,55,"As discussed in #1458, the ```test_hessian_vs_cfour``` test in ```psi4/tests/test_vibanalysis.py``` appears to be non-deterministic. The problems appear to occur with the degenerate mode comparisons. This should be investigated in more detail. I find it likely that the problem is just that the test code doesn't fully handle the degenerate eigenmode comparison, since the eigenvectors of two different calculations can be both rotated within themselves, ```|x> = U_{xy} |y>```, as well as individually inverted, ```|x> -> -|x>``` without affecting the eigensystem. The other possibility is that the Hessian itself has changed; the raw values of the Hessian elements should also be included in the comparison.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1467
https://github.com/psi4/psi4/issues/1467:71,Testability,test,tests,71,"As discussed in #1458, the ```test_hessian_vs_cfour``` test in ```psi4/tests/test_vibanalysis.py``` appears to be non-deterministic. The problems appear to occur with the degenerate mode comparisons. This should be investigated in more detail. I find it likely that the problem is just that the test code doesn't fully handle the degenerate eigenmode comparison, since the eigenvectors of two different calculations can be both rotated within themselves, ```|x> = U_{xy} |y>```, as well as individually inverted, ```|x> -> -|x>``` without affecting the eigensystem. The other possibility is that the Hessian itself has changed; the raw values of the Hessian elements should also be included in the comparison.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1467
https://github.com/psi4/psi4/issues/1467:295,Testability,test,test,295,"As discussed in #1458, the ```test_hessian_vs_cfour``` test in ```psi4/tests/test_vibanalysis.py``` appears to be non-deterministic. The problems appear to occur with the degenerate mode comparisons. This should be investigated in more detail. I find it likely that the problem is just that the test code doesn't fully handle the degenerate eigenmode comparison, since the eigenvectors of two different calculations can be both rotated within themselves, ```|x> = U_{xy} |y>```, as well as individually inverted, ```|x> -> -|x>``` without affecting the eigensystem. The other possibility is that the Hessian itself has changed; the raw values of the Hessian elements should also be included in the comparison.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1467
https://github.com/psi4/psi4/pull/1468:73,Energy Efficiency,Energy,Energy,73,"## Description; SCF convergence has only been reported with the message ""Energy converged."" which is missing out on the more important part, i.e. the convergence of the wave function. For pedagogical reasons, this PR changes the printout so that also the wave function is mentioned in the message. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1468
https://github.com/psi4/psi4/pull/1468:64,Integrability,message,message,64,"## Description; SCF convergence has only been reported with the message ""Energy converged."" which is missing out on the more important part, i.e. the convergence of the wave function. For pedagogical reasons, this PR changes the printout so that also the wave function is mentioned in the message. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1468
https://github.com/psi4/psi4/pull/1468:289,Integrability,message,message,289,"## Description; SCF convergence has only been reported with the message ""Energy converged."" which is missing out on the more important part, i.e. the convergence of the wave function. For pedagogical reasons, this PR changes the printout so that also the wave function is mentioned in the message. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1468
https://github.com/psi4/psi4/pull/1468:473,Testability,Test,Tests,473,"## Description; SCF convergence has only been reported with the message ""Energy converged."" which is missing out on the more important part, i.e. the convergence of the wave function. For pedagogical reasons, this PR changes the printout so that also the wave function is mentioned in the message. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1468
https://github.com/psi4/psi4/pull/1468:547,Testability,test,tests,547,"## Description; SCF convergence has only been reported with the message ""Energy converged."" which is missing out on the more important part, i.e. the convergence of the wave function. For pedagogical reasons, this PR changes the printout so that also the wave function is mentioned in the message. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1468
https://github.com/psi4/psi4/pull/1468:638,Testability,test,tests,638,"## Description; SCF convergence has only been reported with the message ""Energy converged."" which is missing out on the more important part, i.e. the convergence of the wave function. For pedagogical reasons, this PR changes the printout so that also the wave function is mentioned in the message. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1468
https://github.com/psi4/psi4/pull/1469:93,Security,access,access,93,"## Description; This is part of *Psi4* porting to Windows (#933). There is an invalid memory access at line 209, because `Ca_->colspi()[h]` is smaller than `nalphapi_[h]`:; https://github.com/psi4/psi4/blob/ba98fb72ab73350a613ae96b56d1d4c6074c2ae9/psi4/src/psi4/libtrans/integraltransform_sort_so_tei.cc#L201-L217. I have added an asset to prove that. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Prove a bug in `psi::IntegralTransform::presort_so_tei`; - [x] Fix the bug in `psi::IntegralTransform::presort_so_tei`. ## Questions; - [x] Who knows how to fix this? -- https://github.com/raimis/psi4/pull/4. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1469
https://github.com/psi4/psi4/pull/1469:681,Testability,Test,Tests,681,"## Description; This is part of *Psi4* porting to Windows (#933). There is an invalid memory access at line 209, because `Ca_->colspi()[h]` is smaller than `nalphapi_[h]`:; https://github.com/psi4/psi4/blob/ba98fb72ab73350a613ae96b56d1d4c6074c2ae9/psi4/src/psi4/libtrans/integraltransform_sort_so_tei.cc#L201-L217. I have added an asset to prove that. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Prove a bug in `psi::IntegralTransform::presort_so_tei`; - [x] Fix the bug in `psi::IntegralTransform::presort_so_tei`. ## Questions; - [x] Who knows how to fix this? -- https://github.com/raimis/psi4/pull/4. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1469
https://github.com/psi4/psi4/pull/1469:757,Testability,test,tests,757,"## Description; This is part of *Psi4* porting to Windows (#933). There is an invalid memory access at line 209, because `Ca_->colspi()[h]` is smaller than `nalphapi_[h]`:; https://github.com/psi4/psi4/blob/ba98fb72ab73350a613ae96b56d1d4c6074c2ae9/psi4/src/psi4/libtrans/integraltransform_sort_so_tei.cc#L201-L217. I have added an asset to prove that. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Prove a bug in `psi::IntegralTransform::presort_so_tei`; - [x] Fix the bug in `psi::IntegralTransform::presort_so_tei`. ## Questions; - [x] Who knows how to fix this? -- https://github.com/raimis/psi4/pull/4. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1469
https://github.com/psi4/psi4/pull/1469:848,Testability,test,tests,848,"## Description; This is part of *Psi4* porting to Windows (#933). There is an invalid memory access at line 209, because `Ca_->colspi()[h]` is smaller than `nalphapi_[h]`:; https://github.com/psi4/psi4/blob/ba98fb72ab73350a613ae96b56d1d4c6074c2ae9/psi4/src/psi4/libtrans/integraltransform_sort_so_tei.cc#L201-L217. I have added an asset to prove that. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Prove a bug in `psi::IntegralTransform::presort_so_tei`; - [x] Fix the bug in `psi::IntegralTransform::presort_so_tei`. ## Questions; - [x] Who knows how to fix this? -- https://github.com/raimis/psi4/pull/4. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1469
https://github.com/psi4/psi4/pull/1470:160,Deployability,patch,patch,160,"## Description; Stops overwriting DFT energy by D3 energy only. I am not sure how to test for this, as the gradients as well as geometries with and without the patch agree to 8 DP's. I only noticed it when using the `vibrational_analysis(wfn)`, as there the current total energy plays a role... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Resolves #1356. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1470
https://github.com/psi4/psi4/pull/1470:38,Energy Efficiency,energy,energy,38,"## Description; Stops overwriting DFT energy by D3 energy only. I am not sure how to test for this, as the gradients as well as geometries with and without the patch agree to 8 DP's. I only noticed it when using the `vibrational_analysis(wfn)`, as there the current total energy plays a role... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Resolves #1356. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1470
https://github.com/psi4/psi4/pull/1470:51,Energy Efficiency,energy,energy,51,"## Description; Stops overwriting DFT energy by D3 energy only. I am not sure how to test for this, as the gradients as well as geometries with and without the patch agree to 8 DP's. I only noticed it when using the `vibrational_analysis(wfn)`, as there the current total energy plays a role... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Resolves #1356. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1470
https://github.com/psi4/psi4/pull/1470:272,Energy Efficiency,energy,energy,272,"## Description; Stops overwriting DFT energy by D3 energy only. I am not sure how to test for this, as the gradients as well as geometries with and without the patch agree to 8 DP's. I only noticed it when using the `vibrational_analysis(wfn)`, as there the current total energy plays a role... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Resolves #1356. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1470
https://github.com/psi4/psi4/pull/1470:85,Testability,test,test,85,"## Description; Stops overwriting DFT energy by D3 energy only. I am not sure how to test for this, as the gradients as well as geometries with and without the patch agree to 8 DP's. I only noticed it when using the `vibrational_analysis(wfn)`, as there the current total energy plays a role... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Resolves #1356. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1470
https://github.com/psi4/psi4/pull/1470:429,Testability,Test,Tests,429,"## Description; Stops overwriting DFT energy by D3 energy only. I am not sure how to test for this, as the gradients as well as geometries with and without the patch agree to 8 DP's. I only noticed it when using the `vibrational_analysis(wfn)`, as there the current total energy plays a role... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Resolves #1356. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1470
https://github.com/psi4/psi4/pull/1470:503,Testability,test,tests,503,"## Description; Stops overwriting DFT energy by D3 energy only. I am not sure how to test for this, as the gradients as well as geometries with and without the patch agree to 8 DP's. I only noticed it when using the `vibrational_analysis(wfn)`, as there the current total energy plays a role... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Resolves #1356. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1470
https://github.com/psi4/psi4/pull/1470:594,Testability,test,tests,594,"## Description; Stops overwriting DFT energy by D3 energy only. I am not sure how to test for this, as the gradients as well as geometries with and without the patch agree to 8 DP's. I only noticed it when using the `vibrational_analysis(wfn)`, as there the current total energy plays a role... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Resolves #1356. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1470
https://github.com/psi4/psi4/issues/1471:659,Energy Efficiency,energy,energy,659,"Issue carried over from [forums](http://forum.psicode.org/t/cant-run-relativistic-calcs-with-decontracted-basis-sets/1177). If the input basis set is decontracted, Psi will fail to recognize the basis set when trying to use a decontracted version of the input basis for relativistic computations. The following input file will fail due to the commented out line. ```; molecule {; 0 1; CL 0.000000000000 0.000000000000 -0.035925275852; H 0.000000000000 0.000000000000 1.246511684916; symmetry c1; }. basis {. set {; basis cc-pvdz-decon; #basis_relativistic cc-pvdz-decon; df_basis_scf cc-pvdz-jkfit; reference rhf ; e_convergence 1.e-10; relativistic x2c ; }. energy('scf'); ```. The bug itself is probably an easy fix once you know what information is not being handled/passed correctly in the basis set machinery. The hard part is knowing that machinery well enough to figure out where. Reporter also noted that this is a blind spot in the test suite, so additional tests here are welcome.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1471
https://github.com/psi4/psi4/issues/1471:941,Testability,test,test,941,"Issue carried over from [forums](http://forum.psicode.org/t/cant-run-relativistic-calcs-with-decontracted-basis-sets/1177). If the input basis set is decontracted, Psi will fail to recognize the basis set when trying to use a decontracted version of the input basis for relativistic computations. The following input file will fail due to the commented out line. ```; molecule {; 0 1; CL 0.000000000000 0.000000000000 -0.035925275852; H 0.000000000000 0.000000000000 1.246511684916; symmetry c1; }. basis {. set {; basis cc-pvdz-decon; #basis_relativistic cc-pvdz-decon; df_basis_scf cc-pvdz-jkfit; reference rhf ; e_convergence 1.e-10; relativistic x2c ; }. energy('scf'); ```. The bug itself is probably an easy fix once you know what information is not being handled/passed correctly in the basis set machinery. The hard part is knowing that machinery well enough to figure out where. Reporter also noted that this is a blind spot in the test suite, so additional tests here are welcome.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1471
https://github.com/psi4/psi4/issues/1471:967,Testability,test,tests,967,"Issue carried over from [forums](http://forum.psicode.org/t/cant-run-relativistic-calcs-with-decontracted-basis-sets/1177). If the input basis set is decontracted, Psi will fail to recognize the basis set when trying to use a decontracted version of the input basis for relativistic computations. The following input file will fail due to the commented out line. ```; molecule {; 0 1; CL 0.000000000000 0.000000000000 -0.035925275852; H 0.000000000000 0.000000000000 1.246511684916; symmetry c1; }. basis {. set {; basis cc-pvdz-decon; #basis_relativistic cc-pvdz-decon; df_basis_scf cc-pvdz-jkfit; reference rhf ; e_convergence 1.e-10; relativistic x2c ; }. energy('scf'); ```. The bug itself is probably an easy fix once you know what information is not being handled/passed correctly in the basis set machinery. The hard part is knowing that machinery well enough to figure out where. Reporter also noted that this is a blind spot in the test suite, so additional tests here are welcome.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1471
https://github.com/psi4/psi4/pull/1472:441,Testability,Test,Tests,441,"## Description; The value for ```DF_FITTING_CONDITION``` used by the code was changed in #1446, which resulted in a change of numerical values. This PR restores the previously used threshold. See discussion in #1350 and on Slack. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Restores numerical agreement with previous revisions of Psi4. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1472
https://github.com/psi4/psi4/pull/1472:515,Testability,test,tests,515,"## Description; The value for ```DF_FITTING_CONDITION``` used by the code was changed in #1446, which resulted in a change of numerical values. This PR restores the previously used threshold. See discussion in #1350 and on Slack. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Restores numerical agreement with previous revisions of Psi4. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1472
https://github.com/psi4/psi4/pull/1472:606,Testability,test,tests,606,"## Description; The value for ```DF_FITTING_CONDITION``` used by the code was changed in #1446, which resulted in a change of numerical values. This PR restores the previously used threshold. See discussion in #1350 and on Slack. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Restores numerical agreement with previous revisions of Psi4. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1472
https://github.com/psi4/psi4/issues/1473:389,Energy Efficiency,energy,energy,389,"The atomic UHF solver code doesn't include ECP elements in its core Hamiltonian operator at present. Likewise, ECPs aren't taken into account in the spin state determination for the SAD state. (This is not a problem for #1458 though since it switches the default to spin-averaged densities.). For instance,; ```; molecule {; 0 1; Xe; }. set guess sad; set basis def2-svp; set sad_print 2; energy('scf'); ```. gives; ```; @Atomic UHF Final Energy for atom XE: -2507.62764642306365; Finished UHF Computation!. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: 285.32485664068048 2.85325e+02 0.00000e+00 ; @DF-RHF iter 1: -189.84500624892323 -4.75170e+02 8.80223e-01 DIIS; @DF-RHF iter 2: -290.52105276490687 -1.00676e+02 4.66004e-01 DIIS; @DF-RHF iter 3: -328.09971971455047 -3.75787e+01 4.86655e-02 DIIS; @DF-RHF iter 4: -328.29180563637317 -1.92086e-01 6.06357e-03 DIIS; @DF-RHF iter 5: -328.29809735789945 -6.29172e-03 1.54650e-03 DIIS; @DF-RHF iter 6: -328.29834344170320 -2.46084e-04 2.46581e-04 DIIS; @DF-RHF iter 7: -328.29835685761799 -1.34159e-05 4.28492e-05 DIIS; @DF-RHF iter 8: -328.29835732243424 -4.64816e-07 4.48232e-06 DIIS; @DF-RHF iter 9: -328.29835733488505 -1.24508e-08 4.61031e-07 DIIS; Energy converged.; ```. so it's only a small 2200 Hartree difference between the calculations :tongue:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1473
https://github.com/psi4/psi4/issues/1473:439,Energy Efficiency,Energy,Energy,439,"The atomic UHF solver code doesn't include ECP elements in its core Hamiltonian operator at present. Likewise, ECPs aren't taken into account in the spin state determination for the SAD state. (This is not a problem for #1458 though since it switches the default to spin-averaged densities.). For instance,; ```; molecule {; 0 1; Xe; }. set guess sad; set basis def2-svp; set sad_print 2; energy('scf'); ```. gives; ```; @Atomic UHF Final Energy for atom XE: -2507.62764642306365; Finished UHF Computation!. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: 285.32485664068048 2.85325e+02 0.00000e+00 ; @DF-RHF iter 1: -189.84500624892323 -4.75170e+02 8.80223e-01 DIIS; @DF-RHF iter 2: -290.52105276490687 -1.00676e+02 4.66004e-01 DIIS; @DF-RHF iter 3: -328.09971971455047 -3.75787e+01 4.86655e-02 DIIS; @DF-RHF iter 4: -328.29180563637317 -1.92086e-01 6.06357e-03 DIIS; @DF-RHF iter 5: -328.29809735789945 -6.29172e-03 1.54650e-03 DIIS; @DF-RHF iter 6: -328.29834344170320 -2.46084e-04 2.46581e-04 DIIS; @DF-RHF iter 7: -328.29835685761799 -1.34159e-05 4.28492e-05 DIIS; @DF-RHF iter 8: -328.29835732243424 -4.64816e-07 4.48232e-06 DIIS; @DF-RHF iter 9: -328.29835733488505 -1.24508e-08 4.61031e-07 DIIS; Energy converged.; ```. so it's only a small 2200 Hartree difference between the calculations :tongue:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1473
https://github.com/psi4/psi4/issues/1473:534,Energy Efficiency,Energy,Energy,534,"The atomic UHF solver code doesn't include ECP elements in its core Hamiltonian operator at present. Likewise, ECPs aren't taken into account in the spin state determination for the SAD state. (This is not a problem for #1458 though since it switches the default to spin-averaged densities.). For instance,; ```; molecule {; 0 1; Xe; }. set guess sad; set basis def2-svp; set sad_print 2; energy('scf'); ```. gives; ```; @Atomic UHF Final Energy for atom XE: -2507.62764642306365; Finished UHF Computation!. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: 285.32485664068048 2.85325e+02 0.00000e+00 ; @DF-RHF iter 1: -189.84500624892323 -4.75170e+02 8.80223e-01 DIIS; @DF-RHF iter 2: -290.52105276490687 -1.00676e+02 4.66004e-01 DIIS; @DF-RHF iter 3: -328.09971971455047 -3.75787e+01 4.86655e-02 DIIS; @DF-RHF iter 4: -328.29180563637317 -1.92086e-01 6.06357e-03 DIIS; @DF-RHF iter 5: -328.29809735789945 -6.29172e-03 1.54650e-03 DIIS; @DF-RHF iter 6: -328.29834344170320 -2.46084e-04 2.46581e-04 DIIS; @DF-RHF iter 7: -328.29835685761799 -1.34159e-05 4.28492e-05 DIIS; @DF-RHF iter 8: -328.29835732243424 -4.64816e-07 4.48232e-06 DIIS; @DF-RHF iter 9: -328.29835733488505 -1.24508e-08 4.61031e-07 DIIS; Energy converged.; ```. so it's only a small 2200 Hartree difference between the calculations :tongue:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1473
https://github.com/psi4/psi4/issues/1473:1226,Energy Efficiency,Energy,Energy,1226,"The atomic UHF solver code doesn't include ECP elements in its core Hamiltonian operator at present. Likewise, ECPs aren't taken into account in the spin state determination for the SAD state. (This is not a problem for #1458 though since it switches the default to spin-averaged densities.). For instance,; ```; molecule {; 0 1; Xe; }. set guess sad; set basis def2-svp; set sad_print 2; energy('scf'); ```. gives; ```; @Atomic UHF Final Energy for atom XE: -2507.62764642306365; Finished UHF Computation!. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: 285.32485664068048 2.85325e+02 0.00000e+00 ; @DF-RHF iter 1: -189.84500624892323 -4.75170e+02 8.80223e-01 DIIS; @DF-RHF iter 2: -290.52105276490687 -1.00676e+02 4.66004e-01 DIIS; @DF-RHF iter 3: -328.09971971455047 -3.75787e+01 4.86655e-02 DIIS; @DF-RHF iter 4: -328.29180563637317 -1.92086e-01 6.06357e-03 DIIS; @DF-RHF iter 5: -328.29809735789945 -6.29172e-03 1.54650e-03 DIIS; @DF-RHF iter 6: -328.29834344170320 -2.46084e-04 2.46581e-04 DIIS; @DF-RHF iter 7: -328.29835685761799 -1.34159e-05 4.28492e-05 DIIS; @DF-RHF iter 8: -328.29835732243424 -4.64816e-07 4.48232e-06 DIIS; @DF-RHF iter 9: -328.29835733488505 -1.24508e-08 4.61031e-07 DIIS; Energy converged.; ```. so it's only a small 2200 Hartree difference between the calculations :tongue:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1473
https://github.com/psi4/psi4/issues/1474:66,Performance,optimiz,optimization-fails-due-to-changing-comp-point-group,66,"Transferred from [the forums](http://forum.psicode.org/t/geometry-optimization-fails-due-to-changing-comp-point-group/1191) and possibly related to #1177. In the following optimization, Psi quits after reporting a tetrahedral molecule falls from `C2v` to `Cs` molecular point group while maintaining `Td` full point group after the first step. ```; import psi4; mol_string = """""" ; C; H 1 %f; H 1 %f 2 TDA; H 1 %f 2 TDA 3 120; H 1 %f 2 TDA 4 120; """"""; mol = lambda x: mol_string%(x,x,x,x); psi4.set_options({""BASIS"": ""def2-qzvppd"", ""scf_type"": ""df""}); geom = psi4.geometry(mol(1.106)); e,wfn = psi4.optimize(""PBE"",molecule=geom, return_wfn=""yes""); ```. The first step appears to break the alignment of the molecular symmetry axes with the reference axes. For comparison, here are the starting coordinates (Bohr) and the coordinates after step 1:; ```; [[ 0. 0. 0. ]; [ 0. 1.70650814 -1.20668348]; [ 1.70650814 0. 1.20668348]; [-1.70650814 0. 1.20668348]; [ 0. -1.70650814 -1.20668348]]. [[-6.64087882e-10 2.94128033e-09 0.00000000e+00]; [-6.64087882e-10 2.06989822e+00 0.00000000e+00]; [-9.75759370e-01 -6.89966085e-01 1.69006481e+00]; [-9.75759370e-01 -6.89966085e-01 -1.69006481e+00]; [ 1.95151875e+00 -6.89966086e-01 0.00000000e+00]]; ```. The original reporter said this problem was observed with this basis set but not others. To me, this suggests numerical noise determines whether the bug occurs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1474
https://github.com/psi4/psi4/issues/1474:172,Performance,optimiz,optimization,172,"Transferred from [the forums](http://forum.psicode.org/t/geometry-optimization-fails-due-to-changing-comp-point-group/1191) and possibly related to #1177. In the following optimization, Psi quits after reporting a tetrahedral molecule falls from `C2v` to `Cs` molecular point group while maintaining `Td` full point group after the first step. ```; import psi4; mol_string = """""" ; C; H 1 %f; H 1 %f 2 TDA; H 1 %f 2 TDA 3 120; H 1 %f 2 TDA 4 120; """"""; mol = lambda x: mol_string%(x,x,x,x); psi4.set_options({""BASIS"": ""def2-qzvppd"", ""scf_type"": ""df""}); geom = psi4.geometry(mol(1.106)); e,wfn = psi4.optimize(""PBE"",molecule=geom, return_wfn=""yes""); ```. The first step appears to break the alignment of the molecular symmetry axes with the reference axes. For comparison, here are the starting coordinates (Bohr) and the coordinates after step 1:; ```; [[ 0. 0. 0. ]; [ 0. 1.70650814 -1.20668348]; [ 1.70650814 0. 1.20668348]; [-1.70650814 0. 1.20668348]; [ 0. -1.70650814 -1.20668348]]. [[-6.64087882e-10 2.94128033e-09 0.00000000e+00]; [-6.64087882e-10 2.06989822e+00 0.00000000e+00]; [-9.75759370e-01 -6.89966085e-01 1.69006481e+00]; [-9.75759370e-01 -6.89966085e-01 -1.69006481e+00]; [ 1.95151875e+00 -6.89966086e-01 0.00000000e+00]]; ```. The original reporter said this problem was observed with this basis set but not others. To me, this suggests numerical noise determines whether the bug occurs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1474
https://github.com/psi4/psi4/issues/1474:598,Performance,optimiz,optimize,598,"Transferred from [the forums](http://forum.psicode.org/t/geometry-optimization-fails-due-to-changing-comp-point-group/1191) and possibly related to #1177. In the following optimization, Psi quits after reporting a tetrahedral molecule falls from `C2v` to `Cs` molecular point group while maintaining `Td` full point group after the first step. ```; import psi4; mol_string = """""" ; C; H 1 %f; H 1 %f 2 TDA; H 1 %f 2 TDA 3 120; H 1 %f 2 TDA 4 120; """"""; mol = lambda x: mol_string%(x,x,x,x); psi4.set_options({""BASIS"": ""def2-qzvppd"", ""scf_type"": ""df""}); geom = psi4.geometry(mol(1.106)); e,wfn = psi4.optimize(""PBE"",molecule=geom, return_wfn=""yes""); ```. The first step appears to break the alignment of the molecular symmetry axes with the reference axes. For comparison, here are the starting coordinates (Bohr) and the coordinates after step 1:; ```; [[ 0. 0. 0. ]; [ 0. 1.70650814 -1.20668348]; [ 1.70650814 0. 1.20668348]; [-1.70650814 0. 1.20668348]; [ 0. -1.70650814 -1.20668348]]. [[-6.64087882e-10 2.94128033e-09 0.00000000e+00]; [-6.64087882e-10 2.06989822e+00 0.00000000e+00]; [-9.75759370e-01 -6.89966085e-01 1.69006481e+00]; [-9.75759370e-01 -6.89966085e-01 -1.69006481e+00]; [ 1.95151875e+00 -6.89966086e-01 0.00000000e+00]]; ```. The original reporter said this problem was observed with this basis set but not others. To me, this suggests numerical noise determines whether the bug occurs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1474
https://github.com/psi4/psi4/pull/1475:30,Availability,checkpoint,checkpoint,30,"## Description; The formatted checkpoint files currently produced by Psi4 misname the orbital coefficient and the density matrix fields. This PR (re)establishes the expected behavior, as well as fixes other bugs in the code. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix labels of MO energies and coefficients; - [x] Fix labels of density matrices; - [x] Fix printout of number of linearly independent functions; - [x] Don't print the MO coefficients into the log file; - [x] Only print out beta orbs and spin density if wave function is not spin-restricted.; - [ ] Identify if density is correlated; if it is, print out both SCF and correlated density. Otherwise only print out SCF density. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1475
https://github.com/psi4/psi4/pull/1475:516,Testability,log,log,516,"## Description; The formatted checkpoint files currently produced by Psi4 misname the orbital coefficient and the density matrix fields. This PR (re)establishes the expected behavior, as well as fixes other bugs in the code. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix labels of MO energies and coefficients; - [x] Fix labels of density matrices; - [x] Fix printout of number of linearly independent functions; - [x] Don't print the MO coefficients into the log file; - [x] Only print out beta orbs and spin density if wave function is not spin-restricted.; - [ ] Identify if density is correlated; if it is, print out both SCF and correlated density. Otherwise only print out SCF density. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1475
https://github.com/psi4/psi4/pull/1475:799,Testability,Test,Tests,799,"## Description; The formatted checkpoint files currently produced by Psi4 misname the orbital coefficient and the density matrix fields. This PR (re)establishes the expected behavior, as well as fixes other bugs in the code. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix labels of MO energies and coefficients; - [x] Fix labels of density matrices; - [x] Fix printout of number of linearly independent functions; - [x] Don't print the MO coefficients into the log file; - [x] Only print out beta orbs and spin density if wave function is not spin-restricted.; - [ ] Identify if density is correlated; if it is, print out both SCF and correlated density. Otherwise only print out SCF density. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1475
https://github.com/psi4/psi4/pull/1475:873,Testability,test,tests,873,"## Description; The formatted checkpoint files currently produced by Psi4 misname the orbital coefficient and the density matrix fields. This PR (re)establishes the expected behavior, as well as fixes other bugs in the code. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix labels of MO energies and coefficients; - [x] Fix labels of density matrices; - [x] Fix printout of number of linearly independent functions; - [x] Don't print the MO coefficients into the log file; - [x] Only print out beta orbs and spin density if wave function is not spin-restricted.; - [ ] Identify if density is correlated; if it is, print out both SCF and correlated density. Otherwise only print out SCF density. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1475
https://github.com/psi4/psi4/pull/1475:964,Testability,test,tests,964,"## Description; The formatted checkpoint files currently produced by Psi4 misname the orbital coefficient and the density matrix fields. This PR (re)establishes the expected behavior, as well as fixes other bugs in the code. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix labels of MO energies and coefficients; - [x] Fix labels of density matrices; - [x] Fix printout of number of linearly independent functions; - [x] Don't print the MO coefficients into the log file; - [x] Only print out beta orbs and spin density if wave function is not spin-restricted.; - [ ] Identify if density is correlated; if it is, print out both SCF and correlated density. Otherwise only print out SCF density. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1475
https://github.com/psi4/psi4/pull/1476:531,Availability,error,error,531,"## Description; This is a part of Psi4 porting to Windows (#933). `tensor_rr` is `double***`, so it needs double dereferencing to have a pointer to data: ; https://github.com/psi4/psi4/blob/c9be896dd4b4c550b6f7ac792cf11a1274a9a038/psi4/src/psi4/cc/ccresponse/roa.cc#L238; I guess, it should be like here:; https://github.com/psi4/psi4/blob/c9be896dd4b4c550b6f7ac792cf11a1274a9a038/psi4/src/psi4/cc/ccresponse/roa.cc#L289. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory error in `psi::ccresponse::roa`. ## Questions; - [x] I don't real know what that part of code is doing. The fix has to be verified by someone who does. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1476
https://github.com/psi4/psi4/pull/1476:705,Testability,Test,Tests,705,"## Description; This is a part of Psi4 porting to Windows (#933). `tensor_rr` is `double***`, so it needs double dereferencing to have a pointer to data: ; https://github.com/psi4/psi4/blob/c9be896dd4b4c550b6f7ac792cf11a1274a9a038/psi4/src/psi4/cc/ccresponse/roa.cc#L238; I guess, it should be like here:; https://github.com/psi4/psi4/blob/c9be896dd4b4c550b6f7ac792cf11a1274a9a038/psi4/src/psi4/cc/ccresponse/roa.cc#L289. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory error in `psi::ccresponse::roa`. ## Questions; - [x] I don't real know what that part of code is doing. The fix has to be verified by someone who does. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1476
https://github.com/psi4/psi4/pull/1476:781,Testability,test,tests,781,"## Description; This is a part of Psi4 porting to Windows (#933). `tensor_rr` is `double***`, so it needs double dereferencing to have a pointer to data: ; https://github.com/psi4/psi4/blob/c9be896dd4b4c550b6f7ac792cf11a1274a9a038/psi4/src/psi4/cc/ccresponse/roa.cc#L238; I guess, it should be like here:; https://github.com/psi4/psi4/blob/c9be896dd4b4c550b6f7ac792cf11a1274a9a038/psi4/src/psi4/cc/ccresponse/roa.cc#L289. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory error in `psi::ccresponse::roa`. ## Questions; - [x] I don't real know what that part of code is doing. The fix has to be verified by someone who does. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1476
https://github.com/psi4/psi4/pull/1476:872,Testability,test,tests,872,"## Description; This is a part of Psi4 porting to Windows (#933). `tensor_rr` is `double***`, so it needs double dereferencing to have a pointer to data: ; https://github.com/psi4/psi4/blob/c9be896dd4b4c550b6f7ac792cf11a1274a9a038/psi4/src/psi4/cc/ccresponse/roa.cc#L238; I guess, it should be like here:; https://github.com/psi4/psi4/blob/c9be896dd4b4c550b6f7ac792cf11a1274a9a038/psi4/src/psi4/cc/ccresponse/roa.cc#L289. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory error in `psi::ccresponse::roa`. ## Questions; - [x] I don't real know what that part of code is doing. The fix has to be verified by someone who does. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1476
https://github.com/psi4/psi4/pull/1477:139,Testability,test,tests,139,"## Description; This PR implements ```SAD_SCF_TYPE``` options that aren't currently allowed as ```SAD_SCF_TYPE``` options, as well as adds tests to check that the computed SAD guess is exact for closed-shell atoms. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD solution is fully converged for noble gases when ```SAD_SCF_TYPE = SCF_TYPE```. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1477
https://github.com/psi4/psi4/pull/1477:448,Testability,Test,Tests,448,"## Description; This PR implements ```SAD_SCF_TYPE``` options that aren't currently allowed as ```SAD_SCF_TYPE``` options, as well as adds tests to check that the computed SAD guess is exact for closed-shell atoms. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD solution is fully converged for noble gases when ```SAD_SCF_TYPE = SCF_TYPE```. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1477
https://github.com/psi4/psi4/pull/1477:522,Testability,test,tests,522,"## Description; This PR implements ```SAD_SCF_TYPE``` options that aren't currently allowed as ```SAD_SCF_TYPE``` options, as well as adds tests to check that the computed SAD guess is exact for closed-shell atoms. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD solution is fully converged for noble gases when ```SAD_SCF_TYPE = SCF_TYPE```. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1477
https://github.com/psi4/psi4/pull/1477:613,Testability,test,tests,613,"## Description; This PR implements ```SAD_SCF_TYPE``` options that aren't currently allowed as ```SAD_SCF_TYPE``` options, as well as adds tests to check that the computed SAD guess is exact for closed-shell atoms. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD solution is fully converged for noble gases when ```SAD_SCF_TYPE = SCF_TYPE```. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1477
https://github.com/psi4/psi4/pull/1479:141,Energy Efficiency,charge,charge,141,## Description; The SAD guess is rescaling the guess density at present. This should not be done; the SAD guess is independent of the actual charge and/or spin state of the molecule. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess is independent of charge and spin state of molecule. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1479
https://github.com/psi4/psi4/pull/1479:309,Energy Efficiency,charge,charge,309,## Description; The SAD guess is rescaling the guess density at present. This should not be done; the SAD guess is independent of the actual charge and/or spin state of the molecule. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess is independent of charge and spin state of molecule. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1479
https://github.com/psi4/psi4/pull/1479:395,Testability,Test,Tests,395,## Description; The SAD guess is rescaling the guess density at present. This should not be done; the SAD guess is independent of the actual charge and/or spin state of the molecule. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess is independent of charge and spin state of molecule. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1479
https://github.com/psi4/psi4/pull/1479:469,Testability,test,tests,469,## Description; The SAD guess is rescaling the guess density at present. This should not be done; the SAD guess is independent of the actual charge and/or spin state of the molecule. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess is independent of charge and spin state of molecule. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1479
https://github.com/psi4/psi4/pull/1479:560,Testability,test,tests,560,## Description; The SAD guess is rescaling the guess density at present. This should not be done; the SAD guess is independent of the actual charge and/or spin state of the molecule. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] SAD guess is independent of charge and spin state of molecule. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1479
https://github.com/psi4/psi4/pull/1480:397,Availability,error,error,397,"## Description; This is a part of *Psi4* porting to Windows (#933). The last element of `array` is `array[n-1]`, so the access of `array[n]` is not correct:; https://github.com/psi4/psi4/blob/62bb956ccfb38cad1bef7e6227aac70ddb1172f7/psi4/src/psi4/libmoinfo/moinfo_base.cc#L281-L285; It is better to use pointer arithmetics: `array + n`. This is not a bug, just it gives a false positive in memory error detection. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory error in `MOInfoBase::convert_int_array_to_vector`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1480
https://github.com/psi4/psi4/pull/1480:523,Availability,error,error,523,"## Description; This is a part of *Psi4* porting to Windows (#933). The last element of `array` is `array[n-1]`, so the access of `array[n]` is not correct:; https://github.com/psi4/psi4/blob/62bb956ccfb38cad1bef7e6227aac70ddb1172f7/psi4/src/psi4/libmoinfo/moinfo_base.cc#L281-L285; It is better to use pointer arithmetics: `array + n`. This is not a bug, just it gives a false positive in memory error detection. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory error in `MOInfoBase::convert_int_array_to_vector`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1480
https://github.com/psi4/psi4/pull/1480:403,Safety,detect,detection,403,"## Description; This is a part of *Psi4* porting to Windows (#933). The last element of `array` is `array[n-1]`, so the access of `array[n]` is not correct:; https://github.com/psi4/psi4/blob/62bb956ccfb38cad1bef7e6227aac70ddb1172f7/psi4/src/psi4/libmoinfo/moinfo_base.cc#L281-L285; It is better to use pointer arithmetics: `array + n`. This is not a bug, just it gives a false positive in memory error detection. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory error in `MOInfoBase::convert_int_array_to_vector`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1480
https://github.com/psi4/psi4/pull/1480:120,Security,access,access,120,"## Description; This is a part of *Psi4* porting to Windows (#933). The last element of `array` is `array[n-1]`, so the access of `array[n]` is not correct:; https://github.com/psi4/psi4/blob/62bb956ccfb38cad1bef7e6227aac70ddb1172f7/psi4/src/psi4/libmoinfo/moinfo_base.cc#L281-L285; It is better to use pointer arithmetics: `array + n`. This is not a bug, just it gives a false positive in memory error detection. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory error in `MOInfoBase::convert_int_array_to_vector`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1480
https://github.com/psi4/psi4/pull/1480:597,Testability,Test,Tests,597,"## Description; This is a part of *Psi4* porting to Windows (#933). The last element of `array` is `array[n-1]`, so the access of `array[n]` is not correct:; https://github.com/psi4/psi4/blob/62bb956ccfb38cad1bef7e6227aac70ddb1172f7/psi4/src/psi4/libmoinfo/moinfo_base.cc#L281-L285; It is better to use pointer arithmetics: `array + n`. This is not a bug, just it gives a false positive in memory error detection. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory error in `MOInfoBase::convert_int_array_to_vector`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1480
https://github.com/psi4/psi4/pull/1480:673,Testability,test,tests,673,"## Description; This is a part of *Psi4* porting to Windows (#933). The last element of `array` is `array[n-1]`, so the access of `array[n]` is not correct:; https://github.com/psi4/psi4/blob/62bb956ccfb38cad1bef7e6227aac70ddb1172f7/psi4/src/psi4/libmoinfo/moinfo_base.cc#L281-L285; It is better to use pointer arithmetics: `array + n`. This is not a bug, just it gives a false positive in memory error detection. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory error in `MOInfoBase::convert_int_array_to_vector`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1480
https://github.com/psi4/psi4/pull/1480:764,Testability,test,tests,764,"## Description; This is a part of *Psi4* porting to Windows (#933). The last element of `array` is `array[n-1]`, so the access of `array[n]` is not correct:; https://github.com/psi4/psi4/blob/62bb956ccfb38cad1bef7e6227aac70ddb1172f7/psi4/src/psi4/libmoinfo/moinfo_base.cc#L281-L285; It is better to use pointer arithmetics: `array + n`. This is not a bug, just it gives a false positive in memory error detection. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory error in `MOInfoBase::convert_int_array_to_vector`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1480
https://github.com/psi4/psi4/pull/1481:335,Testability,Test,Tests,335,## Description; The reorganized SAD code was missing a check if the basis set is actually large enough to allow a full valence active space; this is now fixed. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1481
https://github.com/psi4/psi4/pull/1481:409,Testability,test,tests,409,## Description; The reorganized SAD code was missing a check if the basis set is actually large enough to allow a full valence active space; this is now fixed. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1481
https://github.com/psi4/psi4/pull/1481:500,Testability,test,tests,500,## Description; The reorganized SAD code was missing a check if the basis set is actually large enough to allow a full valence active space; this is now fixed. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1481
https://github.com/psi4/psi4/issues/1482:1287,Availability,Error,Error,1287,"DCT gradients fail with the traceback below when ROHF starting orbitals are used. The same result is obtained for all DCT functionals w/ analytic gradients (ODC-13, ODC-12, ODC-06, DC-06). The calculation runs fine with UHF starting orbitals. Furthermore identical energies are obtained for the UHF calculation and the ROHF calculation, but the ROHF calculation fails out before computing the gradient. . ``` Molecular point group: c2v; Full point group: C2v. Geometry (in Bohr), charge = 0, multiplicity = 1:. Center X Y Z; ------------ ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.124297814551; H 0.000000000000 -1.434419280484 0.986348258811; H 0.000000000000 1.434419280484 0.986348258811. Traceback (most recent call last):; File ""/home/mmd01986/anaconda3/envs/psi4/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/mmd01986/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 638, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/mmd01986/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1501, in run_dcft_gradient; grad = derivobj.compute(). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1532493090788/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::read_entry(unsigned long, char const*, char*, unsigned long). Psi4 stopped on: Friday, 18 January 2019 09:58AM; Psi4 wall time for execution: 0:00:01.14. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1482
https://github.com/psi4/psi4/issues/1482:1299,Availability,Error,Error,1299,"DCT gradients fail with the traceback below when ROHF starting orbitals are used. The same result is obtained for all DCT functionals w/ analytic gradients (ODC-13, ODC-12, ODC-06, DC-06). The calculation runs fine with UHF starting orbitals. Furthermore identical energies are obtained for the UHF calculation and the ROHF calculation, but the ROHF calculation fails out before computing the gradient. . ``` Molecular point group: c2v; Full point group: C2v. Geometry (in Bohr), charge = 0, multiplicity = 1:. Center X Y Z; ------------ ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.124297814551; H 0.000000000000 -1.434419280484 0.986348258811; H 0.000000000000 1.434419280484 0.986348258811. Traceback (most recent call last):; File ""/home/mmd01986/anaconda3/envs/psi4/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/mmd01986/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 638, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/mmd01986/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1501, in run_dcft_gradient; grad = derivobj.compute(). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1532493090788/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::read_entry(unsigned long, char const*, char*, unsigned long). Psi4 stopped on: Friday, 18 January 2019 09:58AM; Psi4 wall time for execution: 0:00:01.14. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1482
https://github.com/psi4/psi4/issues/1482:1306,Availability,Error,Error,1306,"DCT gradients fail with the traceback below when ROHF starting orbitals are used. The same result is obtained for all DCT functionals w/ analytic gradients (ODC-13, ODC-12, ODC-06, DC-06). The calculation runs fine with UHF starting orbitals. Furthermore identical energies are obtained for the UHF calculation and the ROHF calculation, but the ROHF calculation fails out before computing the gradient. . ``` Molecular point group: c2v; Full point group: C2v. Geometry (in Bohr), charge = 0, multiplicity = 1:. Center X Y Z; ------------ ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.124297814551; H 0.000000000000 -1.434419280484 0.986348258811; H 0.000000000000 1.434419280484 0.986348258811. Traceback (most recent call last):; File ""/home/mmd01986/anaconda3/envs/psi4/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/mmd01986/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 638, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/mmd01986/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1501, in run_dcft_gradient; grad = derivobj.compute(). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1532493090788/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::read_entry(unsigned long, char const*, char*, unsigned long). Psi4 stopped on: Friday, 18 January 2019 09:58AM; Psi4 wall time for execution: 0:00:01.14. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1482
https://github.com/psi4/psi4/issues/1482:1420,Availability,error,error,1420,"DCT gradients fail with the traceback below when ROHF starting orbitals are used. The same result is obtained for all DCT functionals w/ analytic gradients (ODC-13, ODC-12, ODC-06, DC-06). The calculation runs fine with UHF starting orbitals. Furthermore identical energies are obtained for the UHF calculation and the ROHF calculation, but the ROHF calculation fails out before computing the gradient. . ``` Molecular point group: c2v; Full point group: C2v. Geometry (in Bohr), charge = 0, multiplicity = 1:. Center X Y Z; ------------ ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.124297814551; H 0.000000000000 -1.434419280484 0.986348258811; H 0.000000000000 1.434419280484 0.986348258811. Traceback (most recent call last):; File ""/home/mmd01986/anaconda3/envs/psi4/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/mmd01986/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 638, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/mmd01986/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1501, in run_dcft_gradient; grad = derivobj.compute(). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1532493090788/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::read_entry(unsigned long, char const*, char*, unsigned long). Psi4 stopped on: Friday, 18 January 2019 09:58AM; Psi4 wall time for execution: 0:00:01.14. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1482
https://github.com/psi4/psi4/issues/1482:1778,Availability,error,error,1778,"DCT gradients fail with the traceback below when ROHF starting orbitals are used. The same result is obtained for all DCT functionals w/ analytic gradients (ODC-13, ODC-12, ODC-06, DC-06). The calculation runs fine with UHF starting orbitals. Furthermore identical energies are obtained for the UHF calculation and the ROHF calculation, but the ROHF calculation fails out before computing the gradient. . ``` Molecular point group: c2v; Full point group: C2v. Geometry (in Bohr), charge = 0, multiplicity = 1:. Center X Y Z; ------------ ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.124297814551; H 0.000000000000 -1.434419280484 0.986348258811; H 0.000000000000 1.434419280484 0.986348258811. Traceback (most recent call last):; File ""/home/mmd01986/anaconda3/envs/psi4/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/mmd01986/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 638, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/mmd01986/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1501, in run_dcft_gradient; grad = derivobj.compute(). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1532493090788/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::read_entry(unsigned long, char const*, char*, unsigned long). Psi4 stopped on: Friday, 18 January 2019 09:58AM; Psi4 wall time for execution: 0:00:01.14. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1482
https://github.com/psi4/psi4/issues/1482:480,Energy Efficiency,charge,charge,480,"DCT gradients fail with the traceback below when ROHF starting orbitals are used. The same result is obtained for all DCT functionals w/ analytic gradients (ODC-13, ODC-12, ODC-06, DC-06). The calculation runs fine with UHF starting orbitals. Furthermore identical energies are obtained for the UHF calculation and the ROHF calculation, but the ROHF calculation fails out before computing the gradient. . ``` Molecular point group: c2v; Full point group: C2v. Geometry (in Bohr), charge = 0, multiplicity = 1:. Center X Y Z; ------------ ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.124297814551; H 0.000000000000 -1.434419280484 0.986348258811; H 0.000000000000 1.434419280484 0.986348258811. Traceback (most recent call last):; File ""/home/mmd01986/anaconda3/envs/psi4/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/mmd01986/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 638, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/mmd01986/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1501, in run_dcft_gradient; grad = derivobj.compute(). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1532493090788/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::read_entry(unsigned long, char const*, char*, unsigned long). Psi4 stopped on: Friday, 18 January 2019 09:58AM; Psi4 wall time for execution: 0:00:01.14. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1482
https://github.com/psi4/psi4/pull/1483:106,Performance,optimiz,optimizations,106,"## Description; The DFMP2 gradient was not symmetrized to the molecule's (Abelian) point group before, so optimizations could potentially break symmetry, as pointed out [on the forums](http://forum.psicode.org/t/losing-symmetry-on-first-step-of-geometry-optimization/1201). This PR enforces the Abelian symmetry, preventing problems with symmetry breaking in optimizations. ## Todos; - [x] Fixes a bug in DFMP2 gradients that led to slight noise in which, in some cases, could break the symmetry of the molecule. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1483
https://github.com/psi4/psi4/pull/1483:254,Performance,optimiz,optimization,254,"## Description; The DFMP2 gradient was not symmetrized to the molecule's (Abelian) point group before, so optimizations could potentially break symmetry, as pointed out [on the forums](http://forum.psicode.org/t/losing-symmetry-on-first-step-of-geometry-optimization/1201). This PR enforces the Abelian symmetry, preventing problems with symmetry breaking in optimizations. ## Todos; - [x] Fixes a bug in DFMP2 gradients that led to slight noise in which, in some cases, could break the symmetry of the molecule. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1483
https://github.com/psi4/psi4/pull/1483:359,Performance,optimiz,optimizations,359,"## Description; The DFMP2 gradient was not symmetrized to the molecule's (Abelian) point group before, so optimizations could potentially break symmetry, as pointed out [on the forums](http://forum.psicode.org/t/losing-symmetry-on-first-step-of-geometry-optimization/1201). This PR enforces the Abelian symmetry, preventing problems with symmetry breaking in optimizations. ## Todos; - [x] Fixes a bug in DFMP2 gradients that led to slight noise in which, in some cases, could break the symmetry of the molecule. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1483
https://github.com/psi4/psi4/pull/1483:567,Testability,test,tests,567,"## Description; The DFMP2 gradient was not symmetrized to the molecule's (Abelian) point group before, so optimizations could potentially break symmetry, as pointed out [on the forums](http://forum.psicode.org/t/losing-symmetry-on-first-step-of-geometry-optimization/1201). This PR enforces the Abelian symmetry, preventing problems with symmetry breaking in optimizations. ## Todos; - [x] Fixes a bug in DFMP2 gradients that led to slight noise in which, in some cases, could break the symmetry of the molecule. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1483
https://github.com/psi4/psi4/pull/1483:658,Testability,test,tests,658,"## Description; The DFMP2 gradient was not symmetrized to the molecule's (Abelian) point group before, so optimizations could potentially break symmetry, as pointed out [on the forums](http://forum.psicode.org/t/losing-symmetry-on-first-step-of-geometry-optimization/1201). This PR enforces the Abelian symmetry, preventing problems with symmetry breaking in optimizations. ## Todos; - [x] Fixes a bug in DFMP2 gradients that led to slight noise in which, in some cases, could break the symmetry of the molecule. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1483
https://github.com/psi4/psi4/pull/1484:950,Availability,error,error,950,"## Description; https://github.com/psi4/psi4/issues/1439#issuecomment-455799123 is a good idea prototyped here. Instead of always defaulting the cast-up basis to 3-21g, choose from within family. Here, only def2 is rolled out. Also, not integrated with basis blocks, so active for `set basis def2-tzvpp`, not `basis {assign I def2-tzvppd}` in original example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] basis guess default Dunning, Petersson (zapa), and Jensen families to `pcseg-0`, which is 3-21g sized. none of these are ECP; - [x] basis guess default Karlsruhe to `def2-sv(p)`, so that ECP present for both orbital and fitting; - [x] remainder (incl. Pople and any custom) default to 3-21g. EDIT: Pople explicitly defaulting to 3-21g; - [x] EDIT: replaced DUAL in [this table](http://psicode.org/psi4manual/master/basissets_byfamily.html) with GUESS. - [x] I got `str not a callable fn` in error handling, so fixed up the error/trackback handling a bit. now prints to screen, too. EDIT: I think this got added elsewhere. ### contains #1494 (urgent fixes from this PR) so will need rebasing before final consideration. ## Testing; - [x] full ctest and pytest passes (except for dcft8, but that's a known issue). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1484
https://github.com/psi4/psi4/pull/1484:982,Availability,error,error,982,"## Description; https://github.com/psi4/psi4/issues/1439#issuecomment-455799123 is a good idea prototyped here. Instead of always defaulting the cast-up basis to 3-21g, choose from within family. Here, only def2 is rolled out. Also, not integrated with basis blocks, so active for `set basis def2-tzvpp`, not `basis {assign I def2-tzvppd}` in original example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] basis guess default Dunning, Petersson (zapa), and Jensen families to `pcseg-0`, which is 3-21g sized. none of these are ECP; - [x] basis guess default Karlsruhe to `def2-sv(p)`, so that ECP present for both orbital and fitting; - [x] remainder (incl. Pople and any custom) default to 3-21g. EDIT: Pople explicitly defaulting to 3-21g; - [x] EDIT: replaced DUAL in [this table](http://psicode.org/psi4manual/master/basissets_byfamily.html) with GUESS. - [x] I got `str not a callable fn` in error handling, so fixed up the error/trackback handling a bit. now prints to screen, too. EDIT: I think this got added elsewhere. ### contains #1494 (urgent fixes from this PR) so will need rebasing before final consideration. ## Testing; - [x] full ctest and pytest passes (except for dcft8, but that's a known issue). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1484
https://github.com/psi4/psi4/pull/1484:237,Deployability,integrat,integrated,237,"## Description; https://github.com/psi4/psi4/issues/1439#issuecomment-455799123 is a good idea prototyped here. Instead of always defaulting the cast-up basis to 3-21g, choose from within family. Here, only def2 is rolled out. Also, not integrated with basis blocks, so active for `set basis def2-tzvpp`, not `basis {assign I def2-tzvppd}` in original example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] basis guess default Dunning, Petersson (zapa), and Jensen families to `pcseg-0`, which is 3-21g sized. none of these are ECP; - [x] basis guess default Karlsruhe to `def2-sv(p)`, so that ECP present for both orbital and fitting; - [x] remainder (incl. Pople and any custom) default to 3-21g. EDIT: Pople explicitly defaulting to 3-21g; - [x] EDIT: replaced DUAL in [this table](http://psicode.org/psi4manual/master/basissets_byfamily.html) with GUESS. - [x] I got `str not a callable fn` in error handling, so fixed up the error/trackback handling a bit. now prints to screen, too. EDIT: I think this got added elsewhere. ### contains #1494 (urgent fixes from this PR) so will need rebasing before final consideration. ## Testing; - [x] full ctest and pytest passes (except for dcft8, but that's a known issue). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1484
https://github.com/psi4/psi4/pull/1484:237,Integrability,integrat,integrated,237,"## Description; https://github.com/psi4/psi4/issues/1439#issuecomment-455799123 is a good idea prototyped here. Instead of always defaulting the cast-up basis to 3-21g, choose from within family. Here, only def2 is rolled out. Also, not integrated with basis blocks, so active for `set basis def2-tzvpp`, not `basis {assign I def2-tzvppd}` in original example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] basis guess default Dunning, Petersson (zapa), and Jensen families to `pcseg-0`, which is 3-21g sized. none of these are ECP; - [x] basis guess default Karlsruhe to `def2-sv(p)`, so that ECP present for both orbital and fitting; - [x] remainder (incl. Pople and any custom) default to 3-21g. EDIT: Pople explicitly defaulting to 3-21g; - [x] EDIT: replaced DUAL in [this table](http://psicode.org/psi4manual/master/basissets_byfamily.html) with GUESS. - [x] I got `str not a callable fn` in error handling, so fixed up the error/trackback handling a bit. now prints to screen, too. EDIT: I think this got added elsewhere. ### contains #1494 (urgent fixes from this PR) so will need rebasing before final consideration. ## Testing; - [x] full ctest and pytest passes (except for dcft8, but that's a known issue). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1484
https://github.com/psi4/psi4/pull/1484:1181,Testability,Test,Testing,1181,"## Description; https://github.com/psi4/psi4/issues/1439#issuecomment-455799123 is a good idea prototyped here. Instead of always defaulting the cast-up basis to 3-21g, choose from within family. Here, only def2 is rolled out. Also, not integrated with basis blocks, so active for `set basis def2-tzvpp`, not `basis {assign I def2-tzvppd}` in original example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] basis guess default Dunning, Petersson (zapa), and Jensen families to `pcseg-0`, which is 3-21g sized. none of these are ECP; - [x] basis guess default Karlsruhe to `def2-sv(p)`, so that ECP present for both orbital and fitting; - [x] remainder (incl. Pople and any custom) default to 3-21g. EDIT: Pople explicitly defaulting to 3-21g; - [x] EDIT: replaced DUAL in [this table](http://psicode.org/psi4manual/master/basissets_byfamily.html) with GUESS. - [x] I got `str not a callable fn` in error handling, so fixed up the error/trackback handling a bit. now prints to screen, too. EDIT: I think this got added elsewhere. ### contains #1494 (urgent fixes from this PR) so will need rebasing before final consideration. ## Testing; - [x] full ctest and pytest passes (except for dcft8, but that's a known issue). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1484
https://github.com/psi4/psi4/issues/1485:1029,Energy Efficiency,Charge,Charges,1029,"en a while that I looked into this. I managed to write post-SCF natural orbitals to a molden file, but there is still a problem with documentation (http://www.psicode.org/psi4manual/1.2/molden.html):. This is a fully working example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }; set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); nmopi = wfn.nmopi(); Da_so = wfn.Da(); Ca_inv = core.Matrix(""CA inv"", nmopi, nmopi); Ca_inv.copy(wfn.Ca()); Ca_inv.general_invert(); Da_mo = Matrix.triplet(Ca_inv, Da_so, Ca_inv, False, False, True); # Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False) # line from documentation; molden(wfn, 'ccsd_no.molden', density_a=Da_mo); ```. Loading this into Molden gives normals results:. ```. COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ```. When following the documentation, I got:. ```; COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -94.4305; H -12.0740; H -12.0736; ; Sum of Mulliken Charges: ********; ```. (FYI: my actual intention is not to visualize in Molden, but this is just an easy check.). Besides the documentation, there are some additional minor issues. I'll make a list here:. - [ ] Fix docs.; - [ ] When running the input for a second time, the new output is appended to the existing molden file, which is never useful.; - [ ] The current approach is not the most efficient, nor convenient: the user first has to compute a pseudo-inverse and then in the `molden` function a matrix is diagonalized. This can be done in one step by performing a generalized eigenvalue decomposition. This could happen inside the `molden` functio",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1485
https://github.com/psi4/psi4/issues/1485:1298,Energy Efficiency,Charge,Charges,1298,"ill a problem with documentation (http://www.psicode.org/psi4manual/1.2/molden.html):. This is a fully working example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }; set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); nmopi = wfn.nmopi(); Da_so = wfn.Da(); Ca_inv = core.Matrix(""CA inv"", nmopi, nmopi); Ca_inv.copy(wfn.Ca()); Ca_inv.general_invert(); Da_mo = Matrix.triplet(Ca_inv, Da_so, Ca_inv, False, False, True); # Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False) # line from documentation; molden(wfn, 'ccsd_no.molden', density_a=Da_mo); ```. Loading this into Molden gives normals results:. ```. COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ```. When following the documentation, I got:. ```; COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -94.4305; H -12.0740; H -12.0736; ; Sum of Mulliken Charges: ********; ```. (FYI: my actual intention is not to visualize in Molden, but this is just an easy check.). Besides the documentation, there are some additional minor issues. I'll make a list here:. - [ ] Fix docs.; - [ ] When running the input for a second time, the new output is appended to the existing molden file, which is never useful.; - [ ] The current approach is not the most efficient, nor convenient: the user first has to compute a pseudo-inverse and then in the `molden` function a matrix is diagonalized. This can be done in one step by performing a generalized eigenvalue decomposition. This could happen inside the `molden` function, but then the API would need to change, because that would require the density matrix in the AO basis as input.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1485
https://github.com/psi4/psi4/issues/1485:1381,Energy Efficiency,Charge,Charges,1381,"ill a problem with documentation (http://www.psicode.org/psi4manual/1.2/molden.html):. This is a fully working example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }; set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); nmopi = wfn.nmopi(); Da_so = wfn.Da(); Ca_inv = core.Matrix(""CA inv"", nmopi, nmopi); Ca_inv.copy(wfn.Ca()); Ca_inv.general_invert(); Da_mo = Matrix.triplet(Ca_inv, Da_so, Ca_inv, False, False, True); # Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False) # line from documentation; molden(wfn, 'ccsd_no.molden', density_a=Da_mo); ```. Loading this into Molden gives normals results:. ```. COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ```. When following the documentation, I got:. ```; COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -94.4305; H -12.0740; H -12.0736; ; Sum of Mulliken Charges: ********; ```. (FYI: my actual intention is not to visualize in Molden, but this is just an easy check.). Besides the documentation, there are some additional minor issues. I'll make a list here:. - [ ] Fix docs.; - [ ] When running the input for a second time, the new output is appended to the existing molden file, which is never useful.; - [ ] The current approach is not the most efficient, nor convenient: the user first has to compute a pseudo-inverse and then in the `molden` function a matrix is diagonalized. This can be done in one step by performing a generalized eigenvalue decomposition. This could happen inside the `molden` function, but then the API would need to change, because that would require the density matrix in the AO basis as input.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1485
https://github.com/psi4/psi4/issues/1485:1775,Energy Efficiency,efficient,efficient,1775,"ill a problem with documentation (http://www.psicode.org/psi4manual/1.2/molden.html):. This is a fully working example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }; set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); nmopi = wfn.nmopi(); Da_so = wfn.Da(); Ca_inv = core.Matrix(""CA inv"", nmopi, nmopi); Ca_inv.copy(wfn.Ca()); Ca_inv.general_invert(); Da_mo = Matrix.triplet(Ca_inv, Da_so, Ca_inv, False, False, True); # Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False) # line from documentation; molden(wfn, 'ccsd_no.molden', density_a=Da_mo); ```. Loading this into Molden gives normals results:. ```. COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ```. When following the documentation, I got:. ```; COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -94.4305; H -12.0740; H -12.0736; ; Sum of Mulliken Charges: ********; ```. (FYI: my actual intention is not to visualize in Molden, but this is just an easy check.). Besides the documentation, there are some additional minor issues. I'll make a list here:. - [ ] Fix docs.; - [ ] When running the input for a second time, the new output is appended to the existing molden file, which is never useful.; - [ ] The current approach is not the most efficient, nor convenient: the user first has to compute a pseudo-inverse and then in the `molden` function a matrix is diagonalized. This can be done in one step by performing a generalized eigenvalue decomposition. This could happen inside the `molden` function, but then the API would need to change, because that would require the density matrix in the AO basis as input.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1485
https://github.com/psi4/psi4/issues/1485:818,Performance,Load,Loading,818,"This is a follow-up on #504. It's been a while that I looked into this. I managed to write post-SCF natural orbitals to a molden file, but there is still a problem with documentation (http://www.psicode.org/psi4manual/1.2/molden.html):. This is a fully working example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }; set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); nmopi = wfn.nmopi(); Da_so = wfn.Da(); Ca_inv = core.Matrix(""CA inv"", nmopi, nmopi); Ca_inv.copy(wfn.Ca()); Ca_inv.general_invert(); Da_mo = Matrix.triplet(Ca_inv, Da_so, Ca_inv, False, False, True); # Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False) # line from documentation; molden(wfn, 'ccsd_no.molden', density_a=Da_mo); ```. Loading this into Molden gives normals results:. ```. COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ```. When following the documentation, I got:. ```; COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -94.4305; H -12.0740; H -12.0736; ; Sum of Mulliken Charges: ********; ```. (FYI: my actual intention is not to visualize in Molden, but this is just an easy check.). Besides the documentation, there are some additional minor issues. I'll make a list here:. - [ ] Fix docs.; - [ ] When running the input for a second time, the new output is appended to the existing molden file, which is never useful.; - [ ] The current approach is not the most efficient, nor convenient: the user first has to compute a pseudo-inverse and then in the `molden` function a matrix is diagonalized. This can be done in one step by performing a generalized eigenvalue decomposition. This coul",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1485
https://github.com/psi4/psi4/issues/1485:1941,Performance,perform,performing,1941,"ill a problem with documentation (http://www.psicode.org/psi4manual/1.2/molden.html):. This is a fully working example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }; set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); nmopi = wfn.nmopi(); Da_so = wfn.Da(); Ca_inv = core.Matrix(""CA inv"", nmopi, nmopi); Ca_inv.copy(wfn.Ca()); Ca_inv.general_invert(); Da_mo = Matrix.triplet(Ca_inv, Da_so, Ca_inv, False, False, True); # Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False) # line from documentation; molden(wfn, 'ccsd_no.molden', density_a=Da_mo); ```. Loading this into Molden gives normals results:. ```. COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ```. When following the documentation, I got:. ```; COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -94.4305; H -12.0740; H -12.0736; ; Sum of Mulliken Charges: ********; ```. (FYI: my actual intention is not to visualize in Molden, but this is just an easy check.). Besides the documentation, there are some additional minor issues. I'll make a list here:. - [ ] Fix docs.; - [ ] When running the input for a second time, the new output is appended to the existing molden file, which is never useful.; - [ ] The current approach is not the most efficient, nor convenient: the user first has to compute a pseudo-inverse and then in the `molden` function a matrix is diagonalized. This can be done in one step by performing a generalized eigenvalue decomposition. This could happen inside the `molden` function, but then the API would need to change, because that would require the density matrix in the AO basis as input.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1485
https://github.com/psi4/psi4/pull/1487:116,Modifiability,inherit,inherited,116,"Closes #1482; DCT gradients are now compatible with ROHF starting orbitals. The problem was that UDCT wavefunctions inherited the `same_a_b_orbs_` of the reference wavefunction, which was wrong for ROHF references. This caused the derivative machinery to try to try an RDCT gradient, which failed for obvious reasons. While I was changing features inherited from the reference wavefunction, I gave DCT ""wavefunctions"" proper names. ## Checklist; - [x] [All DCT tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) and verified this fixes the original issue. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1487
https://github.com/psi4/psi4/pull/1487:348,Modifiability,inherit,inherited,348,"Closes #1482; DCT gradients are now compatible with ROHF starting orbitals. The problem was that UDCT wavefunctions inherited the `same_a_b_orbs_` of the reference wavefunction, which was wrong for ROHF references. This caused the derivative machinery to try to try an RDCT gradient, which failed for obvious reasons. While I was changing features inherited from the reference wavefunction, I gave DCT ""wavefunctions"" proper names. ## Checklist; - [x] [All DCT tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) and verified this fixes the original issue. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1487
https://github.com/psi4/psi4/pull/1487:461,Testability,test,tests,461,"Closes #1482; DCT gradients are now compatible with ROHF starting orbitals. The problem was that UDCT wavefunctions inherited the `same_a_b_orbs_` of the reference wavefunction, which was wrong for ROHF references. This caused the derivative machinery to try to try an RDCT gradient, which failed for obvious reasons. While I was changing features inherited from the reference wavefunction, I gave DCT ""wavefunctions"" proper names. ## Checklist; - [x] [All DCT tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) and verified this fixes the original issue. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1487
https://github.com/psi4/psi4/pull/1487:552,Testability,test,tests,552,"Closes #1482; DCT gradients are now compatible with ROHF starting orbitals. The problem was that UDCT wavefunctions inherited the `same_a_b_orbs_` of the reference wavefunction, which was wrong for ROHF references. This caused the derivative machinery to try to try an RDCT gradient, which failed for obvious reasons. While I was changing features inherited from the reference wavefunction, I gave DCT ""wavefunctions"" proper names. ## Checklist; - [x] [All DCT tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) and verified this fixes the original issue. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1487
https://github.com/psi4/psi4/pull/1488:413,Availability,error,error,413,"## Description; This is a part of *Psi4* porting to Windows (#933). The size of `aQT_` is `nmo_`. In `cookbook-rohf-orb-rot` test, `aPitzerCount` exceeds it:; https://github.com/psi4/psi4/blob/96296f1e3740b348bd207aa2ed0e3568e723a5a1/psi4/src/psi4/libtrans/integraltransform_moinfo.cc#L209-L212. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate memory error in `psi::IntegralTransform::process_spaces`; - [x] Fix memory error in `psi::IntegralTransform::process_spaces`. ## Questions; - [x] I don't know how to fix this, just highlighting the problem. Who could help? . ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1488
https://github.com/psi4/psi4/pull/1488:481,Availability,error,error,481,"## Description; This is a part of *Psi4* porting to Windows (#933). The size of `aQT_` is `nmo_`. In `cookbook-rohf-orb-rot` test, `aPitzerCount` exceeds it:; https://github.com/psi4/psi4/blob/96296f1e3740b348bd207aa2ed0e3568e723a5a1/psi4/src/psi4/libtrans/integraltransform_moinfo.cc#L209-L212. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate memory error in `psi::IntegralTransform::process_spaces`; - [x] Fix memory error in `psi::IntegralTransform::process_spaces`. ## Questions; - [x] I don't know how to fix this, just highlighting the problem. Who could help? . ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1488
https://github.com/psi4/psi4/pull/1488:125,Testability,test,test,125,"## Description; This is a part of *Psi4* porting to Windows (#933). The size of `aQT_` is `nmo_`. In `cookbook-rohf-orb-rot` test, `aPitzerCount` exceeds it:; https://github.com/psi4/psi4/blob/96296f1e3740b348bd207aa2ed0e3568e723a5a1/psi4/src/psi4/libtrans/integraltransform_moinfo.cc#L209-L212. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate memory error in `psi::IntegralTransform::process_spaces`; - [x] Fix memory error in `psi::IntegralTransform::process_spaces`. ## Questions; - [x] I don't know how to fix this, just highlighting the problem. Who could help? . ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1488
https://github.com/psi4/psi4/pull/1488:653,Testability,Test,Tests,653,"## Description; This is a part of *Psi4* porting to Windows (#933). The size of `aQT_` is `nmo_`. In `cookbook-rohf-orb-rot` test, `aPitzerCount` exceeds it:; https://github.com/psi4/psi4/blob/96296f1e3740b348bd207aa2ed0e3568e723a5a1/psi4/src/psi4/libtrans/integraltransform_moinfo.cc#L209-L212. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate memory error in `psi::IntegralTransform::process_spaces`; - [x] Fix memory error in `psi::IntegralTransform::process_spaces`. ## Questions; - [x] I don't know how to fix this, just highlighting the problem. Who could help? . ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1488
https://github.com/psi4/psi4/pull/1488:729,Testability,test,tests,729,"## Description; This is a part of *Psi4* porting to Windows (#933). The size of `aQT_` is `nmo_`. In `cookbook-rohf-orb-rot` test, `aPitzerCount` exceeds it:; https://github.com/psi4/psi4/blob/96296f1e3740b348bd207aa2ed0e3568e723a5a1/psi4/src/psi4/libtrans/integraltransform_moinfo.cc#L209-L212. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate memory error in `psi::IntegralTransform::process_spaces`; - [x] Fix memory error in `psi::IntegralTransform::process_spaces`. ## Questions; - [x] I don't know how to fix this, just highlighting the problem. Who could help? . ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1488
https://github.com/psi4/psi4/pull/1488:820,Testability,test,tests,820,"## Description; This is a part of *Psi4* porting to Windows (#933). The size of `aQT_` is `nmo_`. In `cookbook-rohf-orb-rot` test, `aPitzerCount` exceeds it:; https://github.com/psi4/psi4/blob/96296f1e3740b348bd207aa2ed0e3568e723a5a1/psi4/src/psi4/libtrans/integraltransform_moinfo.cc#L209-L212. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate memory error in `psi::IntegralTransform::process_spaces`; - [x] Fix memory error in `psi::IntegralTransform::process_spaces`. ## Questions; - [x] I don't know how to fix this, just highlighting the problem. Who could help? . ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1488
https://github.com/psi4/psi4/pull/1489:387,Security,access,access,387,"## Description; This is a part of *Psi4* porting to Windows (#933). The size of `leftp` is smaller than `doccpi_[h]` in `soscf-ref` tests:; https://github.com/psi4/psi4/blob/be5824d8926dd3e2c12a56944ceec50d1935ca83/psi4/src/psi4/libscf_solver/rohf.cc#L589-L591. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate invalid memory access in psi::ROHF::Hx; - [x] Fix invalid memory access in psi::ROHF::Hx. ## Questions; - [x] I don't know how to fix this, just highlighting the problem. Who could help?. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1489
https://github.com/psi4/psi4/pull/1489:437,Security,access,access,437,"## Description; This is a part of *Psi4* porting to Windows (#933). The size of `leftp` is smaller than `doccpi_[h]` in `soscf-ref` tests:; https://github.com/psi4/psi4/blob/be5824d8926dd3e2c12a56944ceec50d1935ca83/psi4/src/psi4/libscf_solver/rohf.cc#L589-L591. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate invalid memory access in psi::ROHF::Hx; - [x] Fix invalid memory access in psi::ROHF::Hx. ## Questions; - [x] I don't know how to fix this, just highlighting the problem. Who could help?. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1489
https://github.com/psi4/psi4/pull/1489:132,Testability,test,tests,132,"## Description; This is a part of *Psi4* porting to Windows (#933). The size of `leftp` is smaller than `doccpi_[h]` in `soscf-ref` tests:; https://github.com/psi4/psi4/blob/be5824d8926dd3e2c12a56944ceec50d1935ca83/psi4/src/psi4/libscf_solver/rohf.cc#L589-L591. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate invalid memory access in psi::ROHF::Hx; - [x] Fix invalid memory access in psi::ROHF::Hx. ## Questions; - [x] I don't know how to fix this, just highlighting the problem. Who could help?. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1489
https://github.com/psi4/psi4/pull/1489:582,Testability,Test,Tests,582,"## Description; This is a part of *Psi4* porting to Windows (#933). The size of `leftp` is smaller than `doccpi_[h]` in `soscf-ref` tests:; https://github.com/psi4/psi4/blob/be5824d8926dd3e2c12a56944ceec50d1935ca83/psi4/src/psi4/libscf_solver/rohf.cc#L589-L591. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate invalid memory access in psi::ROHF::Hx; - [x] Fix invalid memory access in psi::ROHF::Hx. ## Questions; - [x] I don't know how to fix this, just highlighting the problem. Who could help?. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1489
https://github.com/psi4/psi4/pull/1489:658,Testability,test,tests,658,"## Description; This is a part of *Psi4* porting to Windows (#933). The size of `leftp` is smaller than `doccpi_[h]` in `soscf-ref` tests:; https://github.com/psi4/psi4/blob/be5824d8926dd3e2c12a56944ceec50d1935ca83/psi4/src/psi4/libscf_solver/rohf.cc#L589-L591. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate invalid memory access in psi::ROHF::Hx; - [x] Fix invalid memory access in psi::ROHF::Hx. ## Questions; - [x] I don't know how to fix this, just highlighting the problem. Who could help?. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1489
https://github.com/psi4/psi4/pull/1489:749,Testability,test,tests,749,"## Description; This is a part of *Psi4* porting to Windows (#933). The size of `leftp` is smaller than `doccpi_[h]` in `soscf-ref` tests:; https://github.com/psi4/psi4/blob/be5824d8926dd3e2c12a56944ceec50d1935ca83/psi4/src/psi4/libscf_solver/rohf.cc#L589-L591. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Demonstrate invalid memory access in psi::ROHF::Hx; - [x] Fix invalid memory access in psi::ROHF::Hx. ## Questions; - [x] I don't know how to fix this, just highlighting the problem. Who could help?. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1489
https://github.com/psi4/psi4/pull/1490:150,Deployability,Release,Release,150,Add the option for SAPT to compute the second order exchange-dispersion term without the Single-Exchange Approximation. ## Todos; * __User-Facing for Release Notes__; - [ ] Add Sinf option to second order exchange-dispersion,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1490
https://github.com/psi4/psi4/pull/1491:757,Deployability,install,install,757,"## Description; Adds ability to call Axilrod-Teller-Muto (ATM) 3-body dispersion correction from Grimme's DFTD3. Fixes #1407 . ## Todos; - [x] Callable ATM correction from DFTD3 using `<func-name>-atmgr`; - [x] Moves all the dftd3 interface stuff out of psi and now calls qcengine MolSSI/QCEngine#46; - [x] Adds mp2d energies, also through qcengine. ## Questions; - [x] I've added QCEngine as if it were a required dependency. This is debatable, but there'll be lots of things we'll want to run this way, possibly efp/efp, geometric, pyoptking, etc. Let's debate. ## Notices; - For this month as things move quickly, I'm not copying (light py) packages over from conda-forge to psi4 channels. You'll have to `-c psi4/label/dev -c conda-forge` during `conda install` at times. (drat, there's a libxc on c-f and old qcel on psi4, which means that there's not a good channel ordering ...). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1491
https://github.com/psi4/psi4/pull/1491:231,Integrability,interface,interface,231,"## Description; Adds ability to call Axilrod-Teller-Muto (ATM) 3-body dispersion correction from Grimme's DFTD3. Fixes #1407 . ## Todos; - [x] Callable ATM correction from DFTD3 using `<func-name>-atmgr`; - [x] Moves all the dftd3 interface stuff out of psi and now calls qcengine MolSSI/QCEngine#46; - [x] Adds mp2d energies, also through qcengine. ## Questions; - [x] I've added QCEngine as if it were a required dependency. This is debatable, but there'll be lots of things we'll want to run this way, possibly efp/efp, geometric, pyoptking, etc. Let's debate. ## Notices; - For this month as things move quickly, I'm not copying (light py) packages over from conda-forge to psi4 channels. You'll have to `-c psi4/label/dev -c conda-forge` during `conda install` at times. (drat, there's a libxc on c-f and old qcel on psi4, which means that there's not a good channel ordering ...). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1491
https://github.com/psi4/psi4/pull/1491:415,Integrability,depend,dependency,415,"## Description; Adds ability to call Axilrod-Teller-Muto (ATM) 3-body dispersion correction from Grimme's DFTD3. Fixes #1407 . ## Todos; - [x] Callable ATM correction from DFTD3 using `<func-name>-atmgr`; - [x] Moves all the dftd3 interface stuff out of psi and now calls qcengine MolSSI/QCEngine#46; - [x] Adds mp2d energies, also through qcengine. ## Questions; - [x] I've added QCEngine as if it were a required dependency. This is debatable, but there'll be lots of things we'll want to run this way, possibly efp/efp, geometric, pyoptking, etc. Let's debate. ## Notices; - For this month as things move quickly, I'm not copying (light py) packages over from conda-forge to psi4 channels. You'll have to `-c psi4/label/dev -c conda-forge` during `conda install` at times. (drat, there's a libxc on c-f and old qcel on psi4, which means that there's not a good channel ordering ...). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1491
https://github.com/psi4/psi4/pull/1491:907,Testability,Test,Tests,907,"## Description; Adds ability to call Axilrod-Teller-Muto (ATM) 3-body dispersion correction from Grimme's DFTD3. Fixes #1407 . ## Todos; - [x] Callable ATM correction from DFTD3 using `<func-name>-atmgr`; - [x] Moves all the dftd3 interface stuff out of psi and now calls qcengine MolSSI/QCEngine#46; - [x] Adds mp2d energies, also through qcengine. ## Questions; - [x] I've added QCEngine as if it were a required dependency. This is debatable, but there'll be lots of things we'll want to run this way, possibly efp/efp, geometric, pyoptking, etc. Let's debate. ## Notices; - For this month as things move quickly, I'm not copying (light py) packages over from conda-forge to psi4 channels. You'll have to `-c psi4/label/dev -c conda-forge` during `conda install` at times. (drat, there's a libxc on c-f and old qcel on psi4, which means that there's not a good channel ordering ...). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1491
https://github.com/psi4/psi4/pull/1491:981,Testability,test,tests,981,"## Description; Adds ability to call Axilrod-Teller-Muto (ATM) 3-body dispersion correction from Grimme's DFTD3. Fixes #1407 . ## Todos; - [x] Callable ATM correction from DFTD3 using `<func-name>-atmgr`; - [x] Moves all the dftd3 interface stuff out of psi and now calls qcengine MolSSI/QCEngine#46; - [x] Adds mp2d energies, also through qcengine. ## Questions; - [x] I've added QCEngine as if it were a required dependency. This is debatable, but there'll be lots of things we'll want to run this way, possibly efp/efp, geometric, pyoptking, etc. Let's debate. ## Notices; - For this month as things move quickly, I'm not copying (light py) packages over from conda-forge to psi4 channels. You'll have to `-c psi4/label/dev -c conda-forge` during `conda install` at times. (drat, there's a libxc on c-f and old qcel on psi4, which means that there's not a good channel ordering ...). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1491
https://github.com/psi4/psi4/pull/1491:1072,Testability,test,tests,1072,"## Description; Adds ability to call Axilrod-Teller-Muto (ATM) 3-body dispersion correction from Grimme's DFTD3. Fixes #1407 . ## Todos; - [x] Callable ATM correction from DFTD3 using `<func-name>-atmgr`; - [x] Moves all the dftd3 interface stuff out of psi and now calls qcengine MolSSI/QCEngine#46; - [x] Adds mp2d energies, also through qcengine. ## Questions; - [x] I've added QCEngine as if it were a required dependency. This is debatable, but there'll be lots of things we'll want to run this way, possibly efp/efp, geometric, pyoptking, etc. Let's debate. ## Notices; - For this month as things move quickly, I'm not copying (light py) packages over from conda-forge to psi4 channels. You'll have to `-c psi4/label/dev -c conda-forge` during `conda install` at times. (drat, there's a libxc on c-f and old qcel on psi4, which means that there's not a good channel ordering ...). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1491
https://github.com/psi4/psi4/issues/1492:97,Usability,Clear,Clearly,97,"Currently, if ```basis_guess``` is not ```False```, Psi4 will use it even if ```guess = read```. Clearly, in this case Psi4 should actually read in the previous orbitals. IMHO the ```basis_guess``` keyword should be replaced with ```guess_basis``` for the definition of the guess basis, and ```basis``` should be added as an option to ```guess```. The guess for the minimal basis could maybe be specified as e.g. ```guess basis(core)``` or ```guess basis(sad)```?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1492
https://github.com/psi4/psi4/pull/1493:157,Availability,error,error,157,"## Description; The first iteration energy in SAD is at best non-variational (RHF, UHF), and at worst completely nonsensical (ROHF, CUHF). As neither a DIIS error can be formed in the lack of a proper density matrix, this PR sets the first iteration energy to zero, so that only sensical energies are printed out. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess energy correctly evaluated in ROHF and CUHF; - [x] Guess energy properly labeled. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1493
https://github.com/psi4/psi4/pull/1493:36,Energy Efficiency,energy,energy,36,"## Description; The first iteration energy in SAD is at best non-variational (RHF, UHF), and at worst completely nonsensical (ROHF, CUHF). As neither a DIIS error can be formed in the lack of a proper density matrix, this PR sets the first iteration energy to zero, so that only sensical energies are printed out. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess energy correctly evaluated in ROHF and CUHF; - [x] Guess energy properly labeled. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1493
https://github.com/psi4/psi4/pull/1493:250,Energy Efficiency,energy,energy,250,"## Description; The first iteration energy in SAD is at best non-variational (RHF, UHF), and at worst completely nonsensical (ROHF, CUHF). As neither a DIIS error can be formed in the lack of a proper density matrix, this PR sets the first iteration energy to zero, so that only sensical energies are printed out. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess energy correctly evaluated in ROHF and CUHF; - [x] Guess energy properly labeled. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1493
https://github.com/psi4/psi4/pull/1493:418,Energy Efficiency,energy,energy,418,"## Description; The first iteration energy in SAD is at best non-variational (RHF, UHF), and at worst completely nonsensical (ROHF, CUHF). As neither a DIIS error can be formed in the lack of a proper density matrix, this PR sets the first iteration energy to zero, so that only sensical energies are printed out. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess energy correctly evaluated in ROHF and CUHF; - [x] Guess energy properly labeled. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1493
https://github.com/psi4/psi4/pull/1493:475,Energy Efficiency,energy,energy,475,"## Description; The first iteration energy in SAD is at best non-variational (RHF, UHF), and at worst completely nonsensical (ROHF, CUHF). As neither a DIIS error can be formed in the lack of a proper density matrix, this PR sets the first iteration energy to zero, so that only sensical energies are printed out. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess energy correctly evaluated in ROHF and CUHF; - [x] Guess energy properly labeled. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1493
https://github.com/psi4/psi4/pull/1493:551,Testability,Test,Tests,551,"## Description; The first iteration energy in SAD is at best non-variational (RHF, UHF), and at worst completely nonsensical (ROHF, CUHF). As neither a DIIS error can be formed in the lack of a proper density matrix, this PR sets the first iteration energy to zero, so that only sensical energies are printed out. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess energy correctly evaluated in ROHF and CUHF; - [x] Guess energy properly labeled. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1493
https://github.com/psi4/psi4/pull/1493:625,Testability,test,tests,625,"## Description; The first iteration energy in SAD is at best non-variational (RHF, UHF), and at worst completely nonsensical (ROHF, CUHF). As neither a DIIS error can be formed in the lack of a proper density matrix, this PR sets the first iteration energy to zero, so that only sensical energies are printed out. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess energy correctly evaluated in ROHF and CUHF; - [x] Guess energy properly labeled. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1493
https://github.com/psi4/psi4/pull/1493:716,Testability,test,tests,716,"## Description; The first iteration energy in SAD is at best non-variational (RHF, UHF), and at worst completely nonsensical (ROHF, CUHF). As neither a DIIS error can be formed in the lack of a proper density matrix, this PR sets the first iteration energy to zero, so that only sensical energies are printed out. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess energy correctly evaluated in ROHF and CUHF; - [x] Guess energy properly labeled. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1493
https://github.com/psi4/psi4/pull/1494:274,Availability,error,error,274,"## Description; heals up the remaining broken test cases except for cookbook-rohf-rot. ## Todos; - [x] ecp: now assert Z on molecule when ordinary basis applied, not just E… …; - [x] df: df_fitting_condition was defaulting to 1e-12 unless explicitly set; - [x]better format error and also print to terminal. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1494
https://github.com/psi4/psi4/pull/1494:46,Testability,test,test,46,"## Description; heals up the remaining broken test cases except for cookbook-rohf-rot. ## Todos; - [x] ecp: now assert Z on molecule when ordinary basis applied, not just E… …; - [x] df: df_fitting_condition was defaulting to 1e-12 unless explicitly set; - [x]better format error and also print to terminal. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1494
https://github.com/psi4/psi4/pull/1494:112,Testability,assert,assert,112,"## Description; heals up the remaining broken test cases except for cookbook-rohf-rot. ## Todos; - [x] ecp: now assert Z on molecule when ordinary basis applied, not just E… …; - [x] df: df_fitting_condition was defaulting to 1e-12 unless explicitly set; - [x]better format error and also print to terminal. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1494
https://github.com/psi4/psi4/pull/1494:328,Testability,Test,Tests,328,"## Description; heals up the remaining broken test cases except for cookbook-rohf-rot. ## Todos; - [x] ecp: now assert Z on molecule when ordinary basis applied, not just E… …; - [x] df: df_fitting_condition was defaulting to 1e-12 unless explicitly set; - [x]better format error and also print to terminal. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1494
https://github.com/psi4/psi4/pull/1494:402,Testability,test,tests,402,"## Description; heals up the remaining broken test cases except for cookbook-rohf-rot. ## Todos; - [x] ecp: now assert Z on molecule when ordinary basis applied, not just E… …; - [x] df: df_fitting_condition was defaulting to 1e-12 unless explicitly set; - [x]better format error and also print to terminal. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1494
https://github.com/psi4/psi4/pull/1494:493,Testability,test,tests,493,"## Description; heals up the remaining broken test cases except for cookbook-rohf-rot. ## Todos; - [x] ecp: now assert Z on molecule when ordinary basis applied, not just E… …; - [x] df: df_fitting_condition was defaulting to 1e-12 unless explicitly set; - [x]better format error and also print to terminal. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1494
https://github.com/psi4/psi4/pull/1495:548,Availability,failure,failures,548,"## Description; Use a centralized function to determine the scratch name associated with scratch files, to make sure they're being read and written consistently. Fixes `cookbook-rohf-orbrot`, which was writing the modified orbitals to a location other than what the SCF code expects, resulting in them being ignored. ## Checklist; - [x] Cleaned up `cookbook-rohf-orbrot` input file; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); The following (unrelated) failures persist, but are fixed in #1494 .; ```; The following tests FAILED:; 223 - mints8 (Failed); 291 - opt-irc-1 (Failed); ```. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1495
https://github.com/psi4/psi4/pull/1495:423,Testability,test,tests,423,"## Description; Use a centralized function to determine the scratch name associated with scratch files, to make sure they're being read and written consistently. Fixes `cookbook-rohf-orbrot`, which was writing the modified orbitals to a location other than what the SCF code expects, resulting in them being ignored. ## Checklist; - [x] Cleaned up `cookbook-rohf-orbrot` input file; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); The following (unrelated) failures persist, but are fixed in #1494 .; ```; The following tests FAILED:; 223 - mints8 (Failed); 291 - opt-irc-1 (Failed); ```. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1495
https://github.com/psi4/psi4/pull/1495:514,Testability,test,tests,514,"## Description; Use a centralized function to determine the scratch name associated with scratch files, to make sure they're being read and written consistently. Fixes `cookbook-rohf-orbrot`, which was writing the modified orbitals to a location other than what the SCF code expects, resulting in them being ignored. ## Checklist; - [x] Cleaned up `cookbook-rohf-orbrot` input file; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); The following (unrelated) failures persist, but are fixed in #1494 .; ```; The following tests FAILED:; 223 - mints8 (Failed); 291 - opt-irc-1 (Failed); ```. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1495
https://github.com/psi4/psi4/pull/1495:611,Testability,test,tests,611,"## Description; Use a centralized function to determine the scratch name associated with scratch files, to make sure they're being read and written consistently. Fixes `cookbook-rohf-orbrot`, which was writing the modified orbitals to a location other than what the SCF code expects, resulting in them being ignored. ## Checklist; - [x] Cleaned up `cookbook-rohf-orbrot` input file; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); The following (unrelated) failures persist, but are fixed in #1494 .; ```; The following tests FAILED:; 223 - mints8 (Failed); 291 - opt-irc-1 (Failed); ```. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1495
https://github.com/psi4/psi4/issues/1496:165,Deployability,Update,Update,165,"Let me try to document the procedure (besides the actual version bump, which is already documented). This issue can be scratch space, so everyone can post easily. * Update copyright year in licenses: ; `user@host:~/path/to/psi4 $ grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1496
https://github.com/psi4/psi4/issues/1497:222,Energy Efficiency,energy,energy,222,"Here's a torture rack example that doesn't work in Psi4.; ```; set sad_scf_type direct; set scf_type direct; set df_scf_guess false; set sad_print 2; set guess sad. molecule xe1 {; 0 1; Xe; }; basis {; assign Xe 3-21G; }; energy('scf'). molecule xe2 {; 0 1; Xe; }; basis {; assign Xe def2-SVP; }; energy('scf'). molecule xe12 {; 0 1; Xe1; Xe2 1 100.0; }. basis {; assign Xe1 3-21G; assign Xe2 def2-SVP; }; energy('scf'); ```. The first calculation in 3-21G gives -7200.75273615335664; the SAD guess is already converged. The second calculation in def2-SVP gives -324.58820001177179 as the SAD guess energy, and -328.29839367561794 as the converged energy. The guess should also be fully converged here, so there some issue must still remain in the guess code. However, the real issue is the third calculation: now, instead of -7200.75273615335664, the SAD for the first atom gives -7200.18106523988899, so there's a 0.6 Hartree difference. The SAD for the second atom gives -2516.58141792475817? Also, SCF on the dimer fails to converge; this is probably an issue with the ECP.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1497
https://github.com/psi4/psi4/issues/1497:297,Energy Efficiency,energy,energy,297,"Here's a torture rack example that doesn't work in Psi4.; ```; set sad_scf_type direct; set scf_type direct; set df_scf_guess false; set sad_print 2; set guess sad. molecule xe1 {; 0 1; Xe; }; basis {; assign Xe 3-21G; }; energy('scf'). molecule xe2 {; 0 1; Xe; }; basis {; assign Xe def2-SVP; }; energy('scf'). molecule xe12 {; 0 1; Xe1; Xe2 1 100.0; }. basis {; assign Xe1 3-21G; assign Xe2 def2-SVP; }; energy('scf'); ```. The first calculation in 3-21G gives -7200.75273615335664; the SAD guess is already converged. The second calculation in def2-SVP gives -324.58820001177179 as the SAD guess energy, and -328.29839367561794 as the converged energy. The guess should also be fully converged here, so there some issue must still remain in the guess code. However, the real issue is the third calculation: now, instead of -7200.75273615335664, the SAD for the first atom gives -7200.18106523988899, so there's a 0.6 Hartree difference. The SAD for the second atom gives -2516.58141792475817? Also, SCF on the dimer fails to converge; this is probably an issue with the ECP.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1497
https://github.com/psi4/psi4/issues/1497:406,Energy Efficiency,energy,energy,406,"Here's a torture rack example that doesn't work in Psi4.; ```; set sad_scf_type direct; set scf_type direct; set df_scf_guess false; set sad_print 2; set guess sad. molecule xe1 {; 0 1; Xe; }; basis {; assign Xe 3-21G; }; energy('scf'). molecule xe2 {; 0 1; Xe; }; basis {; assign Xe def2-SVP; }; energy('scf'). molecule xe12 {; 0 1; Xe1; Xe2 1 100.0; }. basis {; assign Xe1 3-21G; assign Xe2 def2-SVP; }; energy('scf'); ```. The first calculation in 3-21G gives -7200.75273615335664; the SAD guess is already converged. The second calculation in def2-SVP gives -324.58820001177179 as the SAD guess energy, and -328.29839367561794 as the converged energy. The guess should also be fully converged here, so there some issue must still remain in the guess code. However, the real issue is the third calculation: now, instead of -7200.75273615335664, the SAD for the first atom gives -7200.18106523988899, so there's a 0.6 Hartree difference. The SAD for the second atom gives -2516.58141792475817? Also, SCF on the dimer fails to converge; this is probably an issue with the ECP.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1497
https://github.com/psi4/psi4/issues/1497:599,Energy Efficiency,energy,energy,599,"Here's a torture rack example that doesn't work in Psi4.; ```; set sad_scf_type direct; set scf_type direct; set df_scf_guess false; set sad_print 2; set guess sad. molecule xe1 {; 0 1; Xe; }; basis {; assign Xe 3-21G; }; energy('scf'). molecule xe2 {; 0 1; Xe; }; basis {; assign Xe def2-SVP; }; energy('scf'). molecule xe12 {; 0 1; Xe1; Xe2 1 100.0; }. basis {; assign Xe1 3-21G; assign Xe2 def2-SVP; }; energy('scf'); ```. The first calculation in 3-21G gives -7200.75273615335664; the SAD guess is already converged. The second calculation in def2-SVP gives -324.58820001177179 as the SAD guess energy, and -328.29839367561794 as the converged energy. The guess should also be fully converged here, so there some issue must still remain in the guess code. However, the real issue is the third calculation: now, instead of -7200.75273615335664, the SAD for the first atom gives -7200.18106523988899, so there's a 0.6 Hartree difference. The SAD for the second atom gives -2516.58141792475817? Also, SCF on the dimer fails to converge; this is probably an issue with the ECP.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1497
https://github.com/psi4/psi4/issues/1497:648,Energy Efficiency,energy,energy,648,"Here's a torture rack example that doesn't work in Psi4.; ```; set sad_scf_type direct; set scf_type direct; set df_scf_guess false; set sad_print 2; set guess sad. molecule xe1 {; 0 1; Xe; }; basis {; assign Xe 3-21G; }; energy('scf'). molecule xe2 {; 0 1; Xe; }; basis {; assign Xe def2-SVP; }; energy('scf'). molecule xe12 {; 0 1; Xe1; Xe2 1 100.0; }. basis {; assign Xe1 3-21G; assign Xe2 def2-SVP; }; energy('scf'); ```. The first calculation in 3-21G gives -7200.75273615335664; the SAD guess is already converged. The second calculation in def2-SVP gives -324.58820001177179 as the SAD guess energy, and -328.29839367561794 as the converged energy. The guess should also be fully converged here, so there some issue must still remain in the guess code. However, the real issue is the third calculation: now, instead of -7200.75273615335664, the SAD for the first atom gives -7200.18106523988899, so there's a 0.6 Hartree difference. The SAD for the second atom gives -2516.58141792475817? Also, SCF on the dimer fails to converge; this is probably an issue with the ECP.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1497
https://github.com/psi4/psi4/pull/1498:253,Energy Efficiency,energy,energy,253,"## Description; This PR implements a Huckel guess, based on the routine I recently implemented in ERKALE and described in https://pubs.acs.org/doi/10.1021/acs.jctc.8b01089. The guess reproduces an idempotent density matrix, yielding a variational guess energy. It also appears to be an universal improvement over SAD: because the Huckel guess has energetics, it is able to e.g. adapt to different charge and spin states. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess works without symmetry; - [x] Guess works in all symmetries. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1498
https://github.com/psi4/psi4/pull/1498:378,Energy Efficiency,adapt,adapt,378,"## Description; This PR implements a Huckel guess, based on the routine I recently implemented in ERKALE and described in https://pubs.acs.org/doi/10.1021/acs.jctc.8b01089. The guess reproduces an idempotent density matrix, yielding a variational guess energy. It also appears to be an universal improvement over SAD: because the Huckel guess has energetics, it is able to e.g. adapt to different charge and spin states. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess works without symmetry; - [x] Guess works in all symmetries. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1498
https://github.com/psi4/psi4/pull/1498:397,Energy Efficiency,charge,charge,397,"## Description; This PR implements a Huckel guess, based on the routine I recently implemented in ERKALE and described in https://pubs.acs.org/doi/10.1021/acs.jctc.8b01089. The guess reproduces an idempotent density matrix, yielding a variational guess energy. It also appears to be an universal improvement over SAD: because the Huckel guess has energetics, it is able to e.g. adapt to different charge and spin states. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess works without symmetry; - [x] Guess works in all symmetries. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1498
https://github.com/psi4/psi4/pull/1498:64,Integrability,rout,routine,64,"## Description; This PR implements a Huckel guess, based on the routine I recently implemented in ERKALE and described in https://pubs.acs.org/doi/10.1021/acs.jctc.8b01089. The guess reproduces an idempotent density matrix, yielding a variational guess energy. It also appears to be an universal improvement over SAD: because the Huckel guess has energetics, it is able to e.g. adapt to different charge and spin states. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess works without symmetry; - [x] Guess works in all symmetries. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1498
https://github.com/psi4/psi4/pull/1498:378,Modifiability,adapt,adapt,378,"## Description; This PR implements a Huckel guess, based on the routine I recently implemented in ERKALE and described in https://pubs.acs.org/doi/10.1021/acs.jctc.8b01089. The guess reproduces an idempotent density matrix, yielding a variational guess energy. It also appears to be an universal improvement over SAD: because the Huckel guess has energetics, it is able to e.g. adapt to different charge and spin states. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess works without symmetry; - [x] Guess works in all symmetries. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1498
https://github.com/psi4/psi4/pull/1498:637,Testability,Test,Tests,637,"## Description; This PR implements a Huckel guess, based on the routine I recently implemented in ERKALE and described in https://pubs.acs.org/doi/10.1021/acs.jctc.8b01089. The guess reproduces an idempotent density matrix, yielding a variational guess energy. It also appears to be an universal improvement over SAD: because the Huckel guess has energetics, it is able to e.g. adapt to different charge and spin states. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess works without symmetry; - [x] Guess works in all symmetries. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1498
https://github.com/psi4/psi4/pull/1498:711,Testability,test,tests,711,"## Description; This PR implements a Huckel guess, based on the routine I recently implemented in ERKALE and described in https://pubs.acs.org/doi/10.1021/acs.jctc.8b01089. The guess reproduces an idempotent density matrix, yielding a variational guess energy. It also appears to be an universal improvement over SAD: because the Huckel guess has energetics, it is able to e.g. adapt to different charge and spin states. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess works without symmetry; - [x] Guess works in all symmetries. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1498
https://github.com/psi4/psi4/pull/1498:802,Testability,test,tests,802,"## Description; This PR implements a Huckel guess, based on the routine I recently implemented in ERKALE and described in https://pubs.acs.org/doi/10.1021/acs.jctc.8b01089. The guess reproduces an idempotent density matrix, yielding a variational guess energy. It also appears to be an universal improvement over SAD: because the Huckel guess has energetics, it is able to e.g. adapt to different charge and spin states. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess works without symmetry; - [x] Guess works in all symmetries. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1498
https://github.com/psi4/psi4/pull/1499:642,Integrability,depend,dependence,642,"## Description; This PR implements The Combined Schwarz Approximation Maximum (CSAM) estimate for prescreening two-electron integrals. CSAM was described in this paper by Thompson and Ochsenfeld: https://aip.scitation.org/doi/10.1063/1.4994190. In Psi4, TEIs are screened using the well-known Cauchy-Schwarz Inequality:; `(pq|rs)^2 <= (pq|pq)*(rs|rs)`; This type of screening is effective when the overlap between orbitals p and q (or r and s) is sufficiently small. However, it doesn't take into account the scenario in which the two orbital products pq and rs are individually significant, but very far apart. CSAM factors in this distance dependence. . The following benchmarks show modest improvements in efficiency with negligible loss in accuracy:; ![Screen Shot 2019-05-28 at 1 59 57 PM](https://user-images.githubusercontent.com/16376046/58500885-1c618d00-8151-11e9-82f8-ced6ce967483.png). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds CSAM screening to ERISieve ; - [x] Adds python binding for the ERISieve class; - [x] Adds a ERISieve PsiAPI test. ## Questions; - [ ] The `ERISieve` constructor now takes a boolean `do_csam` (which defaults to `false`). What's the best way to hook this up to the user interface?; - [x] The `ERISieve` class contains a partially-finished attempt at implementing a similar type of screening (QQR). Are their plans to finish this? Or implement other integral-related optimizations?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1499
https://github.com/psi4/psi4/pull/1499:1269,Integrability,interface,interface,1269,"## Description; This PR implements The Combined Schwarz Approximation Maximum (CSAM) estimate for prescreening two-electron integrals. CSAM was described in this paper by Thompson and Ochsenfeld: https://aip.scitation.org/doi/10.1063/1.4994190. In Psi4, TEIs are screened using the well-known Cauchy-Schwarz Inequality:; `(pq|rs)^2 <= (pq|pq)*(rs|rs)`; This type of screening is effective when the overlap between orbitals p and q (or r and s) is sufficiently small. However, it doesn't take into account the scenario in which the two orbital products pq and rs are individually significant, but very far apart. CSAM factors in this distance dependence. . The following benchmarks show modest improvements in efficiency with negligible loss in accuracy:; ![Screen Shot 2019-05-28 at 1 59 57 PM](https://user-images.githubusercontent.com/16376046/58500885-1c618d00-8151-11e9-82f8-ced6ce967483.png). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds CSAM screening to ERISieve ; - [x] Adds python binding for the ERISieve class; - [x] Adds a ERISieve PsiAPI test. ## Questions; - [ ] The `ERISieve` constructor now takes a boolean `do_csam` (which defaults to `false`). What's the best way to hook this up to the user interface?; - [x] The `ERISieve` class contains a partially-finished attempt at implementing a similar type of screening (QQR). Are their plans to finish this? Or implement other integral-related optimizations?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1499
https://github.com/psi4/psi4/pull/1499:1465,Performance,optimiz,optimizations,1465,"## Description; This PR implements The Combined Schwarz Approximation Maximum (CSAM) estimate for prescreening two-electron integrals. CSAM was described in this paper by Thompson and Ochsenfeld: https://aip.scitation.org/doi/10.1063/1.4994190. In Psi4, TEIs are screened using the well-known Cauchy-Schwarz Inequality:; `(pq|rs)^2 <= (pq|pq)*(rs|rs)`; This type of screening is effective when the overlap between orbitals p and q (or r and s) is sufficiently small. However, it doesn't take into account the scenario in which the two orbital products pq and rs are individually significant, but very far apart. CSAM factors in this distance dependence. . The following benchmarks show modest improvements in efficiency with negligible loss in accuracy:; ![Screen Shot 2019-05-28 at 1 59 57 PM](https://user-images.githubusercontent.com/16376046/58500885-1c618d00-8151-11e9-82f8-ced6ce967483.png). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds CSAM screening to ERISieve ; - [x] Adds python binding for the ERISieve class; - [x] Adds a ERISieve PsiAPI test. ## Questions; - [ ] The `ERISieve` constructor now takes a boolean `do_csam` (which defaults to `false`). What's the best way to hook this up to the user interface?; - [x] The `ERISieve` class contains a partially-finished attempt at implementing a similar type of screening (QQR). Are their plans to finish this? Or implement other integral-related optimizations?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1499
https://github.com/psi4/psi4/pull/1499:670,Testability,benchmark,benchmarks,670,"## Description; This PR implements The Combined Schwarz Approximation Maximum (CSAM) estimate for prescreening two-electron integrals. CSAM was described in this paper by Thompson and Ochsenfeld: https://aip.scitation.org/doi/10.1063/1.4994190. In Psi4, TEIs are screened using the well-known Cauchy-Schwarz Inequality:; `(pq|rs)^2 <= (pq|pq)*(rs|rs)`; This type of screening is effective when the overlap between orbitals p and q (or r and s) is sufficiently small. However, it doesn't take into account the scenario in which the two orbital products pq and rs are individually significant, but very far apart. CSAM factors in this distance dependence. . The following benchmarks show modest improvements in efficiency with negligible loss in accuracy:; ![Screen Shot 2019-05-28 at 1 59 57 PM](https://user-images.githubusercontent.com/16376046/58500885-1c618d00-8151-11e9-82f8-ced6ce967483.png). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds CSAM screening to ERISieve ; - [x] Adds python binding for the ERISieve class; - [x] Adds a ERISieve PsiAPI test. ## Questions; - [ ] The `ERISieve` constructor now takes a boolean `do_csam` (which defaults to `false`). What's the best way to hook this up to the user interface?; - [x] The `ERISieve` class contains a partially-finished attempt at implementing a similar type of screening (QQR). Are their plans to finish this? Or implement other integral-related optimizations?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1499
https://github.com/psi4/psi4/pull/1499:1109,Testability,test,test,1109,"## Description; This PR implements The Combined Schwarz Approximation Maximum (CSAM) estimate for prescreening two-electron integrals. CSAM was described in this paper by Thompson and Ochsenfeld: https://aip.scitation.org/doi/10.1063/1.4994190. In Psi4, TEIs are screened using the well-known Cauchy-Schwarz Inequality:; `(pq|rs)^2 <= (pq|pq)*(rs|rs)`; This type of screening is effective when the overlap between orbitals p and q (or r and s) is sufficiently small. However, it doesn't take into account the scenario in which the two orbital products pq and rs are individually significant, but very far apart. CSAM factors in this distance dependence. . The following benchmarks show modest improvements in efficiency with negligible loss in accuracy:; ![Screen Shot 2019-05-28 at 1 59 57 PM](https://user-images.githubusercontent.com/16376046/58500885-1c618d00-8151-11e9-82f8-ced6ce967483.png). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds CSAM screening to ERISieve ; - [x] Adds python binding for the ERISieve class; - [x] Adds a ERISieve PsiAPI test. ## Questions; - [ ] The `ERISieve` constructor now takes a boolean `do_csam` (which defaults to `false`). What's the best way to hook this up to the user interface?; - [x] The `ERISieve` class contains a partially-finished attempt at implementing a similar type of screening (QQR). Are their plans to finish this? Or implement other integral-related optimizations?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1499
https://github.com/psi4/psi4/pull/1499:1501,Testability,Test,Tests,1501,"## Description; This PR implements The Combined Schwarz Approximation Maximum (CSAM) estimate for prescreening two-electron integrals. CSAM was described in this paper by Thompson and Ochsenfeld: https://aip.scitation.org/doi/10.1063/1.4994190. In Psi4, TEIs are screened using the well-known Cauchy-Schwarz Inequality:; `(pq|rs)^2 <= (pq|pq)*(rs|rs)`; This type of screening is effective when the overlap between orbitals p and q (or r and s) is sufficiently small. However, it doesn't take into account the scenario in which the two orbital products pq and rs are individually significant, but very far apart. CSAM factors in this distance dependence. . The following benchmarks show modest improvements in efficiency with negligible loss in accuracy:; ![Screen Shot 2019-05-28 at 1 59 57 PM](https://user-images.githubusercontent.com/16376046/58500885-1c618d00-8151-11e9-82f8-ced6ce967483.png). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds CSAM screening to ERISieve ; - [x] Adds python binding for the ERISieve class; - [x] Adds a ERISieve PsiAPI test. ## Questions; - [ ] The `ERISieve` constructor now takes a boolean `do_csam` (which defaults to `false`). What's the best way to hook this up to the user interface?; - [x] The `ERISieve` class contains a partially-finished attempt at implementing a similar type of screening (QQR). Are their plans to finish this? Or implement other integral-related optimizations?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1499
https://github.com/psi4/psi4/pull/1499:1575,Testability,test,tests,1575,"## Description; This PR implements The Combined Schwarz Approximation Maximum (CSAM) estimate for prescreening two-electron integrals. CSAM was described in this paper by Thompson and Ochsenfeld: https://aip.scitation.org/doi/10.1063/1.4994190. In Psi4, TEIs are screened using the well-known Cauchy-Schwarz Inequality:; `(pq|rs)^2 <= (pq|pq)*(rs|rs)`; This type of screening is effective when the overlap between orbitals p and q (or r and s) is sufficiently small. However, it doesn't take into account the scenario in which the two orbital products pq and rs are individually significant, but very far apart. CSAM factors in this distance dependence. . The following benchmarks show modest improvements in efficiency with negligible loss in accuracy:; ![Screen Shot 2019-05-28 at 1 59 57 PM](https://user-images.githubusercontent.com/16376046/58500885-1c618d00-8151-11e9-82f8-ced6ce967483.png). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds CSAM screening to ERISieve ; - [x] Adds python binding for the ERISieve class; - [x] Adds a ERISieve PsiAPI test. ## Questions; - [ ] The `ERISieve` constructor now takes a boolean `do_csam` (which defaults to `false`). What's the best way to hook this up to the user interface?; - [x] The `ERISieve` class contains a partially-finished attempt at implementing a similar type of screening (QQR). Are their plans to finish this? Or implement other integral-related optimizations?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1499
https://github.com/psi4/psi4/pull/1499:1666,Testability,test,tests,1666,"## Description; This PR implements The Combined Schwarz Approximation Maximum (CSAM) estimate for prescreening two-electron integrals. CSAM was described in this paper by Thompson and Ochsenfeld: https://aip.scitation.org/doi/10.1063/1.4994190. In Psi4, TEIs are screened using the well-known Cauchy-Schwarz Inequality:; `(pq|rs)^2 <= (pq|pq)*(rs|rs)`; This type of screening is effective when the overlap between orbitals p and q (or r and s) is sufficiently small. However, it doesn't take into account the scenario in which the two orbital products pq and rs are individually significant, but very far apart. CSAM factors in this distance dependence. . The following benchmarks show modest improvements in efficiency with negligible loss in accuracy:; ![Screen Shot 2019-05-28 at 1 59 57 PM](https://user-images.githubusercontent.com/16376046/58500885-1c618d00-8151-11e9-82f8-ced6ce967483.png). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds CSAM screening to ERISieve ; - [x] Adds python binding for the ERISieve class; - [x] Adds a ERISieve PsiAPI test. ## Questions; - [ ] The `ERISieve` constructor now takes a boolean `do_csam` (which defaults to `false`). What's the best way to hook this up to the user interface?; - [x] The `ERISieve` class contains a partially-finished attempt at implementing a similar type of screening (QQR). Are their plans to finish this? Or implement other integral-related optimizations?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1499
https://github.com/psi4/psi4/pull/1500:291,Testability,Test,Tests,291,## Description; The instructions in the docstring did not result in a correct Molden file. Fixes #1485. No new features added. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix docstring. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1500
https://github.com/psi4/psi4/pull/1500:365,Testability,test,tests,365,## Description; The instructions in the docstring did not result in a correct Molden file. Fixes #1485. No new features added. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix docstring. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1500
https://github.com/psi4/psi4/pull/1500:456,Testability,test,tests,456,## Description; The instructions in the docstring did not result in a correct Molden file. Fixes #1485. No new features added. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix docstring. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1500
https://github.com/psi4/psi4/issues/1501:113,Deployability,release,release,113,"Hi Psi4 team,. I've seen some strange problems with the FCHK file in recent versions of Psi4. This includes 1.2 (release) and v1.3a1-405-gdcb0159 from github.; I am using the following commands to write out the FCHK file: . > energy, wfn = energy('PBE0', return_wfn=True); > ; > fchk_writer = psi4.FCHKWriter(wfn); > fchk_writer.write('TNB_n2_A.fchk'). This works correctly for small systems like H2O: all expected fields in the FCHK file are present. But for larger systems like TNB (file enclosed below), the following are missing:; 1) Alpha MO coefficients (Beta is present); 2) No orbital energies are present. There may be more fields missing, but these are the ones I know of. . What is odd is that the problem is not apparently systematic: the FCHK file is correct for the RDX molecule (all fields are present), but not TNB. . I need both the MO coefficients and MO energies for subsequent SAPT(DFT) calculations in CamCASP. We never had problems with Psi4 1.1, but need the AC in 1.2/3. Unfortunately this problem arises. . I hope this can be fixed and the structure/fields in the FCHK file made consistent with the specs. ; All the best,; Alston. **Input file:**. > memory 61440 MB; > ; > basis {; > assign aug-cc-pvdz; > }; > ; > molecule TNB_1 {; > no_reorient; > no_com; > units bohr; > 0 1; > O1 1.09555107 3.76703629 -7.83852576; > O2 1.12573623 6.36725616 -4.70326928; > O3 -2.95373205 4.13977831 3.05907653; > O4 -4.81462989 0.53449898 3.42022641; > O5 -3.04576492 -4.23365310 -7.04056005; > O6 -4.88147857 -5.23919973 -3.54614660; > N1 0.56718784 4.39077285 -5.70465171; > N2 -3.61888234 2.10279732 2.26585157; > N3 -3.68554450 -3.82553238 -4.88515975; > C1 -0.89474878 2.57110902 -4.18157565; > C2 -1.53597193 3.21430712 -1.73399499; > C3 -2.90523393 1.47230460 -0.35362235; > C4 -3.63263104 -0.83708361 -1.32968698; > C5 -2.93743373 -1.37538831 -3.78771254; > C6 -1.56886658 0.29097245 -5.25919020; > H1 -0.98802906 5.00949031 -0.93088016; > H2 -4.70324490 -2.17020139 -0.21423238; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1501
https://github.com/psi4/psi4/issues/1501:226,Energy Efficiency,energy,energy,226,"Hi Psi4 team,. I've seen some strange problems with the FCHK file in recent versions of Psi4. This includes 1.2 (release) and v1.3a1-405-gdcb0159 from github.; I am using the following commands to write out the FCHK file: . > energy, wfn = energy('PBE0', return_wfn=True); > ; > fchk_writer = psi4.FCHKWriter(wfn); > fchk_writer.write('TNB_n2_A.fchk'). This works correctly for small systems like H2O: all expected fields in the FCHK file are present. But for larger systems like TNB (file enclosed below), the following are missing:; 1) Alpha MO coefficients (Beta is present); 2) No orbital energies are present. There may be more fields missing, but these are the ones I know of. . What is odd is that the problem is not apparently systematic: the FCHK file is correct for the RDX molecule (all fields are present), but not TNB. . I need both the MO coefficients and MO energies for subsequent SAPT(DFT) calculations in CamCASP. We never had problems with Psi4 1.1, but need the AC in 1.2/3. Unfortunately this problem arises. . I hope this can be fixed and the structure/fields in the FCHK file made consistent with the specs. ; All the best,; Alston. **Input file:**. > memory 61440 MB; > ; > basis {; > assign aug-cc-pvdz; > }; > ; > molecule TNB_1 {; > no_reorient; > no_com; > units bohr; > 0 1; > O1 1.09555107 3.76703629 -7.83852576; > O2 1.12573623 6.36725616 -4.70326928; > O3 -2.95373205 4.13977831 3.05907653; > O4 -4.81462989 0.53449898 3.42022641; > O5 -3.04576492 -4.23365310 -7.04056005; > O6 -4.88147857 -5.23919973 -3.54614660; > N1 0.56718784 4.39077285 -5.70465171; > N2 -3.61888234 2.10279732 2.26585157; > N3 -3.68554450 -3.82553238 -4.88515975; > C1 -0.89474878 2.57110902 -4.18157565; > C2 -1.53597193 3.21430712 -1.73399499; > C3 -2.90523393 1.47230460 -0.35362235; > C4 -3.63263104 -0.83708361 -1.32968698; > C5 -2.93743373 -1.37538831 -3.78771254; > C6 -1.56886658 0.29097245 -5.25919020; > H1 -0.98802906 5.00949031 -0.93088016; > H2 -4.70324490 -2.17020139 -0.21423238; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1501
https://github.com/psi4/psi4/issues/1501:240,Energy Efficiency,energy,energy,240,"Hi Psi4 team,. I've seen some strange problems with the FCHK file in recent versions of Psi4. This includes 1.2 (release) and v1.3a1-405-gdcb0159 from github.; I am using the following commands to write out the FCHK file: . > energy, wfn = energy('PBE0', return_wfn=True); > ; > fchk_writer = psi4.FCHKWriter(wfn); > fchk_writer.write('TNB_n2_A.fchk'). This works correctly for small systems like H2O: all expected fields in the FCHK file are present. But for larger systems like TNB (file enclosed below), the following are missing:; 1) Alpha MO coefficients (Beta is present); 2) No orbital energies are present. There may be more fields missing, but these are the ones I know of. . What is odd is that the problem is not apparently systematic: the FCHK file is correct for the RDX molecule (all fields are present), but not TNB. . I need both the MO coefficients and MO energies for subsequent SAPT(DFT) calculations in CamCASP. We never had problems with Psi4 1.1, but need the AC in 1.2/3. Unfortunately this problem arises. . I hope this can be fixed and the structure/fields in the FCHK file made consistent with the specs. ; All the best,; Alston. **Input file:**. > memory 61440 MB; > ; > basis {; > assign aug-cc-pvdz; > }; > ; > molecule TNB_1 {; > no_reorient; > no_com; > units bohr; > 0 1; > O1 1.09555107 3.76703629 -7.83852576; > O2 1.12573623 6.36725616 -4.70326928; > O3 -2.95373205 4.13977831 3.05907653; > O4 -4.81462989 0.53449898 3.42022641; > O5 -3.04576492 -4.23365310 -7.04056005; > O6 -4.88147857 -5.23919973 -3.54614660; > N1 0.56718784 4.39077285 -5.70465171; > N2 -3.61888234 2.10279732 2.26585157; > N3 -3.68554450 -3.82553238 -4.88515975; > C1 -0.89474878 2.57110902 -4.18157565; > C2 -1.53597193 3.21430712 -1.73399499; > C3 -2.90523393 1.47230460 -0.35362235; > C4 -3.63263104 -0.83708361 -1.32968698; > C5 -2.93743373 -1.37538831 -3.78771254; > C6 -1.56886658 0.29097245 -5.25919020; > H1 -0.98802906 5.00949031 -0.93088016; > H2 -4.70324490 -2.17020139 -0.21423238; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1501
https://github.com/psi4/psi4/issues/1501:2144,Energy Efficiency,energy,energy,2144," > ; > fchk_writer = psi4.FCHKWriter(wfn); > fchk_writer.write('TNB_n2_A.fchk'). This works correctly for small systems like H2O: all expected fields in the FCHK file are present. But for larger systems like TNB (file enclosed below), the following are missing:; 1) Alpha MO coefficients (Beta is present); 2) No orbital energies are present. There may be more fields missing, but these are the ones I know of. . What is odd is that the problem is not apparently systematic: the FCHK file is correct for the RDX molecule (all fields are present), but not TNB. . I need both the MO coefficients and MO energies for subsequent SAPT(DFT) calculations in CamCASP. We never had problems with Psi4 1.1, but need the AC in 1.2/3. Unfortunately this problem arises. . I hope this can be fixed and the structure/fields in the FCHK file made consistent with the specs. ; All the best,; Alston. **Input file:**. > memory 61440 MB; > ; > basis {; > assign aug-cc-pvdz; > }; > ; > molecule TNB_1 {; > no_reorient; > no_com; > units bohr; > 0 1; > O1 1.09555107 3.76703629 -7.83852576; > O2 1.12573623 6.36725616 -4.70326928; > O3 -2.95373205 4.13977831 3.05907653; > O4 -4.81462989 0.53449898 3.42022641; > O5 -3.04576492 -4.23365310 -7.04056005; > O6 -4.88147857 -5.23919973 -3.54614660; > N1 0.56718784 4.39077285 -5.70465171; > N2 -3.61888234 2.10279732 2.26585157; > N3 -3.68554450 -3.82553238 -4.88515975; > C1 -0.89474878 2.57110902 -4.18157565; > C2 -1.53597193 3.21430712 -1.73399499; > C3 -2.90523393 1.47230460 -0.35362235; > C4 -3.63263104 -0.83708361 -1.32968698; > C5 -2.93743373 -1.37538831 -3.78771254; > C6 -1.56886658 0.29097245 -5.25919020; > H1 -0.98802906 5.00949031 -0.93088016; > H2 -4.70324490 -2.17020139 -0.21423238; > H3 -1.04610204 -0.17104401 -7.17780858; > }; > set {; > s_tolerance 1.0E-04; > ints_tolerance 1.0E-10; > dft_grac_shift 0.053900; > }; > ; > energy, wfn = energy('PBE0', return_wfn=True); > ; > fchk_writer = psi4.FCHKWriter(wfn); > fchk_writer.write('TNB_minimal.fchk')",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1501
https://github.com/psi4/psi4/issues/1501:2158,Energy Efficiency,energy,energy,2158," > ; > fchk_writer = psi4.FCHKWriter(wfn); > fchk_writer.write('TNB_n2_A.fchk'). This works correctly for small systems like H2O: all expected fields in the FCHK file are present. But for larger systems like TNB (file enclosed below), the following are missing:; 1) Alpha MO coefficients (Beta is present); 2) No orbital energies are present. There may be more fields missing, but these are the ones I know of. . What is odd is that the problem is not apparently systematic: the FCHK file is correct for the RDX molecule (all fields are present), but not TNB. . I need both the MO coefficients and MO energies for subsequent SAPT(DFT) calculations in CamCASP. We never had problems with Psi4 1.1, but need the AC in 1.2/3. Unfortunately this problem arises. . I hope this can be fixed and the structure/fields in the FCHK file made consistent with the specs. ; All the best,; Alston. **Input file:**. > memory 61440 MB; > ; > basis {; > assign aug-cc-pvdz; > }; > ; > molecule TNB_1 {; > no_reorient; > no_com; > units bohr; > 0 1; > O1 1.09555107 3.76703629 -7.83852576; > O2 1.12573623 6.36725616 -4.70326928; > O3 -2.95373205 4.13977831 3.05907653; > O4 -4.81462989 0.53449898 3.42022641; > O5 -3.04576492 -4.23365310 -7.04056005; > O6 -4.88147857 -5.23919973 -3.54614660; > N1 0.56718784 4.39077285 -5.70465171; > N2 -3.61888234 2.10279732 2.26585157; > N3 -3.68554450 -3.82553238 -4.88515975; > C1 -0.89474878 2.57110902 -4.18157565; > C2 -1.53597193 3.21430712 -1.73399499; > C3 -2.90523393 1.47230460 -0.35362235; > C4 -3.63263104 -0.83708361 -1.32968698; > C5 -2.93743373 -1.37538831 -3.78771254; > C6 -1.56886658 0.29097245 -5.25919020; > H1 -0.98802906 5.00949031 -0.93088016; > H2 -4.70324490 -2.17020139 -0.21423238; > H3 -1.04610204 -0.17104401 -7.17780858; > }; > set {; > s_tolerance 1.0E-04; > ints_tolerance 1.0E-10; > dft_grac_shift 0.053900; > }; > ; > energy, wfn = energy('PBE0', return_wfn=True); > ; > fchk_writer = psi4.FCHKWriter(wfn); > fchk_writer.write('TNB_minimal.fchk')",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1501
https://github.com/psi4/psi4/pull/1502:453,Testability,test,testing,453,"## Description; Kill off the last fork!. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] upstream Libxc with !62-style tweak syntax ([summary of this vs #1101](https://gitlab.com/libxc/libxc/issues/61#note_129049055)); - [x] un-namespaced the `xc.h` header so that a cmake libxc build that works for psi4 can work for other libxc users.; - [x] pulling from my fork (trivial change), so that needs conda testing and merge before updating this and merging. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full test suite run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1502
https://github.com/psi4/psi4/pull/1502:526,Testability,Test,Tests,526,"## Description; Kill off the last fork!. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] upstream Libxc with !62-style tweak syntax ([summary of this vs #1101](https://gitlab.com/libxc/libxc/issues/61#note_129049055)); - [x] un-namespaced the `xc.h` header so that a cmake libxc build that works for psi4 can work for other libxc users.; - [x] pulling from my fork (trivial change), so that needs conda testing and merge before updating this and merging. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full test suite run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1502
https://github.com/psi4/psi4/pull/1502:572,Testability,test,test,572,"## Description; Kill off the last fork!. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] upstream Libxc with !62-style tweak syntax ([summary of this vs #1101](https://gitlab.com/libxc/libxc/issues/61#note_129049055)); - [x] un-namespaced the `xc.h` header so that a cmake libxc build that works for psi4 can work for other libxc users.; - [x] pulling from my fork (trivial change), so that needs conda testing and merge before updating this and merging. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full test suite run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1502
https://github.com/psi4/psi4/issues/1503:934,Energy Efficiency,Energy,Energy,934,"The grepable '@ROHF' in each iteration is printed incorrectly as '@DF-ROHF' if running PK algorithm after a previous DF computation. Example (input file below):; ```; ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 11; Number of AO shells: 90; Number of primitives: 196; Number of atomic orbitals: 285; Number of basis functions: 250. Integral cutoff 1.00e-12; Number of threads: 8. Performing in-core PK; Using 984422000 doubles for integral storage.; We computed 8218442 shell quartets total.; Whereas there are 8386560 unique shell quartets. ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory [MiB]: 11444; Schwarz Cutoff: 1E-12. OpenMP threads: 8. Minimum eigenvalue in the overlap matrix is 4.0355404199E-04.; Using Symmetric Orthogonalization. SCF Guess: Orbitals guess was supplied from a previous computation. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-ROHF iter 0: -341.07180740631509 -3.41072e+02 3.89250e-08; @DF-ROHF iter 1: -341.07180740660510 -2.90015e-10 2.49267e-06; @DF-ROHF iter 2: -341.07180758006677 -1.73462e-07 2.84695e-07 DIIS; ```; This input file produces the problem (edit: had the wrong molecule name). ```; memory 16 GB. molecule qr3 {; 0 2; O; C 1 1.24816; H 2 1.09517 1 120.2960; C 2 1.40976 1 123.9986 3 180.0; O 4 1.31711 2 123.7177 1 D1; O 5 1.41029 4 117.3948 2 D2; H 6 1.00462 5 103.4812 4 D3; C 4 1.48637 5 112.7653 2 180.0; H 8 1.08795 4 109.7238 2 0.00; H 8 1.09123 9 109.0482 4 -121.2; H 8 1.09132 9 109.0157 4 121.2; }. qr3.D1 = 0.0; qr3.D2 = 0.0; qr3.D3 = 0.0; qr3.update_geometry(). set {; basis cc-pvtz; reference uhf; }. set scf {; scf_type df; stability_analysis follow; soscf true; soscf_max_iter 20; max_attempts 5; }. energy('scf'). set scf {; reference rohf; guess read; stability_analysis none; }. energy('scf'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1503
https://github.com/psi4/psi4/issues/1503:1771,Energy Efficiency,energy,energy,1771,"The grepable '@ROHF' in each iteration is printed incorrectly as '@DF-ROHF' if running PK algorithm after a previous DF computation. Example (input file below):; ```; ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 11; Number of AO shells: 90; Number of primitives: 196; Number of atomic orbitals: 285; Number of basis functions: 250. Integral cutoff 1.00e-12; Number of threads: 8. Performing in-core PK; Using 984422000 doubles for integral storage.; We computed 8218442 shell quartets total.; Whereas there are 8386560 unique shell quartets. ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory [MiB]: 11444; Schwarz Cutoff: 1E-12. OpenMP threads: 8. Minimum eigenvalue in the overlap matrix is 4.0355404199E-04.; Using Symmetric Orthogonalization. SCF Guess: Orbitals guess was supplied from a previous computation. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-ROHF iter 0: -341.07180740631509 -3.41072e+02 3.89250e-08; @DF-ROHF iter 1: -341.07180740660510 -2.90015e-10 2.49267e-06; @DF-ROHF iter 2: -341.07180758006677 -1.73462e-07 2.84695e-07 DIIS; ```; This input file produces the problem (edit: had the wrong molecule name). ```; memory 16 GB. molecule qr3 {; 0 2; O; C 1 1.24816; H 2 1.09517 1 120.2960; C 2 1.40976 1 123.9986 3 180.0; O 4 1.31711 2 123.7177 1 D1; O 5 1.41029 4 117.3948 2 D2; H 6 1.00462 5 103.4812 4 D3; C 4 1.48637 5 112.7653 2 180.0; H 8 1.08795 4 109.7238 2 0.00; H 8 1.09123 9 109.0482 4 -121.2; H 8 1.09132 9 109.0157 4 121.2; }. qr3.D1 = 0.0; qr3.D2 = 0.0; qr3.D3 = 0.0; qr3.update_geometry(). set {; basis cc-pvtz; reference uhf; }. set scf {; scf_type df; stability_analysis follow; soscf true; soscf_max_iter 20; max_attempts 5; }. energy('scf'). set scf {; reference rohf; guess read; stability_analysis none; }. energy('scf'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1503
https://github.com/psi4/psi4/issues/1503:1853,Energy Efficiency,energy,energy,1853,"The grepable '@ROHF' in each iteration is printed incorrectly as '@DF-ROHF' if running PK algorithm after a previous DF computation. Example (input file below):; ```; ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 11; Number of AO shells: 90; Number of primitives: 196; Number of atomic orbitals: 285; Number of basis functions: 250. Integral cutoff 1.00e-12; Number of threads: 8. Performing in-core PK; Using 984422000 doubles for integral storage.; We computed 8218442 shell quartets total.; Whereas there are 8386560 unique shell quartets. ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory [MiB]: 11444; Schwarz Cutoff: 1E-12. OpenMP threads: 8. Minimum eigenvalue in the overlap matrix is 4.0355404199E-04.; Using Symmetric Orthogonalization. SCF Guess: Orbitals guess was supplied from a previous computation. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-ROHF iter 0: -341.07180740631509 -3.41072e+02 3.89250e-08; @DF-ROHF iter 1: -341.07180740660510 -2.90015e-10 2.49267e-06; @DF-ROHF iter 2: -341.07180758006677 -1.73462e-07 2.84695e-07 DIIS; ```; This input file produces the problem (edit: had the wrong molecule name). ```; memory 16 GB. molecule qr3 {; 0 2; O; C 1 1.24816; H 2 1.09517 1 120.2960; C 2 1.40976 1 123.9986 3 180.0; O 4 1.31711 2 123.7177 1 D1; O 5 1.41029 4 117.3948 2 D2; H 6 1.00462 5 103.4812 4 D3; C 4 1.48637 5 112.7653 2 180.0; H 8 1.08795 4 109.7238 2 0.00; H 8 1.09123 9 109.0482 4 -121.2; H 8 1.09132 9 109.0157 4 121.2; }. qr3.D1 = 0.0; qr3.D2 = 0.0; qr3.D3 = 0.0; qr3.update_geometry(). set {; basis cc-pvtz; reference uhf; }. set scf {; scf_type df; stability_analysis follow; soscf true; soscf_max_iter 20; max_attempts 5; }. energy('scf'). set scf {; reference rohf; guess read; stability_analysis none; }. energy('scf'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1503
https://github.com/psi4/psi4/issues/1503:431,Performance,Perform,Performing,431,"The grepable '@ROHF' in each iteration is printed incorrectly as '@DF-ROHF' if running PK algorithm after a previous DF computation. Example (input file below):; ```; ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 11; Number of AO shells: 90; Number of primitives: 196; Number of atomic orbitals: 285; Number of basis functions: 250. Integral cutoff 1.00e-12; Number of threads: 8. Performing in-core PK; Using 984422000 doubles for integral storage.; We computed 8218442 shell quartets total.; Whereas there are 8386560 unique shell quartets. ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory [MiB]: 11444; Schwarz Cutoff: 1E-12. OpenMP threads: 8. Minimum eigenvalue in the overlap matrix is 4.0355404199E-04.; Using Symmetric Orthogonalization. SCF Guess: Orbitals guess was supplied from a previous computation. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-ROHF iter 0: -341.07180740631509 -3.41072e+02 3.89250e-08; @DF-ROHF iter 1: -341.07180740660510 -2.90015e-10 2.49267e-06; @DF-ROHF iter 2: -341.07180758006677 -1.73462e-07 2.84695e-07 DIIS; ```; This input file produces the problem (edit: had the wrong molecule name). ```; memory 16 GB. molecule qr3 {; 0 2; O; C 1 1.24816; H 2 1.09517 1 120.2960; C 2 1.40976 1 123.9986 3 180.0; O 4 1.31711 2 123.7177 1 D1; O 5 1.41029 4 117.3948 2 D2; H 6 1.00462 5 103.4812 4 D3; C 4 1.48637 5 112.7653 2 180.0; H 8 1.08795 4 109.7238 2 0.00; H 8 1.09123 9 109.0482 4 -121.2; H 8 1.09132 9 109.0157 4 121.2; }. qr3.D1 = 0.0; qr3.D2 = 0.0; qr3.D3 = 0.0; qr3.update_geometry(). set {; basis cc-pvtz; reference uhf; }. set scf {; scf_type df; stability_analysis follow; soscf true; soscf_max_iter 20; max_attempts 5; }. energy('scf'). set scf {; reference rohf; guess read; stability_analysis none; }. energy('scf'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1503
https://github.com/psi4/psi4/issues/1504:400,Availability,error,errors,400,"Discovered while remedying test cases where reference numbers needed to be changed due to my upcoming #1143 fix. DFOCC gradients are not symmetrized. If you'd like an example, just look in the [reference output files](https://github.com/psi4/psi4/blob/master/tests/dfomp3-grad2/output.ref#L603-L604)! Symmetry of the overlap gradient is broken in the seventh decimal place. The other terms have some errors, but much smaller. That the overlap gradient is most afflicted is unsurprising, since the overlap integrals are contracted against one of the many ""generalized Fock matrices"". This one depends on the 1RDM and 2RDM, which are not currently symmetrized. I'm hoping to include this in 1.3 with the #1143 fix, since this bug could lead to optimizations failing, as we saw with DFMP2 two weeks ago (#1483). Because individual terms are printed, the individual terms need to be symmetrized, and it may take me some time to find where the `symmetrize` calls need to be placed. If it takes too long, I'm fine with delaying to 1.4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1504
https://github.com/psi4/psi4/issues/1504:519,Integrability,contract,contracted,519,"Discovered while remedying test cases where reference numbers needed to be changed due to my upcoming #1143 fix. DFOCC gradients are not symmetrized. If you'd like an example, just look in the [reference output files](https://github.com/psi4/psi4/blob/master/tests/dfomp3-grad2/output.ref#L603-L604)! Symmetry of the overlap gradient is broken in the seventh decimal place. The other terms have some errors, but much smaller. That the overlap gradient is most afflicted is unsurprising, since the overlap integrals are contracted against one of the many ""generalized Fock matrices"". This one depends on the 1RDM and 2RDM, which are not currently symmetrized. I'm hoping to include this in 1.3 with the #1143 fix, since this bug could lead to optimizations failing, as we saw with DFMP2 two weeks ago (#1483). Because individual terms are printed, the individual terms need to be symmetrized, and it may take me some time to find where the `symmetrize` calls need to be placed. If it takes too long, I'm fine with delaying to 1.4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1504
https://github.com/psi4/psi4/issues/1504:592,Integrability,depend,depends,592,"Discovered while remedying test cases where reference numbers needed to be changed due to my upcoming #1143 fix. DFOCC gradients are not symmetrized. If you'd like an example, just look in the [reference output files](https://github.com/psi4/psi4/blob/master/tests/dfomp3-grad2/output.ref#L603-L604)! Symmetry of the overlap gradient is broken in the seventh decimal place. The other terms have some errors, but much smaller. That the overlap gradient is most afflicted is unsurprising, since the overlap integrals are contracted against one of the many ""generalized Fock matrices"". This one depends on the 1RDM and 2RDM, which are not currently symmetrized. I'm hoping to include this in 1.3 with the #1143 fix, since this bug could lead to optimizations failing, as we saw with DFMP2 two weeks ago (#1483). Because individual terms are printed, the individual terms need to be symmetrized, and it may take me some time to find where the `symmetrize` calls need to be placed. If it takes too long, I'm fine with delaying to 1.4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1504
https://github.com/psi4/psi4/issues/1504:742,Performance,optimiz,optimizations,742,"Discovered while remedying test cases where reference numbers needed to be changed due to my upcoming #1143 fix. DFOCC gradients are not symmetrized. If you'd like an example, just look in the [reference output files](https://github.com/psi4/psi4/blob/master/tests/dfomp3-grad2/output.ref#L603-L604)! Symmetry of the overlap gradient is broken in the seventh decimal place. The other terms have some errors, but much smaller. That the overlap gradient is most afflicted is unsurprising, since the overlap integrals are contracted against one of the many ""generalized Fock matrices"". This one depends on the 1RDM and 2RDM, which are not currently symmetrized. I'm hoping to include this in 1.3 with the #1143 fix, since this bug could lead to optimizations failing, as we saw with DFMP2 two weeks ago (#1483). Because individual terms are printed, the individual terms need to be symmetrized, and it may take me some time to find where the `symmetrize` calls need to be placed. If it takes too long, I'm fine with delaying to 1.4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1504
https://github.com/psi4/psi4/issues/1504:27,Testability,test,test,27,"Discovered while remedying test cases where reference numbers needed to be changed due to my upcoming #1143 fix. DFOCC gradients are not symmetrized. If you'd like an example, just look in the [reference output files](https://github.com/psi4/psi4/blob/master/tests/dfomp3-grad2/output.ref#L603-L604)! Symmetry of the overlap gradient is broken in the seventh decimal place. The other terms have some errors, but much smaller. That the overlap gradient is most afflicted is unsurprising, since the overlap integrals are contracted against one of the many ""generalized Fock matrices"". This one depends on the 1RDM and 2RDM, which are not currently symmetrized. I'm hoping to include this in 1.3 with the #1143 fix, since this bug could lead to optimizations failing, as we saw with DFMP2 two weeks ago (#1483). Because individual terms are printed, the individual terms need to be symmetrized, and it may take me some time to find where the `symmetrize` calls need to be placed. If it takes too long, I'm fine with delaying to 1.4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1504
https://github.com/psi4/psi4/issues/1504:259,Testability,test,tests,259,"Discovered while remedying test cases where reference numbers needed to be changed due to my upcoming #1143 fix. DFOCC gradients are not symmetrized. If you'd like an example, just look in the [reference output files](https://github.com/psi4/psi4/blob/master/tests/dfomp3-grad2/output.ref#L603-L604)! Symmetry of the overlap gradient is broken in the seventh decimal place. The other terms have some errors, but much smaller. That the overlap gradient is most afflicted is unsurprising, since the overlap integrals are contracted against one of the many ""generalized Fock matrices"". This one depends on the 1RDM and 2RDM, which are not currently symmetrized. I'm hoping to include this in 1.3 with the #1143 fix, since this bug could lead to optimizations failing, as we saw with DFMP2 two weeks ago (#1483). Because individual terms are printed, the individual terms need to be symmetrized, and it may take me some time to find where the `symmetrize` calls need to be placed. If it takes too long, I'm fine with delaying to 1.4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1504
https://github.com/psi4/psi4/pull/1505:141,Testability,test,test,141,## Description; make v2rdm work again. ## Todos; - [x] bring back `Vector::subtract` in C API to match `Matrix::subtract`.; - [x] add v2rdm7 test case; - [x] bump what version of v2rdm gets cloned. ## Checklist; - [ ] ~Tests added for any new features~; - [x] all 7 v2rdm tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1505
https://github.com/psi4/psi4/pull/1505:219,Testability,Test,Tests,219,## Description; make v2rdm work again. ## Todos; - [x] bring back `Vector::subtract` in C API to match `Matrix::subtract`.; - [x] add v2rdm7 test case; - [x] bump what version of v2rdm gets cloned. ## Checklist; - [ ] ~Tests added for any new features~; - [x] all 7 v2rdm tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1505
https://github.com/psi4/psi4/pull/1505:272,Testability,test,tests,272,## Description; make v2rdm work again. ## Todos; - [x] bring back `Vector::subtract` in C API to match `Matrix::subtract`.; - [x] add v2rdm7 test case; - [x] bump what version of v2rdm gets cloned. ## Checklist; - [ ] ~Tests added for any new features~; - [x] all 7 v2rdm tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1505
https://github.com/psi4/psi4/pull/1506:497,Availability,error,error,497,"## Description; No new features were added. This is a bugfix for a minor problem described in issue #1485. The MoldenWriter::write method was appending output to an existing Molden file, if present. This is not the desired behavior since the appended part is not read by post-processing tools, nor is it part of the definition of the file format. This becomes especially confusing when doing a test calculation, where one is trying to get a psi4 input file to work as intended with some trial and error. All results from previous trials are kept in the Molden file and only the first one is read by a post-processing tool, not the last one. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Truncate an existing Molden file, instead of appending. ## Questions; None. ## Checklist; - No new tests added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1506
https://github.com/psi4/psi4/pull/1506:394,Testability,test,test,394,"## Description; No new features were added. This is a bugfix for a minor problem described in issue #1485. The MoldenWriter::write method was appending output to an existing Molden file, if present. This is not the desired behavior since the appended part is not read by post-processing tools, nor is it part of the definition of the file format. This becomes especially confusing when doing a test calculation, where one is trying to get a psi4 input file to work as intended with some trial and error. All results from previous trials are kept in the Molden file and only the first one is read by a post-processing tool, not the last one. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Truncate an existing Molden file, instead of appending. ## Questions; None. ## Checklist; - No new tests added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1506
https://github.com/psi4/psi4/pull/1506:838,Testability,test,tests,838,"## Description; No new features were added. This is a bugfix for a minor problem described in issue #1485. The MoldenWriter::write method was appending output to an existing Molden file, if present. This is not the desired behavior since the appended part is not read by post-processing tools, nor is it part of the definition of the file format. This becomes especially confusing when doing a test calculation, where one is trying to get a psi4 input file to work as intended with some trial and error. All results from previous trials are kept in the Molden file and only the first one is read by a post-processing tool, not the last one. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Truncate an existing Molden file, instead of appending. ## Questions; None. ## Checklist; - No new tests added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1506
https://github.com/psi4/psi4/pull/1506:891,Testability,test,tests,891,"## Description; No new features were added. This is a bugfix for a minor problem described in issue #1485. The MoldenWriter::write method was appending output to an existing Molden file, if present. This is not the desired behavior since the appended part is not read by post-processing tools, nor is it part of the definition of the file format. This becomes especially confusing when doing a test calculation, where one is trying to get a psi4 input file to work as intended with some trial and error. All results from previous trials are kept in the Molden file and only the first one is read by a post-processing tool, not the last one. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Truncate an existing Molden file, instead of appending. ## Questions; None. ## Checklist; - No new tests added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1506
https://github.com/psi4/psi4/pull/1506:982,Testability,test,tests,982,"## Description; No new features were added. This is a bugfix for a minor problem described in issue #1485. The MoldenWriter::write method was appending output to an existing Molden file, if present. This is not the desired behavior since the appended part is not read by post-processing tools, nor is it part of the definition of the file format. This becomes especially confusing when doing a test calculation, where one is trying to get a psi4 input file to work as intended with some trial and error. All results from previous trials are kept in the Molden file and only the first one is read by a post-processing tool, not the last one. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Truncate an existing Molden file, instead of appending. ## Questions; None. ## Checklist; - No new tests added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1506
https://github.com/psi4/psi4/issues/1509:179,Energy Efficiency,energy,energy,179,"A rather important issue for @bozkaya. The test suite documents that energies computed with DFOCC can be internally inconsistent. `dfomp2p5-2` demonstrates the problem. The final energy computed via Lagrangian is [-75.7907](https://github.com/psi4/psi4/blob/master/tests/dfomp2p5-2/output.ref#L498). The final energy is reported as [-75.7914](https://github.com/psi4/psi4/blob/master/tests/dfomp2p5-2/output.ref#L530) hartrees, which are inconsistent. The discrepancy disappeared upon elimination of [the lines in dfocc that allow for the user-specified energy convergence criteria to be overridden](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/occ_iterations.cc#L278-L281), per issue #1143. The relevant part of the output file is:. ```; ============================================================================== ; ================ Performing DF-OMP2.5 iterations... ========================== ; ============================================================================== ; Minimizing DF-MP2.5-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -75.7906384498 -7.38e-04 1.89e-03 7.57e-03 5.95e-06 ; 2 -75.7907030487 -6.46e-05 6.80e-04 3.45e-03 1.29e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF E",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:310,Energy Efficiency,energy,energy,310,"A rather important issue for @bozkaya. The test suite documents that energies computed with DFOCC can be internally inconsistent. `dfomp2p5-2` demonstrates the problem. The final energy computed via Lagrangian is [-75.7907](https://github.com/psi4/psi4/blob/master/tests/dfomp2p5-2/output.ref#L498). The final energy is reported as [-75.7914](https://github.com/psi4/psi4/blob/master/tests/dfomp2p5-2/output.ref#L530) hartrees, which are inconsistent. The discrepancy disappeared upon elimination of [the lines in dfocc that allow for the user-specified energy convergence criteria to be overridden](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/occ_iterations.cc#L278-L281), per issue #1143. The relevant part of the output file is:. ```; ============================================================================== ; ================ Performing DF-OMP2.5 iterations... ========================== ; ============================================================================== ; Minimizing DF-MP2.5-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -75.7906384498 -7.38e-04 1.89e-03 7.57e-03 5.95e-06 ; 2 -75.7907030487 -6.46e-05 6.80e-04 3.45e-03 1.29e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF E",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:554,Energy Efficiency,energy,energy,554,"A rather important issue for @bozkaya. The test suite documents that energies computed with DFOCC can be internally inconsistent. `dfomp2p5-2` demonstrates the problem. The final energy computed via Lagrangian is [-75.7907](https://github.com/psi4/psi4/blob/master/tests/dfomp2p5-2/output.ref#L498). The final energy is reported as [-75.7914](https://github.com/psi4/psi4/blob/master/tests/dfomp2p5-2/output.ref#L530) hartrees, which are inconsistent. The discrepancy disappeared upon elimination of [the lines in dfocc that allow for the user-specified energy convergence criteria to be overridden](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/occ_iterations.cc#L278-L281), per issue #1143. The relevant part of the output file is:. ```; ============================================================================== ; ================ Performing DF-OMP2.5 iterations... ========================== ; ============================================================================== ; Minimizing DF-MP2.5-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -75.7906384498 -7.38e-04 1.89e-03 7.57e-03 5.95e-06 ; 2 -75.7907030487 -6.46e-05 6.80e-04 3.45e-03 1.29e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF E",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:1838,Energy Efficiency,energy,energy,1838,== Performing DF-OMP2.5 iterations... ========================== ; ============================================================================== ; Minimizing DF-MP2.5-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -75.7906384498 -7.38e-04 1.89e-03 7.57e-03 5.95e-06 ; 2 -75.7907030487 -6.46e-05 6.80e-04 3.45e-03 1.29e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) :,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:1962,Energy Efficiency,Energy,Energy,1962,============================================================================ ; Minimizing DF-MP2.5-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -75.7906384498 -7.38e-04 1.89e-03 7.57e-03 5.95e-06 ; 2 -75.7907030487 -6.46e-05 6.80e-04 3.45e-03 1.29e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:2000,Energy Efficiency,Energy,Energy,2000, ; Minimizing DF-MP2.5-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -75.7906384498 -7.38e-04 1.89e-03 7.57e-03 5.95e-06 ; 2 -75.7907030487 -6.46e-05 6.80e-04 3.45e-03 1.29e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:2040,Energy Efficiency,Energy,Energy,2040,---------------------------- ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -75.7906384498 -7.38e-04 1.89e-03 7.57e-03 5.95e-06 ; 2 -75.7907030487 -6.46e-05 6.80e-04 3.45e-03 1.29e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ==========,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:2251,Energy Efficiency,Energy,Energy,2251,"; 2 -75.7907030487 -6.46e-05 6.80e-04 3.45e-03 1.29e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:2299,Energy Efficiency,Energy,Energy,2299,"e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:2356,Energy Efficiency,Energy,Energy,2356,"-75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Swit",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:2406,Energy Efficiency,Energy,Energy,2406," 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; ar",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:2756,Energy Efficiency,Energy,Energy,2756,"5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:2796,Energy Efficiency,Energy,Energy,2796,"========================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater than_ the user-specified convergence criteria. This situation is precisely what the fix to #1143 no",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:2836,Energy Efficiency,Energy,Energy,2836,"-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater than_ the user-specified convergence criteria. This situation is precisely what the fix to #1143 no longer allows for, so I must conclude th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:2894,Energy Efficiency,Energy,Energy,2894,"================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater than_ the user-specified convergence criteria. This situation is precisely what the fix to #1143 no longer allows for, so I must conclude that the code in that if suite is what is responsible for the d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:2989,Energy Efficiency,Energy,Energy,2989,"8982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater than_ the user-specified convergence criteria. This situation is precisely what the fix to #1143 no longer allows for, so I must conclude that the code in that if suite is what is responsible for the discrepancy. It looks like this code in this if suite is re-computing the energy using the orbitals",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:3119,Energy Efficiency,energy,energy,3119," -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater than_ the user-specified convergence criteria. This situation is precisely what the fix to #1143 no longer allows for, so I must conclude that the code in that if suite is what is responsible for the discrepancy. It looks like this code in this if suite is re-computing the energy using the orbitals and T-amplitudes computed during the Lagrangian optimization. Hence the discrepancy is that when the user's energy convergence criteria isn't met, the Lagrangian informati",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:3140,Energy Efficiency,energy,energy,3140," -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater than_ the user-specified convergence criteria. This situation is precisely what the fix to #1143 no longer allows for, so I must conclude that the code in that if suite is what is responsible for the discrepancy. It looks like this code in this if suite is re-computing the energy using the orbitals and T-amplitudes computed during the Lagrangian optimization. Hence the discrepancy is that when the user's energy convergence criteria isn't met, the Lagrangian informati",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:3213,Energy Efficiency,energy,energy,3213," -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater than_ the user-specified convergence criteria. This situation is precisely what the fix to #1143 no longer allows for, so I must conclude that the code in that if suite is what is responsible for the discrepancy. It looks like this code in this if suite is re-computing the energy using the orbitals and T-amplitudes computed during the Lagrangian optimization. Hence the discrepancy is that when the user's energy convergence criteria isn't met, the Lagrangian informati",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:3965,Energy Efficiency,energy,energy,3965,"P2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater than_ the user-specified convergence criteria. This situation is precisely what the fix to #1143 no longer allows for, so I must conclude that the code in that if suite is what is responsible for the discrepancy. It looks like this code in this if suite is re-computing the energy using the orbitals and T-amplitudes computed during the Lagrangian optimization. Hence the discrepancy is that when the user's energy convergence criteria isn't met, the Lagrangian information was overwritten with the orbital-and-amplitude formalism. Is this correct? Why does this code only run if the user's energy convergence criteria isn't met? Shouldn't we warn the user that these kinds of discrepancies are possible?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:4099,Energy Efficiency,energy,energy,4099,"P2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater than_ the user-specified convergence criteria. This situation is precisely what the fix to #1143 no longer allows for, so I must conclude that the code in that if suite is what is responsible for the discrepancy. It looks like this code in this if suite is re-computing the energy using the orbitals and T-amplitudes computed during the Lagrangian optimization. Hence the discrepancy is that when the user's energy convergence criteria isn't met, the Lagrangian information was overwritten with the orbital-and-amplitude formalism. Is this correct? Why does this code only run if the user's energy convergence criteria isn't met? Shouldn't we warn the user that these kinds of discrepancies are possible?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:4282,Energy Efficiency,energy,energy,4282,"P2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater than_ the user-specified convergence criteria. This situation is precisely what the fix to #1143 no longer allows for, so I must conclude that the code in that if suite is what is responsible for the discrepancy. It looks like this code in this if suite is re-computing the energy using the orbitals and T-amplitudes computed during the Lagrangian optimization. Hence the discrepancy is that when the user's energy convergence criteria isn't met, the Lagrangian information was overwritten with the orbital-and-amplitude formalism. Is this correct? Why does this code only run if the user's energy convergence criteria isn't met? Shouldn't we warn the user that these kinds of discrepancies are possible?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:853,Performance,Perform,Performing,853,"A rather important issue for @bozkaya. The test suite documents that energies computed with DFOCC can be internally inconsistent. `dfomp2p5-2` demonstrates the problem. The final energy computed via Lagrangian is [-75.7907](https://github.com/psi4/psi4/blob/master/tests/dfomp2p5-2/output.ref#L498). The final energy is reported as [-75.7914](https://github.com/psi4/psi4/blob/master/tests/dfomp2p5-2/output.ref#L530) hartrees, which are inconsistent. The discrepancy disappeared upon elimination of [the lines in dfocc that allow for the user-specified energy convergence criteria to be overridden](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/occ_iterations.cc#L278-L281), per issue #1143. The relevant part of the output file is:. ```; ============================================================================== ; ================ Performing DF-OMP2.5 iterations... ========================== ; ============================================================================== ; Minimizing DF-MP2.5-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -75.7906384498 -7.38e-04 1.89e-03 7.57e-03 5.95e-06 ; 2 -75.7907030487 -6.46e-05 6.80e-04 3.45e-03 1.29e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF E",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:1851,Performance,optimiz,optimized,1851,== Performing DF-OMP2.5 iterations... ========================== ; ============================================================================== ; Minimizing DF-MP2.5-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -75.7906384498 -7.38e-04 1.89e-03 7.57e-03 5.95e-06 ; 2 -75.7907030487 -6.46e-05 6.80e-04 3.45e-03 1.29e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) :,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:3284,Performance,optimiz,optimized,3284,"a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater than_ the user-specified convergence criteria. This situation is precisely what the fix to #1143 no longer allows for, so I must conclude that the code in that if suite is what is responsible for the discrepancy. It looks like this code in this if suite is re-computing the energy using the orbitals and T-amplitudes computed during the Lagrangian optimization. Hence the discrepancy is that when the user's energy convergence criteria isn't met, the Lagrangian information was overwritten with the orbital-and-amplitude formalism. Is this correct? Why does this code ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:4039,Performance,optimiz,optimization,4039,"P2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater than_ the user-specified convergence criteria. This situation is precisely what the fix to #1143 no longer allows for, so I must conclude that the code in that if suite is what is responsible for the discrepancy. It looks like this code in this if suite is re-computing the energy using the orbitals and T-amplitudes computed during the Lagrangian optimization. Hence the discrepancy is that when the user's energy convergence criteria isn't met, the Lagrangian information was overwritten with the orbital-and-amplitude formalism. Is this correct? Why does this code only run if the user's energy convergence criteria isn't met? Shouldn't we warn the user that these kinds of discrepancies are possible?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:43,Testability,test,test,43,"A rather important issue for @bozkaya. The test suite documents that energies computed with DFOCC can be internally inconsistent. `dfomp2p5-2` demonstrates the problem. The final energy computed via Lagrangian is [-75.7907](https://github.com/psi4/psi4/blob/master/tests/dfomp2p5-2/output.ref#L498). The final energy is reported as [-75.7914](https://github.com/psi4/psi4/blob/master/tests/dfomp2p5-2/output.ref#L530) hartrees, which are inconsistent. The discrepancy disappeared upon elimination of [the lines in dfocc that allow for the user-specified energy convergence criteria to be overridden](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/occ_iterations.cc#L278-L281), per issue #1143. The relevant part of the output file is:. ```; ============================================================================== ; ================ Performing DF-OMP2.5 iterations... ========================== ; ============================================================================== ; Minimizing DF-MP2.5-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -75.7906384498 -7.38e-04 1.89e-03 7.57e-03 5.95e-06 ; 2 -75.7907030487 -6.46e-05 6.80e-04 3.45e-03 1.29e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF E",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:265,Testability,test,tests,265,"A rather important issue for @bozkaya. The test suite documents that energies computed with DFOCC can be internally inconsistent. `dfomp2p5-2` demonstrates the problem. The final energy computed via Lagrangian is [-75.7907](https://github.com/psi4/psi4/blob/master/tests/dfomp2p5-2/output.ref#L498). The final energy is reported as [-75.7914](https://github.com/psi4/psi4/blob/master/tests/dfomp2p5-2/output.ref#L530) hartrees, which are inconsistent. The discrepancy disappeared upon elimination of [the lines in dfocc that allow for the user-specified energy convergence criteria to be overridden](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/occ_iterations.cc#L278-L281), per issue #1143. The relevant part of the output file is:. ```; ============================================================================== ; ================ Performing DF-OMP2.5 iterations... ========================== ; ============================================================================== ; Minimizing DF-MP2.5-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -75.7906384498 -7.38e-04 1.89e-03 7.57e-03 5.95e-06 ; 2 -75.7907030487 -6.46e-05 6.80e-04 3.45e-03 1.29e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF E",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/issues/1509:384,Testability,test,tests,384,"A rather important issue for @bozkaya. The test suite documents that energies computed with DFOCC can be internally inconsistent. `dfomp2p5-2` demonstrates the problem. The final energy computed via Lagrangian is [-75.7907](https://github.com/psi4/psi4/blob/master/tests/dfomp2p5-2/output.ref#L498). The final energy is reported as [-75.7914](https://github.com/psi4/psi4/blob/master/tests/dfomp2p5-2/output.ref#L530) hartrees, which are inconsistent. The discrepancy disappeared upon elimination of [the lines in dfocc that allow for the user-specified energy convergence criteria to be overridden](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/occ_iterations.cc#L278-L281), per issue #1143. The relevant part of the output file is:. ```; ============================================================================== ; ================ Performing DF-OMP2.5 iterations... ========================== ; ============================================================================== ; Minimizing DF-MP2.5-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -75.7906384498 -7.38e-04 1.89e-03 7.57e-03 5.95e-06 ; 2 -75.7907030487 -6.46e-05 6.80e-04 3.45e-03 1.29e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF E",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1509
https://github.com/psi4/psi4/pull/1510:923,Energy Efficiency,charge,charge,923,"## Description; The Molden format allows one to store data in high precision, which is beneficial for post-processing. This PR increases the number of digits and the format of the relevant numbers to double precision. Fixes #1486. See also #1485 . I've tested with the following example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }. set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); Da_so = wfn.Da(); SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); molden(wfn, 'psi4.molden', density_a=Da_mo); ```. The Molden files before and after the change are attached: [psi4.molden.zip](https://github.com/psi4/psi4/files/2817866/psi4.molden.zip). Relevant part of the output of the Molden program when reading the molden file prior to the change. Note the wrong total charge:. ```; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ; Sum of Mulliken Charges: 0.0003; ```. Same output, but after increasing the precision: (Note the correct total charge.). ```; Mulliken Charges; ================; ; O -0.4663; H 0.2331; H 0.2331; ; Sum of Mulliken Charges: 0.0000; ```. (FYI: this is my last Molden-related PR.). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Write out orbital energies, orbital occupation numbers and molecular orbital coefficients in double precision in a Molden file. ## Questions; None. ## Checklist; - No tests added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1510
https://github.com/psi4/psi4/pull/1510:946,Energy Efficiency,Charge,Charges,946,"## Description; The Molden format allows one to store data in high precision, which is beneficial for post-processing. This PR increases the number of digits and the format of the relevant numbers to double precision. Fixes #1486. See also #1485 . I've tested with the following example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }. set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); Da_so = wfn.Da(); SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); molden(wfn, 'psi4.molden', density_a=Da_mo); ```. The Molden files before and after the change are attached: [psi4.molden.zip](https://github.com/psi4/psi4/files/2817866/psi4.molden.zip). Relevant part of the output of the Molden program when reading the molden file prior to the change. Note the wrong total charge:. ```; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ; Sum of Mulliken Charges: 0.0003; ```. Same output, but after increasing the precision: (Note the correct total charge.). ```; Mulliken Charges; ================; ; O -0.4663; H 0.2331; H 0.2331; ; Sum of Mulliken Charges: 0.0000; ```. (FYI: this is my last Molden-related PR.). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Write out orbital energies, orbital occupation numbers and molecular orbital coefficients in double precision in a Molden file. ## Questions; None. ## Checklist; - No tests added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1510
https://github.com/psi4/psi4/pull/1510:1024,Energy Efficiency,Charge,Charges,1024,"## Description; The Molden format allows one to store data in high precision, which is beneficial for post-processing. This PR increases the number of digits and the format of the relevant numbers to double precision. Fixes #1486. See also #1485 . I've tested with the following example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }. set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); Da_so = wfn.Da(); SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); molden(wfn, 'psi4.molden', density_a=Da_mo); ```. The Molden files before and after the change are attached: [psi4.molden.zip](https://github.com/psi4/psi4/files/2817866/psi4.molden.zip). Relevant part of the output of the Molden program when reading the molden file prior to the change. Note the wrong total charge:. ```; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ; Sum of Mulliken Charges: 0.0003; ```. Same output, but after increasing the precision: (Note the correct total charge.). ```; Mulliken Charges; ================; ; O -0.4663; H 0.2331; H 0.2331; ; Sum of Mulliken Charges: 0.0000; ```. (FYI: this is my last Molden-related PR.). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Write out orbital energies, orbital occupation numbers and molecular orbital coefficients in double precision in a Molden file. ## Questions; None. ## Checklist; - No tests added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1510
https://github.com/psi4/psi4/pull/1510:1119,Energy Efficiency,charge,charge,1119,"## Description; The Molden format allows one to store data in high precision, which is beneficial for post-processing. This PR increases the number of digits and the format of the relevant numbers to double precision. Fixes #1486. See also #1485 . I've tested with the following example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }. set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); Da_so = wfn.Da(); SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); molden(wfn, 'psi4.molden', density_a=Da_mo); ```. The Molden files before and after the change are attached: [psi4.molden.zip](https://github.com/psi4/psi4/files/2817866/psi4.molden.zip). Relevant part of the output of the Molden program when reading the molden file prior to the change. Note the wrong total charge:. ```; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ; Sum of Mulliken Charges: 0.0003; ```. Same output, but after increasing the precision: (Note the correct total charge.). ```; Mulliken Charges; ================; ; O -0.4663; H 0.2331; H 0.2331; ; Sum of Mulliken Charges: 0.0000; ```. (FYI: this is my last Molden-related PR.). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Write out orbital energies, orbital occupation numbers and molecular orbital coefficients in double precision in a Molden file. ## Questions; None. ## Checklist; - No tests added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1510
https://github.com/psi4/psi4/pull/1510:1143,Energy Efficiency,Charge,Charges,1143,"## Description; The Molden format allows one to store data in high precision, which is beneficial for post-processing. This PR increases the number of digits and the format of the relevant numbers to double precision. Fixes #1486. See also #1485 . I've tested with the following example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }. set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); Da_so = wfn.Da(); SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); molden(wfn, 'psi4.molden', density_a=Da_mo); ```. The Molden files before and after the change are attached: [psi4.molden.zip](https://github.com/psi4/psi4/files/2817866/psi4.molden.zip). Relevant part of the output of the Molden program when reading the molden file prior to the change. Note the wrong total charge:. ```; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ; Sum of Mulliken Charges: 0.0003; ```. Same output, but after increasing the precision: (Note the correct total charge.). ```; Mulliken Charges; ================; ; O -0.4663; H 0.2331; H 0.2331; ; Sum of Mulliken Charges: 0.0000; ```. (FYI: this is my last Molden-related PR.). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Write out orbital energies, orbital occupation numbers and molecular orbital coefficients in double precision in a Molden file. ## Questions; None. ## Checklist; - No tests added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1510
https://github.com/psi4/psi4/pull/1510:1221,Energy Efficiency,Charge,Charges,1221,"## Description; The Molden format allows one to store data in high precision, which is beneficial for post-processing. This PR increases the number of digits and the format of the relevant numbers to double precision. Fixes #1486. See also #1485 . I've tested with the following example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }. set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); Da_so = wfn.Da(); SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); molden(wfn, 'psi4.molden', density_a=Da_mo); ```. The Molden files before and after the change are attached: [psi4.molden.zip](https://github.com/psi4/psi4/files/2817866/psi4.molden.zip). Relevant part of the output of the Molden program when reading the molden file prior to the change. Note the wrong total charge:. ```; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ; Sum of Mulliken Charges: 0.0003; ```. Same output, but after increasing the precision: (Note the correct total charge.). ```; Mulliken Charges; ================; ; O -0.4663; H 0.2331; H 0.2331; ; Sum of Mulliken Charges: 0.0000; ```. (FYI: this is my last Molden-related PR.). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Write out orbital energies, orbital occupation numbers and molecular orbital coefficients in double precision in a Molden file. ## Questions; None. ## Checklist; - No tests added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1510
https://github.com/psi4/psi4/pull/1510:253,Testability,test,tested,253,"## Description; The Molden format allows one to store data in high precision, which is beneficial for post-processing. This PR increases the number of digits and the format of the relevant numbers to double precision. Fixes #1486. See also #1485 . I've tested with the following example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }. set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); Da_so = wfn.Da(); SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); molden(wfn, 'psi4.molden', density_a=Da_mo); ```. The Molden files before and after the change are attached: [psi4.molden.zip](https://github.com/psi4/psi4/files/2817866/psi4.molden.zip). Relevant part of the output of the Molden program when reading the molden file prior to the change. Note the wrong total charge:. ```; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ; Sum of Mulliken Charges: 0.0003; ```. Same output, but after increasing the precision: (Note the correct total charge.). ```; Mulliken Charges; ================; ; O -0.4663; H 0.2331; H 0.2331; ; Sum of Mulliken Charges: 0.0000; ```. (FYI: this is my last Molden-related PR.). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Write out orbital energies, orbital occupation numbers and molecular orbital coefficients in double precision in a Molden file. ## Questions; None. ## Checklist; - No tests added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1510
https://github.com/psi4/psi4/pull/1510:1551,Testability,test,tests,1551,"## Description; The Molden format allows one to store data in high precision, which is beneficial for post-processing. This PR increases the number of digits and the format of the relevant numbers to double precision. Fixes #1486. See also #1485 . I've tested with the following example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }. set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); Da_so = wfn.Da(); SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); molden(wfn, 'psi4.molden', density_a=Da_mo); ```. The Molden files before and after the change are attached: [psi4.molden.zip](https://github.com/psi4/psi4/files/2817866/psi4.molden.zip). Relevant part of the output of the Molden program when reading the molden file prior to the change. Note the wrong total charge:. ```; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ; Sum of Mulliken Charges: 0.0003; ```. Same output, but after increasing the precision: (Note the correct total charge.). ```; Mulliken Charges; ================; ; O -0.4663; H 0.2331; H 0.2331; ; Sum of Mulliken Charges: 0.0000; ```. (FYI: this is my last Molden-related PR.). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Write out orbital energies, orbital occupation numbers and molecular orbital coefficients in double precision in a Molden file. ## Questions; None. ## Checklist; - No tests added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1510
https://github.com/psi4/psi4/pull/1510:1604,Testability,test,tests,1604,"## Description; The Molden format allows one to store data in high precision, which is beneficial for post-processing. This PR increases the number of digits and the format of the relevant numbers to double precision. Fixes #1486. See also #1485 . I've tested with the following example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }. set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); Da_so = wfn.Da(); SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); molden(wfn, 'psi4.molden', density_a=Da_mo); ```. The Molden files before and after the change are attached: [psi4.molden.zip](https://github.com/psi4/psi4/files/2817866/psi4.molden.zip). Relevant part of the output of the Molden program when reading the molden file prior to the change. Note the wrong total charge:. ```; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ; Sum of Mulliken Charges: 0.0003; ```. Same output, but after increasing the precision: (Note the correct total charge.). ```; Mulliken Charges; ================; ; O -0.4663; H 0.2331; H 0.2331; ; Sum of Mulliken Charges: 0.0000; ```. (FYI: this is my last Molden-related PR.). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Write out orbital energies, orbital occupation numbers and molecular orbital coefficients in double precision in a Molden file. ## Questions; None. ## Checklist; - No tests added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1510
https://github.com/psi4/psi4/pull/1510:1695,Testability,test,tests,1695,"## Description; The Molden format allows one to store data in high precision, which is beneficial for post-processing. This PR increases the number of digits and the format of the relevant numbers to double precision. Fixes #1486. See also #1485 . I've tested with the following example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }. set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); Da_so = wfn.Da(); SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); molden(wfn, 'psi4.molden', density_a=Da_mo); ```. The Molden files before and after the change are attached: [psi4.molden.zip](https://github.com/psi4/psi4/files/2817866/psi4.molden.zip). Relevant part of the output of the Molden program when reading the molden file prior to the change. Note the wrong total charge:. ```; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ; Sum of Mulliken Charges: 0.0003; ```. Same output, but after increasing the precision: (Note the correct total charge.). ```; Mulliken Charges; ================; ; O -0.4663; H 0.2331; H 0.2331; ; Sum of Mulliken Charges: 0.0000; ```. (FYI: this is my last Molden-related PR.). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Write out orbital energies, orbital occupation numbers and molecular orbital coefficients in double precision in a Molden file. ## Questions; None. ## Checklist; - No tests added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/1510
https://github.com/psi4/psi4/issues/1511:476,Deployability,update,update,476,"A minor DCT bug that is on my to-fix list when I move the control logic to Python:; The code often prints energies to the output file that were created using outdated intermediates, so they aren't the energy you would actually get using the current cumulant and orbital parameters. This means that even for variational parameters, lowering the residual produces a higher (reported) energy. The two offenders I've noticed are not updating the tau intermediate after a cumulant update and not re-computing the 1RDM and separable contributions to the energy after updating tau. In `dcft_oo_UHF.cc:run_simult_dcft_oo`, for instance, the cumulant is updated on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dcft/dcft_oo_UHF.cc#L133), but tau never gets recomputed (`build_tau` and `refine_tau`) until the next iteration of the loop, by which point the energy has already been printed. You can see both problems in the twostep algorithm. Even if it was recomputed, `dcft_compute_uhf:compute_energy_UHF` is never called until the next iteration of the loop either. That function is responsible for re-computing the tau-dependent terms, so the tau-energy contribution would still be one iteration behind. The control logic will need to be re-organized.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/1511
