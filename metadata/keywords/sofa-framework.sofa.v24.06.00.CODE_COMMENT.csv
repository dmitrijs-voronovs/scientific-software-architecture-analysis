quality_attribute,keyword,matched_word,sentence,source,filename,author,repo,version,wiki,url
Modifiability,inherit,inheritance,"# be sure that the cache path exists; # automatic generation when s-t changed; """""" Used with insertImageCache; """"""; """""" Returns dim, voxelsize and rigid position of an image given an .mhd header image file; a scaleFactor can be given to normalize image length units (usually in mm); """"""; """""" Returns type of an image given an .mhd header image file; """"""; """""" Returns a transform, formatted to sofa data given voxelsize, rigid position (offset), time and camera parameters; """"""; # controller you must derived from and instanciate in the same context than your ImageViewer if you want to define actions to manually add / remove point from an image plane; # return a dictionary of id -> point: {id0 : point0, idn : pointn, ...}; # a point is defined as follows: {'position': [x, y, z], 'color': [r, g, b], ...custom parameters... }; # simpler python script controllers based on SofaPython.script; # TODO maybe this should be double Inherited from both ImagePlaneController and SofaPython.script.Controller; # not to copy code. But then testing inheritance against ImagePlaneController has to be checked.; """"""; :param filename: you may have to define it (at least once) to create; a controller for which the class is defined in an external; file. Be aware the file will then be read several times.; """"""; # if this fails, you need to call; # Controller.onLoaded(self, node) in derived classes",MatchSource.CODE_COMMENT,applications/plugins/image/python/SofaImage/Tools.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/python/SofaImage/Tools.py
Performance,cache,cache,"# be sure that the cache path exists; # automatic generation when s-t changed; """""" Used with insertImageCache; """"""; """""" Returns dim, voxelsize and rigid position of an image given an .mhd header image file; a scaleFactor can be given to normalize image length units (usually in mm); """"""; """""" Returns type of an image given an .mhd header image file; """"""; """""" Returns a transform, formatted to sofa data given voxelsize, rigid position (offset), time and camera parameters; """"""; # controller you must derived from and instanciate in the same context than your ImageViewer if you want to define actions to manually add / remove point from an image plane; # return a dictionary of id -> point: {id0 : point0, idn : pointn, ...}; # a point is defined as follows: {'position': [x, y, z], 'color': [r, g, b], ...custom parameters... }; # simpler python script controllers based on SofaPython.script; # TODO maybe this should be double Inherited from both ImagePlaneController and SofaPython.script.Controller; # not to copy code. But then testing inheritance against ImagePlaneController has to be checked.; """"""; :param filename: you may have to define it (at least once) to create; a controller for which the class is defined in an external; file. Be aware the file will then be read several times.; """"""; # if this fails, you need to call; # Controller.onLoaded(self, node) in derived classes",MatchSource.CODE_COMMENT,applications/plugins/image/python/SofaImage/Tools.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/python/SofaImage/Tools.py
Testability,test,testing,"# be sure that the cache path exists; # automatic generation when s-t changed; """""" Used with insertImageCache; """"""; """""" Returns dim, voxelsize and rigid position of an image given an .mhd header image file; a scaleFactor can be given to normalize image length units (usually in mm); """"""; """""" Returns type of an image given an .mhd header image file; """"""; """""" Returns a transform, formatted to sofa data given voxelsize, rigid position (offset), time and camera parameters; """"""; # controller you must derived from and instanciate in the same context than your ImageViewer if you want to define actions to manually add / remove point from an image plane; # return a dictionary of id -> point: {id0 : point0, idn : pointn, ...}; # a point is defined as follows: {'position': [x, y, z], 'color': [r, g, b], ...custom parameters... }; # simpler python script controllers based on SofaPython.script; # TODO maybe this should be double Inherited from both ImagePlaneController and SofaPython.script.Controller; # not to copy code. But then testing inheritance against ImagePlaneController has to be checked.; """"""; :param filename: you may have to define it (at least once) to create; a controller for which the class is defined in an external; file. Be aware the file will then be read several times.; """"""; # if this fails, you need to call; # Controller.onLoaded(self, node) in derived classes",MatchSource.CODE_COMMENT,applications/plugins/image/python/SofaImage/Tools.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/python/SofaImage/Tools.py
Usability,simpl,simpler,"# be sure that the cache path exists; # automatic generation when s-t changed; """""" Used with insertImageCache; """"""; """""" Returns dim, voxelsize and rigid position of an image given an .mhd header image file; a scaleFactor can be given to normalize image length units (usually in mm); """"""; """""" Returns type of an image given an .mhd header image file; """"""; """""" Returns a transform, formatted to sofa data given voxelsize, rigid position (offset), time and camera parameters; """"""; # controller you must derived from and instanciate in the same context than your ImageViewer if you want to define actions to manually add / remove point from an image plane; # return a dictionary of id -> point: {id0 : point0, idn : pointn, ...}; # a point is defined as follows: {'position': [x, y, z], 'color': [r, g, b], ...custom parameters... }; # simpler python script controllers based on SofaPython.script; # TODO maybe this should be double Inherited from both ImagePlaneController and SofaPython.script.Controller; # not to copy code. But then testing inheritance against ImagePlaneController has to be checked.; """"""; :param filename: you may have to define it (at least once) to create; a controller for which the class is defined in an external; file. Be aware the file will then be read several times.; """"""; # if this fails, you need to call; # Controller.onLoaded(self, node) in derived classes",MatchSource.CODE_COMMENT,applications/plugins/image/python/SofaImage/Tools.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/python/SofaImage/Tools.py
Testability,assert,assert,"'''maps image content as a list of numpy arrays with shared memory'''; # assert( index < len(ptrs) ); # numpy is not mandatory",MatchSource.CODE_COMMENT,applications/plugins/image/python/SofaImage/__init__.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/python/SofaImage/__init__.py
Modifiability,plugin,plugins,"# simulation parameters; # plugins; # visual style; # scene node; # character (currently we use a fixed box); # clothes; #createBox(parent); #parent.createObject('ConstantForceField', force='9.81 -9.81 9.81', points='0') #0 24 599 623; #parent.createObject('ConstantForceField', force='-9.81 -9.81 9.81', points='24'); #parent.createObject('ConstantForceField', force='9.81 -9.81 -9.81', points='599'); #parent.createObject('ConstantForceField', force='-9.81 -9.81 -9.81', points='623'); #parent.createObject('MeshSpringForceField', linesStiffness='1.e+4', linesDamping='0.1') // spring version; # fem; #createCompliantClothes(parent) # another spring version; # bending springs; # try qr instead of svd",MatchSource.CODE_COMMENT,applications/plugins/SofaAssimp/examples/character_clothes.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/examples/character_clothes.py
Deployability,pipeline,pipeline,"# This scene demonstrate how the use the CarvingManager component to perform carving operations (deleting topological element like triangle/tetrahedron) between a tool and a target object on a target object. ; # The tool performing the carving as well as the object to be carved need to be represented by collision models.; # Load required plugins; # Add main scene pipeline components; # Add the CarvingManger object, linking the collision pipeline, as well as the collision model of the tool used to carve. The collisions models to be carved are found using the tags: CarvingSurface.; # the carvingDistance need to be lower than the contactDistance of the collision pipeline. ; # Add Volume mechanical object to be carved; # Add corresponding surface topology; # Add instrument object; #Function used only if this script is called from a python environment",MatchSource.CODE_COMMENT,applications/plugins/SofaCarving/examples/SimpleCarving.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCarving/examples/SimpleCarving.py
Modifiability,plugin,plugins,"# This scene demonstrate how the use the CarvingManager component to perform carving operations (deleting topological element like triangle/tetrahedron) between a tool and a target object on a target object. ; # The tool performing the carving as well as the object to be carved need to be represented by collision models.; # Load required plugins; # Add main scene pipeline components; # Add the CarvingManger object, linking the collision pipeline, as well as the collision model of the tool used to carve. The collisions models to be carved are found using the tags: CarvingSurface.; # the carvingDistance need to be lower than the contactDistance of the collision pipeline. ; # Add Volume mechanical object to be carved; # Add corresponding surface topology; # Add instrument object; #Function used only if this script is called from a python environment",MatchSource.CODE_COMMENT,applications/plugins/SofaCarving/examples/SimpleCarving.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCarving/examples/SimpleCarving.py
Performance,perform,perform,"# This scene demonstrate how the use the CarvingManager component to perform carving operations (deleting topological element like triangle/tetrahedron) between a tool and a target object on a target object. ; # The tool performing the carving as well as the object to be carved need to be represented by collision models.; # Load required plugins; # Add main scene pipeline components; # Add the CarvingManger object, linking the collision pipeline, as well as the collision model of the tool used to carve. The collisions models to be carved are found using the tags: CarvingSurface.; # the carvingDistance need to be lower than the contactDistance of the collision pipeline. ; # Add Volume mechanical object to be carved; # Add corresponding surface topology; # Add instrument object; #Function used only if this script is called from a python environment",MatchSource.CODE_COMMENT,applications/plugins/SofaCarving/examples/SimpleCarving.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCarving/examples/SimpleCarving.py
Testability,test,tests,"# arguments are an option in python tests; # a pure python function to test; # the python test MUST have a ""run"" function with no arguments that returns the test result; # here it tests if the first argument is null and the second is not; # a very small value",MatchSource.CODE_COMMENT,applications/plugins/SofaTest/SofaTest_test/python_tests/python_test_test.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/SofaTest_test/python_tests/python_test_test.py
Availability,error,error,"#--------------------------------------------------------------------------------------------; # manual; # the error is increasing with both the damping coef and the initial velocity; # a ball; # the error is decreasing when the mass (-> inertia) increases; # the error is decreasing when the radius (-> inertia) increases; #--------------------------------------------------------------------------------------------; # auto; #--------------------------------------------------------------------------------------------; # theoretical velocity; # theoretical velocity; # test check; #print str(rotationtheory)+"" ""+str(translationtheory); #print str(self.rotationmax)+"" ""+str(self.translationmax)+"" ""+str(ACCEPTABLE_ERROR); #rotation error; # simulated velocity; #translation error; # simulated velocity; #print str(translationmeasure)+"" ""+str(translationtheory)+"" ""+str(translationerror)+"" ""+str(self.translationmax); #print str(rotationmeasure)+"" ""+str(rotationtheory)+"" ""+str(rotationerror)+"" ""+str(self.rotationmax); #------------------------------------------------------------------------------------------------------------------------------------------------; # create a rigid file to give a correct inertia matrix; #node.createObject('EulerExplicitSolver',name='odesolver'); #node.createObject('RequiredPlugin', pluginName = 'Compliant'); #node.createObject('CompliantImplicitSolver',name='odesolver',stabilization='0'); #node.createObject('LDLTSolver',name = 'numsolver'); # angular damping test; #angularNode.createObject('PartialFixedProjectiveConstraint', indices='0', fixedDirections=""1 1 1 0 1 1""); # translation damping test; #translationNode.createObject('PartialFixedProjectiveConstraint', indices='0', fixedDirections=""0 1 1 1 1 1"")",MatchSource.CODE_COMMENT,applications/plugins/SofaTest/SofaTest_test/scenes/damping.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py
Modifiability,plugin,pluginName,"#--------------------------------------------------------------------------------------------; # manual; # the error is increasing with both the damping coef and the initial velocity; # a ball; # the error is decreasing when the mass (-> inertia) increases; # the error is decreasing when the radius (-> inertia) increases; #--------------------------------------------------------------------------------------------; # auto; #--------------------------------------------------------------------------------------------; # theoretical velocity; # theoretical velocity; # test check; #print str(rotationtheory)+"" ""+str(translationtheory); #print str(self.rotationmax)+"" ""+str(self.translationmax)+"" ""+str(ACCEPTABLE_ERROR); #rotation error; # simulated velocity; #translation error; # simulated velocity; #print str(translationmeasure)+"" ""+str(translationtheory)+"" ""+str(translationerror)+"" ""+str(self.translationmax); #print str(rotationmeasure)+"" ""+str(rotationtheory)+"" ""+str(rotationerror)+"" ""+str(self.rotationmax); #------------------------------------------------------------------------------------------------------------------------------------------------; # create a rigid file to give a correct inertia matrix; #node.createObject('EulerExplicitSolver',name='odesolver'); #node.createObject('RequiredPlugin', pluginName = 'Compliant'); #node.createObject('CompliantImplicitSolver',name='odesolver',stabilization='0'); #node.createObject('LDLTSolver',name = 'numsolver'); # angular damping test; #angularNode.createObject('PartialFixedProjectiveConstraint', indices='0', fixedDirections=""1 1 1 0 1 1""); # translation damping test; #translationNode.createObject('PartialFixedProjectiveConstraint', indices='0', fixedDirections=""0 1 1 1 1 1"")",MatchSource.CODE_COMMENT,applications/plugins/SofaTest/SofaTest_test/scenes/damping.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py
Testability,test,test,"#--------------------------------------------------------------------------------------------; # manual; # the error is increasing with both the damping coef and the initial velocity; # a ball; # the error is decreasing when the mass (-> inertia) increases; # the error is decreasing when the radius (-> inertia) increases; #--------------------------------------------------------------------------------------------; # auto; #--------------------------------------------------------------------------------------------; # theoretical velocity; # theoretical velocity; # test check; #print str(rotationtheory)+"" ""+str(translationtheory); #print str(self.rotationmax)+"" ""+str(self.translationmax)+"" ""+str(ACCEPTABLE_ERROR); #rotation error; # simulated velocity; #translation error; # simulated velocity; #print str(translationmeasure)+"" ""+str(translationtheory)+"" ""+str(translationerror)+"" ""+str(self.translationmax); #print str(rotationmeasure)+"" ""+str(rotationtheory)+"" ""+str(rotationerror)+"" ""+str(self.rotationmax); #------------------------------------------------------------------------------------------------------------------------------------------------; # create a rigid file to give a correct inertia matrix; #node.createObject('EulerExplicitSolver',name='odesolver'); #node.createObject('RequiredPlugin', pluginName = 'Compliant'); #node.createObject('CompliantImplicitSolver',name='odesolver',stabilization='0'); #node.createObject('LDLTSolver',name = 'numsolver'); # angular damping test; #angularNode.createObject('PartialFixedProjectiveConstraint', indices='0', fixedDirections=""1 1 1 0 1 1""); # translation damping test; #translationNode.createObject('PartialFixedProjectiveConstraint', indices='0', fixedDirections=""0 1 1 1 1 1"")",MatchSource.CODE_COMMENT,applications/plugins/SofaTest/SofaTest_test/scenes/damping.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py
Deployability,install,install,"#!python; # DEPENDENCIES; # python3 -m pip install python-graphql-client; #Ref : Action in python https://www.python-engineer.com/posts/run-python-github-actions/; # List of the repository to scan; # Format the reference date (with which the last reply will be compared); # Today; # warning delay = 2-month delay for warning; # closing delay = 2+2.5-month delay for closing; # List of reviewers on GitHub Discussions; # Check if the ""createdAt"" is older than the ""date_reference""; # Format date of creation YYYY-MM-DD; # Returns true of the date ""createdAt"" is more than the warning delay; # Returns true of the date ""createdAt"" is more than the closing delay; # Trigger the query on discussions; # Process each discussion; # Save original author of the discussion; # Detect the last comment; # Pass to the next discussion item if :; # no comment in the discussion OR discussion is answered OR closed; # No replies on the last comment; # Select the last reply of the last comment; # Check if author is indeed a reviewer; #Check dates; # save if request has another page to browse and its cursor pointers; # Query to access all discussions; """"""; query {; repository(owner: ""%s"" name: ""%s"") {; discussions(answered: false, first: 10, after:AFTER) {; totalCount; pageInfo {; hasNextPage; endCursor; }; nodes {; id; number; isAnswered; closed; author {; login; }; comments (first: 100) {; nodes {; createdAt; author {; login; }; replies (first: 100) {; nodes {; createdAt; author {; login; }; }; }; }; }; }; }; }; }""""""; """"""; mutation {; addDiscussionComment(input: {body: ""%s"", discussionId: ""%s""}) {; comment {; id; }; }; }; """"""; """"""; mutation {; addDiscussionComment(input: {body: ""%s"", discussionId: ""%s""}) {; comment {; id; }; }; }; """"""; """"""; mutation {; closeDiscussion(input: {discussionId: ""%s""}) {; discussion {; id; }; }; }; """"""; #==========================================================; # STEPS computed by the script; #==========================================================; # 1 - get th",MatchSource.CODE_COMMENT,scripts/comment-close-old-discussions.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/scripts/comment-close-old-discussions.py
Security,access,access,"5-month delay for closing; # List of reviewers on GitHub Discussions; # Check if the ""createdAt"" is older than the ""date_reference""; # Format date of creation YYYY-MM-DD; # Returns true of the date ""createdAt"" is more than the warning delay; # Returns true of the date ""createdAt"" is more than the closing delay; # Trigger the query on discussions; # Process each discussion; # Save original author of the discussion; # Detect the last comment; # Pass to the next discussion item if :; # no comment in the discussion OR discussion is answered OR closed; # No replies on the last comment; # Select the last reply of the last comment; # Check if author is indeed a reviewer; #Check dates; # save if request has another page to browse and its cursor pointers; # Query to access all discussions; """"""; query {; repository(owner: ""%s"" name: ""%s"") {; discussions(answered: false, first: 10, after:AFTER) {; totalCount; pageInfo {; hasNextPage; endCursor; }; nodes {; id; number; isAnswered; closed; author {; login; }; comments (first: 100) {; nodes {; createdAt; author {; login; }; replies (first: 100) {; nodes {; createdAt; author {; login; }; }; }; }; }; }; }; }; }""""""; """"""; mutation {; addDiscussionComment(input: {body: ""%s"", discussionId: ""%s""}) {; comment {; id; }; }; }; """"""; """"""; mutation {; addDiscussionComment(input: {body: ""%s"", discussionId: ""%s""}) {; comment {; id; }; }; }; """"""; """"""; mutation {; closeDiscussion(input: {discussionId: ""%s""}) {; discussion {; id; }; }; }; """"""; #==========================================================; # STEPS computed by the script; #==========================================================; # 1 - get th",MatchSource.CODE_COMMENT,scripts/comment-close-old-discussions.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/scripts/comment-close-old-discussions.py
Testability,log,login,"th delay for closing; # List of reviewers on GitHub Discussions; # Check if the ""createdAt"" is older than the ""date_reference""; # Format date of creation YYYY-MM-DD; # Returns true of the date ""createdAt"" is more than the warning delay; # Returns true of the date ""createdAt"" is more than the closing delay; # Trigger the query on discussions; # Process each discussion; # Save original author of the discussion; # Detect the last comment; # Pass to the next discussion item if :; # no comment in the discussion OR discussion is answered OR closed; # No replies on the last comment; # Select the last reply of the last comment; # Check if author is indeed a reviewer; #Check dates; # save if request has another page to browse and its cursor pointers; # Query to access all discussions; """"""; query {; repository(owner: ""%s"" name: ""%s"") {; discussions(answered: false, first: 10, after:AFTER) {; totalCount; pageInfo {; hasNextPage; endCursor; }; nodes {; id; number; isAnswered; closed; author {; login; }; comments (first: 100) {; nodes {; createdAt; author {; login; }; replies (first: 100) {; nodes {; createdAt; author {; login; }; }; }; }; }; }; }; }; }""""""; """"""; mutation {; addDiscussionComment(input: {body: ""%s"", discussionId: ""%s""}) {; comment {; id; }; }; }; """"""; """"""; mutation {; addDiscussionComment(input: {body: ""%s"", discussionId: ""%s""}) {; comment {; id; }; }; }; """"""; """"""; mutation {; closeDiscussion(input: {discussionId: ""%s""}) {; discussion {; id; }; }; }; """"""; #==========================================================; # STEPS computed by the script; #==========================================================; # 1 - get the discussion to be warned and closed; #==========================================================; # 2- do it using github API; #==========================================================; # WARNING step; # Warning comment; #==========================================================; # CLOSING step; # Closing comment; # Close discussion; #===========",MatchSource.CODE_COMMENT,scripts/comment-close-old-discussions.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/scripts/comment-close-old-discussions.py
Testability,log,log,"# extract imformations of a svn log (in xml format); # uses only the first logentry; # usage: svn-log-parse.py filename [revision|author|msg|date]; # use ""svn log -l 1 --xml > log.xml"" to have the infos about the last checkouted revision; #for node in xmldoc.getElementsByTagName('logentry'):; #print 'revision='+revision; #print 'author='+author; #print 'date='+date; #print 'msg='+msg",MatchSource.CODE_COMMENT,scripts/deprecated/svn-log-parse.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/scripts/deprecated/svn-log-parse.py
Integrability,message,message,"#!python; # Recover all info as env var; # Format message; # Check whether an embed is expected. If not (empty title), enforce no embed using the ""flag""; # Send message to Discord",MatchSource.CODE_COMMENT,scripts/discord/post-discord-message.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/scripts/discord/post-discord-message.py
Integrability,message,message,"#!python; # List of the repository to scan; # List of reviewers on GitHub Discussions; # Trigger the query on discussions; # Process each discussion; # Exit if discussion is closed or answered; ##############################; # Detect the last comment; # No comment at all; # No reply on the last comment; # Select the last reply of the last comment; # Check if author is indeed a reviewer; # save if request has another page to browse and its cursor pointers; # Category has been covered; #print(Message); # Function posting a message on Discord; # Query to access all discussions; """"""; query {; repository(owner: ""%s"" name: ""%s"") {; discussions(answered: false, first: 10, after:AFTER) {; totalCount; pageInfo {; hasNextPage; endCursor; }; nodes {; number; isAnswered; closed; category {; name; }; comments (first: 100) {; nodes {; author {; login; }; replies (first: 100) {; nodes {; author {; login; }; }; }; }; }; }; }; }; }""""""; #==========================================================; # STEPS computed by the script; #==========================================================; # 1 - get the discussion to be warned and closed; #==========================================================",MatchSource.CODE_COMMENT,scripts/discord/post-pending-discussions.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/scripts/discord/post-pending-discussions.py
Security,access,access,"#!python; # List of the repository to scan; # List of reviewers on GitHub Discussions; # Trigger the query on discussions; # Process each discussion; # Exit if discussion is closed or answered; ##############################; # Detect the last comment; # No comment at all; # No reply on the last comment; # Select the last reply of the last comment; # Check if author is indeed a reviewer; # save if request has another page to browse and its cursor pointers; # Category has been covered; #print(Message); # Function posting a message on Discord; # Query to access all discussions; """"""; query {; repository(owner: ""%s"" name: ""%s"") {; discussions(answered: false, first: 10, after:AFTER) {; totalCount; pageInfo {; hasNextPage; endCursor; }; nodes {; number; isAnswered; closed; category {; name; }; comments (first: 100) {; nodes {; author {; login; }; replies (first: 100) {; nodes {; author {; login; }; }; }; }; }; }; }; }; }""""""; #==========================================================; # STEPS computed by the script; #==========================================================; # 1 - get the discussion to be warned and closed; #==========================================================",MatchSource.CODE_COMMENT,scripts/discord/post-pending-discussions.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/scripts/discord/post-pending-discussions.py
Testability,log,login,"#!python; # List of the repository to scan; # List of reviewers on GitHub Discussions; # Trigger the query on discussions; # Process each discussion; # Exit if discussion is closed or answered; ##############################; # Detect the last comment; # No comment at all; # No reply on the last comment; # Select the last reply of the last comment; # Check if author is indeed a reviewer; # save if request has another page to browse and its cursor pointers; # Category has been covered; #print(Message); # Function posting a message on Discord; # Query to access all discussions; """"""; query {; repository(owner: ""%s"" name: ""%s"") {; discussions(answered: false, first: 10, after:AFTER) {; totalCount; pageInfo {; hasNextPage; endCursor; }; nodes {; number; isAnswered; closed; category {; name; }; comments (first: 100) {; nodes {; author {; login; }; replies (first: 100) {; nodes {; author {; login; }; }; }; }; }; }; }; }; }""""""; #==========================================================; # STEPS computed by the script; #==========================================================; # 1 - get the discussion to be warned and closed; #==========================================================",MatchSource.CODE_COMMENT,scripts/discord/post-pending-discussions.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/scripts/discord/post-pending-discussions.py
Performance,load,loaded,"############################################################################################; # this is a PythonScriptController example script; ############################################################################################; ############################################################################################; # following defs are used later in the script; ############################################################################################; # Node creation; #you can animate simulation directly by uncommenting the following line:; #node.animate=true; # Python version of the ""oneParticleSample"" in cpp located in applications/tutorials/oneParticle; ############################################################################################; # following defs are optionnal entry points, called by the PythonScriptController component;; ############################################################################################; # called once the script is loaded; # optionnally, script can create a graph...; #uncomment to create nodes; #testNodes(node); #uncomment to create the ""oneParticle"" sample; # called once graph is created, to init some stuff...; # called on each animation step; #print 'onBeginAnimatinStep (python) dt=%f total time=%f'%(dt,self.total_time); # called when necessary by Sofa framework... ; # called when a GUIEvent is received; # key and mouse events; use this to add some user interaction to your scripts ; # called at each draw (possibility to use PyOpenGL)",MatchSource.CODE_COMMENT,tools/sofa-launcher/example.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/example.py
Testability,test,testNodes,"############################################################################################; # this is a PythonScriptController example script; ############################################################################################; ############################################################################################; # following defs are used later in the script; ############################################################################################; # Node creation; #you can animate simulation directly by uncommenting the following line:; #node.animate=true; # Python version of the ""oneParticleSample"" in cpp located in applications/tutorials/oneParticle; ############################################################################################; # following defs are optionnal entry points, called by the PythonScriptController component;; ############################################################################################; # called once the script is loaded; # optionnally, script can create a graph...; #uncomment to create nodes; #testNodes(node); #uncomment to create the ""oneParticle"" sample; # called once graph is created, to init some stuff...; # called on each animation step; #print 'onBeginAnimatinStep (python) dt=%f total time=%f'%(dt,self.total_time); # called when necessary by Sofa framework... ; # called when a GUIEvent is received; # key and mouse events; use this to add some user interaction to your scripts ; # called at each draw (possibility to use PyOpenGL)",MatchSource.CODE_COMMENT,tools/sofa-launcher/example.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/example.py
Usability,learn,learn,"#!/usr/bin/python; # coding: utf8 ; #############################################################################; # This file is part of Sofa Framework; #; # This script is showing how you can use the launcher.py API to start; # multiple runSofa instance and gather the results. ; # ; # You need the cheetha template engine to use this; # http://www.cheetahtemplate.org/learn.html; #; # Contributors:; # - damien.marchal@univ-lille.1; #############################################################################; ################## EXAMPLE USING THE SEQUENTIAL LAUNCHER #################################; ################## EXAMPLE USING THE PARALLEL LAUNCHER ################################# ; ################## EXAMPLE USING THE DISTRIBUTED LAUNCHER ################################# ; # Start sofa returns a dictionnary ",MatchSource.CODE_COMMENT,tools/sofa-launcher/integration_example.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/integration_example.py
Testability,log,logfile,"#!/usr/bin/python; # coding: utf8 ; #############################################################################; # A small utility to launch multiple sofa in parallel.; #; # Need Cheetah template to work. ; # ; # Contributors:; # - damien.marchal@univ-lille.1; #############################################################################; # Create the threads; #logfile.write(""========== MATCH-LOG ===========\n""); #logfile.write(str(filtering(astdout))) ; # Create the threads",MatchSource.CODE_COMMENT,tools/sofa-launcher/launcher.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/launcher.py
Usability,learn,learn,"#!/usr/bin/python; # coding: utf8 ; #############################################################################; # This file is part of Sofa Framework; #; # Need Cheetah template engin to work (http://www.cheetahtemplate.org/learn.html) ; # ; # Contributors:; # - damien.marchal@univ-lille.1; #############################################################################; # Create the adequate launcher; # Prepare the files and the templates for processing. ; # Start the jobs... and print the results ",MatchSource.CODE_COMMENT,tools/sofa-launcher/sofa-launcher.py,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/sofa-launcher.py
