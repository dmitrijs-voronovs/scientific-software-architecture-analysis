id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/doc/master/classRooAbsPdf.html:79596,Modifiability,inherit,inherited,79596,"d. ;  ; void logBatchComputationErrors (std::span< const double > &outputs, std::size_t begin) const;  Scan through outputs and fix+log all nans and negative values. ;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooArgSet &params, bool showConstants=false, const char *label="""", double xmin=0.65, double xmax=0.99, double ymax=0.95, const RooCmdArg *formatCmd=nullptr);  Add a text box with the current parameter values and their errors to the frame. ;  ; void setActiveNormSet (RooArgSet const *normSet) const;  Setter for the _normSet member, which should never be set directly. ;  ; bool traceEvalPdf (double value) const;  Check that passed value is positive and not 'not-a-number'. ;  . Private Attributes; RooFit::UniqueId< RooArgSet >::Value_t _normSetId = RooFit::UniqueId<RooArgSet>::nullval;  ! Unique ID of the currently-active normalization set ;  . Friends; class RooAbsReal;  ; class RooChi2Var;  ; class RooMCStudy;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . #include <RooAbsPdf.h>. Inheritance diagram for RooAbsPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Membe",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:79956,Modifiability,inherit,inherited,79956," text box with the current parameter values and their errors to the frame. ;  ; void setActiveNormSet (RooArgSet const *normSet) const;  Setter for the _normSet member, which should never be set directly. ;  ; bool traceEvalPdf (double value) const;  Check that passed value is positive and not 'not-a-number'. ;  . Private Attributes; RooFit::UniqueId< RooArgSet >::Value_t _normSetId = RooFit::UniqueId<RooArgSet>::nullval;  ! Unique ID of the currently-active normalization set ;  . Friends; class RooAbsReal;  ; class RooChi2Var;  ; class RooMCStudy;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . #include <RooAbsPdf.h>. Inheritance diagram for RooAbsPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ExtendMode. enum RooAbsPdf::ExtendMode. EnumeratorCanNotBeExtended ; CanBeExtended ; MustBeExtended . Definition at line 212 of file RooAbsPdf.h. Constructor & Destructor Documentation. ◆ RooAbsPdf() [1/4]. RooAbsPdf::RooAbsPdf ; (; ). Default constructor. ; Definition at line 230 of file RooAbsPdf.cxx. ◆ RooAbsPdf() [2/4]. RooAbsPdf::RooAbsPdf ; (; ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:80062,Modifiability,inherit,inherited,80062," text box with the current parameter values and their errors to the frame. ;  ; void setActiveNormSet (RooArgSet const *normSet) const;  Setter for the _normSet member, which should never be set directly. ;  ; bool traceEvalPdf (double value) const;  Check that passed value is positive and not 'not-a-number'. ;  . Private Attributes; RooFit::UniqueId< RooArgSet >::Value_t _normSetId = RooFit::UniqueId<RooArgSet>::nullval;  ! Unique ID of the currently-active normalization set ;  . Friends; class RooAbsReal;  ; class RooChi2Var;  ; class RooMCStudy;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . #include <RooAbsPdf.h>. Inheritance diagram for RooAbsPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ExtendMode. enum RooAbsPdf::ExtendMode. EnumeratorCanNotBeExtended ; CanBeExtended ; MustBeExtended . Definition at line 212 of file RooAbsPdf.h. Constructor & Destructor Documentation. ◆ RooAbsPdf() [1/4]. RooAbsPdf::RooAbsPdf ; (; ). Default constructor. ; Definition at line 230 of file RooAbsPdf.cxx. ◆ RooAbsPdf() [2/4]. RooAbsPdf::RooAbsPdf ; (; ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:80248,Modifiability,inherit,inherited,80248,"; RooFit::UniqueId< RooArgSet >::Value_t _normSetId = RooFit::UniqueId<RooArgSet>::nullval;  ! Unique ID of the currently-active normalization set ;  . Friends; class RooAbsReal;  ; class RooChi2Var;  ; class RooMCStudy;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . #include <RooAbsPdf.h>. Inheritance diagram for RooAbsPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ExtendMode. enum RooAbsPdf::ExtendMode. EnumeratorCanNotBeExtended ; CanBeExtended ; MustBeExtended . Definition at line 212 of file RooAbsPdf.h. Constructor & Destructor Documentation. ◆ RooAbsPdf() [1/4]. RooAbsPdf::RooAbsPdf ; (; ). Default constructor. ; Definition at line 230 of file RooAbsPdf.cxx. ◆ RooAbsPdf() [2/4]. RooAbsPdf::RooAbsPdf ; (; const char * ; name, . const char * ; title = nullptr . ). Constructor with name and title only. ; Definition at line 235 of file RooAbsPdf.cxx. ◆ RooAbsPdf() [3/4]. RooAbsPdf::RooAbsPdf ; (; const char * ; name, . const char * ; title, . double ; minVal, . double ; maxVal . ). Constructor with name, title, and plot range. ; Definit",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:83163,Modifiability,extend,extended,83163,"o return a normalized answer. ; Reimplemented from RooAbsReal.; Reimplemented in RooNormalizedPdf, RooBinSamplingPdf, RooWrapperPdf, RooFixedProdPdf, RooAddModel, RooAddPdf, RooExtendPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, and RooSimultaneous.; Definition at line 364 of file RooAbsPdf.cxx. ◆ autoGenContext(). RooAbsGenContext * RooAbsPdf::autoGenContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false, . bool ; autoBinned = true, . const char * ; binnedTag = """" . ); const. virtual . Reimplemented in RooSimultaneous.; Definition at line 1136 of file RooAbsPdf.cxx. ◆ binnedGenContext(). RooAbsGenContext * RooAbsPdf::binnedGenContext ; (; const RooArgSet & ; vars, . bool ; verbose = false . ); const. virtual . Return a binned generator context. ; Definition at line 1117 of file RooAbsPdf.cxx. ◆ canBeExtended(). bool RooAbsPdf::canBeExtended ; (; ); const. inline . If true, PDF can provide extended likelihood term. ; Definition at line 218 of file RooAbsPdf.h. ◆ Class(). static TClass * RooAbsPdf::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsPdf::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsPdf::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 351 of file RooAbsPdf.h. ◆ compileForNormSet(). std::unique_ptr< RooAbsArg > RooAbsPdf::compileForNormSet ; (; RooArgSet const & ; normSet, . RooFit::Detail::CompileContext & ; ctx . ); const. overridevirtual . Reimplemented from RooAbsArg.; Reimplemented in RooAddPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, and RooSimultaneous.; Definition at line 2788 of file RooAbsPdf.cxx. ◆ createCdf() [1/2]. RooFit::OwningPtr< RooAbsReal > RooAbsPdf::createCdf ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = RooArgSet() . ). Create a cumulative distribution functi",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:85350,Modifiability,variab,variables,85350,"alue is precisely 1. It is also possible to choose a different normalization for multi-dimensional p.d.f.s: eg. for a pdf f(x,y,z) one can construct a partial cdf c(x,y) that only when integrated itself over z results in a maximum value of 1. To construct such a cdf pass z as argument to the optional nset argument ; Definition at line 2468 of file RooAbsPdf.cxx. ◆ createCdf() [2/2]. RooAbsPdf::createCdf ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over; The following named arguments are accepted . Type of CmdArg Effect on CDF . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanNumCdf() Apply scanning technique if cdf integral involves numeric integration [ default ] . ScanAllCdf() Always apply scanning technique . ScanNoCdf() Never apply scanning technique . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf . PyROOT; The RooAbsPdf::createCdf() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 2490 of file RooAbsPdf.cxx. ◆ createExpectedEventsFunc(). std::unique_ptr< RooAbsReal > RooAbsPdf::createExpectedEventsFunc ; (; const RooArgSet * ; nset); const. virtual . Returns an object that represents the ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:88060,Modifiability,extend,extended,88060,"constructed.; Parameters. dataReference to a RooAbsData object representing the dataset. ; cmdArgsVariadic template arguments representing optional command arguments. You can pass either an arbitrary number of RooCmdArg instances or a single RooLinkedList that points to the RooCmdArg objects. . ReturnsAn owning pointer to the created RooAbsReal NLL object.; Template Parameters. CmdArgs_tTemplate types for optional command arguments. Can either be an arbitrary number of RooCmdArg or a single RooLinkedList. NoteThis front-end function should not be re-implemented in derived PDF types. If you mean to customize the NLL creation routine, you need to override the virtual RooAbsPdf::createNLLImpl() method.; The following named arguments are supported:. Type of CmdArg Effect on NLL . ConditionalObservables(Args_t &&... argsOrArgSet) Do not normalize PDF over listed observables. Arguments can either be multiple RooRealVar or a single RooArgSet containing them. . Extended(bool flag) Add extended likelihood term, off by default. . Range(const char* name) Fit only data inside range with given name. Multiple comma-separated range names can be specified. In this case, the unnormalized PDF \(f(x)\) is normalized by the integral over all ranges \(r_i\): ; \[; p(x) = \frac{f(x)}{\sum_i \int_{r_i} f(x) dx}.; \]. Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on the fly on all observables. . SumCoefRange(const char* name) Set the range in which to interpret the coefficients of RooAddPdf components . NumCPU(int num, int istrat) Parallelize NLL calculation on num CPUs . Strategy Effect . 0 = RooFit::BulkPartition - default Divide events in N equal chunks . 1 = RooFit::Interleave Process event iN in process N. Recommended for binned data with a substantial number of zero-bins, which will be distributed across processes more equitably in this strategy . 2 = RooFit::SimComponents Process each component likelihood of a RooSimultaneous fully in a",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:97685,Modifiability,config,configuration,97685,"ge the NLL creation logic for custom PDFs.; NoteNever call this function directly. Instead, call RooAbsPdf::createNLL(). ; Definition at line 941 of file RooAbsPdf.cxx. ◆ createProjection(). RooAbsPdf * RooAbsPdf::createProjection ; (; const RooArgSet & ; iset). virtual . Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ; Reimplemented in RooProjectedPdf.; Definition at line 2446 of file RooAbsPdf.cxx. ◆ createScanCdf(). RooFit::OwningPtr< RooAbsReal > RooAbsPdf::createScanCdf ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . Int_t ; numScanBins, . Int_t ; intOrder . ). Definition at line 2545 of file RooAbsPdf.cxx. ◆ DeclFileName(). static const char * RooAbsPdf::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 351 of file RooAbsPdf.h. ◆ defaultGeneratorConfig(). RooNumGenConfig * RooAbsPdf::defaultGeneratorConfig ; (; ). static . Returns the default numeric MC generator configuration for all RooAbsReals. ; Definition at line 2613 of file RooAbsPdf.cxx. ◆ expectedEvents() [1/2]. double RooAbsPdf::expectedEvents ; (; const RooArgSet & ; nset); const. inline . Return expected number of events to be used in calculation of extended likelihood. ; This function should not be overridden, as it just redirects to the actual virtual function but takes a RooArgSet reference instead of pointer. See alsoexpectedEvents(const RooArgSet*) const ; Definition at line 232 of file RooAbsPdf.h. ◆ expectedEvents() [2/2]. double RooAbsPdf::expectedEvents ; (; const RooArgSet * ; nset); const. virtual . Return expected number of events to be used in calculation of extended likelihood. ; Return expected number of events from this p.d.f for use in extended likelihood calculations.; This default implementation returns zero ; Reimplemented in RooNormalizedPdf, RooFixedProdPdf, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendedTerm, RooExtendPdf, RooProdPdf, RooProjectedPd",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:97938,Modifiability,extend,extended,97938," const RooArgSet & ; iset). virtual . Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ; Reimplemented in RooProjectedPdf.; Definition at line 2446 of file RooAbsPdf.cxx. ◆ createScanCdf(). RooFit::OwningPtr< RooAbsReal > RooAbsPdf::createScanCdf ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . Int_t ; numScanBins, . Int_t ; intOrder . ). Definition at line 2545 of file RooAbsPdf.cxx. ◆ DeclFileName(). static const char * RooAbsPdf::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 351 of file RooAbsPdf.h. ◆ defaultGeneratorConfig(). RooNumGenConfig * RooAbsPdf::defaultGeneratorConfig ; (; ). static . Returns the default numeric MC generator configuration for all RooAbsReals. ; Definition at line 2613 of file RooAbsPdf.cxx. ◆ expectedEvents() [1/2]. double RooAbsPdf::expectedEvents ; (; const RooArgSet & ; nset); const. inline . Return expected number of events to be used in calculation of extended likelihood. ; This function should not be overridden, as it just redirects to the actual virtual function but takes a RooArgSet reference instead of pointer. See alsoexpectedEvents(const RooArgSet*) const ; Definition at line 232 of file RooAbsPdf.h. ◆ expectedEvents() [2/2]. double RooAbsPdf::expectedEvents ; (; const RooArgSet * ; nset); const. virtual . Return expected number of events to be used in calculation of extended likelihood. ; Return expected number of events from this p.d.f for use in extended likelihood calculations.; This default implementation returns zero ; Reimplemented in RooNormalizedPdf, RooFixedProdPdf, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendedTerm, RooExtendPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooSimultaneous, and xRooProjectedPdf.; Definition at line 2398 of file RooAbsPdf.cxx. ◆ extendedTerm() [1/3]. double RooAbsPdf::extendedTerm ; (; double ; sumEntries, . double ; expected, . double ; sumEntriesW2 = 0.0",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:98368,Modifiability,extend,extended,98368,"oAbsPdf.cxx. ◆ DeclFileName(). static const char * RooAbsPdf::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 351 of file RooAbsPdf.h. ◆ defaultGeneratorConfig(). RooNumGenConfig * RooAbsPdf::defaultGeneratorConfig ; (; ). static . Returns the default numeric MC generator configuration for all RooAbsReals. ; Definition at line 2613 of file RooAbsPdf.cxx. ◆ expectedEvents() [1/2]. double RooAbsPdf::expectedEvents ; (; const RooArgSet & ; nset); const. inline . Return expected number of events to be used in calculation of extended likelihood. ; This function should not be overridden, as it just redirects to the actual virtual function but takes a RooArgSet reference instead of pointer. See alsoexpectedEvents(const RooArgSet*) const ; Definition at line 232 of file RooAbsPdf.h. ◆ expectedEvents() [2/2]. double RooAbsPdf::expectedEvents ; (; const RooArgSet * ; nset); const. virtual . Return expected number of events to be used in calculation of extended likelihood. ; Return expected number of events from this p.d.f for use in extended likelihood calculations.; This default implementation returns zero ; Reimplemented in RooNormalizedPdf, RooFixedProdPdf, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendedTerm, RooExtendPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooSimultaneous, and xRooProjectedPdf.; Definition at line 2398 of file RooAbsPdf.cxx. ◆ extendedTerm() [1/3]. double RooAbsPdf::extendedTerm ; (; double ; sumEntries, . double ; expected, . double ; sumEntriesW2 = 0.0, . bool ; doOffset = false . ); const. Definition at line 730 of file RooAbsPdf.cxx. ◆ extendedTerm() [2/3]. double RooAbsPdf::extendedTerm ; (; double ; sumEntries, . RooArgSet const * ; nset, . double ; sumEntriesW2 = 0.0, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events.",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:98451,Modifiability,extend,extended,98451,"e file containing the class declaration ; Definition at line 351 of file RooAbsPdf.h. ◆ defaultGeneratorConfig(). RooNumGenConfig * RooAbsPdf::defaultGeneratorConfig ; (; ). static . Returns the default numeric MC generator configuration for all RooAbsReals. ; Definition at line 2613 of file RooAbsPdf.cxx. ◆ expectedEvents() [1/2]. double RooAbsPdf::expectedEvents ; (; const RooArgSet & ; nset); const. inline . Return expected number of events to be used in calculation of extended likelihood. ; This function should not be overridden, as it just redirects to the actual virtual function but takes a RooArgSet reference instead of pointer. See alsoexpectedEvents(const RooArgSet*) const ; Definition at line 232 of file RooAbsPdf.h. ◆ expectedEvents() [2/2]. double RooAbsPdf::expectedEvents ; (; const RooArgSet * ; nset); const. virtual . Return expected number of events to be used in calculation of extended likelihood. ; Return expected number of events from this p.d.f for use in extended likelihood calculations.; This default implementation returns zero ; Reimplemented in RooNormalizedPdf, RooFixedProdPdf, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendedTerm, RooExtendPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooSimultaneous, and xRooProjectedPdf.; Definition at line 2398 of file RooAbsPdf.cxx. ◆ extendedTerm() [1/3]. double RooAbsPdf::extendedTerm ; (; double ; sumEntries, . double ; expected, . double ; sumEntriesW2 = 0.0, . bool ; doOffset = false . ); const. Definition at line 730 of file RooAbsPdf.cxx. ◆ extendedTerm() [2/3]. double RooAbsPdf::extendedTerm ; (; double ; sumEntries, . RooArgSet const * ; nset, . double ; sumEntriesW2 = 0.0, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtend",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:98788,Modifiability,extend,extendedTerm,98788,"uble RooAbsPdf::expectedEvents ; (; const RooArgSet & ; nset); const. inline . Return expected number of events to be used in calculation of extended likelihood. ; This function should not be overridden, as it just redirects to the actual virtual function but takes a RooArgSet reference instead of pointer. See alsoexpectedEvents(const RooArgSet*) const ; Definition at line 232 of file RooAbsPdf.h. ◆ expectedEvents() [2/2]. double RooAbsPdf::expectedEvents ; (; const RooArgSet * ; nset); const. virtual . Return expected number of events to be used in calculation of extended likelihood. ; Return expected number of events from this p.d.f for use in extended likelihood calculations.; This default implementation returns zero ; Reimplemented in RooNormalizedPdf, RooFixedProdPdf, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendedTerm, RooExtendPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooSimultaneous, and xRooProjectedPdf.; Definition at line 2398 of file RooAbsPdf.cxx. ◆ extendedTerm() [1/3]. double RooAbsPdf::extendedTerm ; (; double ; sumEntries, . double ; expected, . double ; sumEntriesW2 = 0.0, . bool ; doOffset = false . ); const. Definition at line 730 of file RooAbsPdf.cxx. ◆ extendedTerm() [2/3]. double RooAbsPdf::extendedTerm ; (; double ; sumEntries, . RooArgSet const * ; nset, . double ; sumEntriesW2 = 0.0, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]sumEntriesThe number of observed events. ; [in]nsetThe normalization set when asking the pdf for the expected number of events. ; [in]observedSumW2The number of observed events when weighting with squared weights. If non-zero, the weight-squared error correction ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:98828,Modifiability,extend,extendedTerm,98828," RooArgSet & ; nset); const. inline . Return expected number of events to be used in calculation of extended likelihood. ; This function should not be overridden, as it just redirects to the actual virtual function but takes a RooArgSet reference instead of pointer. See alsoexpectedEvents(const RooArgSet*) const ; Definition at line 232 of file RooAbsPdf.h. ◆ expectedEvents() [2/2]. double RooAbsPdf::expectedEvents ; (; const RooArgSet * ; nset); const. virtual . Return expected number of events to be used in calculation of extended likelihood. ; Return expected number of events from this p.d.f for use in extended likelihood calculations.; This default implementation returns zero ; Reimplemented in RooNormalizedPdf, RooFixedProdPdf, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendedTerm, RooExtendPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooSimultaneous, and xRooProjectedPdf.; Definition at line 2398 of file RooAbsPdf.cxx. ◆ extendedTerm() [1/3]. double RooAbsPdf::extendedTerm ; (; double ; sumEntries, . double ; expected, . double ; sumEntriesW2 = 0.0, . bool ; doOffset = false . ); const. Definition at line 730 of file RooAbsPdf.cxx. ◆ extendedTerm() [2/3]. double RooAbsPdf::extendedTerm ; (; double ; sumEntries, . RooArgSet const * ; nset, . double ; sumEntriesW2 = 0.0, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]sumEntriesThe number of observed events. ; [in]nsetThe normalization set when asking the pdf for the expected number of events. ; [in]observedSumW2The number of observed events when weighting with squared weights. If non-zero, the weight-squared error correction is applied to the extended term. ; [in]doO",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:99005,Modifiability,extend,extendedTerm,99005,"directs to the actual virtual function but takes a RooArgSet reference instead of pointer. See alsoexpectedEvents(const RooArgSet*) const ; Definition at line 232 of file RooAbsPdf.h. ◆ expectedEvents() [2/2]. double RooAbsPdf::expectedEvents ; (; const RooArgSet * ; nset); const. virtual . Return expected number of events to be used in calculation of extended likelihood. ; Return expected number of events from this p.d.f for use in extended likelihood calculations.; This default implementation returns zero ; Reimplemented in RooNormalizedPdf, RooFixedProdPdf, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendedTerm, RooExtendPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooSimultaneous, and xRooProjectedPdf.; Definition at line 2398 of file RooAbsPdf.cxx. ◆ extendedTerm() [1/3]. double RooAbsPdf::extendedTerm ; (; double ; sumEntries, . double ; expected, . double ; sumEntriesW2 = 0.0, . bool ; doOffset = false . ); const. Definition at line 730 of file RooAbsPdf.cxx. ◆ extendedTerm() [2/3]. double RooAbsPdf::extendedTerm ; (; double ; sumEntries, . RooArgSet const * ; nset, . double ; sumEntriesW2 = 0.0, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]sumEntriesThe number of observed events. ; [in]nsetThe normalization set when asking the pdf for the expected number of events. ; [in]observedSumW2The number of observed events when weighting with squared weights. If non-zero, the weight-squared error correction is applied to the extended term. ; [in]doOffsetOffset the extended term by a counterterm where the expected number of events equals the observed number of events. This constant shift results in a term closer to zero t",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:99045,Modifiability,extend,extendedTerm,99045,"t takes a RooArgSet reference instead of pointer. See alsoexpectedEvents(const RooArgSet*) const ; Definition at line 232 of file RooAbsPdf.h. ◆ expectedEvents() [2/2]. double RooAbsPdf::expectedEvents ; (; const RooArgSet * ; nset); const. virtual . Return expected number of events to be used in calculation of extended likelihood. ; Return expected number of events from this p.d.f for use in extended likelihood calculations.; This default implementation returns zero ; Reimplemented in RooNormalizedPdf, RooFixedProdPdf, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendedTerm, RooExtendPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooSimultaneous, and xRooProjectedPdf.; Definition at line 2398 of file RooAbsPdf.cxx. ◆ extendedTerm() [1/3]. double RooAbsPdf::extendedTerm ; (; double ; sumEntries, . double ; expected, . double ; sumEntriesW2 = 0.0, . bool ; doOffset = false . ); const. Definition at line 730 of file RooAbsPdf.cxx. ◆ extendedTerm() [2/3]. double RooAbsPdf::extendedTerm ; (; double ; sumEntries, . RooArgSet const * ; nset, . double ; sumEntriesW2 = 0.0, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]sumEntriesThe number of observed events. ; [in]nsetThe normalization set when asking the pdf for the expected number of events. ; [in]observedSumW2The number of observed events when weighting with squared weights. If non-zero, the weight-squared error correction is applied to the extended term. ; [in]doOffsetOffset the extended term by a counterterm where the expected number of events equals the observed number of events. This constant shift results in a term closer to zero that is approximately chi-square distribute",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:99192,Modifiability,extend,extended,99192,"onst RooArgSet * ; nset); const. virtual . Return expected number of events to be used in calculation of extended likelihood. ; Return expected number of events from this p.d.f for use in extended likelihood calculations.; This default implementation returns zero ; Reimplemented in RooNormalizedPdf, RooFixedProdPdf, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendedTerm, RooExtendPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooSimultaneous, and xRooProjectedPdf.; Definition at line 2398 of file RooAbsPdf.cxx. ◆ extendedTerm() [1/3]. double RooAbsPdf::extendedTerm ; (; double ; sumEntries, . double ; expected, . double ; sumEntriesW2 = 0.0, . bool ; doOffset = false . ); const. Definition at line 730 of file RooAbsPdf.cxx. ◆ extendedTerm() [2/3]. double RooAbsPdf::extendedTerm ; (; double ; sumEntries, . RooArgSet const * ; nset, . double ; sumEntriesW2 = 0.0, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]sumEntriesThe number of observed events. ; [in]nsetThe normalization set when asking the pdf for the expected number of events. ; [in]observedSumW2The number of observed events when weighting with squared weights. If non-zero, the weight-squared error correction is applied to the extended term. ; [in]doOffsetOffset the extended term by a counterterm where the expected number of events equals the observed number of events. This constant shift results in a term closer to zero that is approximately chi-square distributed. It is useful to do this also when summing multiple NLL terms to avoid numeric precision loss that happens if you sum multiple terms of different orders of magnitude. The weight-squared error correction wor",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:99424,Modifiability,extend,extendable,99424,"is p.d.f for use in extended likelihood calculations.; This default implementation returns zero ; Reimplemented in RooNormalizedPdf, RooFixedProdPdf, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendedTerm, RooExtendPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooSimultaneous, and xRooProjectedPdf.; Definition at line 2398 of file RooAbsPdf.cxx. ◆ extendedTerm() [1/3]. double RooAbsPdf::extendedTerm ; (; double ; sumEntries, . double ; expected, . double ; sumEntriesW2 = 0.0, . bool ; doOffset = false . ); const. Definition at line 730 of file RooAbsPdf.cxx. ◆ extendedTerm() [2/3]. double RooAbsPdf::extendedTerm ; (; double ; sumEntries, . RooArgSet const * ; nset, . double ; sumEntriesW2 = 0.0, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]sumEntriesThe number of observed events. ; [in]nsetThe normalization set when asking the pdf for the expected number of events. ; [in]observedSumW2The number of observed events when weighting with squared weights. If non-zero, the weight-squared error correction is applied to the extended term. ; [in]doOffsetOffset the extended term by a counterterm where the expected number of events equals the observed number of events. This constant shift results in a term closer to zero that is approximately chi-square distributed. It is useful to do this also when summing multiple NLL terms to avoid numeric precision loss that happens if you sum multiple terms of different orders of magnitude. The weight-squared error correction works as follows: adjust poisson such that estimate of \(N_\mathrm{expect}\) stays at the same value, but has a different variance, rescale both the observed and expected ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:99815,Modifiability,extend,extended,99815,"extendedTerm() [1/3]. double RooAbsPdf::extendedTerm ; (; double ; sumEntries, . double ; expected, . double ; sumEntriesW2 = 0.0, . bool ; doOffset = false . ); const. Definition at line 730 of file RooAbsPdf.cxx. ◆ extendedTerm() [2/3]. double RooAbsPdf::extendedTerm ; (; double ; sumEntries, . RooArgSet const * ; nset, . double ; sumEntriesW2 = 0.0, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]sumEntriesThe number of observed events. ; [in]nsetThe normalization set when asking the pdf for the expected number of events. ; [in]observedSumW2The number of observed events when weighting with squared weights. If non-zero, the weight-squared error correction is applied to the extended term. ; [in]doOffsetOffset the extended term by a counterterm where the expected number of events equals the observed number of events. This constant shift results in a term closer to zero that is approximately chi-square distributed. It is useful to do this also when summing multiple NLL terms to avoid numeric precision loss that happens if you sum multiple terms of different orders of magnitude. The weight-squared error correction works as follows: adjust poisson such that estimate of \(N_\mathrm{expect}\) stays at the same value, but has a different variance, rescale both the observed and expected count of the Poisson with a factor \( \sum w_{i} / \sum w_{i}^2 \) (the effective weight of the Poisson term), i.e., change \(\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\) to \( \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \), weighted by the effective weight",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:99855,Modifiability,extend,extended,99855,"le ; sumEntriesW2 = 0.0, . bool ; doOffset = false . ); const. Definition at line 730 of file RooAbsPdf.cxx. ◆ extendedTerm() [2/3]. double RooAbsPdf::extendedTerm ; (; double ; sumEntries, . RooArgSet const * ; nset, . double ; sumEntriesW2 = 0.0, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]sumEntriesThe number of observed events. ; [in]nsetThe normalization set when asking the pdf for the expected number of events. ; [in]observedSumW2The number of observed events when weighting with squared weights. If non-zero, the weight-squared error correction is applied to the extended term. ; [in]doOffsetOffset the extended term by a counterterm where the expected number of events equals the observed number of events. This constant shift results in a term closer to zero that is approximately chi-square distributed. It is useful to do this also when summing multiple NLL terms to avoid numeric precision loss that happens if you sum multiple terms of different orders of magnitude. The weight-squared error correction works as follows: adjust poisson such that estimate of \(N_\mathrm{expect}\) stays at the same value, but has a different variance, rescale both the observed and expected count of the Poisson with a factor \( \sum w_{i} / \sum w_{i}^2 \) (the effective weight of the Poisson term), i.e., change \(\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\) to \( \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \), weighted by the effective weight \( \sum w_{i}^2 / \sum w_{i} \) in the likelihood. Since here we compute the likelihood with the weight s",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:101172,Modifiability,extend,extended,101172," factor \( \sum w_{i} / \sum w_{i}^2 \) (the effective weight of the Poisson term), i.e., change \(\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\) to \( \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \), weighted by the effective weight \( \sum w_{i}^2 / \sum w_{i} \) in the likelihood. Since here we compute the likelihood with the weight square, we need to multiply by the square of the effective weight:; \( W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \) : effective expected entries; \( W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \) : effective observed entries. The extended term for the likelihood weighted by the square of the weight will be then:; \( \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \); aund this is using the previous expressions for \( W_\mathrm{expect} \) and \( W_\mathrm{observed} \):; \( \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \); Since the weights are constants in the likelihood we can use \(\log{N_\mathrm{expect}}\) instead of \(\log{W_\mathrm{expect}}\).; See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset), which takes a dataset to extract \(N_\mathrm{observed}\) and the normalization set. ; Definition at line 725 of file RooAbsPdf.cxx. ◆ extendedTerm() [3/3]. double RooAbsPdf::extendedTerm ; (; RooAbsData const & ; data, . bool ; weightSquared, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; This function is a wrapper around RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const, where the number of observed events and observables to be",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:101773,Modifiability,extend,extendedTerm,101773,"Since here we compute the likelihood with the weight square, we need to multiply by the square of the effective weight:; \( W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \) : effective expected entries; \( W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \) : effective observed entries. The extended term for the likelihood weighted by the square of the weight will be then:; \( \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \); aund this is using the previous expressions for \( W_\mathrm{expect} \) and \( W_\mathrm{observed} \):; \( \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \); Since the weights are constants in the likelihood we can use \(\log{N_\mathrm{expect}}\) instead of \(\log{W_\mathrm{expect}}\).; See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset), which takes a dataset to extract \(N_\mathrm{observed}\) and the normalization set. ; Definition at line 725 of file RooAbsPdf.cxx. ◆ extendedTerm() [3/3]. double RooAbsPdf::extendedTerm ; (; RooAbsData const & ; data, . bool ; weightSquared, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; This function is a wrapper around RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const, where the number of observed events and observables to be used as the normalization set for the pdf is extracted from a RooAbsData.; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]dataThe RooAbsData to retrieve the set of observables and number of expected events. ; [in]weightSquaredIf set to true, t",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:101980,Modifiability,extend,extendedTerm,101980,"thrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \) : effective expected entries; \( W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \) : effective observed entries. The extended term for the likelihood weighted by the square of the weight will be then:; \( \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \); aund this is using the previous expressions for \( W_\mathrm{expect} \) and \( W_\mathrm{observed} \):; \( \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \); Since the weights are constants in the likelihood we can use \(\log{N_\mathrm{expect}}\) instead of \(\log{W_\mathrm{expect}}\).; See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset), which takes a dataset to extract \(N_\mathrm{observed}\) and the normalization set. ; Definition at line 725 of file RooAbsPdf.cxx. ◆ extendedTerm() [3/3]. double RooAbsPdf::extendedTerm ; (; RooAbsData const & ; data, . bool ; weightSquared, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; This function is a wrapper around RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const, where the number of observed events and observables to be used as the normalization set for the pdf is extracted from a RooAbsData.; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]dataThe RooAbsData to retrieve the set of observables and number of expected events. ; [in]weightSquaredIf set to true, the extended term will be scaled by the ratio of squared event weights over event weights: \( \sum w_{i}^2 / \sum w_{i} \). Intended to be used by fit",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:102020,Modifiability,extend,extendedTerm,102020," \) : effective expected entries; \( W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \) : effective observed entries. The extended term for the likelihood weighted by the square of the weight will be then:; \( \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \); aund this is using the previous expressions for \( W_\mathrm{expect} \) and \( W_\mathrm{observed} \):; \( \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \); Since the weights are constants in the likelihood we can use \(\log{N_\mathrm{expect}}\) instead of \(\log{W_\mathrm{expect}}\).; See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset), which takes a dataset to extract \(N_\mathrm{observed}\) and the normalization set. ; Definition at line 725 of file RooAbsPdf.cxx. ◆ extendedTerm() [3/3]. double RooAbsPdf::extendedTerm ; (; RooAbsData const & ; data, . bool ; weightSquared, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; This function is a wrapper around RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const, where the number of observed events and observables to be used as the normalization set for the pdf is extracted from a RooAbsData.; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]dataThe RooAbsData to retrieve the set of observables and number of expected events. ; [in]weightSquaredIf set to true, the extended term will be scaled by the ratio of squared event weights over event weights: \( \sum w_{i}^2 / \sum w_{i} \). Intended to be used by fits with the SumW2Error() option that can be pa",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:102138,Modifiability,extend,extended,102138,"hted by the square of the weight will be then:; \( \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \); aund this is using the previous expressions for \( W_\mathrm{expect} \) and \( W_\mathrm{observed} \):; \( \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \); Since the weights are constants in the likelihood we can use \(\log{N_\mathrm{expect}}\) instead of \(\log{W_\mathrm{expect}}\).; See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset), which takes a dataset to extract \(N_\mathrm{observed}\) and the normalization set. ; Definition at line 725 of file RooAbsPdf.cxx. ◆ extendedTerm() [3/3]. double RooAbsPdf::extendedTerm ; (; RooAbsData const & ; data, . bool ; weightSquared, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; This function is a wrapper around RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const, where the number of observed events and observables to be used as the normalization set for the pdf is extracted from a RooAbsData.; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]dataThe RooAbsData to retrieve the set of observables and number of expected events. ; [in]weightSquaredIf set to true, the extended term will be scaled by the ratio of squared event weights over event weights: \( \sum w_{i}^2 / \sum w_{i} \). Intended to be used by fits with the SumW2Error() option that can be passed to RooAbsPdf::fitTo() (see the documentation of said function to learn more about the interpretation of fits with squared weights). ; [in]doOffsetSee RooAbsPdf::extendedTe",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:102341,Modifiability,extend,extendedTerm,102341,"\); aund this is using the previous expressions for \( W_\mathrm{expect} \) and \( W_\mathrm{observed} \):; \( \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \); Since the weights are constants in the likelihood we can use \(\log{N_\mathrm{expect}}\) instead of \(\log{W_\mathrm{expect}}\).; See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset), which takes a dataset to extract \(N_\mathrm{observed}\) and the normalization set. ; Definition at line 725 of file RooAbsPdf.cxx. ◆ extendedTerm() [3/3]. double RooAbsPdf::extendedTerm ; (; RooAbsData const & ; data, . bool ; weightSquared, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; This function is a wrapper around RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const, where the number of observed events and observables to be used as the normalization set for the pdf is extracted from a RooAbsData.; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]dataThe RooAbsData to retrieve the set of observables and number of expected events. ; [in]weightSquaredIf set to true, the extended term will be scaled by the ratio of squared event weights over event weights: \( \sum w_{i}^2 / \sum w_{i} \). Intended to be used by fits with the SumW2Error() option that can be passed to RooAbsPdf::fitTo() (see the documentation of said function to learn more about the interpretation of fits with squared weights). ; [in]doOffsetSee RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const. . Definition at line 793 of file RooAbsPdf.cxx. ◆ extendMode(). virtual ExtendMode RooAbsPdf::extendMode ; (; ); const. inlinevirtual . Returns ability o",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:102609,Modifiability,extend,extendable,102609,"} \); Since the weights are constants in the likelihood we can use \(\log{N_\mathrm{expect}}\) instead of \(\log{W_\mathrm{expect}}\).; See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset), which takes a dataset to extract \(N_\mathrm{observed}\) and the normalization set. ; Definition at line 725 of file RooAbsPdf.cxx. ◆ extendedTerm() [3/3]. double RooAbsPdf::extendedTerm ; (; RooAbsData const & ; data, . bool ; weightSquared, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; This function is a wrapper around RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const, where the number of observed events and observables to be used as the normalization set for the pdf is extracted from a RooAbsData.; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]dataThe RooAbsData to retrieve the set of observables and number of expected events. ; [in]weightSquaredIf set to true, the extended term will be scaled by the ratio of squared event weights over event weights: \( \sum w_{i}^2 / \sum w_{i} \). Intended to be used by fits with the SumW2Error() option that can be passed to RooAbsPdf::fitTo() (see the documentation of said function to learn more about the interpretation of fits with squared weights). ; [in]doOffsetSee RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const. . Definition at line 793 of file RooAbsPdf.cxx. ◆ extendMode(). virtual ExtendMode RooAbsPdf::extendMode ; (; ); const. inlinevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented in RooAddModel, Roo",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:102843,Modifiability,extend,extended,102843,"_\mathrm{observed}\) and the normalization set. ; Definition at line 725 of file RooAbsPdf.cxx. ◆ extendedTerm() [3/3]. double RooAbsPdf::extendedTerm ; (; RooAbsData const & ; data, . bool ; weightSquared, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; This function is a wrapper around RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const, where the number of observed events and observables to be used as the normalization set for the pdf is extracted from a RooAbsData.; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]dataThe RooAbsData to retrieve the set of observables and number of expected events. ; [in]weightSquaredIf set to true, the extended term will be scaled by the ratio of squared event weights over event weights: \( \sum w_{i}^2 / \sum w_{i} \). Intended to be used by fits with the SumW2Error() option that can be passed to RooAbsPdf::fitTo() (see the documentation of said function to learn more about the interpretation of fits with squared weights). ; [in]doOffsetSee RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const. . Definition at line 793 of file RooAbsPdf.cxx. ◆ extendMode(). virtual ExtendMode RooAbsPdf::extendMode ; (; ); const. inlinevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented in RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendedTerm, RooExtendPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooSimultaneous, RooNormalizedPdf, RooFixedProdPdf, and xRooProjectedPdf.; Definition at line 216 of file RooAbsPdf.h. ◆ fitTo(). template<typename... CmdArgs_t> . ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:103200,Modifiability,extend,extendedTerm,103200,"\log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; This function is a wrapper around RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const, where the number of observed events and observables to be used as the normalization set for the pdf is extracted from a RooAbsData.; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]dataThe RooAbsData to retrieve the set of observables and number of expected events. ; [in]weightSquaredIf set to true, the extended term will be scaled by the ratio of squared event weights over event weights: \( \sum w_{i}^2 / \sum w_{i} \). Intended to be used by fits with the SumW2Error() option that can be passed to RooAbsPdf::fitTo() (see the documentation of said function to learn more about the interpretation of fits with squared weights). ; [in]doOffsetSee RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const. . Definition at line 793 of file RooAbsPdf.cxx. ◆ extendMode(). virtual ExtendMode RooAbsPdf::extendMode ; (; ); const. inlinevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented in RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendedTerm, RooExtendPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooSimultaneous, RooNormalizedPdf, RooFixedProdPdf, and xRooProjectedPdf.; Definition at line 216 of file RooAbsPdf.h. ◆ fitTo(). template<typename... CmdArgs_t> . RooAbsPdf::fitTo ; (; RooAbsData & ; data, . CmdArgs_t const &... ; cmdArgs . ). inline . Fit PDF to given dataset. ; If dataset is unbinned, an unbinned maximum likelihood is performed. If the dataset is binned, a binned maximum likelihood is performed. By default the fit is executed through the MINUIT commands MIGRAD, HESSE in s",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:103310,Modifiability,extend,extendMode,103310,"wrapper around RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const, where the number of observed events and observables to be used as the normalization set for the pdf is extracted from a RooAbsData.; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]dataThe RooAbsData to retrieve the set of observables and number of expected events. ; [in]weightSquaredIf set to true, the extended term will be scaled by the ratio of squared event weights over event weights: \( \sum w_{i}^2 / \sum w_{i} \). Intended to be used by fits with the SumW2Error() option that can be passed to RooAbsPdf::fitTo() (see the documentation of said function to learn more about the interpretation of fits with squared weights). ; [in]doOffsetSee RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const. . Definition at line 793 of file RooAbsPdf.cxx. ◆ extendMode(). virtual ExtendMode RooAbsPdf::extendMode ; (; ); const. inlinevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented in RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendedTerm, RooExtendPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooSimultaneous, RooNormalizedPdf, RooFixedProdPdf, and xRooProjectedPdf.; Definition at line 216 of file RooAbsPdf.h. ◆ fitTo(). template<typename... CmdArgs_t> . RooAbsPdf::fitTo ; (; RooAbsData & ; data, . CmdArgs_t const &... ; cmdArgs . ). inline . Fit PDF to given dataset. ; If dataset is unbinned, an unbinned maximum likelihood is performed. If the dataset is binned, a binned maximum likelihood is performed. By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession.; Parameters. dataReference to a RooAbsData object representing the dataset. ; cmdArgsVari",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:103354,Modifiability,extend,extendMode,103354,"rm(double, RooArgSet const *, double, bool) const, where the number of observed events and observables to be used as the normalization set for the pdf is extracted from a RooAbsData.; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]dataThe RooAbsData to retrieve the set of observables and number of expected events. ; [in]weightSquaredIf set to true, the extended term will be scaled by the ratio of squared event weights over event weights: \( \sum w_{i}^2 / \sum w_{i} \). Intended to be used by fits with the SumW2Error() option that can be passed to RooAbsPdf::fitTo() (see the documentation of said function to learn more about the interpretation of fits with squared weights). ; [in]doOffsetSee RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const. . Definition at line 793 of file RooAbsPdf.cxx. ◆ extendMode(). virtual ExtendMode RooAbsPdf::extendMode ; (; ); const. inlinevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented in RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendedTerm, RooExtendPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooSimultaneous, RooNormalizedPdf, RooFixedProdPdf, and xRooProjectedPdf.; Definition at line 216 of file RooAbsPdf.h. ◆ fitTo(). template<typename... CmdArgs_t> . RooAbsPdf::fitTo ; (; RooAbsData & ; data, . CmdArgs_t const &... ; cmdArgs . ). inline . Fit PDF to given dataset. ; If dataset is unbinned, an unbinned maximum likelihood is performed. If the dataset is binned, a binned maximum likelihood is performed. By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession.; Parameters. dataReference to a RooAbsData object representing the dataset. ; cmdArgsVariadic template arguments representing",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:103430,Modifiability,extend,extended,103430,"erved events and observables to be used as the normalization set for the pdf is extracted from a RooAbsData.; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]dataThe RooAbsData to retrieve the set of observables and number of expected events. ; [in]weightSquaredIf set to true, the extended term will be scaled by the ratio of squared event weights over event weights: \( \sum w_{i}^2 / \sum w_{i} \). Intended to be used by fits with the SumW2Error() option that can be passed to RooAbsPdf::fitTo() (see the documentation of said function to learn more about the interpretation of fits with squared weights). ; [in]doOffsetSee RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const. . Definition at line 793 of file RooAbsPdf.cxx. ◆ extendMode(). virtual ExtendMode RooAbsPdf::extendMode ; (; ); const. inlinevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented in RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendedTerm, RooExtendPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooSimultaneous, RooNormalizedPdf, RooFixedProdPdf, and xRooProjectedPdf.; Definition at line 216 of file RooAbsPdf.h. ◆ fitTo(). template<typename... CmdArgs_t> . RooAbsPdf::fitTo ; (; RooAbsData & ; data, . CmdArgs_t const &... ; cmdArgs . ). inline . Fit PDF to given dataset. ; If dataset is unbinned, an unbinned maximum likelihood is performed. If the dataset is binned, a binned maximum likelihood is performed. By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession.; Parameters. dataReference to a RooAbsData object representing the dataset. ; cmdArgsVariadic template arguments representing optional command arguments. You can pass either an arbitrary number of Roo",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:108722,Modifiability,extend,extended,108722,"lo statistics.; Example: Simulation with 1000 events, the average weight is 0.1. The errors are as big as if one fitted to 1000 events. . false The errors reflect the errors of a dataset, which is as big as the sum of weights. Use this if you want to know what statistical errors you would get if you had a dataset with as many events as the (weighted) Monte Carlo simulation represents.; Example (Data as above): The errors are as big as if one fitted to 100 events. . NoteIf the SumW2Error correction is enabled, the covariance matrix quality stored in the RooFitResult object will be the minimum of the original covariance matrix quality and the quality of the covariance matrix calculated with the squared weights. . AsymptoticError() Use the asymptotically correct approach to estimate errors in the presence of weights. This is slower but more accurate than SumW2Error. See also https://arxiv.org/abs/1911.01303). This option even correctly implements the case of extended likelihood fits (see this writeup on extended weighted fits that complements the paper linked before). . PrefitDataFraction(double fraction) Runs a prefit on a small dataset of size fraction*(actual data size). This can speed up fits by finding good starting values for the parameters for the actual fit. WarningPrefitting may give bad results when used in binned analysis. Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit). . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default. . PrintLevel(Int_t level) Set Minuit print level (-1 to 3, default is 1). At -1 all RooFit informational messages are suppressed as well. See RooMinimizer::PrintLevel for the meaning of the levels. . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppresses output co",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:108768,Modifiability,extend,extended,108768,"lo statistics.; Example: Simulation with 1000 events, the average weight is 0.1. The errors are as big as if one fitted to 1000 events. . false The errors reflect the errors of a dataset, which is as big as the sum of weights. Use this if you want to know what statistical errors you would get if you had a dataset with as many events as the (weighted) Monte Carlo simulation represents.; Example (Data as above): The errors are as big as if one fitted to 100 events. . NoteIf the SumW2Error correction is enabled, the covariance matrix quality stored in the RooFitResult object will be the minimum of the original covariance matrix quality and the quality of the covariance matrix calculated with the squared weights. . AsymptoticError() Use the asymptotically correct approach to estimate errors in the presence of weights. This is slower but more accurate than SumW2Error. See also https://arxiv.org/abs/1911.01303). This option even correctly implements the case of extended likelihood fits (see this writeup on extended weighted fits that complements the paper linked before). . PrefitDataFraction(double fraction) Runs a prefit on a small dataset of size fraction*(actual data size). This can speed up fits by finding good starting values for the parameters for the actual fit. WarningPrefitting may give bad results when used in binned analysis. Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit). . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default. . PrintLevel(Int_t level) Set Minuit print level (-1 to 3, default is 1). At -1 all RooFit informational messages are suppressed as well. See RooMinimizer::PrintLevel for the meaning of the levels. . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppresses output co",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:113250,Modifiability,variab,variables,113250,"NoteNever call this function directly. Instead, call RooAbsPdf::fitTo(). ; Definition at line 1072 of file RooAbsPdf.cxx. ◆ genContext(). RooAbsGenContext * RooAbsPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false . ); const. virtual . Interface function to create a generator context from a p.d.f. ; This default implementation returns a 'standard' context that works for any p.d.f ; Reimplemented in RooEffProd, RooAbsAnaConvPdf, RooAddModel, RooAddPdf, RooFFTConvPdf, RooNumConvPdf, RooProdPdf, and RooSimultaneous.; Definition at line 1127 of file RooAbsPdf.cxx. ◆ generate() [1/6]. RooAbsPdf::generate ; (; const RooArgSet & ; whatVars, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {} . ). Generate a new dataset containing the specified variables with events sampled from our distribution. ; Generate the specified number of events or expectedEvents() if not specified. Parameters. [in]whatVarsChoose variables in which to generate events. Variables not listed here will remain constant and not be used for event generation. ; [in]arg1,arg2,arg3,arg4,arg5,arg6Optional RooCmdArg() to change behaviour of generate(). . ReturnsRooDataSet *, owned by caller.; Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. Returns zero in case of an error. Type of CmdArg Effect on generate . Name(const char* name) Name of the output dataset . Verbose(bool flag) Print informational messages during event generation . NumEvents(int nevt) Generate specified number of events . Extended() If no number of events to be generated is given, use expected number of events from extended likelihood term. This evidently only works for extended PDFs. . GenBinned(const char* tag) Use binned gener",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:113414,Modifiability,variab,variables,113414,"ontext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false . ); const. virtual . Interface function to create a generator context from a p.d.f. ; This default implementation returns a 'standard' context that works for any p.d.f ; Reimplemented in RooEffProd, RooAbsAnaConvPdf, RooAddModel, RooAddPdf, RooFFTConvPdf, RooNumConvPdf, RooProdPdf, and RooSimultaneous.; Definition at line 1127 of file RooAbsPdf.cxx. ◆ generate() [1/6]. RooAbsPdf::generate ; (; const RooArgSet & ; whatVars, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {} . ). Generate a new dataset containing the specified variables with events sampled from our distribution. ; Generate the specified number of events or expectedEvents() if not specified. Parameters. [in]whatVarsChoose variables in which to generate events. Variables not listed here will remain constant and not be used for event generation. ; [in]arg1,arg2,arg3,arg4,arg5,arg6Optional RooCmdArg() to change behaviour of generate(). . ReturnsRooDataSet *, owned by caller.; Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. Returns zero in case of an error. Type of CmdArg Effect on generate . Name(const char* name) Name of the output dataset . Verbose(bool flag) Print informational messages during event generation . NumEvents(int nevt) Generate specified number of events . Extended() If no number of events to be generated is given, use expected number of events from extended likelihood term. This evidently only works for extended PDFs. . GenBinned(const char* tag) Use binned generation for all component pdfs that have 'setAttribute(tag)' set . AutoBinned(bool flag) Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, su",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:113674,Modifiability,variab,variables,113674,"for any p.d.f ; Reimplemented in RooEffProd, RooAbsAnaConvPdf, RooAddModel, RooAddPdf, RooFFTConvPdf, RooNumConvPdf, RooProdPdf, and RooSimultaneous.; Definition at line 1127 of file RooAbsPdf.cxx. ◆ generate() [1/6]. RooAbsPdf::generate ; (; const RooArgSet & ; whatVars, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {} . ). Generate a new dataset containing the specified variables with events sampled from our distribution. ; Generate the specified number of events or expectedEvents() if not specified. Parameters. [in]whatVarsChoose variables in which to generate events. Variables not listed here will remain constant and not be used for event generation. ; [in]arg1,arg2,arg3,arg4,arg5,arg6Optional RooCmdArg() to change behaviour of generate(). . ReturnsRooDataSet *, owned by caller.; Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. Returns zero in case of an error. Type of CmdArg Effect on generate . Name(const char* name) Name of the output dataset . Verbose(bool flag) Print informational messages during event generation . NumEvents(int nevt) Generate specified number of events . Extended() If no number of events to be generated is given, use expected number of events from extended likelihood term. This evidently only works for extended PDFs. . GenBinned(const char* tag) Use binned generation for all component pdfs that have 'setAttribute(tag)' set . AutoBinned(bool flag) Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of RooHistPdfs etc) NoteDatasets that are generated in binned mode are returned as weighted unbinned datasets. This means that for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content. AllBinned() As above, but for all comp",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:114136,Modifiability,extend,extended,114136," const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {} . ). Generate a new dataset containing the specified variables with events sampled from our distribution. ; Generate the specified number of events or expectedEvents() if not specified. Parameters. [in]whatVarsChoose variables in which to generate events. Variables not listed here will remain constant and not be used for event generation. ; [in]arg1,arg2,arg3,arg4,arg5,arg6Optional RooCmdArg() to change behaviour of generate(). . ReturnsRooDataSet *, owned by caller.; Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. Returns zero in case of an error. Type of CmdArg Effect on generate . Name(const char* name) Name of the output dataset . Verbose(bool flag) Print informational messages during event generation . NumEvents(int nevt) Generate specified number of events . Extended() If no number of events to be generated is given, use expected number of events from extended likelihood term. This evidently only works for extended PDFs. . GenBinned(const char* tag) Use binned generation for all component pdfs that have 'setAttribute(tag)' set . AutoBinned(bool flag) Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of RooHistPdfs etc) NoteDatasets that are generated in binned mode are returned as weighted unbinned datasets. This means that for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content. AllBinned() As above, but for all components. NoteThe notion of components is only meaningful for simultaneous PDFs as binned generation is always executed at the top-level node for a regular PDF, so for those it only mattes that the top-level node is tagged. ProtoData(const RooDataSet& data, bool randOrder) Use specified dataset as prototype dataset. If randOrder in ProtoData() is set to true, the order of t",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:114192,Modifiability,extend,extended,114192,"& ; arg6 = {} . ). Generate a new dataset containing the specified variables with events sampled from our distribution. ; Generate the specified number of events or expectedEvents() if not specified. Parameters. [in]whatVarsChoose variables in which to generate events. Variables not listed here will remain constant and not be used for event generation. ; [in]arg1,arg2,arg3,arg4,arg5,arg6Optional RooCmdArg() to change behaviour of generate(). . ReturnsRooDataSet *, owned by caller.; Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. Returns zero in case of an error. Type of CmdArg Effect on generate . Name(const char* name) Name of the output dataset . Verbose(bool flag) Print informational messages during event generation . NumEvents(int nevt) Generate specified number of events . Extended() If no number of events to be generated is given, use expected number of events from extended likelihood term. This evidently only works for extended PDFs. . GenBinned(const char* tag) Use binned generation for all component pdfs that have 'setAttribute(tag)' set . AutoBinned(bool flag) Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of RooHistPdfs etc) NoteDatasets that are generated in binned mode are returned as weighted unbinned datasets. This means that for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content. AllBinned() As above, but for all components. NoteThe notion of components is only meaningful for simultaneous PDFs as binned generation is always executed at the top-level node for a regular PDF, so for those it only mattes that the top-level node is tagged. ProtoData(const RooDataSet& data, bool randOrder) Use specified dataset as prototype dataset. If randOrder in ProtoData() is set to true, the order of the events in the dataset will be read in a random order if the requested number of ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:115464,Modifiability,variab,variables,115464," products of RooHistPdfs etc) NoteDatasets that are generated in binned mode are returned as weighted unbinned datasets. This means that for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content. AllBinned() As above, but for all components. NoteThe notion of components is only meaningful for simultaneous PDFs as binned generation is always executed at the top-level node for a regular PDF, so for those it only mattes that the top-level node is tagged. ProtoData(const RooDataSet& data, bool randOrder) Use specified dataset as prototype dataset. If randOrder in ProtoData() is set to true, the order of the events in the dataset will be read in a random order if the requested number of events to be generated does not match the number of events in the prototype dataset. NoteIf ProtoData() is used, the specified existing dataset as a prototype: the new dataset will contain the same number of events as the prototype (unless otherwise specified), and any prototype variables not in whatVars will be copied into the new dataset for each generated event and also used to set our PDF parameters. The user can specify a number of events to generate that will override the default. The result is a copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that are not in the prototype will be added as new columns to the generated dataset. Accessing the underlying event generator; Depending on the fit model (if it is difficult to sample), it may be necessary to change generator settings. For the default generator (RooFoamGenerator), the number of samples or cells could be increased by e.g. using myPdf->specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);; The foam generator e.g. has the following config options:; nCell[123N]D; nSample; chatLevel See alsorf902_numgenconfig.C. PyROOT; The RooAbsPdf::generate() function is pythonized with the command ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:115732,Modifiability,variab,variables,115732,"ll components. NoteThe notion of components is only meaningful for simultaneous PDFs as binned generation is always executed at the top-level node for a regular PDF, so for those it only mattes that the top-level node is tagged. ProtoData(const RooDataSet& data, bool randOrder) Use specified dataset as prototype dataset. If randOrder in ProtoData() is set to true, the order of the events in the dataset will be read in a random order if the requested number of events to be generated does not match the number of events in the prototype dataset. NoteIf ProtoData() is used, the specified existing dataset as a prototype: the new dataset will contain the same number of events as the prototype (unless otherwise specified), and any prototype variables not in whatVars will be copied into the new dataset for each generated event and also used to set our PDF parameters. The user can specify a number of events to generate that will override the default. The result is a copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that are not in the prototype will be added as new columns to the generated dataset. Accessing the underlying event generator; Depending on the fit model (if it is difficult to sample), it may be necessary to change generator settings. For the default generator (RooFoamGenerator), the number of samples or cells could be increased by e.g. using myPdf->specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);; The foam generator e.g. has the following config options:; nCell[123N]D; nSample; chatLevel See alsorf902_numgenconfig.C. PyROOT; The RooAbsPdf::generate() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1210 of file RooAbsPdf.cxx. ◆ generate() [2/6]. RooFit::OwningPtr< RooDataSet > RooAbsPdf::generate ; (; const RooArgSet & ; whatVars, . const RooDataSet & ; prototype, . Int_t ; nEven",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:116276,Modifiability,config,config,116276,"ified existing dataset as a prototype: the new dataset will contain the same number of events as the prototype (unless otherwise specified), and any prototype variables not in whatVars will be copied into the new dataset for each generated event and also used to set our PDF parameters. The user can specify a number of events to generate that will override the default. The result is a copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that are not in the prototype will be added as new columns to the generated dataset. Accessing the underlying event generator; Depending on the fit model (if it is difficult to sample), it may be necessary to change generator settings. For the default generator (RooFoamGenerator), the number of samples or cells could be increased by e.g. using myPdf->specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);; The foam generator e.g. has the following config options:; nCell[123N]D; nSample; chatLevel See alsorf902_numgenconfig.C. PyROOT; The RooAbsPdf::generate() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1210 of file RooAbsPdf.cxx. ◆ generate() [2/6]. RooFit::OwningPtr< RooDataSet > RooAbsPdf::generate ; (; const RooArgSet & ; whatVars, . const RooDataSet & ; prototype, . Int_t ; nEvents = 0, . bool ; verbose = false, . bool ; randProtoOrder = false, . bool ; resampleProto = false . ); const. Generate a new dataset using a prototype dataset as a model, with values of the variables in whatVars sampled from our distribution. ; Parameters. [in]whatVarsGenerate for these variables. ; [in]prototypeUse this dataset as a prototype: the new dataset will contain the same number of events as the prototype (by default), and any prototype variables not in whatVars will be copied into the new dataset for each generated event and also used to set our PDF parameters. The us",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:116910,Modifiability,variab,variables,116910,"ng event generator; Depending on the fit model (if it is difficult to sample), it may be necessary to change generator settings. For the default generator (RooFoamGenerator), the number of samples or cells could be increased by e.g. using myPdf->specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);; The foam generator e.g. has the following config options:; nCell[123N]D; nSample; chatLevel See alsorf902_numgenconfig.C. PyROOT; The RooAbsPdf::generate() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1210 of file RooAbsPdf.cxx. ◆ generate() [2/6]. RooFit::OwningPtr< RooDataSet > RooAbsPdf::generate ; (; const RooArgSet & ; whatVars, . const RooDataSet & ; prototype, . Int_t ; nEvents = 0, . bool ; verbose = false, . bool ; randProtoOrder = false, . bool ; resampleProto = false . ); const. Generate a new dataset using a prototype dataset as a model, with values of the variables in whatVars sampled from our distribution. ; Parameters. [in]whatVarsGenerate for these variables. ; [in]prototypeUse this dataset as a prototype: the new dataset will contain the same number of events as the prototype (by default), and any prototype variables not in whatVars will be copied into the new dataset for each generated event and also used to set our PDF parameters. The user can specify a number of events to generate that will override the default. The result is a copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that are not in the prototype will be added as new columns to the generated dataset. ; [in]nEventsNumber of events to generate. Defaults to 0, which means number of event in prototype dataset. ; [in]verboseShow which generator strategies are being used. ; [in]randProtoOrderRandomise order of retrieval of events from proto dataset. ; [in]resampleProtoResample from the proto dataset. . ReturnsThe new",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:117008,Modifiability,variab,variables,117008,"change generator settings. For the default generator (RooFoamGenerator), the number of samples or cells could be increased by e.g. using myPdf->specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);; The foam generator e.g. has the following config options:; nCell[123N]D; nSample; chatLevel See alsorf902_numgenconfig.C. PyROOT; The RooAbsPdf::generate() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1210 of file RooAbsPdf.cxx. ◆ generate() [2/6]. RooFit::OwningPtr< RooDataSet > RooAbsPdf::generate ; (; const RooArgSet & ; whatVars, . const RooDataSet & ; prototype, . Int_t ; nEvents = 0, . bool ; verbose = false, . bool ; randProtoOrder = false, . bool ; resampleProto = false . ); const. Generate a new dataset using a prototype dataset as a model, with values of the variables in whatVars sampled from our distribution. ; Parameters. [in]whatVarsGenerate for these variables. ; [in]prototypeUse this dataset as a prototype: the new dataset will contain the same number of events as the prototype (by default), and any prototype variables not in whatVars will be copied into the new dataset for each generated event and also used to set our PDF parameters. The user can specify a number of events to generate that will override the default. The result is a copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that are not in the prototype will be added as new columns to the generated dataset. ; [in]nEventsNumber of events to generate. Defaults to 0, which means number of event in prototype dataset. ; [in]verboseShow which generator strategies are being used. ; [in]randProtoOrderRandomise order of retrieval of events from proto dataset. ; [in]resampleProtoResample from the proto dataset. . ReturnsThe new dataset. Returns zero in case of an error. The caller takes ownership of the returned dataset. ; Def",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:117171,Modifiability,variab,variables,117171,"onfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);; The foam generator e.g. has the following config options:; nCell[123N]D; nSample; chatLevel See alsorf902_numgenconfig.C. PyROOT; The RooAbsPdf::generate() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1210 of file RooAbsPdf.cxx. ◆ generate() [2/6]. RooFit::OwningPtr< RooDataSet > RooAbsPdf::generate ; (; const RooArgSet & ; whatVars, . const RooDataSet & ; prototype, . Int_t ; nEvents = 0, . bool ; verbose = false, . bool ; randProtoOrder = false, . bool ; resampleProto = false . ); const. Generate a new dataset using a prototype dataset as a model, with values of the variables in whatVars sampled from our distribution. ; Parameters. [in]whatVarsGenerate for these variables. ; [in]prototypeUse this dataset as a prototype: the new dataset will contain the same number of events as the prototype (by default), and any prototype variables not in whatVars will be copied into the new dataset for each generated event and also used to set our PDF parameters. The user can specify a number of events to generate that will override the default. The result is a copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that are not in the prototype will be added as new columns to the generated dataset. ; [in]nEventsNumber of events to generate. Defaults to 0, which means number of event in prototype dataset. ; [in]verboseShow which generator strategies are being used. ; [in]randProtoOrderRandomise order of retrieval of events from proto dataset. ; [in]resampleProtoResample from the proto dataset. . ReturnsThe new dataset. Returns zero in case of an error. The caller takes ownership of the returned dataset. ; Definition at line 1469 of file RooAbsPdf.cxx. ◆ generate() [3/6]. RooFit::OwningPtr< RooDataSet > RooAbsPdf::generate ; (; const RooArgSet & ; whatVars, . double ;",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:117439,Modifiability,variab,variables,117439,"nd argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1210 of file RooAbsPdf.cxx. ◆ generate() [2/6]. RooFit::OwningPtr< RooDataSet > RooAbsPdf::generate ; (; const RooArgSet & ; whatVars, . const RooDataSet & ; prototype, . Int_t ; nEvents = 0, . bool ; verbose = false, . bool ; randProtoOrder = false, . bool ; resampleProto = false . ); const. Generate a new dataset using a prototype dataset as a model, with values of the variables in whatVars sampled from our distribution. ; Parameters. [in]whatVarsGenerate for these variables. ; [in]prototypeUse this dataset as a prototype: the new dataset will contain the same number of events as the prototype (by default), and any prototype variables not in whatVars will be copied into the new dataset for each generated event and also used to set our PDF parameters. The user can specify a number of events to generate that will override the default. The result is a copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that are not in the prototype will be added as new columns to the generated dataset. ; [in]nEventsNumber of events to generate. Defaults to 0, which means number of event in prototype dataset. ; [in]verboseShow which generator strategies are being used. ; [in]randProtoOrderRandomise order of retrieval of events from proto dataset. ; [in]resampleProtoResample from the proto dataset. . ReturnsThe new dataset. Returns zero in case of an error. The caller takes ownership of the returned dataset. ; Definition at line 1469 of file RooAbsPdf.cxx. ◆ generate() [3/6]. RooFit::OwningPtr< RooDataSet > RooAbsPdf::generate ; (; const RooArgSet & ; whatVars, . double ; nEvents = 0, . bool ; verbose = false, . bool ; autoBinned = true, . const char * ; binnedTag = """", . bool ; expectedData = false, . bool ; extended = false . ); const. Generate a new dataset containing the specified variables with events sampled from our distribution",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:118299,Modifiability,extend,extended,118299,"ser can specify a number of events to generate that will override the default. The result is a copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that are not in the prototype will be added as new columns to the generated dataset. ; [in]nEventsNumber of events to generate. Defaults to 0, which means number of event in prototype dataset. ; [in]verboseShow which generator strategies are being used. ; [in]randProtoOrderRandomise order of retrieval of events from proto dataset. ; [in]resampleProtoResample from the proto dataset. . ReturnsThe new dataset. Returns zero in case of an error. The caller takes ownership of the returned dataset. ; Definition at line 1469 of file RooAbsPdf.cxx. ◆ generate() [3/6]. RooFit::OwningPtr< RooDataSet > RooAbsPdf::generate ; (; const RooArgSet & ; whatVars, . double ; nEvents = 0, . bool ; verbose = false, . bool ; autoBinned = true, . const char * ; binnedTag = """", . bool ; expectedData = false, . bool ; extended = false . ); const. Generate a new dataset containing the specified variables with events sampled from our distribution. ; Parameters. [in]whatVarsGenerate a dataset with the variables (and categories) in this set. Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. ; [in]nEventsGenerate the specified number of events or else try to use expectedEvents() if nEvents <= 0 (default). ; [in]verboseShow which generator strategies are being used. ; [in]autoBinnedIf original distribution is binned, return bin centers and randomise weights instead of generating single events. ; [in]binnedTag; [in]expectedDataCall setExpectedData on the genContext. ; [in]extendedRandomise number of events generated according to Poisson(nEvents). Only useful if PDF is extended. . ReturnsNew dataset. Returns zero in case of an error. The caller takes ownership of the returned dataset. ; Definition at line 1385 of file RooAbsPdf.cxx. ◆ generate() ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:118376,Modifiability,variab,variables,118376,"ault. The result is a copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that are not in the prototype will be added as new columns to the generated dataset. ; [in]nEventsNumber of events to generate. Defaults to 0, which means number of event in prototype dataset. ; [in]verboseShow which generator strategies are being used. ; [in]randProtoOrderRandomise order of retrieval of events from proto dataset. ; [in]resampleProtoResample from the proto dataset. . ReturnsThe new dataset. Returns zero in case of an error. The caller takes ownership of the returned dataset. ; Definition at line 1469 of file RooAbsPdf.cxx. ◆ generate() [3/6]. RooFit::OwningPtr< RooDataSet > RooAbsPdf::generate ; (; const RooArgSet & ; whatVars, . double ; nEvents = 0, . bool ; verbose = false, . bool ; autoBinned = true, . const char * ; binnedTag = """", . bool ; expectedData = false, . bool ; extended = false . ); const. Generate a new dataset containing the specified variables with events sampled from our distribution. ; Parameters. [in]whatVarsGenerate a dataset with the variables (and categories) in this set. Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. ; [in]nEventsGenerate the specified number of events or else try to use expectedEvents() if nEvents <= 0 (default). ; [in]verboseShow which generator strategies are being used. ; [in]autoBinnedIf original distribution is binned, return bin centers and randomise weights instead of generating single events. ; [in]binnedTag; [in]expectedDataCall setExpectedData on the genContext. ; [in]extendedRandomise number of events generated according to Poisson(nEvents). Only useful if PDF is extended. . ReturnsNew dataset. Returns zero in case of an error. The caller takes ownership of the returned dataset. ; Definition at line 1385 of file RooAbsPdf.cxx. ◆ generate() [4/6]. RooFit::OwningPtr< RooDataSet > RooAbsPdf::generate ; (; const RooA",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:118483,Modifiability,variab,variables,118483," in whatVars that are not in the prototype will be added as new columns to the generated dataset. ; [in]nEventsNumber of events to generate. Defaults to 0, which means number of event in prototype dataset. ; [in]verboseShow which generator strategies are being used. ; [in]randProtoOrderRandomise order of retrieval of events from proto dataset. ; [in]resampleProtoResample from the proto dataset. . ReturnsThe new dataset. Returns zero in case of an error. The caller takes ownership of the returned dataset. ; Definition at line 1469 of file RooAbsPdf.cxx. ◆ generate() [3/6]. RooFit::OwningPtr< RooDataSet > RooAbsPdf::generate ; (; const RooArgSet & ; whatVars, . double ; nEvents = 0, . bool ; verbose = false, . bool ; autoBinned = true, . const char * ; binnedTag = """", . bool ; expectedData = false, . bool ; extended = false . ); const. Generate a new dataset containing the specified variables with events sampled from our distribution. ; Parameters. [in]whatVarsGenerate a dataset with the variables (and categories) in this set. Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. ; [in]nEventsGenerate the specified number of events or else try to use expectedEvents() if nEvents <= 0 (default). ; [in]verboseShow which generator strategies are being used. ; [in]autoBinnedIf original distribution is binned, return bin centers and randomise weights instead of generating single events. ; [in]binnedTag; [in]expectedDataCall setExpectedData on the genContext. ; [in]extendedRandomise number of events generated according to Poisson(nEvents). Only useful if PDF is extended. . ReturnsNew dataset. Returns zero in case of an error. The caller takes ownership of the returned dataset. ; Definition at line 1385 of file RooAbsPdf.cxx. ◆ generate() [4/6]. RooFit::OwningPtr< RooDataSet > RooAbsPdf::generate ; (; const RooArgSet & ; whatVars, . Int_t ; nEvents, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . co",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:118527,Modifiability,variab,variables,118527,"; [in]nEventsNumber of events to generate. Defaults to 0, which means number of event in prototype dataset. ; [in]verboseShow which generator strategies are being used. ; [in]randProtoOrderRandomise order of retrieval of events from proto dataset. ; [in]resampleProtoResample from the proto dataset. . ReturnsThe new dataset. Returns zero in case of an error. The caller takes ownership of the returned dataset. ; Definition at line 1469 of file RooAbsPdf.cxx. ◆ generate() [3/6]. RooFit::OwningPtr< RooDataSet > RooAbsPdf::generate ; (; const RooArgSet & ; whatVars, . double ; nEvents = 0, . bool ; verbose = false, . bool ; autoBinned = true, . const char * ; binnedTag = """", . bool ; expectedData = false, . bool ; extended = false . ); const. Generate a new dataset containing the specified variables with events sampled from our distribution. ; Parameters. [in]whatVarsGenerate a dataset with the variables (and categories) in this set. Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. ; [in]nEventsGenerate the specified number of events or else try to use expectedEvents() if nEvents <= 0 (default). ; [in]verboseShow which generator strategies are being used. ; [in]autoBinnedIf original distribution is binned, return bin centers and randomise weights instead of generating single events. ; [in]binnedTag; [in]expectedDataCall setExpectedData on the genContext. ; [in]extendedRandomise number of events generated according to Poisson(nEvents). Only useful if PDF is extended. . ReturnsNew dataset. Returns zero in case of an error. The caller takes ownership of the returned dataset. ; Definition at line 1385 of file RooAbsPdf.cxx. ◆ generate() [4/6]. RooFit::OwningPtr< RooDataSet > RooAbsPdf::generate ; (; const RooArgSet & ; whatVars, . Int_t ; nEvents, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {} . ). ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:119026,Modifiability,extend,extendedRandomise,119026," RooFit::OwningPtr< RooDataSet > RooAbsPdf::generate ; (; const RooArgSet & ; whatVars, . double ; nEvents = 0, . bool ; verbose = false, . bool ; autoBinned = true, . const char * ; binnedTag = """", . bool ; expectedData = false, . bool ; extended = false . ); const. Generate a new dataset containing the specified variables with events sampled from our distribution. ; Parameters. [in]whatVarsGenerate a dataset with the variables (and categories) in this set. Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. ; [in]nEventsGenerate the specified number of events or else try to use expectedEvents() if nEvents <= 0 (default). ; [in]verboseShow which generator strategies are being used. ; [in]autoBinnedIf original distribution is binned, return bin centers and randomise weights instead of generating single events. ; [in]binnedTag; [in]expectedDataCall setExpectedData on the genContext. ; [in]extendedRandomise number of events generated according to Poisson(nEvents). Only useful if PDF is extended. . ReturnsNew dataset. Returns zero in case of an error. The caller takes ownership of the returned dataset. ; Definition at line 1385 of file RooAbsPdf.cxx. ◆ generate() [4/6]. RooFit::OwningPtr< RooDataSet > RooAbsPdf::generate ; (; const RooArgSet & ; whatVars, . Int_t ; nEvents, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {} . ). inline . See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ; Parameters. [in]whatVarsSet of observables to generate for each event according to this model. ; [in]nEventsHow many events to generate ; arg1,arg2,arg3,arg4,arg5Optional command arguments. . Definition at line 57 of file RooAbsPdf.h. ◆ generate() [5/6]. RooFit::OwningPtr< RooDataSet > RooAbsPdf::generate ; (; RooAbsPdf::G",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:119124,Modifiability,extend,extended,119124," const RooArgSet & ; whatVars, . double ; nEvents = 0, . bool ; verbose = false, . bool ; autoBinned = true, . const char * ; binnedTag = """", . bool ; expectedData = false, . bool ; extended = false . ); const. Generate a new dataset containing the specified variables with events sampled from our distribution. ; Parameters. [in]whatVarsGenerate a dataset with the variables (and categories) in this set. Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. ; [in]nEventsGenerate the specified number of events or else try to use expectedEvents() if nEvents <= 0 (default). ; [in]verboseShow which generator strategies are being used. ; [in]autoBinnedIf original distribution is binned, return bin centers and randomise weights instead of generating single events. ; [in]binnedTag; [in]expectedDataCall setExpectedData on the genContext. ; [in]extendedRandomise number of events generated according to Poisson(nEvents). Only useful if PDF is extended. . ReturnsNew dataset. Returns zero in case of an error. The caller takes ownership of the returned dataset. ; Definition at line 1385 of file RooAbsPdf.cxx. ◆ generate() [4/6]. RooFit::OwningPtr< RooDataSet > RooAbsPdf::generate ; (; const RooArgSet & ; whatVars, . Int_t ; nEvents, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {} . ). inline . See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ; Parameters. [in]whatVarsSet of observables to generate for each event according to this model. ; [in]nEventsHow many events to generate ; arg1,arg2,arg3,arg4,arg5Optional command arguments. . Definition at line 57 of file RooAbsPdf.h. ◆ generate() [5/6]. RooFit::OwningPtr< RooDataSet > RooAbsPdf::generate ; (; RooAbsPdf::GenSpec & ; spec); const. Generate according to GenSpec ob",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:120743,Modifiability,extend,extended,120743,"[in]whatVarsSet of observables to generate for each event according to this model. ; [in]nEventsHow many events to generate ; arg1,arg2,arg3,arg4,arg5Optional command arguments. . Definition at line 57 of file RooAbsPdf.h. ◆ generate() [5/6]. RooFit::OwningPtr< RooDataSet > RooAbsPdf::generate ; (; RooAbsPdf::GenSpec & ; spec); const. Generate according to GenSpec obtained from prepareMultiGen(). ; If many identical generation requests are needed, e.g.; in toy MC studies, it is more efficient to use the prepareMultiGen()/generate() combination than calling the standard generate() multiple times as initialization overhead is only incurred once. ; Definition at line 1348 of file RooAbsPdf.cxx. ◆ generate() [6/6]. std::unique_ptr< RooDataSet > RooAbsPdf::generate ; (; RooAbsGenContext & ; context, . const RooArgSet & ; whatVars, . const RooDataSet * ; prototype, . double ; nEvents, . bool ; verbose, . bool ; randProtoOrder, . bool ; resampleProto, . bool ; skipInit = false, . bool ; extended = false . ); const. private . Internal method. ; Definition at line 1413 of file RooAbsPdf.cxx. ◆ generateBinned() [1/3]. RooAbsPdf::generateBinned ; (; const RooArgSet & ; whatVars, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {} . ); const. virtual . Generate a new dataset containing the specified variables with events sampled from our distribution. ; Parameters. [in]whatVarsChoose variables in which to generate events. Variables not listed here will remain constant and not be used for event generation ; [in]arg1,arg2,arg3,arg4,arg5,arg6Optional RooCmdArg to change behaviour of generateBinned() . ReturnsRooDataHist *, to be managed by caller.; Generate the specified number of events or expectedEvents() if not specified.; Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameter",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:121202,Modifiability,variab,variables,121202,".; in toy MC studies, it is more efficient to use the prepareMultiGen()/generate() combination than calling the standard generate() multiple times as initialization overhead is only incurred once. ; Definition at line 1348 of file RooAbsPdf.cxx. ◆ generate() [6/6]. std::unique_ptr< RooDataSet > RooAbsPdf::generate ; (; RooAbsGenContext & ; context, . const RooArgSet & ; whatVars, . const RooDataSet * ; prototype, . double ; nEvents, . bool ; verbose, . bool ; randProtoOrder, . bool ; resampleProto, . bool ; skipInit = false, . bool ; extended = false . ); const. private . Internal method. ; Definition at line 1413 of file RooAbsPdf.cxx. ◆ generateBinned() [1/3]. RooAbsPdf::generateBinned ; (; const RooArgSet & ; whatVars, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {} . ); const. virtual . Generate a new dataset containing the specified variables with events sampled from our distribution. ; Parameters. [in]whatVarsChoose variables in which to generate events. Variables not listed here will remain constant and not be used for event generation ; [in]arg1,arg2,arg3,arg4,arg5,arg6Optional RooCmdArg to change behaviour of generateBinned() . ReturnsRooDataHist *, to be managed by caller.; Generate the specified number of events or expectedEvents() if not specified.; Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. Returns zero in case of an error. The caller takes ownership of the returned dataset.; The following named arguments are supported . Type of CmdArg Effect on generation . Name(const char* name) Name of the output dataset . Verbose(bool flag) Print informational messages during event generation . NumEvents(int nevt) Generate specified number of events . Extended() The actual number of events generated will be sampled from a Poisson distribution with ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:121288,Modifiability,variab,variables,121288," than calling the standard generate() multiple times as initialization overhead is only incurred once. ; Definition at line 1348 of file RooAbsPdf.cxx. ◆ generate() [6/6]. std::unique_ptr< RooDataSet > RooAbsPdf::generate ; (; RooAbsGenContext & ; context, . const RooArgSet & ; whatVars, . const RooDataSet * ; prototype, . double ; nEvents, . bool ; verbose, . bool ; randProtoOrder, . bool ; resampleProto, . bool ; skipInit = false, . bool ; extended = false . ); const. private . Internal method. ; Definition at line 1413 of file RooAbsPdf.cxx. ◆ generateBinned() [1/3]. RooAbsPdf::generateBinned ; (; const RooArgSet & ; whatVars, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {} . ); const. virtual . Generate a new dataset containing the specified variables with events sampled from our distribution. ; Parameters. [in]whatVarsChoose variables in which to generate events. Variables not listed here will remain constant and not be used for event generation ; [in]arg1,arg2,arg3,arg4,arg5,arg6Optional RooCmdArg to change behaviour of generateBinned() . ReturnsRooDataHist *, to be managed by caller.; Generate the specified number of events or expectedEvents() if not specified.; Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. Returns zero in case of an error. The caller takes ownership of the returned dataset.; The following named arguments are supported . Type of CmdArg Effect on generation . Name(const char* name) Name of the output dataset . Verbose(bool flag) Print informational messages during event generation . NumEvents(int nevt) Generate specified number of events . Extended() The actual number of events generated will be sampled from a Poisson distribution with mu=nevt. This can be much faster for peaked PDFs, but the number of events is not exactly wha",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:121638,Modifiability,variab,variables,121638," resampleProto, . bool ; skipInit = false, . bool ; extended = false . ); const. private . Internal method. ; Definition at line 1413 of file RooAbsPdf.cxx. ◆ generateBinned() [1/3]. RooAbsPdf::generateBinned ; (; const RooArgSet & ; whatVars, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {} . ); const. virtual . Generate a new dataset containing the specified variables with events sampled from our distribution. ; Parameters. [in]whatVarsChoose variables in which to generate events. Variables not listed here will remain constant and not be used for event generation ; [in]arg1,arg2,arg3,arg4,arg5,arg6Optional RooCmdArg to change behaviour of generateBinned() . ReturnsRooDataHist *, to be managed by caller.; Generate the specified number of events or expectedEvents() if not specified.; Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. Returns zero in case of an error. The caller takes ownership of the returned dataset.; The following named arguments are supported . Type of CmdArg Effect on generation . Name(const char* name) Name of the output dataset . Verbose(bool flag) Print informational messages during event generation . NumEvents(int nevt) Generate specified number of events . Extended() The actual number of events generated will be sampled from a Poisson distribution with mu=nevt. This can be much faster for peaked PDFs, but the number of events is not exactly what was requested. . ExpectedData() Return a binned dataset without statistical fluctuations (also aliased as Asimov()) . PyROOT; The RooAbsPdf::generateBinned() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1598 of file RooAbsPdf.cxx. ◆ generateBinned() [2/3]. RooFit::OwningPtr< RooDataHist > R",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:122811,Modifiability,extend,extended,122811,"he returned dataset.; The following named arguments are supported . Type of CmdArg Effect on generation . Name(const char* name) Name of the output dataset . Verbose(bool flag) Print informational messages during event generation . NumEvents(int nevt) Generate specified number of events . Extended() The actual number of events generated will be sampled from a Poisson distribution with mu=nevt. This can be much faster for peaked PDFs, but the number of events is not exactly what was requested. . ExpectedData() Return a binned dataset without statistical fluctuations (also aliased as Asimov()) . PyROOT; The RooAbsPdf::generateBinned() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1598 of file RooAbsPdf.cxx. ◆ generateBinned() [2/3]. RooFit::OwningPtr< RooDataHist > RooAbsPdf::generateBinned ; (; const RooArgSet & ; whatVars, . double ; nEvents, . bool ; expectedData = false, . bool ; extended = false . ); const. virtual . Generate a new dataset containing the specified variables with events sampled from our distribution. ; Parameters. [in]whatVarsVariables that values should be generated for. ; [in]nEventsHow many events to generate. If nEvents <=0, use the value returned by expectedEvents() as target. ; [in]expectedDataIf set to true (false by default), the returned histogram returns the 'expected' data sample, i.e. no statistical fluctuations are present. ; [in]extendedFor each bin, generate Poisson(x, mu) events, where mu is chosen such that on average, one would obtain nEvents events. This means that the true number of events will fluctuate around the desired value, but the generation happens a lot faster. Especially if the PDF is sharply peaked, the multinomial event generation necessary to generate exactly nEvents events can be very slow. The binning used for generation of events is the currently set binning for the variables. It can e.g. be changed using x.setBin",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:122898,Modifiability,variab,variables,122898,"Effect on generation . Name(const char* name) Name of the output dataset . Verbose(bool flag) Print informational messages during event generation . NumEvents(int nevt) Generate specified number of events . Extended() The actual number of events generated will be sampled from a Poisson distribution with mu=nevt. This can be much faster for peaked PDFs, but the number of events is not exactly what was requested. . ExpectedData() Return a binned dataset without statistical fluctuations (also aliased as Asimov()) . PyROOT; The RooAbsPdf::generateBinned() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1598 of file RooAbsPdf.cxx. ◆ generateBinned() [2/3]. RooFit::OwningPtr< RooDataHist > RooAbsPdf::generateBinned ; (; const RooArgSet & ; whatVars, . double ; nEvents, . bool ; expectedData = false, . bool ; extended = false . ); const. virtual . Generate a new dataset containing the specified variables with events sampled from our distribution. ; Parameters. [in]whatVarsVariables that values should be generated for. ; [in]nEventsHow many events to generate. If nEvents <=0, use the value returned by expectedEvents() as target. ; [in]expectedDataIf set to true (false by default), the returned histogram returns the 'expected' data sample, i.e. no statistical fluctuations are present. ; [in]extendedFor each bin, generate Poisson(x, mu) events, where mu is chosen such that on average, one would obtain nEvents events. This means that the true number of events will fluctuate around the desired value, but the generation happens a lot faster. Especially if the PDF is sharply peaked, the multinomial event generation necessary to generate exactly nEvents events can be very slow. The binning used for generation of events is the currently set binning for the variables. It can e.g. be changed using x.setBins(15);; x.setRange(-5., 5.);; pdf.generateBinned(RooArgSet(x), 1000);; xDouble_t x[n",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:123300,Modifiability,extend,extendedFor,123300,"ut statistical fluctuations (also aliased as Asimov()) . PyROOT; The RooAbsPdf::generateBinned() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1598 of file RooAbsPdf.cxx. ◆ generateBinned() [2/3]. RooFit::OwningPtr< RooDataHist > RooAbsPdf::generateBinned ; (; const RooArgSet & ; whatVars, . double ; nEvents, . bool ; expectedData = false, . bool ; extended = false . ); const. virtual . Generate a new dataset containing the specified variables with events sampled from our distribution. ; Parameters. [in]whatVarsVariables that values should be generated for. ; [in]nEventsHow many events to generate. If nEvents <=0, use the value returned by expectedEvents() as target. ; [in]expectedDataIf set to true (false by default), the returned histogram returns the 'expected' data sample, i.e. no statistical fluctuations are present. ; [in]extendedFor each bin, generate Poisson(x, mu) events, where mu is chosen such that on average, one would obtain nEvents events. This means that the true number of events will fluctuate around the desired value, but the generation happens a lot faster. Especially if the PDF is sharply peaked, the multinomial event generation necessary to generate exactly nEvents events can be very slow. The binning used for generation of events is the currently set binning for the variables. It can e.g. be changed using x.setBins(15);; x.setRange(-5., 5.);; pdf.generateBinned(RooArgSet(x), 1000);; xDouble_t x[n]Definition legend1.C:17; Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. ReturnsRooDataHist* owned by the caller. Returns nullptr in case of an error. ; Definition at line 1680 of file RooAbsPdf.cxx. ◆ generateBinned() [3/3]. virtual RooFit::OwningPtr< RooDataHist > RooAbsPdf::generateBinned ; (; const RooArgSet & ; whatVars, . double ; nEvents, . const RooCmdArg & ; arg1, . const RooCmd",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:123768,Modifiability,variab,variables,123768,"Set & ; whatVars, . double ; nEvents, . bool ; expectedData = false, . bool ; extended = false . ); const. virtual . Generate a new dataset containing the specified variables with events sampled from our distribution. ; Parameters. [in]whatVarsVariables that values should be generated for. ; [in]nEventsHow many events to generate. If nEvents <=0, use the value returned by expectedEvents() as target. ; [in]expectedDataIf set to true (false by default), the returned histogram returns the 'expected' data sample, i.e. no statistical fluctuations are present. ; [in]extendedFor each bin, generate Poisson(x, mu) events, where mu is chosen such that on average, one would obtain nEvents events. This means that the true number of events will fluctuate around the desired value, but the generation happens a lot faster. Especially if the PDF is sharply peaked, the multinomial event generation necessary to generate exactly nEvents events can be very slow. The binning used for generation of events is the currently set binning for the variables. It can e.g. be changed using x.setBins(15);; x.setRange(-5., 5.);; pdf.generateBinned(RooArgSet(x), 1000);; xDouble_t x[n]Definition legend1.C:17; Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. ReturnsRooDataHist* owned by the caller. Returns nullptr in case of an error. ; Definition at line 1680 of file RooAbsPdf.cxx. ◆ generateBinned() [3/3]. virtual RooFit::OwningPtr< RooDataHist > RooAbsPdf::generateBinned ; (; const RooArgSet & ; whatVars, . double ; nEvents, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {} . ); const. inlinevirtual . As RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&) const. ; Parameters. [in]whatVarsset ; [in]nEventsHow many events to generat",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:123930,Modifiability,variab,variables,123930,"ables that values should be generated for. ; [in]nEventsHow many events to generate. If nEvents <=0, use the value returned by expectedEvents() as target. ; [in]expectedDataIf set to true (false by default), the returned histogram returns the 'expected' data sample, i.e. no statistical fluctuations are present. ; [in]extendedFor each bin, generate Poisson(x, mu) events, where mu is chosen such that on average, one would obtain nEvents events. This means that the true number of events will fluctuate around the desired value, but the generation happens a lot faster. Especially if the PDF is sharply peaked, the multinomial event generation necessary to generate exactly nEvents events can be very slow. The binning used for generation of events is the currently set binning for the variables. It can e.g. be changed using x.setBins(15);; x.setRange(-5., 5.);; pdf.generateBinned(RooArgSet(x), 1000);; xDouble_t x[n]Definition legend1.C:17; Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. ReturnsRooDataHist* owned by the caller. Returns nullptr in case of an error. ; Definition at line 1680 of file RooAbsPdf.cxx. ◆ generateBinned() [3/3]. virtual RooFit::OwningPtr< RooDataHist > RooAbsPdf::generateBinned ; (; const RooArgSet & ; whatVars, . double ; nEvents, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {} . ); const. inlinevirtual . As RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&) const. ; Parameters. [in]whatVarsset ; [in]nEventsHow many events to generate ; arg1,arg2,arg3,arg4,arg5ordered arguments . Definition at line 110 of file RooAbsPdf.h. ◆ generateEvent(). void RooAbsPdf::generateEvent ; (; Int_t ; code). virtual . Interface for generation of an event using the algorithm corresponding to the",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:127602,Modifiability,config,configuration,127602,"ars that we can generate events for, and return a code that specifies the generator algorithm we will use. ; A code of zero indicates that we cannot generate any of the directVars (in this case, nothing should be added to generatedVars). Any non-zero codes will be passed to our generateEvent() implementation, but otherwise its value is arbitrary. The default implementation of this method returns zero. Subclasses will usually implement this method using the matchArgs() methods to advertise the algorithms they provide. ; Reimplemented in RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBMixDecay, RooDecay, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooLandau, RooLognormal, RooNonCPEigenDecay, RooPoisson, RooUniform, RooAddModel, RooBinSamplingPdf, RooMultiVarGaussian, RooProdPdf, and RooTruthModel.; Definition at line 1522 of file RooAbsPdf.cxx. ◆ getGeneratorConfig(). const RooNumGenConfig * RooAbsPdf::getGeneratorConfig ; (; ); const. Return the numeric MC generator configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 2651 of file RooAbsPdf.cxx. ◆ getLogProbabilities(). void RooAbsPdf::getLogProbabilities ; (; std::span< const double > ; pdfValues, . double * ; output . ); const. Definition at line 671 of file RooAbsPdf.cxx. ◆ getLogVal(). double RooAbsPdf::getLogVal ; (; const RooArgSet * ; set = nullptr); const. virtual . Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ; Reimplemented in RooLegacyExpPoly, and RooHistConstraint.; Definition at line 620 of file RooAbsPdf.cxx. ◆ getNorm() [1/2]. double RooAbsPdf::getNorm ; (; const RooArgSet & ; nset); const. inline . Get normalisation term needed to normalise the raw values returned by getVal(). ; Note that getVal(normalisationVariables) will automatic",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:127657,Modifiability,config,configuration,127657,"we cannot generate any of the directVars (in this case, nothing should be added to generatedVars). Any non-zero codes will be passed to our generateEvent() implementation, but otherwise its value is arbitrary. The default implementation of this method returns zero. Subclasses will usually implement this method using the matchArgs() methods to advertise the algorithms they provide. ; Reimplemented in RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBMixDecay, RooDecay, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooLandau, RooLognormal, RooNonCPEigenDecay, RooPoisson, RooUniform, RooAddModel, RooBinSamplingPdf, RooMultiVarGaussian, RooProdPdf, and RooTruthModel.; Definition at line 1522 of file RooAbsPdf.cxx. ◆ getGeneratorConfig(). const RooNumGenConfig * RooAbsPdf::getGeneratorConfig ; (; ); const. Return the numeric MC generator configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 2651 of file RooAbsPdf.cxx. ◆ getLogProbabilities(). void RooAbsPdf::getLogProbabilities ; (; std::span< const double > ; pdfValues, . double * ; output . ); const. Definition at line 671 of file RooAbsPdf.cxx. ◆ getLogVal(). double RooAbsPdf::getLogVal ; (; const RooArgSet * ; set = nullptr); const. virtual . Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ; Reimplemented in RooLegacyExpPoly, and RooHistConstraint.; Definition at line 620 of file RooAbsPdf.cxx. ◆ getNorm() [1/2]. double RooAbsPdf::getNorm ; (; const RooArgSet & ; nset); const. inline . Get normalisation term needed to normalise the raw values returned by getVal(). ; Note that getVal(normalisationVariables) will automatically apply the normalisation term returned here. Parameters. nsetSet of variables to normalise over. . Definition at line 195 of file RooAbs",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:127709,Modifiability,config,configuration,127709,"we cannot generate any of the directVars (in this case, nothing should be added to generatedVars). Any non-zero codes will be passed to our generateEvent() implementation, but otherwise its value is arbitrary. The default implementation of this method returns zero. Subclasses will usually implement this method using the matchArgs() methods to advertise the algorithms they provide. ; Reimplemented in RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBMixDecay, RooDecay, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooLandau, RooLognormal, RooNonCPEigenDecay, RooPoisson, RooUniform, RooAddModel, RooBinSamplingPdf, RooMultiVarGaussian, RooProdPdf, and RooTruthModel.; Definition at line 1522 of file RooAbsPdf.cxx. ◆ getGeneratorConfig(). const RooNumGenConfig * RooAbsPdf::getGeneratorConfig ; (; ); const. Return the numeric MC generator configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 2651 of file RooAbsPdf.cxx. ◆ getLogProbabilities(). void RooAbsPdf::getLogProbabilities ; (; std::span< const double > ; pdfValues, . double * ; output . ); const. Definition at line 671 of file RooAbsPdf.cxx. ◆ getLogVal(). double RooAbsPdf::getLogVal ; (; const RooArgSet * ; set = nullptr); const. virtual . Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ; Reimplemented in RooLegacyExpPoly, and RooHistConstraint.; Definition at line 620 of file RooAbsPdf.cxx. ◆ getNorm() [1/2]. double RooAbsPdf::getNorm ; (; const RooArgSet & ; nset); const. inline . Get normalisation term needed to normalise the raw values returned by getVal(). ; Note that getVal(normalisationVariables) will automatically apply the normalisation term returned here. Parameters. nsetSet of variables to normalise over. . Definition at line 195 of file RooAbs",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:127758,Modifiability,config,configuration,127758,"we cannot generate any of the directVars (in this case, nothing should be added to generatedVars). Any non-zero codes will be passed to our generateEvent() implementation, but otherwise its value is arbitrary. The default implementation of this method returns zero. Subclasses will usually implement this method using the matchArgs() methods to advertise the algorithms they provide. ; Reimplemented in RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBMixDecay, RooDecay, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooLandau, RooLognormal, RooNonCPEigenDecay, RooPoisson, RooUniform, RooAddModel, RooBinSamplingPdf, RooMultiVarGaussian, RooProdPdf, and RooTruthModel.; Definition at line 1522 of file RooAbsPdf.cxx. ◆ getGeneratorConfig(). const RooNumGenConfig * RooAbsPdf::getGeneratorConfig ; (; ); const. Return the numeric MC generator configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 2651 of file RooAbsPdf.cxx. ◆ getLogProbabilities(). void RooAbsPdf::getLogProbabilities ; (; std::span< const double > ; pdfValues, . double * ; output . ); const. Definition at line 671 of file RooAbsPdf.cxx. ◆ getLogVal(). double RooAbsPdf::getLogVal ; (; const RooArgSet * ; set = nullptr); const. virtual . Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ; Reimplemented in RooLegacyExpPoly, and RooHistConstraint.; Definition at line 620 of file RooAbsPdf.cxx. ◆ getNorm() [1/2]. double RooAbsPdf::getNorm ; (; const RooArgSet & ; nset); const. inline . Get normalisation term needed to normalise the raw values returned by getVal(). ; Note that getVal(normalisationVariables) will automatically apply the normalisation term returned here. Parameters. nsetSet of variables to normalise over. . Definition at line 195 of file RooAbs",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:128675,Modifiability,variab,variables,128675,"ed with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 2651 of file RooAbsPdf.cxx. ◆ getLogProbabilities(). void RooAbsPdf::getLogProbabilities ; (; std::span< const double > ; pdfValues, . double * ; output . ); const. Definition at line 671 of file RooAbsPdf.cxx. ◆ getLogVal(). double RooAbsPdf::getLogVal ; (; const RooArgSet * ; set = nullptr); const. virtual . Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ; Reimplemented in RooLegacyExpPoly, and RooHistConstraint.; Definition at line 620 of file RooAbsPdf.cxx. ◆ getNorm() [1/2]. double RooAbsPdf::getNorm ; (; const RooArgSet & ; nset); const. inline . Get normalisation term needed to normalise the raw values returned by getVal(). ; Note that getVal(normalisationVariables) will automatically apply the normalisation term returned here. Parameters. nsetSet of variables to normalise over. . Definition at line 195 of file RooAbsPdf.h. ◆ getNorm() [2/2]. double RooAbsPdf::getNorm ; (; const RooArgSet * ; nset = nullptr); const. virtual . Get normalisation term needed to normalise the raw values returned by getVal(). ; Note that getVal(normalisationVariables) will automatically apply the normalisation term returned here. Parameters. nsetSet of variables to normalise over. . Reimplemented in RooResolutionModel.; Definition at line 419 of file RooAbsPdf.cxx. ◆ getNormIntegral(). const RooAbsReal * RooAbsPdf::getNormIntegral ; (; const RooArgSet & ; nset); const. inline . Definition at line 255 of file RooAbsPdf.h. ◆ getNormObj(). const RooAbsReal * RooAbsPdf::getNormObj ; (; const RooArgSet * ; set, . const RooArgSet * ; iset, . const TNamed * ; rangeName = nullptr . ); const. virtual . Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over obse",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:129063,Modifiability,variab,variables,129063,"tLogVal ; (; const RooArgSet * ; set = nullptr); const. virtual . Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ; Reimplemented in RooLegacyExpPoly, and RooHistConstraint.; Definition at line 620 of file RooAbsPdf.cxx. ◆ getNorm() [1/2]. double RooAbsPdf::getNorm ; (; const RooArgSet & ; nset); const. inline . Get normalisation term needed to normalise the raw values returned by getVal(). ; Note that getVal(normalisationVariables) will automatically apply the normalisation term returned here. Parameters. nsetSet of variables to normalise over. . Definition at line 195 of file RooAbsPdf.h. ◆ getNorm() [2/2]. double RooAbsPdf::getNorm ; (; const RooArgSet * ; nset = nullptr); const. virtual . Get normalisation term needed to normalise the raw values returned by getVal(). ; Note that getVal(normalisationVariables) will automatically apply the normalisation term returned here. Parameters. nsetSet of variables to normalise over. . Reimplemented in RooResolutionModel.; Definition at line 419 of file RooAbsPdf.cxx. ◆ getNormIntegral(). const RooAbsReal * RooAbsPdf::getNormIntegral ; (; const RooArgSet & ; nset); const. inline . Definition at line 255 of file RooAbsPdf.h. ◆ getNormObj(). const RooAbsReal * RooAbsPdf::getNormObj ; (; const RooArgSet * ; set, . const RooArgSet * ; iset, . const TNamed * ; rangeName = nullptr . ); const. virtual . Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ; Definition at line 443 of file RooAbsPdf.cxx. ◆ getValV(). double RooAbsPdf::getValV ; (; const RooArgSet * ; nset = nullptr); const. overridevirtual . Return current value, normalized by integrating over the observables in nset. ; If nset is 0, the unnormalized value is returned. All elements of nset must be lvalues.; Unnormalized values are not cached. Doing so would ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:133531,Modifiability,extend,extended,133531,"; const RooAbsArg & ; arg); const. virtual . Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ; Observables on which a PDF depends via more than route are not safe for use with internal generators because they introduce correlations not known to the internal generator ; Reimplemented in RooAbsAnaConvPdf, RooAddModel, RooBinSamplingPdf, and RooProdPdf.; Definition at line 1557 of file RooAbsPdf.cxx. ◆ logBatchComputationErrors(). void RooAbsPdf::logBatchComputationErrors ; (; std::span< const double > & ; outputs, . std::size_t ; begin . ); const. private . Scan through outputs and fix+log all nans and negative values. ; Parameters. [in,out]outputsArray to be scanned & fixed. ; [in]beginBegin of event range. Only needed to print the correct event number where the error occurred. . Definition at line 654 of file RooAbsPdf.cxx. ◆ mustBeExtended(). bool RooAbsPdf::mustBeExtended ; (; ); const. inline . If true PDF must provide extended likelihood term. ; Definition at line 222 of file RooAbsPdf.h. ◆ normalizeWithNaNPacking(). double RooAbsPdf::normalizeWithNaNPacking ; (; double ; rawVal, . double ; normVal . ); const. protected . Definition at line 282 of file RooAbsPdf.cxx. ◆ normRange(). const char * RooAbsPdf::normRange ; (; ); const. inline . Definition at line 250 of file RooAbsPdf.h. ◆ paramOn() [1/2]. RooPlot * RooAbsPdf::paramOn ; (; RooPlot * ; frame, . const RooArgSet & ; params, . bool ; showConstants = false, . const char * ; label = """", . double ; xmin = 0.65, . double ; xmax = 0.99, . double ; ymax = 0.95, . const RooCmdArg * ; formatCmd = nullptr . ). privatevirtual . Add a text box with the current parameter values and their errors to the frame. ; Observables of this PDF appearing in the 'data' dataset will be omitted.; An optional label will be inserted if passed. Multi-line labels can be generated by adding \n to the label string. Use 'sigDigits' to modify the default number of significant",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:139021,Modifiability,variab,variable,139021," that of a histogram containing the specified; number of event; Raw - Scale factor is applied to the raw (projected) probability density.; Not too useful, option provided for completeness.; a#define a(i)Definition RSha256.hxx:99; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; onOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void onDefinition TGWin32VirtualXProxy.cxx:106; RooAbsReal::NumEvent@ NumEventDefinition RooAbsReal.h:276; RooAbsReal::Relative@ RelativeDefinition RooAbsReal.h:276; RooAbsReal::Raw@ RawDefinition RooAbsReal.h:276. Reimplemented from RooAbsReal.; Reimplemented in RooSimultaneous.; Definition at line 2221 of file RooAbsPdf.cxx. ◆ plotOn() [3/3]. RooPlot * RooAbsPdf::plotOn ; (; RooPlot * ; frame, . RooLinkedList & ; cmdList . ); const. overridevirtual . Plot (project) PDF on specified frame. . If a PDF is plotted in an empty frame, it will show a unit-normalized curve in the frame variable. When projecting a multi- dimensional PDF onto the frame axis, hidden parameters are taken are taken at their current value.; If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projection integrated over all variables that were present in the shown dataset (except for the one on the x-axis). The normalization of the curve will be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; If a PDF is plotted in a frame showing a dataset after a fit, the above happens, but the PDF will be drawn and normalised only in the fit range. If this is not desired, plotting and normalisation range can be overridden using Range() and NormRange() as documented in the table below. This function takes the following named arguments (for more arguments, see also RooAbsReal::plotOn(RooPlot*,const RooCmdArg&,const RooCmdArg&,const RooCmdArg",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:139278,Modifiability,variab,variables,139278,"VirtualXProxy.cxx:44; onOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void onDefinition TGWin32VirtualXProxy.cxx:106; RooAbsReal::NumEvent@ NumEventDefinition RooAbsReal.h:276; RooAbsReal::Relative@ RelativeDefinition RooAbsReal.h:276; RooAbsReal::Raw@ RawDefinition RooAbsReal.h:276. Reimplemented from RooAbsReal.; Reimplemented in RooSimultaneous.; Definition at line 2221 of file RooAbsPdf.cxx. ◆ plotOn() [3/3]. RooPlot * RooAbsPdf::plotOn ; (; RooPlot * ; frame, . RooLinkedList & ; cmdList . ); const. overridevirtual . Plot (project) PDF on specified frame. . If a PDF is plotted in an empty frame, it will show a unit-normalized curve in the frame variable. When projecting a multi- dimensional PDF onto the frame axis, hidden parameters are taken are taken at their current value.; If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projection integrated over all variables that were present in the shown dataset (except for the one on the x-axis). The normalization of the curve will be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; If a PDF is plotted in a frame showing a dataset after a fit, the above happens, but the PDF will be drawn and normalised only in the fit range. If this is not desired, plotting and normalisation range can be overridden using Range() and NormRange() as documented in the table below. This function takes the following named arguments (for more arguments, see also RooAbsReal::plotOn(RooPlot*,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; const RooCmdArg&) const ). Type of argument Controlling normalisation . NormRange(const char* name) Calculate curve normalization w.r.t. specified range[s]. See the tuto",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:143449,Modifiability,variab,variables,143449,"ot integrating over all states of this category. The slice is positioned at the given label value. Multiple Slice() commands can be given to specify slices in multiple observables, e.g. pdf.plotOn(frame, Slice(tagCategory, ""2tag""), Slice(jetCategory, ""3jet""));; . Project(const RooArgSet& set) Override default projection behaviour by projecting over observables given in set, completely ignoring the default projection behavior. Advanced use only. . ProjWData(const RooAbsData& d) Override default projection technique (integration). For observables present in given dataset projection of PDF is achieved by constructing an average over all observable values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique . ProjWData(const RooArgSet& s, const RooAbsData& d) As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging . ProjectionRange(const char* rn) When projecting the PDF onto the plot axis, it is usually integrated over the full range of the invisible variables. The ProjectionRange overrides this. This is useful if the PDF was fitted in a limited range in y, but it is now projected onto x. If ProjectionRange(""<name of fit range>"") is passed, the projection is normalised correctly. Type of argument Plotting control . LineStyle(Int_t style) Select line style by ROOT line style code, default is solid . LineColor(Int_t color) Select line color by ROOT color code, default is blue . LineWidth(Int_t width) Select line with in pixels, default is 3 . FillStyle(Int_t style) Select fill style, default is not filled. If a filled style is selected, also use VLines() to add vertical downward lines at end of curve to ensure proper closure . FillColor(Int_t color) Select fill color by ROOT color code . Range(const char* name) Only draw curve in range defined by given name. Multiple comma-separated ranges can be given. An empty string """" or nullptr means to use the default range of the ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:144385,Modifiability,variab,variable,144385,"ing the PDF onto the plot axis, it is usually integrated over the full range of the invisible variables. The ProjectionRange overrides this. This is useful if the PDF was fitted in a limited range in y, but it is now projected onto x. If ProjectionRange(""<name of fit range>"") is passed, the projection is normalised correctly. Type of argument Plotting control . LineStyle(Int_t style) Select line style by ROOT line style code, default is solid . LineColor(Int_t color) Select line color by ROOT color code, default is blue . LineWidth(Int_t width) Select line with in pixels, default is 3 . FillStyle(Int_t style) Select fill style, default is not filled. If a filled style is selected, also use VLines() to add vertical downward lines at end of curve to ensure proper closure . FillColor(Int_t color) Select fill color by ROOT color code . Range(const char* name) Only draw curve in range defined by given name. Multiple comma-separated ranges can be given. An empty string """" or nullptr means to use the default range of the variable. . Range(double lo, double hi) Only draw curve in specified range . VLines() Add vertical lines to y=0 at end points of curve . Precision(double eps) Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. A higher precision will result in more and more densely spaced curve points. A negative precision value will disable adaptive point spacing and restrict sampling to the grid point of points defined by the binning of the plotted observable (recommended for expensive functions such as profile likelihoods) . Invisible(bool flag) Add curve to frame, but do not display. Useful in combination AddTo() . VisualizeError(const RooFitResult& fitres, double Z=1, bool linearMethod=true) Visualize the uncertainty on the parameters, as given in fitres, at 'Z' sigma. The linear method is fast but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made. Intervals from the samp",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:144735,Modifiability,adapt,adaptive,144735,"olor(Int_t color) Select line color by ROOT color code, default is blue . LineWidth(Int_t width) Select line with in pixels, default is 3 . FillStyle(Int_t style) Select fill style, default is not filled. If a filled style is selected, also use VLines() to add vertical downward lines at end of curve to ensure proper closure . FillColor(Int_t color) Select fill color by ROOT color code . Range(const char* name) Only draw curve in range defined by given name. Multiple comma-separated ranges can be given. An empty string """" or nullptr means to use the default range of the variable. . Range(double lo, double hi) Only draw curve in specified range . VLines() Add vertical lines to y=0 at end points of curve . Precision(double eps) Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. A higher precision will result in more and more densely spaced curve points. A negative precision value will disable adaptive point spacing and restrict sampling to the grid point of points defined by the binning of the plotted observable (recommended for expensive functions such as profile likelihoods) . Invisible(bool flag) Add curve to frame, but do not display. Useful in combination AddTo() . VisualizeError(const RooFitResult& fitres, double Z=1, bool linearMethod=true) Visualize the uncertainty on the parameters, as given in fitres, at 'Z' sigma. The linear method is fast but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made. Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate NoteTo include the uncertainty from the expected number of events, the Normalization() argument with ScaleType RooAbsReal::RelativeExpected has to be passed, e.g. pdf.plotOn(frame, VisualizeError(fitResult), Normalization(1.0, RooAbsReal::RelativeExpected));; RooAbsReal::RelativeExpected@ RelativeExpectedDefinition Roo",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:146461,Modifiability,config,configuration,146461,"ude the uncertainty from the expected number of events, the Normalization() argument with ScaleType RooAbsReal::RelativeExpected has to be passed, e.g. pdf.plotOn(frame, VisualizeError(fitResult), Normalization(1.0, RooAbsReal::RelativeExpected));; RooAbsReal::RelativeExpected@ RelativeExpectedDefinition RooAbsReal.h:276. VisualizeError(const RooFitResult& fitres, const RooArgSet& param, double Z=1, bool linearMethod=true) Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma . Reimplemented from RooAbsReal.; Reimplemented in RooSimultaneous, and RooSimultaneous.; Definition at line 1937 of file RooAbsPdf.cxx. ◆ prepareMultiGen(). RooAbsPdf::prepareMultiGen ; (; const RooArgSet & ; whatVars, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {} . ). Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ; NoteThis method does not perform any generation. To generate according to generations specification call RooAbsPdf::generate(RooAbsPdf::GenSpec&) const. Details copied from RooAbsPdf::generate():; Generate the specified number of events or expectedEvents() if not specified. Parameters. [in]whatVarsChoose variables in which to generate events. Variables not listed here will remain constant and not be used for event generation. ; [in]arg1,arg2,arg3,arg4,arg5,arg6Optional RooCmdArg() to change behaviour of generate(). . ReturnsRooDataSet *, owned by caller.; Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. Returns zero in case of an error. Type of CmdArg Effect on generate . Name(const char* name) Name of the output dataset . Verbose(bool flag) Print informational messages during event generation . NumEvents(int nevt) Generate specified number of events . Extended",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:146866,Modifiability,variab,variables,146866,"oArgSet& param, double Z=1, bool linearMethod=true) Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma . Reimplemented from RooAbsReal.; Reimplemented in RooSimultaneous, and RooSimultaneous.; Definition at line 1937 of file RooAbsPdf.cxx. ◆ prepareMultiGen(). RooAbsPdf::prepareMultiGen ; (; const RooArgSet & ; whatVars, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {} . ). Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ; NoteThis method does not perform any generation. To generate according to generations specification call RooAbsPdf::generate(RooAbsPdf::GenSpec&) const. Details copied from RooAbsPdf::generate():; Generate the specified number of events or expectedEvents() if not specified. Parameters. [in]whatVarsChoose variables in which to generate events. Variables not listed here will remain constant and not be used for event generation. ; [in]arg1,arg2,arg3,arg4,arg5,arg6Optional RooCmdArg() to change behaviour of generate(). . ReturnsRooDataSet *, owned by caller.; Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. Returns zero in case of an error. Type of CmdArg Effect on generate . Name(const char* name) Name of the output dataset . Verbose(bool flag) Print informational messages during event generation . NumEvents(int nevt) Generate specified number of events . Extended() If no number of events to be generated is given, use expected number of events from extended likelihood term. This evidently only works for extended PDFs. . GenBinned(const char* tag) Use binned generation for all component pdfs that have 'setAttribute(tag)' set . AutoBinned(bool flag) Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, su",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:147126,Modifiability,variab,variables,147126,". RooAbsPdf::prepareMultiGen ; (; const RooArgSet & ; whatVars, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {} . ). Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ; NoteThis method does not perform any generation. To generate according to generations specification call RooAbsPdf::generate(RooAbsPdf::GenSpec&) const. Details copied from RooAbsPdf::generate():; Generate the specified number of events or expectedEvents() if not specified. Parameters. [in]whatVarsChoose variables in which to generate events. Variables not listed here will remain constant and not be used for event generation. ; [in]arg1,arg2,arg3,arg4,arg5,arg6Optional RooCmdArg() to change behaviour of generate(). . ReturnsRooDataSet *, owned by caller.; Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. Returns zero in case of an error. Type of CmdArg Effect on generate . Name(const char* name) Name of the output dataset . Verbose(bool flag) Print informational messages during event generation . NumEvents(int nevt) Generate specified number of events . Extended() If no number of events to be generated is given, use expected number of events from extended likelihood term. This evidently only works for extended PDFs. . GenBinned(const char* tag) Use binned generation for all component pdfs that have 'setAttribute(tag)' set . AutoBinned(bool flag) Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of RooHistPdfs etc) NoteDatasets that are generated in binned mode are returned as weighted unbinned datasets. This means that for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content. AllBinned() As above, but for all comp",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:147588,Modifiability,extend,extended,147588,"tion. ; NoteThis method does not perform any generation. To generate according to generations specification call RooAbsPdf::generate(RooAbsPdf::GenSpec&) const. Details copied from RooAbsPdf::generate():; Generate the specified number of events or expectedEvents() if not specified. Parameters. [in]whatVarsChoose variables in which to generate events. Variables not listed here will remain constant and not be used for event generation. ; [in]arg1,arg2,arg3,arg4,arg5,arg6Optional RooCmdArg() to change behaviour of generate(). . ReturnsRooDataSet *, owned by caller.; Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. Returns zero in case of an error. Type of CmdArg Effect on generate . Name(const char* name) Name of the output dataset . Verbose(bool flag) Print informational messages during event generation . NumEvents(int nevt) Generate specified number of events . Extended() If no number of events to be generated is given, use expected number of events from extended likelihood term. This evidently only works for extended PDFs. . GenBinned(const char* tag) Use binned generation for all component pdfs that have 'setAttribute(tag)' set . AutoBinned(bool flag) Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of RooHistPdfs etc) NoteDatasets that are generated in binned mode are returned as weighted unbinned datasets. This means that for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content. AllBinned() As above, but for all components. NoteThe notion of components is only meaningful for simultaneous PDFs as binned generation is always executed at the top-level node for a regular PDF, so for those it only mattes that the top-level node is tagged. ProtoData(const RooDataSet& data, bool randOrder) Use specified dataset as prototype dataset. If randOrder in ProtoData() is set to true, the order of t",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:147644,Modifiability,extend,extended,147644,"enerations specification call RooAbsPdf::generate(RooAbsPdf::GenSpec&) const. Details copied from RooAbsPdf::generate():; Generate the specified number of events or expectedEvents() if not specified. Parameters. [in]whatVarsChoose variables in which to generate events. Variables not listed here will remain constant and not be used for event generation. ; [in]arg1,arg2,arg3,arg4,arg5,arg6Optional RooCmdArg() to change behaviour of generate(). . ReturnsRooDataSet *, owned by caller.; Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. Returns zero in case of an error. Type of CmdArg Effect on generate . Name(const char* name) Name of the output dataset . Verbose(bool flag) Print informational messages during event generation . NumEvents(int nevt) Generate specified number of events . Extended() If no number of events to be generated is given, use expected number of events from extended likelihood term. This evidently only works for extended PDFs. . GenBinned(const char* tag) Use binned generation for all component pdfs that have 'setAttribute(tag)' set . AutoBinned(bool flag) Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of RooHistPdfs etc) NoteDatasets that are generated in binned mode are returned as weighted unbinned datasets. This means that for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content. AllBinned() As above, but for all components. NoteThe notion of components is only meaningful for simultaneous PDFs as binned generation is always executed at the top-level node for a regular PDF, so for those it only mattes that the top-level node is tagged. ProtoData(const RooDataSet& data, bool randOrder) Use specified dataset as prototype dataset. If randOrder in ProtoData() is set to true, the order of the events in the dataset will be read in a random order if the requested number of ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:148916,Modifiability,variab,variables,148916," products of RooHistPdfs etc) NoteDatasets that are generated in binned mode are returned as weighted unbinned datasets. This means that for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content. AllBinned() As above, but for all components. NoteThe notion of components is only meaningful for simultaneous PDFs as binned generation is always executed at the top-level node for a regular PDF, so for those it only mattes that the top-level node is tagged. ProtoData(const RooDataSet& data, bool randOrder) Use specified dataset as prototype dataset. If randOrder in ProtoData() is set to true, the order of the events in the dataset will be read in a random order if the requested number of events to be generated does not match the number of events in the prototype dataset. NoteIf ProtoData() is used, the specified existing dataset as a prototype: the new dataset will contain the same number of events as the prototype (unless otherwise specified), and any prototype variables not in whatVars will be copied into the new dataset for each generated event and also used to set our PDF parameters. The user can specify a number of events to generate that will override the default. The result is a copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that are not in the prototype will be added as new columns to the generated dataset. Accessing the underlying event generator; Depending on the fit model (if it is difficult to sample), it may be necessary to change generator settings. For the default generator (RooFoamGenerator), the number of samples or cells could be increased by e.g. using myPdf->specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);; The foam generator e.g. has the following config options:; nCell[123N]D; nSample; chatLevel See alsorf902_numgenconfig.C. PyROOT; The RooAbsPdf::generate() function is pythonized with the command ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:149184,Modifiability,variab,variables,149184,"ll components. NoteThe notion of components is only meaningful for simultaneous PDFs as binned generation is always executed at the top-level node for a regular PDF, so for those it only mattes that the top-level node is tagged. ProtoData(const RooDataSet& data, bool randOrder) Use specified dataset as prototype dataset. If randOrder in ProtoData() is set to true, the order of the events in the dataset will be read in a random order if the requested number of events to be generated does not match the number of events in the prototype dataset. NoteIf ProtoData() is used, the specified existing dataset as a prototype: the new dataset will contain the same number of events as the prototype (unless otherwise specified), and any prototype variables not in whatVars will be copied into the new dataset for each generated event and also used to set our PDF parameters. The user can specify a number of events to generate that will override the default. The result is a copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that are not in the prototype will be added as new columns to the generated dataset. Accessing the underlying event generator; Depending on the fit model (if it is difficult to sample), it may be necessary to change generator settings. For the default generator (RooFoamGenerator), the number of samples or cells could be increased by e.g. using myPdf->specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);; The foam generator e.g. has the following config options:; nCell[123N]D; nSample; chatLevel See alsorf902_numgenconfig.C. PyROOT; The RooAbsPdf::generate() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . PyROOT; The RooAbsPdf::prepareMultiGen() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1299 of file Roo",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:149728,Modifiability,config,config,149728,"ified existing dataset as a prototype: the new dataset will contain the same number of events as the prototype (unless otherwise specified), and any prototype variables not in whatVars will be copied into the new dataset for each generated event and also used to set our PDF parameters. The user can specify a number of events to generate that will override the default. The result is a copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that are not in the prototype will be added as new columns to the generated dataset. Accessing the underlying event generator; Depending on the fit model (if it is difficult to sample), it may be necessary to change generator settings. For the default generator (RooFoamGenerator), the number of samples or cells could be increased by e.g. using myPdf->specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);; The foam generator e.g. has the following config options:; nCell[123N]D; nSample; chatLevel See alsorf902_numgenconfig.C. PyROOT; The RooAbsPdf::generate() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . PyROOT; The RooAbsPdf::prepareMultiGen() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1299 of file RooAbsPdf.cxx. ◆ printMultiline(). void RooAbsPdf::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Print multi line detailed information of this RooAbsPdf. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, and RooResolutionModel.; Definition at line 1100 of file RooAbsPdf.cxx. ◆ printValue(). void RooAbsPdf::printValue ; (; std::ostream & ; os); const. overridevirtual . Print value of p.d.f, also print normalization integral that was last used, if any. ; Reimplemented from Ro",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:152863,Modifiability,config,configuration,152863,"oAddPdf.; Definition at line 586 of file RooAbsPdf.cxx. ◆ selfNormalized(). virtual bool RooAbsPdf::selfNormalized ; (; ); const. inlinevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented in RooHistConstraint, RooIntegralMorph, RooMomentMorph, RooAbsCachedPdf, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendPdf, RooHistPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooResolutionModel, RooSimultaneous, RooWrapperPdf, RooNormalizedPdf, RooFixedProdPdf, and PdfWrapper.; Definition at line 207 of file RooAbsPdf.h. ◆ setActiveNormSet(). void RooAbsPdf::setActiveNormSet ; (; RooArgSet const * ; normSet); const. inlineprivate . Setter for the _normSet member, which should never be set directly. ; Definition at line 284 of file RooAbsPdf.h. ◆ setGeneratorConfig() [1/2]. void RooAbsPdf::setGeneratorConfig ; (; ). Remove the specialized numeric MC generator configuration associated with this object. ; Definition at line 2675 of file RooAbsPdf.cxx. ◆ setGeneratorConfig() [2/2]. void RooAbsPdf::setGeneratorConfig ; (; const RooNumGenConfig & ; config). Set the given configuration as default numeric MC generator configuration for this object. ; Definition at line 2664 of file RooAbsPdf.cxx. ◆ setNormRange(). void RooAbsPdf::setNormRange ; (; const char * ; rangeName). Definition at line 2726 of file RooAbsPdf.cxx. ◆ setNormRangeOverride(). void RooAbsPdf::setNormRangeOverride ; (; const char * ; rangeName). Definition at line 2746 of file RooAbsPdf.cxx. ◆ setTraceCounter(). void RooAbsPdf::setTraceCounter ; (; Int_t ; value, . bool ; allNodes = false . ). Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ; Definition at line 598 of file RooAbsPdf.cxx. ◆ specialGeneratorConfig() [1/2]. RooNumGenConfig * RooAbsPdf::specialGeneratorConfig ; (; ); const. Returns the specialized integrator ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:153051,Modifiability,config,config,153051," is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented in RooHistConstraint, RooIntegralMorph, RooMomentMorph, RooAbsCachedPdf, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendPdf, RooHistPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooResolutionModel, RooSimultaneous, RooWrapperPdf, RooNormalizedPdf, RooFixedProdPdf, and PdfWrapper.; Definition at line 207 of file RooAbsPdf.h. ◆ setActiveNormSet(). void RooAbsPdf::setActiveNormSet ; (; RooArgSet const * ; normSet); const. inlineprivate . Setter for the _normSet member, which should never be set directly. ; Definition at line 284 of file RooAbsPdf.h. ◆ setGeneratorConfig() [1/2]. void RooAbsPdf::setGeneratorConfig ; (; ). Remove the specialized numeric MC generator configuration associated with this object. ; Definition at line 2675 of file RooAbsPdf.cxx. ◆ setGeneratorConfig() [2/2]. void RooAbsPdf::setGeneratorConfig ; (; const RooNumGenConfig & ; config). Set the given configuration as default numeric MC generator configuration for this object. ; Definition at line 2664 of file RooAbsPdf.cxx. ◆ setNormRange(). void RooAbsPdf::setNormRange ; (; const char * ; rangeName). Definition at line 2726 of file RooAbsPdf.cxx. ◆ setNormRangeOverride(). void RooAbsPdf::setNormRangeOverride ; (; const char * ; rangeName). Definition at line 2746 of file RooAbsPdf.cxx. ◆ setTraceCounter(). void RooAbsPdf::setTraceCounter ; (; Int_t ; value, . bool ; allNodes = false . ). Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ; Definition at line 598 of file RooAbsPdf.cxx. ◆ specialGeneratorConfig() [1/2]. RooNumGenConfig * RooAbsPdf::specialGeneratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned ; Definition at line 2623 of file RooAbsPdf.cxx",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:153074,Modifiability,config,configuration,153074,"m. ; Always returns false, unless a PDF overrides this function. ; Reimplemented in RooHistConstraint, RooIntegralMorph, RooMomentMorph, RooAbsCachedPdf, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendPdf, RooHistPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooResolutionModel, RooSimultaneous, RooWrapperPdf, RooNormalizedPdf, RooFixedProdPdf, and PdfWrapper.; Definition at line 207 of file RooAbsPdf.h. ◆ setActiveNormSet(). void RooAbsPdf::setActiveNormSet ; (; RooArgSet const * ; normSet); const. inlineprivate . Setter for the _normSet member, which should never be set directly. ; Definition at line 284 of file RooAbsPdf.h. ◆ setGeneratorConfig() [1/2]. void RooAbsPdf::setGeneratorConfig ; (; ). Remove the specialized numeric MC generator configuration associated with this object. ; Definition at line 2675 of file RooAbsPdf.cxx. ◆ setGeneratorConfig() [2/2]. void RooAbsPdf::setGeneratorConfig ; (; const RooNumGenConfig & ; config). Set the given configuration as default numeric MC generator configuration for this object. ; Definition at line 2664 of file RooAbsPdf.cxx. ◆ setNormRange(). void RooAbsPdf::setNormRange ; (; const char * ; rangeName). Definition at line 2726 of file RooAbsPdf.cxx. ◆ setNormRangeOverride(). void RooAbsPdf::setNormRangeOverride ; (; const char * ; rangeName). Definition at line 2746 of file RooAbsPdf.cxx. ◆ setTraceCounter(). void RooAbsPdf::setTraceCounter ; (; Int_t ; value, . bool ; allNodes = false . ). Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ; Definition at line 598 of file RooAbsPdf.cxx. ◆ specialGeneratorConfig() [1/2]. RooNumGenConfig * RooAbsPdf::specialGeneratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned ; Definition at line 2623 of file RooAbsPdf.cxx. ◆ specialGeneratorConfig() [2/2]. RooNumGenConfig * RooAbsPdf::specialGeneratorCo",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:153120,Modifiability,config,configuration,153120,"m. ; Always returns false, unless a PDF overrides this function. ; Reimplemented in RooHistConstraint, RooIntegralMorph, RooMomentMorph, RooAbsCachedPdf, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendPdf, RooHistPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooResolutionModel, RooSimultaneous, RooWrapperPdf, RooNormalizedPdf, RooFixedProdPdf, and PdfWrapper.; Definition at line 207 of file RooAbsPdf.h. ◆ setActiveNormSet(). void RooAbsPdf::setActiveNormSet ; (; RooArgSet const * ; normSet); const. inlineprivate . Setter for the _normSet member, which should never be set directly. ; Definition at line 284 of file RooAbsPdf.h. ◆ setGeneratorConfig() [1/2]. void RooAbsPdf::setGeneratorConfig ; (; ). Remove the specialized numeric MC generator configuration associated with this object. ; Definition at line 2675 of file RooAbsPdf.cxx. ◆ setGeneratorConfig() [2/2]. void RooAbsPdf::setGeneratorConfig ; (; const RooNumGenConfig & ; config). Set the given configuration as default numeric MC generator configuration for this object. ; Definition at line 2664 of file RooAbsPdf.cxx. ◆ setNormRange(). void RooAbsPdf::setNormRange ; (; const char * ; rangeName). Definition at line 2726 of file RooAbsPdf.cxx. ◆ setNormRangeOverride(). void RooAbsPdf::setNormRangeOverride ; (; const char * ; rangeName). Definition at line 2746 of file RooAbsPdf.cxx. ◆ setTraceCounter(). void RooAbsPdf::setTraceCounter ; (; Int_t ; value, . bool ; allNodes = false . ). Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ; Definition at line 598 of file RooAbsPdf.cxx. ◆ specialGeneratorConfig() [1/2]. RooNumGenConfig * RooAbsPdf::specialGeneratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned ; Definition at line 2623 of file RooAbsPdf.cxx. ◆ specialGeneratorConfig() [2/2]. RooNumGenConfig * RooAbsPdf::specialGeneratorCo",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:153862,Modifiability,config,configuration,153862,"r configuration associated with this object. ; Definition at line 2675 of file RooAbsPdf.cxx. ◆ setGeneratorConfig() [2/2]. void RooAbsPdf::setGeneratorConfig ; (; const RooNumGenConfig & ; config). Set the given configuration as default numeric MC generator configuration for this object. ; Definition at line 2664 of file RooAbsPdf.cxx. ◆ setNormRange(). void RooAbsPdf::setNormRange ; (; const char * ; rangeName). Definition at line 2726 of file RooAbsPdf.cxx. ◆ setNormRangeOverride(). void RooAbsPdf::setNormRangeOverride ; (; const char * ; rangeName). Definition at line 2746 of file RooAbsPdf.cxx. ◆ setTraceCounter(). void RooAbsPdf::setTraceCounter ; (; Int_t ; value, . bool ; allNodes = false . ). Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ; Definition at line 598 of file RooAbsPdf.cxx. ◆ specialGeneratorConfig() [1/2]. RooNumGenConfig * RooAbsPdf::specialGeneratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned ; Definition at line 2623 of file RooAbsPdf.cxx. ◆ specialGeneratorConfig() [2/2]. RooNumGenConfig * RooAbsPdf::specialGeneratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 2636 of file RooAbsPdf.cxx. ◆ Streamer(). void RooAbsPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1PdfBinding< VO, VI >, RooCFunction2PdfBinding< VO, ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:153933,Modifiability,config,configuration,153933,"setGeneratorConfig() [2/2]. void RooAbsPdf::setGeneratorConfig ; (; const RooNumGenConfig & ; config). Set the given configuration as default numeric MC generator configuration for this object. ; Definition at line 2664 of file RooAbsPdf.cxx. ◆ setNormRange(). void RooAbsPdf::setNormRange ; (; const char * ; rangeName). Definition at line 2726 of file RooAbsPdf.cxx. ◆ setNormRangeOverride(). void RooAbsPdf::setNormRangeOverride ; (; const char * ; rangeName). Definition at line 2746 of file RooAbsPdf.cxx. ◆ setTraceCounter(). void RooAbsPdf::setTraceCounter ; (; Int_t ; value, . bool ; allNodes = false . ). Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ; Definition at line 598 of file RooAbsPdf.cxx. ◆ specialGeneratorConfig() [1/2]. RooNumGenConfig * RooAbsPdf::specialGeneratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned ; Definition at line 2623 of file RooAbsPdf.cxx. ◆ specialGeneratorConfig() [2/2]. RooNumGenConfig * RooAbsPdf::specialGeneratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 2636 of file RooAbsPdf.cxx. ◆ Streamer(). void RooAbsPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1PdfBinding< VO, VI >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4PdfBinding< VO, VI1, VI2, ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:154174,Modifiability,config,configuration,154174,"664 of file RooAbsPdf.cxx. ◆ setNormRange(). void RooAbsPdf::setNormRange ; (; const char * ; rangeName). Definition at line 2726 of file RooAbsPdf.cxx. ◆ setNormRangeOverride(). void RooAbsPdf::setNormRangeOverride ; (; const char * ; rangeName). Definition at line 2746 of file RooAbsPdf.cxx. ◆ setTraceCounter(). void RooAbsPdf::setTraceCounter ; (; Int_t ; value, . bool ; allNodes = false . ). Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ; Definition at line 598 of file RooAbsPdf.cxx. ◆ specialGeneratorConfig() [1/2]. RooNumGenConfig * RooAbsPdf::specialGeneratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned ; Definition at line 2623 of file RooAbsPdf.cxx. ◆ specialGeneratorConfig() [2/2]. RooNumGenConfig * RooAbsPdf::specialGeneratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 2636 of file RooAbsPdf.cxx. ◆ Streamer(). void RooAbsPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1PdfBinding< VO, VI >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DPdfBinding, RooFunctorPdfBinding, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooHistConstraint, R",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:154245,Modifiability,config,configuration,154245,"(). void RooAbsPdf::setNormRangeOverride ; (; const char * ; rangeName). Definition at line 2746 of file RooAbsPdf.cxx. ◆ setTraceCounter(). void RooAbsPdf::setTraceCounter ; (; Int_t ; value, . bool ; allNodes = false . ). Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ; Definition at line 598 of file RooAbsPdf.cxx. ◆ specialGeneratorConfig() [1/2]. RooNumGenConfig * RooAbsPdf::specialGeneratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned ; Definition at line 2623 of file RooAbsPdf.cxx. ◆ specialGeneratorConfig() [2/2]. RooNumGenConfig * RooAbsPdf::specialGeneratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 2636 of file RooAbsPdf.cxx. ◆ Streamer(). void RooAbsPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1PdfBinding< VO, VI >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DPdfBinding, RooFunctorPdfBinding, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooHistConstraint, RooIntegralMorph, RooJeffreysPrior, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooMomentMorph, RooNDKeysPdf, RooNonCPEigenDecay, RooNovosibirsk, RooParam",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:154366,Modifiability,config,configuration,154366,"(). void RooAbsPdf::setNormRangeOverride ; (; const char * ; rangeName). Definition at line 2746 of file RooAbsPdf.cxx. ◆ setTraceCounter(). void RooAbsPdf::setTraceCounter ; (; Int_t ; value, . bool ; allNodes = false . ). Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ; Definition at line 598 of file RooAbsPdf.cxx. ◆ specialGeneratorConfig() [1/2]. RooNumGenConfig * RooAbsPdf::specialGeneratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned ; Definition at line 2623 of file RooAbsPdf.cxx. ◆ specialGeneratorConfig() [2/2]. RooNumGenConfig * RooAbsPdf::specialGeneratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 2636 of file RooAbsPdf.cxx. ◆ Streamer(). void RooAbsPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1PdfBinding< VO, VI >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DPdfBinding, RooFunctorPdfBinding, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooHistConstraint, RooIntegralMorph, RooJeffreysPrior, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooMomentMorph, RooNDKeysPdf, RooNonCPEigenDecay, RooNovosibirsk, RooParam",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:154417,Modifiability,config,configuration,154417,"(). void RooAbsPdf::setNormRangeOverride ; (; const char * ; rangeName). Definition at line 2746 of file RooAbsPdf.cxx. ◆ setTraceCounter(). void RooAbsPdf::setTraceCounter ; (; Int_t ; value, . bool ; allNodes = false . ). Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ; Definition at line 598 of file RooAbsPdf.cxx. ◆ specialGeneratorConfig() [1/2]. RooNumGenConfig * RooAbsPdf::specialGeneratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned ; Definition at line 2623 of file RooAbsPdf.cxx. ◆ specialGeneratorConfig() [2/2]. RooNumGenConfig * RooAbsPdf::specialGeneratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 2636 of file RooAbsPdf.cxx. ◆ Streamer(). void RooAbsPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1PdfBinding< VO, VI >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DPdfBinding, RooFunctorPdfBinding, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooHistConstraint, RooIntegralMorph, RooJeffreysPrior, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooMomentMorph, RooNDKeysPdf, RooNonCPEigenDecay, RooNovosibirsk, RooParam",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:159122,Modifiability,config,configuration,159122,orm. RooAbsReal* RooAbsPdf::_norm = nullptr. mutableprotected . Definition at line 319 of file RooAbsPdf.h. ◆ _normMgr. RooObjCacheManager RooAbsPdf::_normMgr. mutableprotected . Definition at line 329 of file RooAbsPdf.h. ◆ _normRange. TString RooAbsPdf::_normRange. protected . Normalization range. ; Definition at line 342 of file RooAbsPdf.h. ◆ _normRangeOverride. TString RooAbsPdf::_normRangeOverride. staticprotected . Definition at line 343 of file RooAbsPdf.h. ◆ _normSet. RooArgSet const* RooAbsPdf::_normSet = nullptr. mutableprotected . Normalization integral (owned by _normMgr) ; Definition at line 320 of file RooAbsPdf.h. ◆ _normSetId. RooFit::UniqueId<RooArgSet>::Value_t RooAbsPdf::_normSetId = RooFit::UniqueId<RooArgSet>::nullval. mutableprivate . ! Unique ID of the currently-active normalization set ; Definition at line 346 of file RooAbsPdf.h. ◆ _rawValue. double RooAbsPdf::_rawValue = 0. mutableprotected . Definition at line 318 of file RooAbsPdf.h. ◆ _selectComp. bool RooAbsPdf::_selectComp = false. protected . Component selection flag for RooAbsPdf::plotCompOn. ; Definition at line 338 of file RooAbsPdf.h. ◆ _specGeneratorConfig. std::unique_ptr<RooNumGenConfig> RooAbsPdf::_specGeneratorConfig. protected . ! MC generator configuration specific for this object ; Definition at line 340 of file RooAbsPdf.h. ◆ _traceCount. Int_t RooAbsPdf::_traceCount = 0. mutableprotected . Number of traces remaining to print. ; Definition at line 335 of file RooAbsPdf.h. ◆ _verboseEval. Int_t RooAbsPdf::_verboseEval = 0. staticprotected . Definition at line 314 of file RooAbsPdf.h. Libraries for RooAbsPdf:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsPdf.h; roofit/roofitcore/src/RooAbsPdf.cxx; /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/master_TMP/pyzdoc/_roofit.pyzdoc. RooAbsPdf. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:41 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:2380,Performance,perform,perform,2380,"e integral over the dependents of the top-level PDF: these are functions with potentially non-trivial Jacobian terms themselves. NoteTherefore, no explicit attempt should be made to normalize the function output in evaluate(). In particular, normalisation constants can be omitted to speed up the function evaluations, and included later in the integration of the PDF (see below), which is rarely called in comparison to the evaluate() function.; In addition, RooAbsPdf objects do not have a static concept of what variables are parameters, and what variables are dependents (which need to be integrated over for a correct PDF normalization). Instead, the choice of normalization is always specified each time a normalized value is requested from the PDF via the getVal() method.; RooAbsPdf manages the entire normalization logic of each PDF with the help of a RooRealIntegral object, which coordinates the integration of a given choice of normalization. By default, RooRealIntegral will perform an entirely numeric integration of all dependents. However, PDFs can advertise one or more (partial) analytical integrals of their function, and these will be used by RooRealIntegral, if it determines that this is safe (i.e., no hidden Jacobian terms, multiplication with other PDFs that have one or more dependents in common, etc).; Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); RooAbsReal::getAnalyticalIntegralvirtual Int_t getAnalyticalIntegral(RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) constInterface function getAnalyticalIntergral advertises the analytical integrals that are supported.Definition RooAbsReal.cxx:368; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; int; should return the analytical integrals that are supported. integSet is the set of dependent",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:3625,Performance,perform,performed,3625,"ian terms, multiplication with other PDFs that have one or more dependents in common, etc).; Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); RooAbsReal::getAnalyticalIntegralvirtual Int_t getAnalyticalIntegral(RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) constInterface function getAnalyticalIntergral advertises the analytical integrals that are supported.Definition RooAbsReal.cxx:368; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; int; should return the analytical integrals that are supported. integSet is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet, and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. Second,; double analyticalIntegral(Int_t code); RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; implements the actual analytical integral(s) advertised by getAnalyticalIntegral(). This function will only be called with codes returned by getAnalyticalIntegral(), except code zero.; The integration range for each dependent to be integrated can be obtained from the dependent's proxy functions min() and max(). Never call these proxy functions for any proxy not known to be a dependent via the integration code. Doing so may be ill-defined, e.g., in case the proxy holds a function, and will trigger an assert. Integrated category dependents should always be summed over all of their states. Direct generation of observables; Distributions for any PDF can be generated with the accept/reject met",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:35107,Performance,cache,cache,35107,";  Equality operator when comparing to another RooAbsArg. ;  ; bool operator== (double value) const;  Equality operator comparing to a double. ;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the special",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:51582,Performance,optimiz,optimizeCacheMode,51582,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void se",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:51642,Performance,cache,cache,51642,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void se",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:51653,Performance,optimiz,optimization,51653,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void se",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:51722,Performance,optimiz,optimizeCacheMode,51722," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAnd",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:51834,Performance,cache,cache,51834," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAnd",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:51845,Performance,optimiz,optimization,51845," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAnd",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:51966,Performance,cache,cacheList,51966,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructo",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:52073,Performance,cache,cached,52073,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructo",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:52198,Performance,cache,cacheList,52198,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void set",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:52336,Performance,cache,cached,52336,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void set",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:52530,Performance,perform,perform,52530,"eChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirt",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:52552,Performance,optimiz,optimization,52552,"eChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirt",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:52851,Performance,cache,cache,52851,"acheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache ()",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:52939,Performance,cache,cache,52939,"rgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:53074,Performance,cache,caches,53074,"list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependen",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:53150,Performance,cache,cache,53150,". ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverl",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:53626,Performance,cache,cacheUniqueSuffix,53626,"ool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ;",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:53806,Performance,cache,cache,53806,"ool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ;",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:67922,Performance,cache,cache,67922,"*name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  The cache manager. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. N",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:68069,Performance,cache,cached,68069,"tion routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  The cache manager. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void fi",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:68479,Performance,cache,cached,68479,"ber points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  The cache manager. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:68520,Performance,cache,cache,68520,"ber points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  The cache manager. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:71747,Performance,perform,perform,71747,"onst RooArgProxy &c, const RooArgProxy &d) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:73794,Performance,optimiz,optimizeDirtyHook,73794,";  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoErr",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:74282,Performance,cache,cached,74282,"id graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRan",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:77309,Performance,cache,cache,77309," _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLe",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:78178,Performance,cache,cache,78178," = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; std::unique_ptr< RooDataSet > generate (RooAbsGenContext &context, const RooArgSet &whatVars, const RooDataSet *prototype, double nEvents, bool verbose, bool randProtoOrder, bool resampleProto, bool skipInit=false, bool extended=false) const;  Internal method. ;  ; void logBatchComputationErrors (std::span< const double > &outputs, std::size_t begin) const;  Scan through outputs and fix+log all nans and negative values. ;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooArgSet &params, bool showConstants=false, const char *label="""", double xmin=0.65, double xmax=0.99, double ymax=0.95, const RooCmdArg *formatCmd=nullptr);  Add a text box with the current parameter values and their errors to the frame. ;  ; void setActiveNormSet (RooArgSet const *normSet) const;  Setter ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:85201,Performance,perform,performed,85201,"vables listed in iset. ; If no nset argument is given the c.d.f normalization is constructed over the integrated observables, so that its maximum value is precisely 1. It is also possible to choose a different normalization for multi-dimensional p.d.f.s: eg. for a pdf f(x,y,z) one can construct a partial cdf c(x,y) that only when integrated itself over z results in a maximum value of 1. To construct such a cdf pass z as argument to the optional nset argument ; Definition at line 2468 of file RooAbsPdf.cxx. ◆ createCdf() [2/2]. RooAbsPdf::createCdf ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over; The following named arguments are accepted . Type of CmdArg Effect on CDF . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanNumCdf() Apply scanning technique if cdf integral involves numeric integration [ default ] . ScanAllCdf() Always apply scanning technique . ScanNoCdf() Never apply scanning technique . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf . PyROOT; The RooAbsPdf::createCdf() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 2490 of file RooAbsPdf.cxx. ◆ createExpectedEventsFunc(). std::u",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:89289,Performance,perform,performed,89289,"his case, the unnormalized PDF \(f(x)\) is normalized by the integral over all ranges \(r_i\): ; \[; p(x) = \frac{f(x)}{\sum_i \int_{r_i} f(x) dx}.; \]. Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on the fly on all observables. . SumCoefRange(const char* name) Set the range in which to interpret the coefficients of RooAddPdf components . NumCPU(int num, int istrat) Parallelize NLL calculation on num CPUs . Strategy Effect . 0 = RooFit::BulkPartition - default Divide events in N equal chunks . 1 = RooFit::Interleave Process event iN in process N. Recommended for binned data with a substantial number of zero-bins, which will be distributed across processes more equitably in this strategy . 2 = RooFit::SimComponents Process each component likelihood of a RooSimultaneous fully in a single process and distribute components over processes. This approach can be beneficial if normalization calculation time dominates the total computation time of a component (since the normalization calculation must be performed in each process in strategies 0 and 1. However beware that if the RooSimultaneous components do not share many parameters this strategy is inefficient: as most minuit-induced likelihood calculations involve changing a single parameter, only 1 of the N processes will be active most of the time if RooSimultaneous components do not share many parameters . 3 = RooFit::Hybrid Follow strategy 0 for all RooSimultaneous components, except those with less than 30 dataset entries, for which strategy 2 is followed. . EvalBackend(std::string const&) Choose a likelihood evaluation backend: . Backend Description . cpu - default New vectorized evaluation mode, using faster math functions and auto-vectorisation. Since ROOT 6.23, this is the default if EvalBackend() is not passed, succeeding the legacy backend. If all RooAbsArg objects in the model support vectorized evaluation, likelihood computations are 2 to 10 times faster than wit",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:91965,Performance,optimiz,optimization,91965,"the fit if all RooAbsArg object in the model support it. . legacy The original likelihood evaluation method. Evaluates the PDF for each single data entry at a time before summing the negative log probabilities. . codegen Experimental - Generates and compiles minimal C++ code for the NLL on-the-fly and wraps it in the returned RooAbsReal. Also generates and compiles the code for the gradient using Automatic Differentiation (AD) with Clad. This analytic gradient is passed to the minimizer, which can result in significant speedups for many-parameter fits, even compared to the cpu backend. However, if one of the RooAbsArg objects in the model does not support the code generation, this backend can't be used. . codegen_no_grad Experimental - Same as codegen, but doesn't generate and compile the gradient code and use the regular numerical differentiation instead. This is expected to be slower, but useful for debugging problems with the analytic gradient. . Optimize(bool flag) Activate constant term optimization (on by default) . SplitRange(bool flag) Use separate fit ranges in a simultaneous fit. Actual range name for each subsample is assumed to be rangeName_indexState, where indexState is the state of the master index category of the simultaneous fit. Using Range(""range""), SplitRange() as switches, different ranges could be set like this: myVariable.setRange(""range_pi0"", 135, 210);; myVariable.setRange(""range_gamma"", 50, 210);; . Constrain(const RooArgSet&pars) For p.d.f.s that contain internal parameter constraint terms (that is usually product PDFs, where one term of the product depends on parameters but not on the observable(s),), only apply constraints to the given subset of parameters. . ExternalConstraints(const RooArgSet& ) Include given external constraints to likelihood by multiplying them with the original likelihood. . GlobalObservables(const RooArgSet&) Define the set of normalization observables to be used for the constraint terms. If none are specified the ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:104059,Performance,perform,performed,104059,"assed to RooAbsPdf::fitTo() (see the documentation of said function to learn more about the interpretation of fits with squared weights). ; [in]doOffsetSee RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const. . Definition at line 793 of file RooAbsPdf.cxx. ◆ extendMode(). virtual ExtendMode RooAbsPdf::extendMode ; (; ); const. inlinevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented in RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendedTerm, RooExtendPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooSimultaneous, RooNormalizedPdf, RooFixedProdPdf, and xRooProjectedPdf.; Definition at line 216 of file RooAbsPdf.h. ◆ fitTo(). template<typename... CmdArgs_t> . RooAbsPdf::fitTo ; (; RooAbsData & ; data, . CmdArgs_t const &... ; cmdArgs . ). inline . Fit PDF to given dataset. ; If dataset is unbinned, an unbinned maximum likelihood is performed. If the dataset is binned, a binned maximum likelihood is performed. By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession.; Parameters. dataReference to a RooAbsData object representing the dataset. ; cmdArgsVariadic template arguments representing optional command arguments. You can pass either an arbitrary number of RooCmdArg instances or a single RooLinkedList that points to the RooCmdArg objects. . ReturnsAn owning pointer to the created RooAbsReal NLL object. . RooFitResult with fit status and parameters if option Save() is used, nullptr otherwise. The user takes ownership of the fit result.; Template Parameters. CmdArgs_tTemplate types for optional command arguments. Can either be an arbitrary number of RooCmdArg or a single RooLinkedList. NoteThis front-end function should not be re-implemented in derived PDF types. If you mean to customize the likelihood fitting routine, you need to override the virtual RooAbs",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:104127,Performance,perform,performed,104127," learn more about the interpretation of fits with squared weights). ; [in]doOffsetSee RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const. . Definition at line 793 of file RooAbsPdf.cxx. ◆ extendMode(). virtual ExtendMode RooAbsPdf::extendMode ; (; ); const. inlinevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented in RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendedTerm, RooExtendPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooSimultaneous, RooNormalizedPdf, RooFixedProdPdf, and xRooProjectedPdf.; Definition at line 216 of file RooAbsPdf.h. ◆ fitTo(). template<typename... CmdArgs_t> . RooAbsPdf::fitTo ; (; RooAbsData & ; data, . CmdArgs_t const &... ; cmdArgs . ). inline . Fit PDF to given dataset. ; If dataset is unbinned, an unbinned maximum likelihood is performed. If the dataset is binned, a binned maximum likelihood is performed. By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession.; Parameters. dataReference to a RooAbsData object representing the dataset. ; cmdArgsVariadic template arguments representing optional command arguments. You can pass either an arbitrary number of RooCmdArg instances or a single RooLinkedList that points to the RooCmdArg objects. . ReturnsAn owning pointer to the created RooAbsReal NLL object. . RooFitResult with fit status and parameters if option Save() is used, nullptr otherwise. The user takes ownership of the fit result.; Template Parameters. CmdArgs_tTemplate types for optional command arguments. Can either be an arbitrary number of RooCmdArg or a single RooLinkedList. NoteThis front-end function should not be re-implemented in derived PDF types. If you mean to customize the likelihood fitting routine, you need to override the virtual RooAbsPdf::fitToImpl() method.; The following named arguments are supported",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:105893,Performance,optimiz,optimization,105893,"mplemented in derived PDF types. If you mean to customize the likelihood fitting routine, you need to override the virtual RooAbsPdf::fitToImpl() method.; The following named arguments are supported:. Type of CmdArg Options to control construction of -log(L) . All command arguments that can also be passed to the NLL creation method. See alsoRooAbsPdf::createNLL(). Options to control flow of fit procedure . Minimizer(""<type>"", ""<algo>"") Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface, but others can be specified (through RooMinimizer interface). . Type Algorithm . Minuit migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve) . Minuit2 migrad, simplex, minimize, scan . GSLMultiMin conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent . GSLSimAn - . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Optimize(bool flag) Activate constant term optimization of test statistic during minimization (on by default) . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, off by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 to 2, default is 1) . MaxCalls(int n) Change maximum number of likelihood function calls from MINUIT (if n <= 0, the default of 500 * #parameters is used) . EvalErrorWall(bool flag=true) When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter to force it out of that region. This can, however, mean that the fitter gets lost in this region. If this happens, try switching it off. . RecoverFromUndefinedRegions(double strength) When PDF is invalid (e.g. parameter in undefined region), try to direct minimiser away from that region. ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:130048,Performance,cache,cached,130048,"re. Parameters. nsetSet of variables to normalise over. . Reimplemented in RooResolutionModel.; Definition at line 419 of file RooAbsPdf.cxx. ◆ getNormIntegral(). const RooAbsReal * RooAbsPdf::getNormIntegral ; (; const RooArgSet & ; nset); const. inline . Definition at line 255 of file RooAbsPdf.h. ◆ getNormObj(). const RooAbsReal * RooAbsPdf::getNormObj ; (; const RooArgSet * ; set, . const RooArgSet * ; iset, . const TNamed * ; rangeName = nullptr . ); const. virtual . Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ; Definition at line 443 of file RooAbsPdf.cxx. ◆ getValV(). double RooAbsPdf::getValV ; (; const RooArgSet * ; nset = nullptr); const. overridevirtual . Return current value, normalized by integrating over the observables in nset. ; If nset is 0, the unnormalized value is returned. All elements of nset must be lvalues.; Unnormalized values are not cached. Doing so would be complicated as _norm->getVal() could spoil the cache and interfere with returning the cached return value. Since unnormalized calls are typically done in integration calls, there is no performance hit. ; Reimplemented from RooAbsReal.; Reimplemented in RooNormalizedPdf, RooResolutionModel, RooMomentMorph, and RooAddPdf.; Definition at line 319 of file RooAbsPdf.cxx. ◆ initGenerator(). void RooAbsPdf::initGenerator ; (; Int_t ; code). virtual . Interface for one-time initialization to setup the generator for the specified code. ; Reimplemented in RooBCPEffDecay, RooBCPGenDecay, RooBMixDecay, RooNonCPEigenDecay, RooBinSamplingPdf, RooMultiVarGaussian, RooProdPdf, and RooProjectedPdf.; Definition at line 1532 of file RooAbsPdf.cxx. ◆ IsA(). TClass * RooAbsPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernst",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:130121,Performance,cache,cache,130121,"olutionModel.; Definition at line 419 of file RooAbsPdf.cxx. ◆ getNormIntegral(). const RooAbsReal * RooAbsPdf::getNormIntegral ; (; const RooArgSet & ; nset); const. inline . Definition at line 255 of file RooAbsPdf.h. ◆ getNormObj(). const RooAbsReal * RooAbsPdf::getNormObj ; (; const RooArgSet * ; set, . const RooArgSet * ; iset, . const TNamed * ; rangeName = nullptr . ); const. virtual . Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ; Definition at line 443 of file RooAbsPdf.cxx. ◆ getValV(). double RooAbsPdf::getValV ; (; const RooArgSet * ; nset = nullptr); const. overridevirtual . Return current value, normalized by integrating over the observables in nset. ; If nset is 0, the unnormalized value is returned. All elements of nset must be lvalues.; Unnormalized values are not cached. Doing so would be complicated as _norm->getVal() could spoil the cache and interfere with returning the cached return value. Since unnormalized calls are typically done in integration calls, there is no performance hit. ; Reimplemented from RooAbsReal.; Reimplemented in RooNormalizedPdf, RooResolutionModel, RooMomentMorph, and RooAddPdf.; Definition at line 319 of file RooAbsPdf.cxx. ◆ initGenerator(). void RooAbsPdf::initGenerator ; (; Int_t ; code). virtual . Interface for one-time initialization to setup the generator for the specified code. ; Reimplemented in RooBCPEffDecay, RooBCPGenDecay, RooBMixDecay, RooNonCPEigenDecay, RooBinSamplingPdf, RooMultiVarGaussian, RooProdPdf, and RooProjectedPdf.; Definition at line 1532 of file RooAbsPdf.cxx. ◆ IsA(). TClass * RooAbsPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFu",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:130160,Performance,cache,cached,130160,"olutionModel.; Definition at line 419 of file RooAbsPdf.cxx. ◆ getNormIntegral(). const RooAbsReal * RooAbsPdf::getNormIntegral ; (; const RooArgSet & ; nset); const. inline . Definition at line 255 of file RooAbsPdf.h. ◆ getNormObj(). const RooAbsReal * RooAbsPdf::getNormObj ; (; const RooArgSet * ; set, . const RooArgSet * ; iset, . const TNamed * ; rangeName = nullptr . ); const. virtual . Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ; Definition at line 443 of file RooAbsPdf.cxx. ◆ getValV(). double RooAbsPdf::getValV ; (; const RooArgSet * ; nset = nullptr); const. overridevirtual . Return current value, normalized by integrating over the observables in nset. ; If nset is 0, the unnormalized value is returned. All elements of nset must be lvalues.; Unnormalized values are not cached. Doing so would be complicated as _norm->getVal() could spoil the cache and interfere with returning the cached return value. Since unnormalized calls are typically done in integration calls, there is no performance hit. ; Reimplemented from RooAbsReal.; Reimplemented in RooNormalizedPdf, RooResolutionModel, RooMomentMorph, and RooAddPdf.; Definition at line 319 of file RooAbsPdf.cxx. ◆ initGenerator(). void RooAbsPdf::initGenerator ; (; Int_t ; code). virtual . Interface for one-time initialization to setup the generator for the specified code. ; Reimplemented in RooBCPEffDecay, RooBCPGenDecay, RooBMixDecay, RooNonCPEigenDecay, RooBinSamplingPdf, RooMultiVarGaussian, RooProdPdf, and RooProjectedPdf.; Definition at line 1532 of file RooAbsPdf.cxx. ◆ IsA(). TClass * RooAbsPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFu",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:130259,Performance,perform,performance,130259,"::getNormIntegral ; (; const RooArgSet & ; nset); const. inline . Definition at line 255 of file RooAbsPdf.h. ◆ getNormObj(). const RooAbsReal * RooAbsPdf::getNormObj ; (; const RooArgSet * ; set, . const RooArgSet * ; iset, . const TNamed * ; rangeName = nullptr . ); const. virtual . Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ; Definition at line 443 of file RooAbsPdf.cxx. ◆ getValV(). double RooAbsPdf::getValV ; (; const RooArgSet * ; nset = nullptr); const. overridevirtual . Return current value, normalized by integrating over the observables in nset. ; If nset is 0, the unnormalized value is returned. All elements of nset must be lvalues.; Unnormalized values are not cached. Doing so would be complicated as _norm->getVal() could spoil the cache and interfere with returning the cached return value. Since unnormalized calls are typically done in integration calls, there is no performance hit. ; Reimplemented from RooAbsReal.; Reimplemented in RooNormalizedPdf, RooResolutionModel, RooMomentMorph, and RooAddPdf.; Definition at line 319 of file RooAbsPdf.cxx. ◆ initGenerator(). void RooAbsPdf::initGenerator ; (; Int_t ; code). virtual . Interface for one-time initialization to setup the generator for the specified code. ; Reimplemented in RooBCPEffDecay, RooBCPGenDecay, RooBMixDecay, RooNonCPEigenDecay, RooBinSamplingPdf, RooMultiVarGaussian, RooProdPdf, and RooProjectedPdf.; Definition at line 1532 of file RooAbsPdf.cxx. ◆ IsA(). TClass * RooAbsPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1PdfBinding< VO, VI >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3PdfBinding< VO, VI1, VI2, V",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:139528,Performance,perform,performed,139528,"umEvent@ NumEventDefinition RooAbsReal.h:276; RooAbsReal::Relative@ RelativeDefinition RooAbsReal.h:276; RooAbsReal::Raw@ RawDefinition RooAbsReal.h:276. Reimplemented from RooAbsReal.; Reimplemented in RooSimultaneous.; Definition at line 2221 of file RooAbsPdf.cxx. ◆ plotOn() [3/3]. RooPlot * RooAbsPdf::plotOn ; (; RooPlot * ; frame, . RooLinkedList & ; cmdList . ); const. overridevirtual . Plot (project) PDF on specified frame. . If a PDF is plotted in an empty frame, it will show a unit-normalized curve in the frame variable. When projecting a multi- dimensional PDF onto the frame axis, hidden parameters are taken are taken at their current value.; If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projection integrated over all variables that were present in the shown dataset (except for the one on the x-axis). The normalization of the curve will be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; If a PDF is plotted in a frame showing a dataset after a fit, the above happens, but the PDF will be drawn and normalised only in the fit range. If this is not desired, plotting and normalisation range can be overridden using Range() and NormRange() as documented in the table below. This function takes the following named arguments (for more arguments, see also RooAbsReal::plotOn(RooPlot*,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; const RooCmdArg&) const ). Type of argument Controlling normalisation . NormRange(const char* name) Calculate curve normalization w.r.t. specified range[s]. See the tutorial rf212_plottingInRanges_blinding.C NoteSetting a Range() by default also sets a NormRange() on the same range, meaning that the PDF is plotted and normalised in the same range. Overriding this can be useful if the PDF was fit in limit",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:145394,Performance,perform,perform,145394,"to y=0 at end points of curve . Precision(double eps) Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. A higher precision will result in more and more densely spaced curve points. A negative precision value will disable adaptive point spacing and restrict sampling to the grid point of points defined by the binning of the plotted observable (recommended for expensive functions such as profile likelihoods) . Invisible(bool flag) Add curve to frame, but do not display. Useful in combination AddTo() . VisualizeError(const RooFitResult& fitres, double Z=1, bool linearMethod=true) Visualize the uncertainty on the parameters, as given in fitres, at 'Z' sigma. The linear method is fast but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made. Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate NoteTo include the uncertainty from the expected number of events, the Normalization() argument with ScaleType RooAbsReal::RelativeExpected has to be passed, e.g. pdf.plotOn(frame, VisualizeError(fitResult), Normalization(1.0, RooAbsReal::RelativeExpected));; RooAbsReal::RelativeExpected@ RelativeExpectedDefinition RooAbsReal.h:276. VisualizeError(const RooFitResult& fitres, const RooArgSet& param, double Z=1, bool linearMethod=true) Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma . Reimplemented from RooAbsReal.; Reimplemented in RooSimultaneous, and RooSimultaneous.; Definition at line 1937 of file RooAbsPdf.cxx. ◆ prepareMultiGen(). RooAbsPdf::prepareMultiGen ; (; const RooArgSet & ; whatVars, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {} . ). Prepare GenSpec configuration object for effi",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:146585,Performance,perform,perform,146585,"nt with ScaleType RooAbsReal::RelativeExpected has to be passed, e.g. pdf.plotOn(frame, VisualizeError(fitResult), Normalization(1.0, RooAbsReal::RelativeExpected));; RooAbsReal::RelativeExpected@ RelativeExpectedDefinition RooAbsReal.h:276. VisualizeError(const RooFitResult& fitres, const RooArgSet& param, double Z=1, bool linearMethod=true) Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma . Reimplemented from RooAbsReal.; Reimplemented in RooSimultaneous, and RooSimultaneous.; Definition at line 1937 of file RooAbsPdf.cxx. ◆ prepareMultiGen(). RooAbsPdf::prepareMultiGen ; (; const RooArgSet & ; whatVars, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {} . ). Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ; NoteThis method does not perform any generation. To generate according to generations specification call RooAbsPdf::generate(RooAbsPdf::GenSpec&) const. Details copied from RooAbsPdf::generate():; Generate the specified number of events or expectedEvents() if not specified. Parameters. [in]whatVarsChoose variables in which to generate events. Variables not listed here will remain constant and not be used for event generation. ; [in]arg1,arg2,arg3,arg4,arg5,arg6Optional RooCmdArg() to change behaviour of generate(). . ReturnsRooDataSet *, owned by caller.; Any variables of this PDF that are not in whatVars will use their current values and be treated as fixed parameters. Returns zero in case of an error. Type of CmdArg Effect on generate . Name(const char* name) Name of the output dataset . Verbose(bool flag) Print informational messages during event generation . NumEvents(int nevt) Generate specified number of events . Extended() If no number of events to be generated is given, use expected number of events ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:151303,Performance,cache,cache,151303,". TString ; indent = """" . ); const. overridevirtual . Print multi line detailed information of this RooAbsPdf. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, and RooResolutionModel.; Definition at line 1100 of file RooAbsPdf.cxx. ◆ printValue(). void RooAbsPdf::printValue ; (; std::ostream & ; os); const. overridevirtual . Print value of p.d.f, also print normalization integral that was last used, if any. ; Reimplemented from RooPrintable.; Definition at line 1081 of file RooAbsPdf.cxx. ◆ randomizeProtoOrder(). Int_t * RooAbsPdf::randomizeProtoOrder ; (; Int_t ; nProto, . Int_t ; nGen, . bool ; resample = false . ); const. protected . Return lookup table with randomized order for nProto prototype events. ; Definition at line 1485 of file RooAbsPdf.cxx. ◆ redirectServersHook(). bool RooAbsPdf::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overrideprotectedvirtual . The cache manager. ; Hook function intercepting redirectServer calls.; Discard current normalization object if any server is redirected ; Reimplemented from RooAbsArg.; Reimplemented in RooAddPdf, RooProdPdf, RooGenericPdf, RooResolutionModel, and RooProjectedPdf.; Definition at line 2768 of file RooAbsPdf.cxx. ◆ resetErrorCounters(). void RooAbsPdf::resetErrorCounters ; (; Int_t ; resetValue = 10). virtual . Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ; Reimplemented in RooAddModel, and RooAddPdf.; Definition at line 586 of file RooAbsPdf.cxx. ◆ selfNormalized(). virtual bool RooAbsPdf::selfNormalized ; (; ); const. inlinevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented in RooHistConstraint, RooIntegralMorph, RooMomentMorph, RooAbsCachedPdf, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExte",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:156126,Performance,cache,cached,156126,"GExpModel, RooHistConstraint, RooIntegralMorph, RooJeffreysPrior, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooMomentMorph, RooNDKeysPdf, RooNonCPEigenDecay, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooTFnPdfBinding, RooUniform, RooVoigtian, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooCachedPdf, RooEfficiency, RooEffProd, RooExtendedTerm, RooExtendPdf, RooFFTConvPdf, RooGenericPdf, RooHistPdf, RooMultiVarGaussian, RooNumConvPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooResolutionModel, RooSimultaneous, RooTruthModel, RooWrapperPdf, and RooNonCentralChiSquare. ◆ StreamerNVirtual(). void RooAbsPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 351 of file RooAbsPdf.h. ◆ syncNormalization(). bool RooAbsPdf::syncNormalization ; (; const RooArgSet * ; nset, . bool ; adjustProxies = true . ); const. protectedvirtual . Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ; If not, the cached normalization integral (if any) is deleted and a new integral is constructed for use with 'nset'. Elements in 'nset' can be discrete and real, but must be lvalues.; For functions that declare to be self-normalized by overloading the selfNormalized() function, a unit normalization is always constructed. ; Definition at line 481 of file RooAbsPdf.cxx. ◆ traceEvalPdf(). bool RooAbsPdf::traceEvalPdf ; (; double ; value); const. private . Check that passed value is positive and not 'not-a-number'. ; If not, print an error, until the error counter reaches its set maximum. ; Definition at line 384 of file RooAbsPdf.cxx. ◆ verboseEval() [1/2]. Int_t RooAbsPdf::verboseEval ; (; ). static . Return global level of verbosity for p.d.f. evaluations. ; Definition at line 2418 of file RooAbsPdf.cxx. ◆ verboseEval() [2/2]. void RooAbsPdf::verboseEval ; (; Int_t ; stat). static . Change global level of verbosity for p.d.f. ev",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:156214,Performance,cache,cached,156214,"y, RooLognormal, RooMomentMorph, RooNDKeysPdf, RooNonCPEigenDecay, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooTFnPdfBinding, RooUniform, RooVoigtian, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooCachedPdf, RooEfficiency, RooEffProd, RooExtendedTerm, RooExtendPdf, RooFFTConvPdf, RooGenericPdf, RooHistPdf, RooMultiVarGaussian, RooNumConvPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooResolutionModel, RooSimultaneous, RooTruthModel, RooWrapperPdf, and RooNonCentralChiSquare. ◆ StreamerNVirtual(). void RooAbsPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 351 of file RooAbsPdf.h. ◆ syncNormalization(). bool RooAbsPdf::syncNormalization ; (; const RooArgSet * ; nset, . bool ; adjustProxies = true . ); const. protectedvirtual . Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ; If not, the cached normalization integral (if any) is deleted and a new integral is constructed for use with 'nset'. Elements in 'nset' can be discrete and real, but must be lvalues.; For functions that declare to be self-normalized by overloading the selfNormalized() function, a unit normalization is always constructed. ; Definition at line 481 of file RooAbsPdf.cxx. ◆ traceEvalPdf(). bool RooAbsPdf::traceEvalPdf ; (; double ; value); const. private . Check that passed value is positive and not 'not-a-number'. ; If not, print an error, until the error counter reaches its set maximum. ; Definition at line 384 of file RooAbsPdf.cxx. ◆ verboseEval() [1/2]. Int_t RooAbsPdf::verboseEval ; (; ). static . Return global level of verbosity for p.d.f. evaluations. ; Definition at line 2418 of file RooAbsPdf.cxx. ◆ verboseEval() [2/2]. void RooAbsPdf::verboseEval ; (; Int_t ; stat). static . Change global level of verbosity for p.d.f. evaluations. ; Definition at line 2408 of file RooAbsPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAbsReal. ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:2602,Safety,safe,safe,2602,"eTherefore, no explicit attempt should be made to normalize the function output in evaluate(). In particular, normalisation constants can be omitted to speed up the function evaluations, and included later in the integration of the PDF (see below), which is rarely called in comparison to the evaluate() function.; In addition, RooAbsPdf objects do not have a static concept of what variables are parameters, and what variables are dependents (which need to be integrated over for a correct PDF normalization). Instead, the choice of normalization is always specified each time a normalized value is requested from the PDF via the getVal() method.; RooAbsPdf manages the entire normalization logic of each PDF with the help of a RooRealIntegral object, which coordinates the integration of a given choice of normalization. By default, RooRealIntegral will perform an entirely numeric integration of all dependents. However, PDFs can advertise one or more (partial) analytical integrals of their function, and these will be used by RooRealIntegral, if it determines that this is safe (i.e., no hidden Jacobian terms, multiplication with other PDFs that have one or more dependents in common, etc).; Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); RooAbsReal::getAnalyticalIntegralvirtual Int_t getAnalyticalIntegral(RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) constInterface function getAnalyticalIntergral advertises the analytical integrals that are supported.Definition RooAbsReal.cxx:368; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; int; should return the analytical integrals that are supported. integSet is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet, ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:17681,Safety,safe,safely,17681,"onst;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const ov",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:71763,Safety,sanity check,sanity check,71763,"onst RooArgProxy &c, const RooArgProxy &d) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:71795,Safety,safe,safe,71795,"onst RooArgProxy &c, const RooArgProxy &d) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:100123,Safety,avoid,avoid,100123,", . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]sumEntriesThe number of observed events. ; [in]nsetThe normalization set when asking the pdf for the expected number of events. ; [in]observedSumW2The number of observed events when weighting with squared weights. If non-zero, the weight-squared error correction is applied to the extended term. ; [in]doOffsetOffset the extended term by a counterterm where the expected number of events equals the observed number of events. This constant shift results in a term closer to zero that is approximately chi-square distributed. It is useful to do this also when summing multiple NLL terms to avoid numeric precision loss that happens if you sum multiple terms of different orders of magnitude. The weight-squared error correction works as follows: adjust poisson such that estimate of \(N_\mathrm{expect}\) stays at the same value, but has a different variance, rescale both the observed and expected count of the Poisson with a factor \( \sum w_{i} / \sum w_{i}^2 \) (the effective weight of the Poisson term), i.e., change \(\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\) to \( \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \), weighted by the effective weight \( \sum w_{i}^2 / \sum w_{i} \) in the likelihood. Since here we compute the likelihood with the weight square, we need to multiply by the square of the effective weight:; \( W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \) : effective expected entries; \( W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \) : e",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:132608,Safety,safe,safely,132608,"genDecay, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooTFnPdfBinding, RooUniform, RooVoigtian, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooCachedPdf, RooEfficiency, RooEffProd, RooExtendedTerm, RooExtendPdf, RooFFTConvPdf, RooGenericPdf, RooHistPdf, RooMultiVarGaussian, RooNumConvPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooResolutionModel, RooSimultaneous, RooTruthModel, RooWrapperPdf, and RooNonCentralChiSquare.; Definition at line 351 of file RooAbsPdf.h. ◆ isActiveNormSet(). bool RooAbsPdf::isActiveNormSet ; (; RooArgSet const * ; normSet); const. inlineprotected . Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ; Definition at line 299 of file RooAbsPdf.h. ◆ isDirectGenSafe(). bool RooAbsPdf::isDirectGenSafe ; (; const RooAbsArg & ; arg); const. virtual . Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ; Observables on which a PDF depends via more than route are not safe for use with internal generators because they introduce correlations not known to the internal generator ; Reimplemented in RooAbsAnaConvPdf, RooAddModel, RooBinSamplingPdf, and RooProdPdf.; Definition at line 1557 of file RooAbsPdf.cxx. ◆ logBatchComputationErrors(). void RooAbsPdf::logBatchComputationErrors ; (; std::span< const double > & ; outputs, . std::size_t ; begin . ); const. private . Scan through outputs and fix+log all nans and negative values. ; Parameters. [in,out]outputsArray to be scanned & fixed. ; [in]beginBegin of event range. Only needed to print the correct event number where the error occurred. . Definition at line 654 of file RooAbsPdf.cxx. ◆ mustBeExtended(). bool RooAbsPdf::mustBeExtended ; (; ); const. inline . If true PDF must provide extended likelihood term. ; Definition at line 222 of file RooAbsPdf.h. ◆ normalizeWithNaNPacking().",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:132753,Safety,safe,safe,132753,"dPdf, RooEfficiency, RooEffProd, RooExtendedTerm, RooExtendPdf, RooFFTConvPdf, RooGenericPdf, RooHistPdf, RooMultiVarGaussian, RooNumConvPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooResolutionModel, RooSimultaneous, RooTruthModel, RooWrapperPdf, and RooNonCentralChiSquare.; Definition at line 351 of file RooAbsPdf.h. ◆ isActiveNormSet(). bool RooAbsPdf::isActiveNormSet ; (; RooArgSet const * ; normSet); const. inlineprotected . Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ; Definition at line 299 of file RooAbsPdf.h. ◆ isDirectGenSafe(). bool RooAbsPdf::isDirectGenSafe ; (; const RooAbsArg & ; arg); const. virtual . Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ; Observables on which a PDF depends via more than route are not safe for use with internal generators because they introduce correlations not known to the internal generator ; Reimplemented in RooAbsAnaConvPdf, RooAddModel, RooBinSamplingPdf, and RooProdPdf.; Definition at line 1557 of file RooAbsPdf.cxx. ◆ logBatchComputationErrors(). void RooAbsPdf::logBatchComputationErrors ; (; std::span< const double > & ; outputs, . std::size_t ; begin . ); const. private . Scan through outputs and fix+log all nans and negative values. ; Parameters. [in,out]outputsArray to be scanned & fixed. ; [in]beginBegin of event range. Only needed to print the correct event number where the error occurred. . Definition at line 654 of file RooAbsPdf.cxx. ◆ mustBeExtended(). bool RooAbsPdf::mustBeExtended ; (; ); const. inline . If true PDF must provide extended likelihood term. ; Definition at line 222 of file RooAbsPdf.h. ◆ normalizeWithNaNPacking(). double RooAbsPdf::normalizeWithNaNPacking ; (; double ; rawVal, . double ; normVal . ); const. protected . Definition at line 282 of file RooAbsPdf.cxx. ◆ normRange(). const char * RooA",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:55328,Security,hash,hash,55328,"ED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:2216,Testability,log,logic,2216,"PDF if any of its variables are functions instead of variables. In such cases, the normalization of the composite PDF may not simply be integral over the dependents of the top-level PDF: these are functions with potentially non-trivial Jacobian terms themselves. NoteTherefore, no explicit attempt should be made to normalize the function output in evaluate(). In particular, normalisation constants can be omitted to speed up the function evaluations, and included later in the integration of the PDF (see below), which is rarely called in comparison to the evaluate() function.; In addition, RooAbsPdf objects do not have a static concept of what variables are parameters, and what variables are dependents (which need to be integrated over for a correct PDF normalization). Instead, the choice of normalization is always specified each time a normalized value is requested from the PDF via the getVal() method.; RooAbsPdf manages the entire normalization logic of each PDF with the help of a RooRealIntegral object, which coordinates the integration of a given choice of normalization. By default, RooRealIntegral will perform an entirely numeric integration of all dependents. However, PDFs can advertise one or more (partial) analytical integrals of their function, and these will be used by RooRealIntegral, if it determines that this is safe (i.e., no hidden Jacobian terms, multiplication with other PDFs that have one or more dependents in common, etc).; Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); RooAbsReal::getAnalyticalIntegralvirtual Int_t getAnalyticalIntegral(RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) constInterface function getAnalyticalIntergral advertises the analytical integrals that are supported.Definition RooAbsReal.cxx:368; RooArgSetRooArgSet is a container object that can hold multiple RooAbsAr",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:4438,Testability,assert,assert,4438,"ion is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet, and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. Second,; double analyticalIntegral(Int_t code); RooAbsReal::analyticalIntegralvirtual double analyticalIntegral(Int_t code, const char *rangeName=nullptr) constImplements the actual analytical integral(s) advertised by getAnalyticalIntegral.Definition RooAbsReal.cxx:394; implements the actual analytical integral(s) advertised by getAnalyticalIntegral(). This function will only be called with codes returned by getAnalyticalIntegral(), except code zero.; The integration range for each dependent to be integrated can be obtained from the dependent's proxy functions min() and max(). Never call these proxy functions for any proxy not known to be a dependent via the integration code. Doing so may be ill-defined, e.g., in case the proxy holds a function, and will trigger an assert. Integrated category dependents should always be summed over all of their states. Direct generation of observables; Distributions for any PDF can be generated with the accept/reject method, but for certain PDFs, more efficient methods may be implemented. To implement direct generation of one or more observables, two functions need to be implemented, similar to those for analytical integrals:; Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) constLoad generatedVars with the subset of directVars that we can generate events for, and return a code t...Definition RooAbsPdf.cxx:1522; and void generateEvent(Int_t code); RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; The firs",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:5943,Testability,assert,assert,5943,"AbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) constLoad generatedVars with the subset of directVars that we can generate events for, and return a code t...Definition RooAbsPdf.cxx:1522; and void generateEvent(Int_t code); RooAbsPdf::generateEventvirtual void generateEvent(Int_t code)Interface for generation of an event using the algorithm corresponding to the specified code.Definition RooAbsPdf.cxx:1544; The first function advertises observables, for which distributions can be generated, similar to the way analytical integrals are advertised. The second function implements the actual generator for the advertised observables.; The generated dependent values should be stored in the proxy objects. For this, the assignment operator can be used (i.e. xProxy = 3.0 ). Never call assign to any proxy not known to be a dependent via the generation code. Doing so may be ill-defined, e.g. in case the proxy holds a function, and will trigger an assert. Batched function evaluations (Advanced usage); To speed up computations with large numbers of data events in unbinned fits, it is beneficial to override doEval(). Like this, large spans of computations can be done, without having to call evaluate() for each single data event. doEval() should execute the same computation as evaluate(), but it may choose an implementation that is capable of SIMD computations. If doEval is not implemented, the classic and slower evaluate() will be called for each data event. PyROOT; Some member functions of RooAbsPdf that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooAbsPdf::fitTo, RooAbsPdf::plotOn, RooAbsPdf::generate, RooAbsPdf::paramOn, RooAbsPdf::createCdf, RooAbsPdf::generateBinned, RooAbsPdf::prepareMultiGen and RooAbsPdf::createNLL. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; pdf.fitTo(data, ROOT.RooFit.Range(""r1"")); ; # With ke",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:10957,Testability,log,log,10957,"< RooAbsReal > createCdf (const RooArgSet &iset, const RooArgSet &nset=RooArgSet());  Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; virtual std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; virtual double expectedEvents (const RooArgSet *nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given num",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:11898,Testability,log,log,11898,"(RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; virtual double expectedEvents (const RooArgSet *nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; virtual ExtendMode extendMode () const;  Returns ability of PDF to provide extended likelihood terms. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:12164,Testability,log,log,12164," p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; virtual double expectedEvents (const RooArgSet *nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; virtual ExtendMode extendMode () const;  Returns ability of PDF to provide extended likelihood terms. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > gen",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:16490,Testability,log,log,16490,"ents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual void initGenerator (Int_t code);  I",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:16591,Testability,log,log,16591,"ents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet const &, RooArgSet &) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual void initGenerator (Int_t code);  I",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:33075,Testability,log,logEvalError,33075,"ble. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; TClass * IsA () const override;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override;  Equality operator when comparing to ano",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:43872,Testability,test,testArg,43872,"izTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:43996,Testability,test,testArg,43996,"izTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:44078,Testability,test,testArg,44078,"am. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:44202,Testability,test,testArg,44202,"am. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:44306,Testability,test,testArg,44306,") const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::ostream &os, const char *indent="""", const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; virtual void printCompactTreeHook (std::ostream &os",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:52100,Testability,test,test,52100,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructo",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:52363,Testability,test,test,52363,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void set",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:64536,Testability,log,logging,64536,");  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static vo",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:64597,Testability,log,logEvalError,64597,"ls. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:64758,Testability,log,logging,64758,"ls. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:64818,Testability,log,logging,64818,"ls. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:64930,Testability,log,logged,64930,"Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:65093,Testability,log,logged,65093,"();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get st",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:65224,Testability,log,logging,65224,"  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bo",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:78618,Testability,log,logBatchComputationErrors,78618,"ttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; std::unique_ptr< RooDataSet > generate (RooAbsGenContext &context, const RooArgSet &whatVars, const RooDataSet *prototype, double nEvents, bool verbose, bool randProtoOrder, bool resampleProto, bool skipInit=false, bool extended=false) const;  Internal method. ;  ; void logBatchComputationErrors (std::span< const double > &outputs, std::size_t begin) const;  Scan through outputs and fix+log all nans and negative values. ;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooArgSet &params, bool showConstants=false, const char *label="""", double xmin=0.65, double xmax=0.99, double ymax=0.95, const RooCmdArg *formatCmd=nullptr);  Add a text box with the current parameter values and their errors to the frame. ;  ; void setActiveNormSet (RooArgSet const *normSet) const;  Setter for the _normSet member, which should never be set directly. ;  ; bool traceEvalPdf (double value) const;  Check that passed value is positive and not 'not-a-number'. ;  . Private Attributes; RooFit::UniqueId< RooArgSet >::Value_t _normSetId = RooFit::UniqueId<RooArgSet>::nullval;  ! Unique ID of the currently-active normalization set ;  . Friends; class RooAbsReal;  ; class RooChi2Var;  ; class RooMCStudy;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:78737,Testability,log,log,78737,"ttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; std::unique_ptr< RooDataSet > generate (RooAbsGenContext &context, const RooArgSet &whatVars, const RooDataSet *prototype, double nEvents, bool verbose, bool randProtoOrder, bool resampleProto, bool skipInit=false, bool extended=false) const;  Internal method. ;  ; void logBatchComputationErrors (std::span< const double > &outputs, std::size_t begin) const;  Scan through outputs and fix+log all nans and negative values. ;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooArgSet &params, bool showConstants=false, const char *label="""", double xmin=0.65, double xmax=0.99, double ymax=0.95, const RooCmdArg *formatCmd=nullptr);  Add a text box with the current parameter values and their errors to the frame. ;  ; void setActiveNormSet (RooArgSet const *normSet) const;  Setter for the _normSet member, which should never be set directly. ;  ; bool traceEvalPdf (double value) const;  Check that passed value is positive and not 'not-a-number'. ;  . Private Attributes; RooFit::UniqueId< RooArgSet >::Value_t _normSetId = RooFit::UniqueId<RooArgSet>::nullval;  ! Unique ID of the currently-active normalization set ;  . Friends; class RooAbsReal;  ; class RooChi2Var;  ; class RooMCStudy;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:79798,Testability,test,testArg,79798," text box with the current parameter values and their errors to the frame. ;  ; void setActiveNormSet (RooArgSet const *normSet) const;  Setter for the _normSet member, which should never be set directly. ;  ; bool traceEvalPdf (double value) const;  Check that passed value is positive and not 'not-a-number'. ;  . Private Attributes; RooFit::UniqueId< RooArgSet >::Value_t _normSetId = RooFit::UniqueId<RooArgSet>::nullval;  ! Unique ID of the currently-active normalization set ;  . Friends; class RooAbsReal;  ; class RooChi2Var;  ; class RooMCStudy;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . #include <RooAbsPdf.h>. Inheritance diagram for RooAbsPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ExtendMode. enum RooAbsPdf::ExtendMode. EnumeratorCanNotBeExtended ; CanBeExtended ; MustBeExtended . Definition at line 212 of file RooAbsPdf.h. Constructor & Destructor Documentation. ◆ RooAbsPdf() [1/4]. RooAbsPdf::RooAbsPdf ; (; ). Default constructor. ; Definition at line 230 of file RooAbsPdf.cxx. ◆ RooAbsPdf() [2/4]. RooAbsPdf::RooAbsPdf ; (; ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:79845,Testability,test,testArg,79845," text box with the current parameter values and their errors to the frame. ;  ; void setActiveNormSet (RooArgSet const *normSet) const;  Setter for the _normSet member, which should never be set directly. ;  ; bool traceEvalPdf (double value) const;  Check that passed value is positive and not 'not-a-number'. ;  . Private Attributes; RooFit::UniqueId< RooArgSet >::Value_t _normSetId = RooFit::UniqueId<RooArgSet>::nullval;  ! Unique ID of the currently-active normalization set ;  . Friends; class RooAbsReal;  ; class RooChi2Var;  ; class RooMCStudy;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . #include <RooAbsPdf.h>. Inheritance diagram for RooAbsPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ExtendMode. enum RooAbsPdf::ExtendMode. EnumeratorCanNotBeExtended ; CanBeExtended ; MustBeExtended . Definition at line 212 of file RooAbsPdf.h. Constructor & Destructor Documentation. ◆ RooAbsPdf() [1/4]. RooAbsPdf::RooAbsPdf ; (; ). Default constructor. ; Definition at line 230 of file RooAbsPdf.cxx. ◆ RooAbsPdf() [2/4]. RooAbsPdf::RooAbsPdf ; (; ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:79875,Testability,test,testArg,79875," text box with the current parameter values and their errors to the frame. ;  ; void setActiveNormSet (RooArgSet const *normSet) const;  Setter for the _normSet member, which should never be set directly. ;  ; bool traceEvalPdf (double value) const;  Check that passed value is positive and not 'not-a-number'. ;  . Private Attributes; RooFit::UniqueId< RooArgSet >::Value_t _normSetId = RooFit::UniqueId<RooArgSet>::nullval;  ! Unique ID of the currently-active normalization set ;  . Friends; class RooAbsReal;  ; class RooChi2Var;  ; class RooMCStudy;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . #include <RooAbsPdf.h>. Inheritance diagram for RooAbsPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ExtendMode. enum RooAbsPdf::ExtendMode. EnumeratorCanNotBeExtended ; CanBeExtended ; MustBeExtended . Definition at line 212 of file RooAbsPdf.h. Constructor & Destructor Documentation. ◆ RooAbsPdf() [1/4]. RooAbsPdf::RooAbsPdf ; (; ). Default constructor. ; Definition at line 230 of file RooAbsPdf.cxx. ◆ RooAbsPdf() [2/4]. RooAbsPdf::RooAbsPdf ; (; ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:79926,Testability,test,testArg,79926," text box with the current parameter values and their errors to the frame. ;  ; void setActiveNormSet (RooArgSet const *normSet) const;  Setter for the _normSet member, which should never be set directly. ;  ; bool traceEvalPdf (double value) const;  Check that passed value is positive and not 'not-a-number'. ;  . Private Attributes; RooFit::UniqueId< RooArgSet >::Value_t _normSetId = RooFit::UniqueId<RooArgSet>::nullval;  ! Unique ID of the currently-active normalization set ;  . Friends; class RooAbsReal;  ; class RooChi2Var;  ; class RooMCStudy;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . #include <RooAbsPdf.h>. Inheritance diagram for RooAbsPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ExtendMode. enum RooAbsPdf::ExtendMode. EnumeratorCanNotBeExtended ; CanBeExtended ; MustBeExtended . Definition at line 212 of file RooAbsPdf.h. Constructor & Destructor Documentation. ◆ RooAbsPdf() [1/4]. RooAbsPdf::RooAbsPdf ; (; ). Default constructor. ; Definition at line 230 of file RooAbsPdf.cxx. ◆ RooAbsPdf() [2/4]. RooAbsPdf::RooAbsPdf ; (; ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:86920,Testability,log,log,86920,"rpolation applied on numeric cdf . PyROOT; The RooAbsPdf::createCdf() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 2490 of file RooAbsPdf.cxx. ◆ createExpectedEventsFunc(). std::unique_ptr< RooAbsReal > RooAbsPdf::createExpectedEventsFunc ; (; const RooArgSet * ; nset); const. virtual . Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ; This is used to build the computation graph for the final likelihood. ; Reimplemented in RooNormalizedPdf, RooFixedProdPdf, RooAddPdf, RooBinSamplingPdf, RooExtendedTerm, RooExtendPdf, RooProdPdf, and RooRealSumPdf.; Definition at line 2812 of file RooAbsPdf.cxx. ◆ createNLL(). template<typename... CmdArgs_t> . RooAbsPdf::createNLL ; (; RooAbsData & ; data, . CmdArgs_t const &... ; cmdArgs . ). inline . Construct representation of -log(L) of PDF with given dataset. ; If dataset is unbinned, an unbinned likelihood is constructed. If the dataset is binned, a binned likelihood is constructed.; Parameters. dataReference to a RooAbsData object representing the dataset. ; cmdArgsVariadic template arguments representing optional command arguments. You can pass either an arbitrary number of RooCmdArg instances or a single RooLinkedList that points to the RooCmdArg objects. . ReturnsAn owning pointer to the created RooAbsReal NLL object.; Template Parameters. CmdArgs_tTemplate types for optional command arguments. Can either be an arbitrary number of RooCmdArg or a single RooLinkedList. NoteThis front-end function should not be re-implemented in derived PDF types. If you mean to customize the NLL creation routine, you need to override the virtual RooAbsPdf::createNLLImpl() method.; The following named arguments are supported:. Type of CmdArg Effect on NLL . ConditionalObservables(Args_t &&... argsOrArgSet) Do not normalize ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:90363,Testability,log,log-likelihoods,90363,"ters this strategy is inefficient: as most minuit-induced likelihood calculations involve changing a single parameter, only 1 of the N processes will be active most of the time if RooSimultaneous components do not share many parameters . 3 = RooFit::Hybrid Follow strategy 0 for all RooSimultaneous components, except those with less than 30 dataset entries, for which strategy 2 is followed. . EvalBackend(std::string const&) Choose a likelihood evaluation backend: . Backend Description . cpu - default New vectorized evaluation mode, using faster math functions and auto-vectorisation. Since ROOT 6.23, this is the default if EvalBackend() is not passed, succeeding the legacy backend. If all RooAbsArg objects in the model support vectorized evaluation, likelihood computations are 2 to 10 times faster than with the legacy backend; unless your dataset is so small that the vectorization is not worth it. The relative difference of the single log-likelihoods with respect to the legacy mode is usually better than \(10^{-12}\), and for fit parameters it's usually better than \(10^{-6}\). In past ROOT releases, this backend could be activated with the now deprecated BatchMode() option. . cuda Evaluate the likelihood on a GPU that supports CUDA. This backend re-uses code from the cpu backend, but compiled in CUDA kernels. Hence, the results are expected to be identical, modulo some numerical differences that can arise from the different order in which the GPU is summing the log probabilities. This backend can drastically speed up the fit if all RooAbsArg object in the model support it. . legacy The original likelihood evaluation method. Evaluates the PDF for each single data entry at a time before summing the negative log probabilities. . codegen Experimental - Generates and compiles minimal C++ code for the NLL on-the-fly and wraps it in the returned RooAbsReal. Also generates and compiles the code for the gradient using Automatic Differentiation (AD) with Clad. This analytic gr",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:90901,Testability,log,log,90901,"ng const&) Choose a likelihood evaluation backend: . Backend Description . cpu - default New vectorized evaluation mode, using faster math functions and auto-vectorisation. Since ROOT 6.23, this is the default if EvalBackend() is not passed, succeeding the legacy backend. If all RooAbsArg objects in the model support vectorized evaluation, likelihood computations are 2 to 10 times faster than with the legacy backend; unless your dataset is so small that the vectorization is not worth it. The relative difference of the single log-likelihoods with respect to the legacy mode is usually better than \(10^{-12}\), and for fit parameters it's usually better than \(10^{-6}\). In past ROOT releases, this backend could be activated with the now deprecated BatchMode() option. . cuda Evaluate the likelihood on a GPU that supports CUDA. This backend re-uses code from the cpu backend, but compiled in CUDA kernels. Hence, the results are expected to be identical, modulo some numerical differences that can arise from the different order in which the GPU is summing the log probabilities. This backend can drastically speed up the fit if all RooAbsArg object in the model support it. . legacy The original likelihood evaluation method. Evaluates the PDF for each single data entry at a time before summing the negative log probabilities. . codegen Experimental - Generates and compiles minimal C++ code for the NLL on-the-fly and wraps it in the returned RooAbsReal. Also generates and compiles the code for the gradient using Automatic Differentiation (AD) with Clad. This analytic gradient is passed to the minimizer, which can result in significant speedups for many-parameter fits, even compared to the cpu backend. However, if one of the RooAbsArg objects in the model does not support the code generation, this backend can't be used. . codegen_no_grad Experimental - Same as codegen, but doesn't generate and compile the gradient code and use the regular numerical differentiation instead. This ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:91150,Testability,log,log,91150,"sArg objects in the model support vectorized evaluation, likelihood computations are 2 to 10 times faster than with the legacy backend; unless your dataset is so small that the vectorization is not worth it. The relative difference of the single log-likelihoods with respect to the legacy mode is usually better than \(10^{-12}\), and for fit parameters it's usually better than \(10^{-6}\). In past ROOT releases, this backend could be activated with the now deprecated BatchMode() option. . cuda Evaluate the likelihood on a GPU that supports CUDA. This backend re-uses code from the cpu backend, but compiled in CUDA kernels. Hence, the results are expected to be identical, modulo some numerical differences that can arise from the different order in which the GPU is summing the log probabilities. This backend can drastically speed up the fit if all RooAbsArg object in the model support it. . legacy The original likelihood evaluation method. Evaluates the PDF for each single data entry at a time before summing the negative log probabilities. . codegen Experimental - Generates and compiles minimal C++ code for the NLL on-the-fly and wraps it in the returned RooAbsReal. Also generates and compiles the code for the gradient using Automatic Differentiation (AD) with Clad. This analytic gradient is passed to the minimizer, which can result in significant speedups for many-parameter fits, even compared to the cpu backend. However, if one of the RooAbsArg objects in the model does not support the code generation, this backend can't be used. . codegen_no_grad Experimental - Same as codegen, but doesn't generate and compile the gradient code and use the regular numerical differentiation instead. This is expected to be slower, but useful for debugging problems with the analytic gradient. . Optimize(bool flag) Activate constant term optimization (on by default) . SplitRange(bool flag) Use separate fit ranges in a simultaneous fit. Actual range name for each subsample is assumed to b",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:94903,Testability,test,tests,94903,"associated with pdf observables that match the given tagName. . Verbose(bool flag) Controls RooFit informational messages in likelihood construction . CloneData(bool flag) Use clone of dataset in NLL (default is true). WarningDeprecated option that is ignored. It is up to the implementation of the NLL creation method if the data is cloned or not. . Offset(std::string const& mode) Likelihood offsetting mode. Can be either: . Mode Description . none - default No offsetting. . initial Offset likelihood by initial value (so that starting value of FCN in minuit is zero). This can improve numeric stability in simultaneous fits with components with large likelihood values. . bin Offset likelihood bin-by-bin with a template histogram model based on the obersved data. This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum, which can drastically improve numeric stability. Furthermore, \(2\cdot \text{NLL}\) defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests. . IntegrateBins(double precision) In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre. This can reduce the bias observed when fitting functions with high curvature to binned data.; precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning. Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator has to be manipulated directly.; precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; precision < 0: Deactivate. See alsoRooBinSamplingPdf . ModularL(bool flag) Enable or disable modular likelihoods, which will become the default in a future release. This does not change any user-fa",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:96701,Testability,log,logic,96701,"vate. See alsoRooBinSamplingPdf . ModularL(bool flag) Enable or disable modular likelihoods, which will become the default in a future release. This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this should be set to true for parallel minimization of likelihoods! Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since some features such as offsetting might not yet work in this case. . PyROOT; The RooAbsPdf::createNLL() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 163 of file RooAbsPdf.h. ◆ createNLLImpl(). std::unique_ptr< RooAbsReal > RooAbsPdf::createNLLImpl ; (; RooAbsData & ; data, . const RooLinkedList & ; cmdList . ). protectedvirtual . Protected implementation of the NLL creation routine. ; This virtual function can be overridden in case you want to change the NLL creation logic for custom PDFs.; NoteNever call this function directly. Instead, call RooAbsPdf::createNLL(). ; Definition at line 941 of file RooAbsPdf.cxx. ◆ createProjection(). RooAbsPdf * RooAbsPdf::createProjection ; (; const RooArgSet & ; iset). virtual . Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ; Reimplemented in RooProjectedPdf.; Definition at line 2446 of file RooAbsPdf.cxx. ◆ createScanCdf(). RooFit::OwningPtr< RooAbsReal > RooAbsPdf::createScanCdf ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . Int_t ; numScanBins, . Int_t ; intOrder . ). Definition at line 2545 of file RooAbsPdf.cxx. ◆ DeclFileName(). static const char * RooAbsPdf::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 351 of file RooAbsPdf.h. ◆ defaultGeneratorConfig(). RooNumGenConfig * RooAbsPdf::defaultGeneratorConfig ; (; ). static . Returns the default numer",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:99269,Testability,log,log,99269,"onst RooArgSet * ; nset); const. virtual . Return expected number of events to be used in calculation of extended likelihood. ; Return expected number of events from this p.d.f for use in extended likelihood calculations.; This default implementation returns zero ; Reimplemented in RooNormalizedPdf, RooFixedProdPdf, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendedTerm, RooExtendPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooSimultaneous, and xRooProjectedPdf.; Definition at line 2398 of file RooAbsPdf.cxx. ◆ extendedTerm() [1/3]. double RooAbsPdf::extendedTerm ; (; double ; sumEntries, . double ; expected, . double ; sumEntriesW2 = 0.0, . bool ; doOffset = false . ); const. Definition at line 730 of file RooAbsPdf.cxx. ◆ extendedTerm() [2/3]. double RooAbsPdf::extendedTerm ; (; double ; sumEntries, . RooArgSet const * ; nset, . double ; sumEntriesW2 = 0.0, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]sumEntriesThe number of observed events. ; [in]nsetThe normalization set when asking the pdf for the expected number of events. ; [in]observedSumW2The number of observed events when weighting with squared weights. If non-zero, the weight-squared error correction is applied to the extended term. ; [in]doOffsetOffset the extended term by a counterterm where the expected number of events equals the observed number of events. This constant shift results in a term closer to zero that is approximately chi-square distributed. It is useful to do this also when summing multiple NLL terms to avoid numeric precision loss that happens if you sum multiple terms of different orders of magnitude. The weight-squared error correction wor",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:101390,Testability,log,log,101390," factor \( \sum w_{i} / \sum w_{i}^2 \) (the effective weight of the Poisson term), i.e., change \(\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\) to \( \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \), weighted by the effective weight \( \sum w_{i}^2 / \sum w_{i} \) in the likelihood. Since here we compute the likelihood with the weight square, we need to multiply by the square of the effective weight:; \( W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \) : effective expected entries; \( W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \) : effective observed entries. The extended term for the likelihood weighted by the square of the weight will be then:; \( \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \); aund this is using the previous expressions for \( W_\mathrm{expect} \) and \( W_\mathrm{observed} \):; \( \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \); Since the weights are constants in the likelihood we can use \(\log{N_\mathrm{expect}}\) instead of \(\log{W_\mathrm{expect}}\).; See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset), which takes a dataset to extract \(N_\mathrm{observed}\) and the normalization set. ; Definition at line 725 of file RooAbsPdf.cxx. ◆ extendedTerm() [3/3]. double RooAbsPdf::extendedTerm ; (; RooAbsData const & ; data, . bool ; weightSquared, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; This function is a wrapper around RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const, where the number of observed events and observables to be",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:101596,Testability,log,log,101596," factor \( \sum w_{i} / \sum w_{i}^2 \) (the effective weight of the Poisson term), i.e., change \(\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\) to \( \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \), weighted by the effective weight \( \sum w_{i}^2 / \sum w_{i} \) in the likelihood. Since here we compute the likelihood with the weight square, we need to multiply by the square of the effective weight:; \( W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \) : effective expected entries; \( W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \) : effective observed entries. The extended term for the likelihood weighted by the square of the weight will be then:; \( \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \); aund this is using the previous expressions for \( W_\mathrm{expect} \) and \( W_\mathrm{observed} \):; \( \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \); Since the weights are constants in the likelihood we can use \(\log{N_\mathrm{expect}}\) instead of \(\log{W_\mathrm{expect}}\).; See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset), which takes a dataset to extract \(N_\mathrm{observed}\) and the normalization set. ; Definition at line 725 of file RooAbsPdf.cxx. ◆ extendedTerm() [3/3]. double RooAbsPdf::extendedTerm ; (; RooAbsData const & ; data, . bool ; weightSquared, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; This function is a wrapper around RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const, where the number of observed events and observables to be",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:101687,Testability,log,log,101687," factor \( \sum w_{i} / \sum w_{i}^2 \) (the effective weight of the Poisson term), i.e., change \(\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\) to \( \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \), weighted by the effective weight \( \sum w_{i}^2 / \sum w_{i} \) in the likelihood. Since here we compute the likelihood with the weight square, we need to multiply by the square of the effective weight:; \( W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \) : effective expected entries; \( W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \) : effective observed entries. The extended term for the likelihood weighted by the square of the weight will be then:; \( \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \); aund this is using the previous expressions for \( W_\mathrm{expect} \) and \( W_\mathrm{observed} \):; \( \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \); Since the weights are constants in the likelihood we can use \(\log{N_\mathrm{expect}}\) instead of \(\log{W_\mathrm{expect}}\).; See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset), which takes a dataset to extract \(N_\mathrm{observed}\) and the normalization set. ; Definition at line 725 of file RooAbsPdf.cxx. ◆ extendedTerm() [3/3]. double RooAbsPdf::extendedTerm ; (; RooAbsData const & ; data, . bool ; weightSquared, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; This function is a wrapper around RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const, where the number of observed events and observables to be",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:101726,Testability,log,log,101726," factor \( \sum w_{i} / \sum w_{i}^2 \) (the effective weight of the Poisson term), i.e., change \(\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\) to \( \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \), weighted by the effective weight \( \sum w_{i}^2 / \sum w_{i} \) in the likelihood. Since here we compute the likelihood with the weight square, we need to multiply by the square of the effective weight:; \( W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \) : effective expected entries; \( W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \) : effective observed entries. The extended term for the likelihood weighted by the square of the weight will be then:; \( \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \); aund this is using the previous expressions for \( W_\mathrm{expect} \) and \( W_\mathrm{observed} \):; \( \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \); Since the weights are constants in the likelihood we can use \(\log{N_\mathrm{expect}}\) instead of \(\log{W_\mathrm{expect}}\).; See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset), which takes a dataset to extract \(N_\mathrm{observed}\) and the normalization set. ; Definition at line 725 of file RooAbsPdf.cxx. ◆ extendedTerm() [3/3]. double RooAbsPdf::extendedTerm ; (; RooAbsData const & ; data, . bool ; weightSquared, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; This function is a wrapper around RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const, where the number of observed events and observables to be",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:102215,Testability,log,log,102215,"hted by the square of the weight will be then:; \( \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \); aund this is using the previous expressions for \( W_\mathrm{expect} \) and \( W_\mathrm{observed} \):; \( \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \); Since the weights are constants in the likelihood we can use \(\log{N_\mathrm{expect}}\) instead of \(\log{W_\mathrm{expect}}\).; See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset), which takes a dataset to extract \(N_\mathrm{observed}\) and the normalization set. ; Definition at line 725 of file RooAbsPdf.cxx. ◆ extendedTerm() [3/3]. double RooAbsPdf::extendedTerm ; (; RooAbsData const & ; data, . bool ; weightSquared, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; This function is a wrapper around RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const, where the number of observed events and observables to be used as the normalization set for the pdf is extracted from a RooAbsData.; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]dataThe RooAbsData to retrieve the set of observables and number of expected events. ; [in]weightSquaredIf set to true, the extended term will be scaled by the ratio of squared event weights over event weights: \( \sum w_{i}^2 / \sum w_{i} \). Intended to be used by fits with the SumW2Error() option that can be passed to RooAbsPdf::fitTo() (see the documentation of said function to learn more about the interpretation of fits with squared weights). ; [in]doOffsetSee RooAbsPdf::extendedTe",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:105157,Testability,log,log,105157,"d. By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession.; Parameters. dataReference to a RooAbsData object representing the dataset. ; cmdArgsVariadic template arguments representing optional command arguments. You can pass either an arbitrary number of RooCmdArg instances or a single RooLinkedList that points to the RooCmdArg objects. . ReturnsAn owning pointer to the created RooAbsReal NLL object. . RooFitResult with fit status and parameters if option Save() is used, nullptr otherwise. The user takes ownership of the fit result.; Template Parameters. CmdArgs_tTemplate types for optional command arguments. Can either be an arbitrary number of RooCmdArg or a single RooLinkedList. NoteThis front-end function should not be re-implemented in derived PDF types. If you mean to customize the likelihood fitting routine, you need to override the virtual RooAbsPdf::fitToImpl() method.; The following named arguments are supported:. Type of CmdArg Options to control construction of -log(L) . All command arguments that can also be passed to the NLL creation method. See alsoRooAbsPdf::createNLL(). Options to control flow of fit procedure . Minimizer(""<type>"", ""<algo>"") Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface, but others can be specified (through RooMinimizer interface). . Type Algorithm . Minuit migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve) . Minuit2 migrad, simplex, minimize, scan . GSLMultiMin conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent . GSLSimAn - . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Optimize(bool flag) Activate constant term optimization of test statistic during minimization (on by default) . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, off by default . Minos(const RooArgS",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:105909,Testability,test,test,105909,"mplemented in derived PDF types. If you mean to customize the likelihood fitting routine, you need to override the virtual RooAbsPdf::fitToImpl() method.; The following named arguments are supported:. Type of CmdArg Options to control construction of -log(L) . All command arguments that can also be passed to the NLL creation method. See alsoRooAbsPdf::createNLL(). Options to control flow of fit procedure . Minimizer(""<type>"", ""<algo>"") Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface, but others can be specified (through RooMinimizer interface). . Type Algorithm . Minuit migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve) . Minuit2 migrad, simplex, minimize, scan . GSLMultiMin conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent . GSLSimAn - . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Optimize(bool flag) Activate constant term optimization of test statistic during minimization (on by default) . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, off by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 to 2, default is 1) . MaxCalls(int n) Change maximum number of likelihood function calls from MINUIT (if n <= 0, the default of 500 * #parameters is used) . EvalErrorWall(bool flag=true) When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter to force it out of that region. This can, however, mean that the fitter gets lost in this region. If this happens, try switching it off. . RecoverFromUndefinedRegions(double strength) When PDF is invalid (e.g. parameter in undefined region), try to direct minimiser away from that region. ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:111468,Testability,log,logs,111468,". The first argument only disables or enables gradient parallelization, this is on by default. The second argument determines the internal partial derivative calculation ordering strategy. The third argument determines the number of partial derivatives that are executed per task package on each worker. . ParallelDescentOptions(bool enable=false, int splitStrategy=0, int numSplits=4) Experimental - Control settings related to the parallelization of likelihoods outside of the gradient calculation but in the minimization, most prominently in the linesearch step. The first argument this disables or enables likelihood parallelization. The second argument determines whether to split the task batches per event or per likelihood component. And the third argument how many events or respectively components to include in each batch. . TimingAnalysis(bool flag) Experimental - Log timings. This feature logs timings with NewStyle likelihoods on multiple processes simultaneously and outputs the timings at the end of a run to json log files, which can be analyzed with the RooFit::MultiProcess::HeatmapAnalyzer. Only works with simultaneous likelihoods. . PyROOT; The RooAbsPdf::fitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 157 of file RooAbsPdf.h. ◆ fitToImpl(). std::unique_ptr< RooFitResult > RooAbsPdf::fitToImpl ; (; RooAbsData & ; data, . const RooLinkedList & ; cmdList . ). protectedvirtual . Protected implementation of the likelihood fitting routine. ; This virtual function can be overridden in case you want to change the likelihood fitting logic for custom PDFs.; NoteNever call this function directly. Instead, call RooAbsPdf::fitTo(). ; Definition at line 1072 of file RooAbsPdf.cxx. ◆ genContext(). RooAbsGenContext * RooAbsPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose =",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:111596,Testability,log,log,111596,". The first argument only disables or enables gradient parallelization, this is on by default. The second argument determines the internal partial derivative calculation ordering strategy. The third argument determines the number of partial derivatives that are executed per task package on each worker. . ParallelDescentOptions(bool enable=false, int splitStrategy=0, int numSplits=4) Experimental - Control settings related to the parallelization of likelihoods outside of the gradient calculation but in the minimization, most prominently in the linesearch step. The first argument this disables or enables likelihood parallelization. The second argument determines whether to split the task batches per event or per likelihood component. And the third argument how many events or respectively components to include in each batch. . TimingAnalysis(bool flag) Experimental - Log timings. This feature logs timings with NewStyle likelihoods on multiple processes simultaneously and outputs the timings at the end of a run to json log files, which can be analyzed with the RooFit::MultiProcess::HeatmapAnalyzer. Only works with simultaneous likelihoods. . PyROOT; The RooAbsPdf::fitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 157 of file RooAbsPdf.h. ◆ fitToImpl(). std::unique_ptr< RooFitResult > RooAbsPdf::fitToImpl ; (; RooAbsData & ; data, . const RooLinkedList & ; cmdList . ). protectedvirtual . Protected implementation of the likelihood fitting routine. ; This virtual function can be overridden in case you want to change the likelihood fitting logic for custom PDFs.; NoteNever call this function directly. Instead, call RooAbsPdf::fitTo(). ; Definition at line 1072 of file RooAbsPdf.cxx. ◆ genContext(). RooAbsGenContext * RooAbsPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose =",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:112227,Testability,log,logic,112227,"lelization. The second argument determines whether to split the task batches per event or per likelihood component. And the third argument how many events or respectively components to include in each batch. . TimingAnalysis(bool flag) Experimental - Log timings. This feature logs timings with NewStyle likelihoods on multiple processes simultaneously and outputs the timings at the end of a run to json log files, which can be analyzed with the RooFit::MultiProcess::HeatmapAnalyzer. Only works with simultaneous likelihoods. . PyROOT; The RooAbsPdf::fitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 157 of file RooAbsPdf.h. ◆ fitToImpl(). std::unique_ptr< RooFitResult > RooAbsPdf::fitToImpl ; (; RooAbsData & ; data, . const RooLinkedList & ; cmdList . ). protectedvirtual . Protected implementation of the likelihood fitting routine. ; This virtual function can be overridden in case you want to change the likelihood fitting logic for custom PDFs.; NoteNever call this function directly. Instead, call RooAbsPdf::fitTo(). ; Definition at line 1072 of file RooAbsPdf.cxx. ◆ genContext(). RooAbsGenContext * RooAbsPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false . ); const. virtual . Interface function to create a generator context from a p.d.f. ; This default implementation returns a 'standard' context that works for any p.d.f ; Reimplemented in RooEffProd, RooAbsAnaConvPdf, RooAddModel, RooAddPdf, RooFFTConvPdf, RooNumConvPdf, RooProdPdf, and RooSimultaneous.; Definition at line 1127 of file RooAbsPdf.cxx. ◆ generate() [1/6]. RooAbsPdf::generate ; (; const RooArgSet & ; whatVars, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:128148,Testability,log,log,128148,", RooDecay, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooLandau, RooLognormal, RooNonCPEigenDecay, RooPoisson, RooUniform, RooAddModel, RooBinSamplingPdf, RooMultiVarGaussian, RooProdPdf, and RooTruthModel.; Definition at line 1522 of file RooAbsPdf.cxx. ◆ getGeneratorConfig(). const RooNumGenConfig * RooAbsPdf::getGeneratorConfig ; (; ); const. Return the numeric MC generator configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 2651 of file RooAbsPdf.cxx. ◆ getLogProbabilities(). void RooAbsPdf::getLogProbabilities ; (; std::span< const double > ; pdfValues, . double * ; output . ); const. Definition at line 671 of file RooAbsPdf.cxx. ◆ getLogVal(). double RooAbsPdf::getLogVal ; (; const RooArgSet * ; set = nullptr); const. virtual . Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ; Reimplemented in RooLegacyExpPoly, and RooHistConstraint.; Definition at line 620 of file RooAbsPdf.cxx. ◆ getNorm() [1/2]. double RooAbsPdf::getNorm ; (; const RooArgSet & ; nset); const. inline . Get normalisation term needed to normalise the raw values returned by getVal(). ; Note that getVal(normalisationVariables) will automatically apply the normalisation term returned here. Parameters. nsetSet of variables to normalise over. . Definition at line 195 of file RooAbsPdf.h. ◆ getNorm() [2/2]. double RooAbsPdf::getNorm ; (; const RooArgSet * ; nset = nullptr); const. virtual . Get normalisation term needed to normalise the raw values returned by getVal(). ; Note that getVal(normalisationVariables) will automatically apply the normalisation term returned here. Parameters. nsetSet of variables to normalise over. . Reimplemented in RooResolutionModel.; Definition at line 419 of file RooAbsPdf.cxx. ◆ getNormIntegral(). co",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:128249,Testability,log,log,128249,", RooDecay, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooLandau, RooLognormal, RooNonCPEigenDecay, RooPoisson, RooUniform, RooAddModel, RooBinSamplingPdf, RooMultiVarGaussian, RooProdPdf, and RooTruthModel.; Definition at line 1522 of file RooAbsPdf.cxx. ◆ getGeneratorConfig(). const RooNumGenConfig * RooAbsPdf::getGeneratorConfig ; (; ); const. Return the numeric MC generator configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 2651 of file RooAbsPdf.cxx. ◆ getLogProbabilities(). void RooAbsPdf::getLogProbabilities ; (; std::span< const double > ; pdfValues, . double * ; output . ); const. Definition at line 671 of file RooAbsPdf.cxx. ◆ getLogVal(). double RooAbsPdf::getLogVal ; (; const RooArgSet * ; set = nullptr); const. virtual . Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ; Reimplemented in RooLegacyExpPoly, and RooHistConstraint.; Definition at line 620 of file RooAbsPdf.cxx. ◆ getNorm() [1/2]. double RooAbsPdf::getNorm ; (; const RooArgSet & ; nset); const. inline . Get normalisation term needed to normalise the raw values returned by getVal(). ; Note that getVal(normalisationVariables) will automatically apply the normalisation term returned here. Parameters. nsetSet of variables to normalise over. . Definition at line 195 of file RooAbsPdf.h. ◆ getNorm() [2/2]. double RooAbsPdf::getNorm ; (; const RooArgSet * ; nset = nullptr); const. virtual . Get normalisation term needed to normalise the raw values returned by getVal(). ; Note that getVal(normalisationVariables) will automatically apply the normalisation term returned here. Parameters. nsetSet of variables to normalise over. . Reimplemented in RooResolutionModel.; Definition at line 419 of file RooAbsPdf.cxx. ◆ getNormIntegral(). co",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:132998,Testability,log,logBatchComputationErrors,132998,"lutionModel, RooSimultaneous, RooTruthModel, RooWrapperPdf, and RooNonCentralChiSquare.; Definition at line 351 of file RooAbsPdf.h. ◆ isActiveNormSet(). bool RooAbsPdf::isActiveNormSet ; (; RooArgSet const * ; normSet); const. inlineprotected . Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ; Definition at line 299 of file RooAbsPdf.h. ◆ isDirectGenSafe(). bool RooAbsPdf::isDirectGenSafe ; (; const RooAbsArg & ; arg); const. virtual . Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ; Observables on which a PDF depends via more than route are not safe for use with internal generators because they introduce correlations not known to the internal generator ; Reimplemented in RooAbsAnaConvPdf, RooAddModel, RooBinSamplingPdf, and RooProdPdf.; Definition at line 1557 of file RooAbsPdf.cxx. ◆ logBatchComputationErrors(). void RooAbsPdf::logBatchComputationErrors ; (; std::span< const double > & ; outputs, . std::size_t ; begin . ); const. private . Scan through outputs and fix+log all nans and negative values. ; Parameters. [in,out]outputsArray to be scanned & fixed. ; [in]beginBegin of event range. Only needed to print the correct event number where the error occurred. . Definition at line 654 of file RooAbsPdf.cxx. ◆ mustBeExtended(). bool RooAbsPdf::mustBeExtended ; (; ); const. inline . If true PDF must provide extended likelihood term. ; Definition at line 222 of file RooAbsPdf.h. ◆ normalizeWithNaNPacking(). double RooAbsPdf::normalizeWithNaNPacking ; (; double ; rawVal, . double ; normVal . ); const. protected . Definition at line 282 of file RooAbsPdf.cxx. ◆ normRange(). const char * RooAbsPdf::normRange ; (; ); const. inline . Definition at line 250 of file RooAbsPdf.h. ◆ paramOn() [1/2]. RooPlot * RooAbsPdf::paramOn ; (; RooPlot * ; frame, . const RooArgSet & ; params, . bool ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:133043,Testability,log,logBatchComputationErrors,133043,"and RooNonCentralChiSquare.; Definition at line 351 of file RooAbsPdf.h. ◆ isActiveNormSet(). bool RooAbsPdf::isActiveNormSet ; (; RooArgSet const * ; normSet); const. inlineprotected . Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ; Definition at line 299 of file RooAbsPdf.h. ◆ isDirectGenSafe(). bool RooAbsPdf::isDirectGenSafe ; (; const RooAbsArg & ; arg); const. virtual . Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ; Observables on which a PDF depends via more than route are not safe for use with internal generators because they introduce correlations not known to the internal generator ; Reimplemented in RooAbsAnaConvPdf, RooAddModel, RooBinSamplingPdf, and RooProdPdf.; Definition at line 1557 of file RooAbsPdf.cxx. ◆ logBatchComputationErrors(). void RooAbsPdf::logBatchComputationErrors ; (; std::span< const double > & ; outputs, . std::size_t ; begin . ); const. private . Scan through outputs and fix+log all nans and negative values. ; Parameters. [in,out]outputsArray to be scanned & fixed. ; [in]beginBegin of event range. Only needed to print the correct event number where the error occurred. . Definition at line 654 of file RooAbsPdf.cxx. ◆ mustBeExtended(). bool RooAbsPdf::mustBeExtended ; (; ); const. inline . If true PDF must provide extended likelihood term. ; Definition at line 222 of file RooAbsPdf.h. ◆ normalizeWithNaNPacking(). double RooAbsPdf::normalizeWithNaNPacking ; (; double ; rawVal, . double ; normVal . ); const. protected . Definition at line 282 of file RooAbsPdf.cxx. ◆ normRange(). const char * RooAbsPdf::normRange ; (; ); const. inline . Definition at line 250 of file RooAbsPdf.h. ◆ paramOn() [1/2]. RooPlot * RooAbsPdf::paramOn ; (; RooPlot * ; frame, . const RooArgSet & ; params, . bool ; showConstants = false, . const char * ; label = """", . dou",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:133186,Testability,log,log,133186,"eNormSet ; (; RooArgSet const * ; normSet); const. inlineprotected . Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ; Definition at line 299 of file RooAbsPdf.h. ◆ isDirectGenSafe(). bool RooAbsPdf::isDirectGenSafe ; (; const RooAbsArg & ; arg); const. virtual . Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ; Observables on which a PDF depends via more than route are not safe for use with internal generators because they introduce correlations not known to the internal generator ; Reimplemented in RooAbsAnaConvPdf, RooAddModel, RooBinSamplingPdf, and RooProdPdf.; Definition at line 1557 of file RooAbsPdf.cxx. ◆ logBatchComputationErrors(). void RooAbsPdf::logBatchComputationErrors ; (; std::span< const double > & ; outputs, . std::size_t ; begin . ); const. private . Scan through outputs and fix+log all nans and negative values. ; Parameters. [in,out]outputsArray to be scanned & fixed. ; [in]beginBegin of event range. Only needed to print the correct event number where the error occurred. . Definition at line 654 of file RooAbsPdf.cxx. ◆ mustBeExtended(). bool RooAbsPdf::mustBeExtended ; (; ); const. inline . If true PDF must provide extended likelihood term. ; Definition at line 222 of file RooAbsPdf.h. ◆ normalizeWithNaNPacking(). double RooAbsPdf::normalizeWithNaNPacking ; (; double ; rawVal, . double ; normVal . ); const. protected . Definition at line 282 of file RooAbsPdf.cxx. ◆ normRange(). const char * RooAbsPdf::normRange ; (; ); const. inline . Definition at line 250 of file RooAbsPdf.h. ◆ paramOn() [1/2]. RooPlot * RooAbsPdf::paramOn ; (; RooPlot * ; frame, . const RooArgSet & ; params, . bool ; showConstants = false, . const char * ; label = """", . double ; xmin = 0.65, . double ; xmax = 0.99, . double ; ymax = 0.95, . const RooCmdArg * ; formatCmd = nullptr . ). priv",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:141377,Testability,log,log,141377,"that the PDF is plotted and normalised in the same range. Overriding this can be useful if the PDF was fit in limited range[s] such as side bands, NormRange(""sidebandLeft,sidebandRight""), but the PDF should be drawn in the full range, Range(""""). Normalization(double scale, ScaleType code) Adjust normalization by given scale factor. Interpretation of number depends on code: RooAbsReal::Relative: relative adjustment factor RooAbsReal::NumEvent: scale to match given number of events. Type of argument Misc control . Name(const chat* name) Give curve specified name in frame. Useful if curve is to be referenced later . Asymmetry(const RooCategory& c) Show the asymmetry of the PDF in given two-state category \( \frac{F(+)-F(-)}{F(+)+F(-)} \) rather than the PDF projection. Category must have two states with indices -1 and +1 or three states with indices -1,0 and +1. . ShiftToZero(bool flag) Shift entire curve such that lowest visible point is at exactly zero. Mostly useful when plotting -log(L) or \( \chi^2 \) distributions . AddTo(const char* name, double_t wgtSelf, double_t wgtOther) Create a projection of this PDF onto the x-axis, but instead of plotting it directly, add it to an existing curve with given name (and relative weight factors). . Components(const char* names) When plotting sums of PDFs, plot only the named components (e.g. only the signal of a signal+background model). . Components(const RooArgSet& compSet) As above, but pass a RooArgSet of the components themselves. Type of argument Projection control . Slice(const RooArgSet& set) Override default projection behaviour by omitting observables listed in set from the projection, i.e. by not integrating over these. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. . Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., b",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:1384,Usability,simpl,simply,1384,"RooFit » RooFit Core. ; Abstract interface for all probability density functions. . RooAbsPdf, the base class of all PDFs; RooAbsPdf is the base class for all probability density functions (PDFs). The class provides hybrid analytical/numerical normalization for its implementations, error tracing, and a Monte Carlo generator interface. A Minimal PDF Implementation; A minimal implementation of a PDF class derived from RooAbsPdf should override the evaluate() function. This function should return the PDF's value (which does not need to be normalised).; Normalization/Integration; Although the normalization of a PDF is an integral part of a probability density function, normalization is treated separately in RooAbsPdf. The reason is that a RooAbsPdf object is more than a PDF: it can be a building block for a more complex composite PDF if any of its variables are functions instead of variables. In such cases, the normalization of the composite PDF may not simply be integral over the dependents of the top-level PDF: these are functions with potentially non-trivial Jacobian terms themselves. NoteTherefore, no explicit attempt should be made to normalize the function output in evaluate(). In particular, normalisation constants can be omitted to speed up the function evaluations, and included later in the integration of the PDF (see below), which is rarely called in comparison to the evaluate() function.; In addition, RooAbsPdf objects do not have a static concept of what variables are parameters, and what variables are dependents (which need to be integrated over for a correct PDF normalization). Instead, the choice of normalization is always specified each time a normalized value is requested from the PDF via the getVal() method.; RooAbsPdf manages the entire normalization logic of each PDF with the help of a RooRealIntegral object, which coordinates the integration of a given choice of normalization. By default, RooRealIntegral will perform an entirely numeric integration o",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:46410,Usability,clear,clear,46410,"ert additional information when printed in the context of a tree structure. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; virtual void printMetaArgs (std::ostream &) const;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashCon",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:47093,Usability,clear,clear,47093,"bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashContext &ctx) const;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooWorkspace * workspace () const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not f",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:47509,Usability,simpl,simple,47509," ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashContext &ctx) const;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooWorkspace * workspace () const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (c",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:64077,Usability,clear,clearEvalErrorLog,64077,"ual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (s",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:64970,Usability,clear,clearing,64970,"Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:73010,Usability,clear,clearShapeDirty,73010,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:73044,Usability,clear,clearValueAndShapeDirty,73044,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:73086,Usability,clear,clearValueDirty,73086,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:103104,Usability,learn,learn,103104," bool ; weightSquared, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; This function is a wrapper around RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const, where the number of observed events and observables to be used as the normalization set for the pdf is extracted from a RooAbsData.; For successful operation, the PDF implementation must indicate that it is extendable by overloading canBeExtended(), and must implement the expectedEvents() function.; Parameters. [in]dataThe RooAbsData to retrieve the set of observables and number of expected events. ; [in]weightSquaredIf set to true, the extended term will be scaled by the ratio of squared event weights over event weights: \( \sum w_{i}^2 / \sum w_{i} \). Intended to be used by fits with the SumW2Error() option that can be passed to RooAbsPdf::fitTo() (see the documentation of said function to learn more about the interpretation of fits with squared weights). ; [in]doOffsetSee RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const. . Definition at line 793 of file RooAbsPdf.cxx. ◆ extendMode(). virtual ExtendMode RooAbsPdf::extendMode ; (; ); const. inlinevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented in RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendedTerm, RooExtendPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooSimultaneous, RooNormalizedPdf, RooFixedProdPdf, and xRooProjectedPdf.; Definition at line 216 of file RooAbsPdf.h. ◆ fitTo(). template<typename... CmdArgs_t> . RooAbsPdf::fitTo ; (; RooAbsData & ; data, . CmdArgs_t const &... ; cmdArgs . ). inline . Fit PDF to given dataset. ; If dataset is unbinned, an unbinned maximum likelihood is perform",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:105567,Usability,simpl,simplex,105567,"t status and parameters if option Save() is used, nullptr otherwise. The user takes ownership of the fit result.; Template Parameters. CmdArgs_tTemplate types for optional command arguments. Can either be an arbitrary number of RooCmdArg or a single RooLinkedList. NoteThis front-end function should not be re-implemented in derived PDF types. If you mean to customize the likelihood fitting routine, you need to override the virtual RooAbsPdf::fitToImpl() method.; The following named arguments are supported:. Type of CmdArg Options to control construction of -log(L) . All command arguments that can also be passed to the NLL creation method. See alsoRooAbsPdf::createNLL(). Options to control flow of fit procedure . Minimizer(""<type>"", ""<algo>"") Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface, but others can be specified (through RooMinimizer interface). . Type Algorithm . Minuit migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve) . Minuit2 migrad, simplex, minimize, scan . GSLMultiMin conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent . GSLSimAn - . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Optimize(bool flag) Activate constant term optimization of test statistic during minimization (on by default) . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, off by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 to 2, default is 1) . MaxCalls(int n) Change maximum number of likelihood function calls from MINUIT (if n <= 0, the default of 500 * #parameters is used) . EvalErrorWall(bool flag=true) When parameters are in disallowed regions (e.g. PDF is negative), return very ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:105594,Usability,simpl,simplex,105594,"t status and parameters if option Save() is used, nullptr otherwise. The user takes ownership of the fit result.; Template Parameters. CmdArgs_tTemplate types for optional command arguments. Can either be an arbitrary number of RooCmdArg or a single RooLinkedList. NoteThis front-end function should not be re-implemented in derived PDF types. If you mean to customize the likelihood fitting routine, you need to override the virtual RooAbsPdf::fitToImpl() method.; The following named arguments are supported:. Type of CmdArg Options to control construction of -log(L) . All command arguments that can also be passed to the NLL creation method. See alsoRooAbsPdf::createNLL(). Options to control flow of fit procedure . Minimizer(""<type>"", ""<algo>"") Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface, but others can be specified (through RooMinimizer interface). . Type Algorithm . Minuit migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve) . Minuit2 migrad, simplex, minimize, scan . GSLMultiMin conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent . GSLSimAn - . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Optimize(bool flag) Activate constant term optimization of test statistic during minimization (on by default) . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, off by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 to 2, default is 1) . MaxCalls(int n) Change maximum number of likelihood function calls from MINUIT (if n <= 0, the default of 500 * #parameters is used) . EvalErrorWall(bool flag=true) When parameters are in disallowed regions (e.g. PDF is negative), return very ",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf.html:105655,Usability,simpl,simplex,105655,"se. The user takes ownership of the fit result.; Template Parameters. CmdArgs_tTemplate types for optional command arguments. Can either be an arbitrary number of RooCmdArg or a single RooLinkedList. NoteThis front-end function should not be re-implemented in derived PDF types. If you mean to customize the likelihood fitting routine, you need to override the virtual RooAbsPdf::fitToImpl() method.; The following named arguments are supported:. Type of CmdArg Options to control construction of -log(L) . All command arguments that can also be passed to the NLL creation method. See alsoRooAbsPdf::createNLL(). Options to control flow of fit procedure . Minimizer(""<type>"", ""<algo>"") Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface, but others can be specified (through RooMinimizer interface). . Type Algorithm . Minuit migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve) . Minuit2 migrad, simplex, minimize, scan . GSLMultiMin conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent . GSLSimAn - . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Optimize(bool flag) Activate constant term optimization of test statistic during minimization (on by default) . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, off by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 to 2, default is 1) . MaxCalls(int n) Change maximum number of likelihood function calls from MINUIT (if n <= 0, the default of 500 * #parameters is used) . EvalErrorWall(bool flag=true) When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter to force it out of that region. This can, h",MatchSource.WIKI,doc/master/classRooAbsPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html
https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html:554,Modifiability,inherit,inherited,554,". ROOT: RooAbsPdf::CacheElem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; RooAbsPdf::CacheElem Class Reference. ; Normalization set with for above integral. ; Definition at line 322 of file RooAbsPdf.h. Public Member Functions;  CacheElem (RooAbsReal &norm);  ;  ~CacheElem () override;  Destructor of normalization cache element. ;  ; RooArgList containedArgs (Action) override;  ;  Public Member Functions inherited from RooAbsCacheElement;  RooAbsCacheElement ();  ; virtual ~RooAbsCacheElement ();  ; virtual void findConstantNodes (const RooArgSet &obs, RooArgSet &cacheList, RooLinkedList &processedNodes);  Interface for constant term optimization calls. ;  ; virtual TClass * IsA () const;  ; virtual void operModeHook (RooAbsArg::OperMode);  Interface for changes of operation mode. ;  ; virtual void optimizeCacheMode (const RooArgSet &obs, RooArgSet &optNodes, RooLinkedList &processedNodes);  Interface for cache optimization calls. ;  ; virtual void printCompactTreeHook (std::ostream &, const char *, Int_t curElem, Int_t totElem);  Hook function to print cache guts in tree printing mode of RooAbsArgs. ;  ; virtual bool redirectServersHook (const RooAbsCollection &, bool, bool, bool);  Interface for server redirect calls. ;  ; void setOwner (RooAbsArg *owner);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Public Attributes; std::unique_ptr< RooAbsReal > _norm;  . Additional Inherited Members;  Public Types inherited from RooAbsCacheElement; enum  Action { OperModeChange; , OptimizeCaching; , FindConstantNodes; };  ;  Static Public Member Functions inherited from RooAbsCacheElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Attributes inherited f",MatchSource.WIKI,doc/master/classRooAbsPdf_1_1CacheElem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html
https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html:1634,Modifiability,inherit,inherited,1634,"() const;  ; virtual void operModeHook (RooAbsArg::OperMode);  Interface for changes of operation mode. ;  ; virtual void optimizeCacheMode (const RooArgSet &obs, RooArgSet &optNodes, RooLinkedList &processedNodes);  Interface for cache optimization calls. ;  ; virtual void printCompactTreeHook (std::ostream &, const char *, Int_t curElem, Int_t totElem);  Hook function to print cache guts in tree printing mode of RooAbsArgs. ;  ; virtual bool redirectServersHook (const RooAbsCollection &, bool, bool, bool);  Interface for server redirect calls. ;  ; void setOwner (RooAbsArg *owner);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Public Attributes; std::unique_ptr< RooAbsReal > _norm;  . Additional Inherited Members;  Public Types inherited from RooAbsCacheElement; enum  Action { OperModeChange; , OptimizeCaching; , FindConstantNodes; };  ;  Static Public Member Functions inherited from RooAbsCacheElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Attributes inherited from RooAbsCacheElement; RooAbsArg * _owner;  ! Pointer to owning RooAbsArg ;  . #include <RooAbsPdf.h>. Inheritance diagram for RooAbsPdf::CacheElem:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ CacheElem(). RooAbsPdf::CacheElem::CacheElem ; (; RooAbsReal & ; norm). inline . Definition at line 324 of file RooAbsPdf.h. ◆ ~CacheElem(). RooAbsPdf::CacheElem::~CacheElem ; (; ). override . Destructor of normalization cache element. ; If this element provides the 'current' normalization stored in RooAbsPdf::_norm zero _norm pointer here before object pointed to is deleted here ; Definition at line 2430 of file RooAbsPdf.cxx. Member Function Documentation. ◆ containedArgs(). RooArgList RooAbsPdf::CacheElem::containedArgs ; (; Action ; ).",MatchSource.WIKI,doc/master/classRooAbsPdf_1_1CacheElem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html
https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html:1778,Modifiability,inherit,inherited,1778,"() const;  ; virtual void operModeHook (RooAbsArg::OperMode);  Interface for changes of operation mode. ;  ; virtual void optimizeCacheMode (const RooArgSet &obs, RooArgSet &optNodes, RooLinkedList &processedNodes);  Interface for cache optimization calls. ;  ; virtual void printCompactTreeHook (std::ostream &, const char *, Int_t curElem, Int_t totElem);  Hook function to print cache guts in tree printing mode of RooAbsArgs. ;  ; virtual bool redirectServersHook (const RooAbsCollection &, bool, bool, bool);  Interface for server redirect calls. ;  ; void setOwner (RooAbsArg *owner);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Public Attributes; std::unique_ptr< RooAbsReal > _norm;  . Additional Inherited Members;  Public Types inherited from RooAbsCacheElement; enum  Action { OperModeChange; , OptimizeCaching; , FindConstantNodes; };  ;  Static Public Member Functions inherited from RooAbsCacheElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Attributes inherited from RooAbsCacheElement; RooAbsArg * _owner;  ! Pointer to owning RooAbsArg ;  . #include <RooAbsPdf.h>. Inheritance diagram for RooAbsPdf::CacheElem:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ CacheElem(). RooAbsPdf::CacheElem::CacheElem ; (; RooAbsReal & ; norm). inline . Definition at line 324 of file RooAbsPdf.h. ◆ ~CacheElem(). RooAbsPdf::CacheElem::~CacheElem ; (; ). override . Destructor of normalization cache element. ; If this element provides the 'current' normalization stored in RooAbsPdf::_norm zero _norm pointer here before object pointed to is deleted here ; Definition at line 2430 of file RooAbsPdf.cxx. Member Function Documentation. ◆ containedArgs(). RooArgList RooAbsPdf::CacheElem::containedArgs ; (; Action ; ).",MatchSource.WIKI,doc/master/classRooAbsPdf_1_1CacheElem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html
https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html:1990,Modifiability,inherit,inherited,1990,"() const;  ; virtual void operModeHook (RooAbsArg::OperMode);  Interface for changes of operation mode. ;  ; virtual void optimizeCacheMode (const RooArgSet &obs, RooArgSet &optNodes, RooLinkedList &processedNodes);  Interface for cache optimization calls. ;  ; virtual void printCompactTreeHook (std::ostream &, const char *, Int_t curElem, Int_t totElem);  Hook function to print cache guts in tree printing mode of RooAbsArgs. ;  ; virtual bool redirectServersHook (const RooAbsCollection &, bool, bool, bool);  Interface for server redirect calls. ;  ; void setOwner (RooAbsArg *owner);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Public Attributes; std::unique_ptr< RooAbsReal > _norm;  . Additional Inherited Members;  Public Types inherited from RooAbsCacheElement; enum  Action { OperModeChange; , OptimizeCaching; , FindConstantNodes; };  ;  Static Public Member Functions inherited from RooAbsCacheElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Attributes inherited from RooAbsCacheElement; RooAbsArg * _owner;  ! Pointer to owning RooAbsArg ;  . #include <RooAbsPdf.h>. Inheritance diagram for RooAbsPdf::CacheElem:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ CacheElem(). RooAbsPdf::CacheElem::CacheElem ; (; RooAbsReal & ; norm). inline . Definition at line 324 of file RooAbsPdf.h. ◆ ~CacheElem(). RooAbsPdf::CacheElem::~CacheElem ; (; ). override . Destructor of normalization cache element. ; If this element provides the 'current' normalization stored in RooAbsPdf::_norm zero _norm pointer here before object pointed to is deleted here ; Definition at line 2430 of file RooAbsPdf.cxx. Member Function Documentation. ◆ containedArgs(). RooArgList RooAbsPdf::CacheElem::containedArgs ; (; Action ; ).",MatchSource.WIKI,doc/master/classRooAbsPdf_1_1CacheElem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html
https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html:462,Performance,cache,cache,462,". ROOT: RooAbsPdf::CacheElem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; RooAbsPdf::CacheElem Class Reference. ; Normalization set with for above integral. ; Definition at line 322 of file RooAbsPdf.h. Public Member Functions;  CacheElem (RooAbsReal &norm);  ;  ~CacheElem () override;  Destructor of normalization cache element. ;  ; RooArgList containedArgs (Action) override;  ;  Public Member Functions inherited from RooAbsCacheElement;  RooAbsCacheElement ();  ; virtual ~RooAbsCacheElement ();  ; virtual void findConstantNodes (const RooArgSet &obs, RooArgSet &cacheList, RooLinkedList &processedNodes);  Interface for constant term optimization calls. ;  ; virtual TClass * IsA () const;  ; virtual void operModeHook (RooAbsArg::OperMode);  Interface for changes of operation mode. ;  ; virtual void optimizeCacheMode (const RooArgSet &obs, RooArgSet &optNodes, RooLinkedList &processedNodes);  Interface for cache optimization calls. ;  ; virtual void printCompactTreeHook (std::ostream &, const char *, Int_t curElem, Int_t totElem);  Hook function to print cache guts in tree printing mode of RooAbsArgs. ;  ; virtual bool redirectServersHook (const RooAbsCollection &, bool, bool, bool);  Interface for server redirect calls. ;  ; void setOwner (RooAbsArg *owner);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Public Attributes; std::unique_ptr< RooAbsReal > _norm;  . Additional Inherited Members;  Public Types inherited from RooAbsCacheElement; enum  Action { OperModeChange; , OptimizeCaching; , FindConstantNodes; };  ;  Static Public Member Functions inherited from RooAbsCacheElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Attributes inherited f",MatchSource.WIKI,doc/master/classRooAbsPdf_1_1CacheElem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html
https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html:716,Performance,cache,cacheList,716,". ROOT: RooAbsPdf::CacheElem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; RooAbsPdf::CacheElem Class Reference. ; Normalization set with for above integral. ; Definition at line 322 of file RooAbsPdf.h. Public Member Functions;  CacheElem (RooAbsReal &norm);  ;  ~CacheElem () override;  Destructor of normalization cache element. ;  ; RooArgList containedArgs (Action) override;  ;  Public Member Functions inherited from RooAbsCacheElement;  RooAbsCacheElement ();  ; virtual ~RooAbsCacheElement ();  ; virtual void findConstantNodes (const RooArgSet &obs, RooArgSet &cacheList, RooLinkedList &processedNodes);  Interface for constant term optimization calls. ;  ; virtual TClass * IsA () const;  ; virtual void operModeHook (RooAbsArg::OperMode);  Interface for changes of operation mode. ;  ; virtual void optimizeCacheMode (const RooArgSet &obs, RooArgSet &optNodes, RooLinkedList &processedNodes);  Interface for cache optimization calls. ;  ; virtual void printCompactTreeHook (std::ostream &, const char *, Int_t curElem, Int_t totElem);  Hook function to print cache guts in tree printing mode of RooAbsArgs. ;  ; virtual bool redirectServersHook (const RooAbsCollection &, bool, bool, bool);  Interface for server redirect calls. ;  ; void setOwner (RooAbsArg *owner);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Public Attributes; std::unique_ptr< RooAbsReal > _norm;  . Additional Inherited Members;  Public Types inherited from RooAbsCacheElement; enum  Action { OperModeChange; , OptimizeCaching; , FindConstantNodes; };  ;  Static Public Member Functions inherited from RooAbsCacheElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Attributes inherited f",MatchSource.WIKI,doc/master/classRooAbsPdf_1_1CacheElem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html
https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html:788,Performance,optimiz,optimization,788,". ROOT: RooAbsPdf::CacheElem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; RooAbsPdf::CacheElem Class Reference. ; Normalization set with for above integral. ; Definition at line 322 of file RooAbsPdf.h. Public Member Functions;  CacheElem (RooAbsReal &norm);  ;  ~CacheElem () override;  Destructor of normalization cache element. ;  ; RooArgList containedArgs (Action) override;  ;  Public Member Functions inherited from RooAbsCacheElement;  RooAbsCacheElement ();  ; virtual ~RooAbsCacheElement ();  ; virtual void findConstantNodes (const RooArgSet &obs, RooArgSet &cacheList, RooLinkedList &processedNodes);  Interface for constant term optimization calls. ;  ; virtual TClass * IsA () const;  ; virtual void operModeHook (RooAbsArg::OperMode);  Interface for changes of operation mode. ;  ; virtual void optimizeCacheMode (const RooArgSet &obs, RooArgSet &optNodes, RooLinkedList &processedNodes);  Interface for cache optimization calls. ;  ; virtual void printCompactTreeHook (std::ostream &, const char *, Int_t curElem, Int_t totElem);  Hook function to print cache guts in tree printing mode of RooAbsArgs. ;  ; virtual bool redirectServersHook (const RooAbsCollection &, bool, bool, bool);  Interface for server redirect calls. ;  ; void setOwner (RooAbsArg *owner);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Public Attributes; std::unique_ptr< RooAbsReal > _norm;  . Additional Inherited Members;  Public Types inherited from RooAbsCacheElement; enum  Action { OperModeChange; , OptimizeCaching; , FindConstantNodes; };  ;  Static Public Member Functions inherited from RooAbsCacheElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Attributes inherited f",MatchSource.WIKI,doc/master/classRooAbsPdf_1_1CacheElem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html
https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html:956,Performance,optimiz,optimizeCacheMode,956,"sPdf::CacheElem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; RooAbsPdf::CacheElem Class Reference. ; Normalization set with for above integral. ; Definition at line 322 of file RooAbsPdf.h. Public Member Functions;  CacheElem (RooAbsReal &norm);  ;  ~CacheElem () override;  Destructor of normalization cache element. ;  ; RooArgList containedArgs (Action) override;  ;  Public Member Functions inherited from RooAbsCacheElement;  RooAbsCacheElement ();  ; virtual ~RooAbsCacheElement ();  ; virtual void findConstantNodes (const RooArgSet &obs, RooArgSet &cacheList, RooLinkedList &processedNodes);  Interface for constant term optimization calls. ;  ; virtual TClass * IsA () const;  ; virtual void operModeHook (RooAbsArg::OperMode);  Interface for changes of operation mode. ;  ; virtual void optimizeCacheMode (const RooArgSet &obs, RooArgSet &optNodes, RooLinkedList &processedNodes);  Interface for cache optimization calls. ;  ; virtual void printCompactTreeHook (std::ostream &, const char *, Int_t curElem, Int_t totElem);  Hook function to print cache guts in tree printing mode of RooAbsArgs. ;  ; virtual bool redirectServersHook (const RooAbsCollection &, bool, bool, bool);  Interface for server redirect calls. ;  ; void setOwner (RooAbsArg *owner);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Public Attributes; std::unique_ptr< RooAbsReal > _norm;  . Additional Inherited Members;  Public Types inherited from RooAbsCacheElement; enum  Action { OperModeChange; , OptimizeCaching; , FindConstantNodes; };  ;  Static Public Member Functions inherited from RooAbsCacheElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Attributes inherited from RooAbsCac",MatchSource.WIKI,doc/master/classRooAbsPdf_1_1CacheElem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html
https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html:1065,Performance,cache,cache,1065,"sPdf::CacheElem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; RooAbsPdf::CacheElem Class Reference. ; Normalization set with for above integral. ; Definition at line 322 of file RooAbsPdf.h. Public Member Functions;  CacheElem (RooAbsReal &norm);  ;  ~CacheElem () override;  Destructor of normalization cache element. ;  ; RooArgList containedArgs (Action) override;  ;  Public Member Functions inherited from RooAbsCacheElement;  RooAbsCacheElement ();  ; virtual ~RooAbsCacheElement ();  ; virtual void findConstantNodes (const RooArgSet &obs, RooArgSet &cacheList, RooLinkedList &processedNodes);  Interface for constant term optimization calls. ;  ; virtual TClass * IsA () const;  ; virtual void operModeHook (RooAbsArg::OperMode);  Interface for changes of operation mode. ;  ; virtual void optimizeCacheMode (const RooArgSet &obs, RooArgSet &optNodes, RooLinkedList &processedNodes);  Interface for cache optimization calls. ;  ; virtual void printCompactTreeHook (std::ostream &, const char *, Int_t curElem, Int_t totElem);  Hook function to print cache guts in tree printing mode of RooAbsArgs. ;  ; virtual bool redirectServersHook (const RooAbsCollection &, bool, bool, bool);  Interface for server redirect calls. ;  ; void setOwner (RooAbsArg *owner);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Public Attributes; std::unique_ptr< RooAbsReal > _norm;  . Additional Inherited Members;  Public Types inherited from RooAbsCacheElement; enum  Action { OperModeChange; , OptimizeCaching; , FindConstantNodes; };  ;  Static Public Member Functions inherited from RooAbsCacheElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Attributes inherited from RooAbsCac",MatchSource.WIKI,doc/master/classRooAbsPdf_1_1CacheElem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html
https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html:1071,Performance,optimiz,optimization,1071,"sPdf::CacheElem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; RooAbsPdf::CacheElem Class Reference. ; Normalization set with for above integral. ; Definition at line 322 of file RooAbsPdf.h. Public Member Functions;  CacheElem (RooAbsReal &norm);  ;  ~CacheElem () override;  Destructor of normalization cache element. ;  ; RooArgList containedArgs (Action) override;  ;  Public Member Functions inherited from RooAbsCacheElement;  RooAbsCacheElement ();  ; virtual ~RooAbsCacheElement ();  ; virtual void findConstantNodes (const RooArgSet &obs, RooArgSet &cacheList, RooLinkedList &processedNodes);  Interface for constant term optimization calls. ;  ; virtual TClass * IsA () const;  ; virtual void operModeHook (RooAbsArg::OperMode);  Interface for changes of operation mode. ;  ; virtual void optimizeCacheMode (const RooArgSet &obs, RooArgSet &optNodes, RooLinkedList &processedNodes);  Interface for cache optimization calls. ;  ; virtual void printCompactTreeHook (std::ostream &, const char *, Int_t curElem, Int_t totElem);  Hook function to print cache guts in tree printing mode of RooAbsArgs. ;  ; virtual bool redirectServersHook (const RooAbsCollection &, bool, bool, bool);  Interface for server redirect calls. ;  ; void setOwner (RooAbsArg *owner);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Public Attributes; std::unique_ptr< RooAbsReal > _norm;  . Additional Inherited Members;  Public Types inherited from RooAbsCacheElement; enum  Action { OperModeChange; , OptimizeCaching; , FindConstantNodes; };  ;  Static Public Member Functions inherited from RooAbsCacheElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Attributes inherited from RooAbsCac",MatchSource.WIKI,doc/master/classRooAbsPdf_1_1CacheElem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html
https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html:1216,Performance,cache,cache,1216," Public Attributes |; List of all members ; RooAbsPdf::CacheElem Class Reference. ; Normalization set with for above integral. ; Definition at line 322 of file RooAbsPdf.h. Public Member Functions;  CacheElem (RooAbsReal &norm);  ;  ~CacheElem () override;  Destructor of normalization cache element. ;  ; RooArgList containedArgs (Action) override;  ;  Public Member Functions inherited from RooAbsCacheElement;  RooAbsCacheElement ();  ; virtual ~RooAbsCacheElement ();  ; virtual void findConstantNodes (const RooArgSet &obs, RooArgSet &cacheList, RooLinkedList &processedNodes);  Interface for constant term optimization calls. ;  ; virtual TClass * IsA () const;  ; virtual void operModeHook (RooAbsArg::OperMode);  Interface for changes of operation mode. ;  ; virtual void optimizeCacheMode (const RooArgSet &obs, RooArgSet &optNodes, RooLinkedList &processedNodes);  Interface for cache optimization calls. ;  ; virtual void printCompactTreeHook (std::ostream &, const char *, Int_t curElem, Int_t totElem);  Hook function to print cache guts in tree printing mode of RooAbsArgs. ;  ; virtual bool redirectServersHook (const RooAbsCollection &, bool, bool, bool);  Interface for server redirect calls. ;  ; void setOwner (RooAbsArg *owner);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Public Attributes; std::unique_ptr< RooAbsReal > _norm;  . Additional Inherited Members;  Public Types inherited from RooAbsCacheElement; enum  Action { OperModeChange; , OptimizeCaching; , FindConstantNodes; };  ;  Static Public Member Functions inherited from RooAbsCacheElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Attributes inherited from RooAbsCacheElement; RooAbsArg * _owner;  ! Pointer to owning RooAbsArg ;  . #include <RooAbsPdf.h>. Inheritance diagram for RooAbsPdf::CacheElem:. This browser is not able ",MatchSource.WIKI,doc/master/classRooAbsPdf_1_1CacheElem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html
https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html:2511,Performance,cache,cache,2511," void setOwner (RooAbsArg *owner);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Public Attributes; std::unique_ptr< RooAbsReal > _norm;  . Additional Inherited Members;  Public Types inherited from RooAbsCacheElement; enum  Action { OperModeChange; , OptimizeCaching; , FindConstantNodes; };  ;  Static Public Member Functions inherited from RooAbsCacheElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Attributes inherited from RooAbsCacheElement; RooAbsArg * _owner;  ! Pointer to owning RooAbsArg ;  . #include <RooAbsPdf.h>. Inheritance diagram for RooAbsPdf::CacheElem:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ CacheElem(). RooAbsPdf::CacheElem::CacheElem ; (; RooAbsReal & ; norm). inline . Definition at line 324 of file RooAbsPdf.h. ◆ ~CacheElem(). RooAbsPdf::CacheElem::~CacheElem ; (; ). override . Destructor of normalization cache element. ; If this element provides the 'current' normalization stored in RooAbsPdf::_norm zero _norm pointer here before object pointed to is deleted here ; Definition at line 2430 of file RooAbsPdf.cxx. Member Function Documentation. ◆ containedArgs(). RooArgList RooAbsPdf::CacheElem::containedArgs ; (; Action ; ). inlineoverridevirtual . Implements RooAbsCacheElement.; Definition at line 326 of file RooAbsPdf.h. Member Data Documentation. ◆ _norm. std::unique_ptr<RooAbsReal> RooAbsPdf::CacheElem::_norm. Definition at line 327 of file RooAbsPdf.h. Libraries for RooAbsPdf::CacheElem:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsPdf.h; roofit/roofitcore/src/RooAbsPdf.cxx. RooAbsPdfCacheElem. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classRooAbsPdf_1_1CacheElem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html
https://root.cern/doc/master/classRooAbsPdf_1_1GenSpec.html:936,Modifiability,extend,extended,936,". ROOT: RooAbsPdf::GenSpec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooAbsPdf::GenSpec Class Reference. . Definition at line 72 of file RooAbsPdf.h. Public Member Functions;  GenSpec ()=default;  ; virtual ~GenSpec ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions;  GenSpec (const GenSpec &other);  ;  GenSpec (RooAbsGenContext *context, const RooArgSet &whatVars, RooDataSet *protoData, Int_t nGen, bool extended, bool randProto, bool resampleProto, TString dsetName, bool init=false);  . Private Attributes; TString _dsetName;  ; bool _extended = false;  ; std::unique_ptr< RooAbsGenContext > _genContext;  ; bool _init = false;  ; Int_t _nGen = 0;  ; RooDataSet * _protoData = nullptr;  ; bool _randProto = false;  ; bool _resampleProto = false;  ; RooArgSet _whatVars;  . Friends; class RooAbsPdf;  . #include <RooAbsPdf.h>; Constructor & Destructor Documentation. ◆ ~GenSpec(). RooAbsPdf::GenSpec::~GenSpec ; (; ). virtualdefault . ◆ GenSpec() [1/3]. RooAbsPdf::GenSpec::GenSpec ; (; ). default . ◆ GenSpec() [2/3]. RooAbsPdf::GenSpec::GenSpec ; (; RooAbsGenContext * ; context, . const RooArgSet & ; whatVars, . RooDataSet * ; protoData, . Int_t ; nGen, . bool ; extended, . bool ; randProto, . bool ; resampleProto, . TString ; dsetName, . bool ; init = false . ). private . Definition at line 2685 of file RooAbsPdf.cxx. ◆ GenSpec() [3/3]. RooAbsPdf::GenSpec::GenSpec ; (; const GenSpec & ; other). private . Member Function Documentation. ◆ Class(). static TCla",MatchSource.WIKI,doc/master/classRooAbsPdf_1_1GenSpec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf_1_1GenSpec.html
https://root.cern/doc/master/classRooAbsPdf_1_1GenSpec.html:1700,Modifiability,extend,extended,1700,"rsion_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions;  GenSpec (const GenSpec &other);  ;  GenSpec (RooAbsGenContext *context, const RooArgSet &whatVars, RooDataSet *protoData, Int_t nGen, bool extended, bool randProto, bool resampleProto, TString dsetName, bool init=false);  . Private Attributes; TString _dsetName;  ; bool _extended = false;  ; std::unique_ptr< RooAbsGenContext > _genContext;  ; bool _init = false;  ; Int_t _nGen = 0;  ; RooDataSet * _protoData = nullptr;  ; bool _randProto = false;  ; bool _resampleProto = false;  ; RooArgSet _whatVars;  . Friends; class RooAbsPdf;  . #include <RooAbsPdf.h>; Constructor & Destructor Documentation. ◆ ~GenSpec(). RooAbsPdf::GenSpec::~GenSpec ; (; ). virtualdefault . ◆ GenSpec() [1/3]. RooAbsPdf::GenSpec::GenSpec ; (; ). default . ◆ GenSpec() [2/3]. RooAbsPdf::GenSpec::GenSpec ; (; RooAbsGenContext * ; context, . const RooArgSet & ; whatVars, . RooDataSet * ; protoData, . Int_t ; nGen, . bool ; extended, . bool ; randProto, . bool ; resampleProto, . TString ; dsetName, . bool ; init = false . ). private . Definition at line 2685 of file RooAbsPdf.cxx. ◆ GenSpec() [3/3]. RooAbsPdf::GenSpec::GenSpec ; (; const GenSpec & ; other). private . Member Function Documentation. ◆ Class(). static TClass * RooAbsPdf::GenSpec::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsPdf::GenSpec::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsPdf::GenSpec::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 93 of file RooAbsPdf.h. ◆ DeclFileName(). static const char * RooAbsPdf::GenSpec::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 93 of file RooAbsPdf.h. ◆ IsA(). virtual TClass * RooAbsPdf::GenSpec::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ",MatchSource.WIKI,doc/master/classRooAbsPdf_1_1GenSpec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsPdf_1_1GenSpec.html
https://root.cern/doc/master/classRooAbsProxy.html:508,Deployability,update,updated,508,". ROOT: RooAbsProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooAbsProxy Class ReferenceabstractRooFit » RooFit Core. ; Abstract interface for proxy classes. ; Proxy classes hold pointers to other Roofit objects and process serverRedirect changes so that the proxied pointers are updated accordingly on a clone or copy of of the owning class ; Definition at line 37 of file RooAbsProxy.h. Public Member Functions;  RooAbsProxy ();  ;  RooAbsProxy (const char *name, const RooAbsProxy &other);  Copy constructor. ;  ; virtual ~RooAbsProxy ();  ; virtual TClass * IsA () const;  ; virtual const char * name () const;  ; const RooArgSet * nset () const;  ; virtual void print (std::ostream &os, bool addContents=false) const;  Print proxy name. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; virtual void changeNormSet (const RooArgSet *newNormSet);  Destructor. ;  ; virtual bool changePointer (const RooAbsCollection &newServerSet, bool nameChange=false, bool factoryInitMode=false)=0;  ; virtual bool changePointer (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements)=0;  . Protected Attributes; RooArgSet * _nset = nullptr;  ! Normalization set to be used for evaluation of RooAbsPdf contents ;  . Friends; class RooAbsArg;  ; class RooAbsPdf;  . #include <RooAbsProxy.h>. Inheritance diagram for RooAbsProxy:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAbsProxy() [1/2]. RooAbsProx",MatchSource.WIKI,doc/master/classRooAbsProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsProxy.html
https://root.cern/doc/master/classRooAbsProxy.html:357,Integrability,interface,interface,357,". ROOT: RooAbsProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooAbsProxy Class ReferenceabstractRooFit » RooFit Core. ; Abstract interface for proxy classes. ; Proxy classes hold pointers to other Roofit objects and process serverRedirect changes so that the proxied pointers are updated accordingly on a clone or copy of of the owning class ; Definition at line 37 of file RooAbsProxy.h. Public Member Functions;  RooAbsProxy ();  ;  RooAbsProxy (const char *name, const RooAbsProxy &other);  Copy constructor. ;  ; virtual ~RooAbsProxy ();  ; virtual TClass * IsA () const;  ; virtual const char * name () const;  ; const RooArgSet * nset () const;  ; virtual void print (std::ostream &os, bool addContents=false) const;  Print proxy name. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; virtual void changeNormSet (const RooArgSet *newNormSet);  Destructor. ;  ; virtual bool changePointer (const RooAbsCollection &newServerSet, bool nameChange=false, bool factoryInitMode=false)=0;  ; virtual bool changePointer (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements)=0;  . Protected Attributes; RooArgSet * _nset = nullptr;  ! Normalization set to be used for evaluation of RooAbsPdf contents ;  . Friends; class RooAbsArg;  ; class RooAbsPdf;  . #include <RooAbsProxy.h>. Inheritance diagram for RooAbsProxy:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAbsProxy() [1/2]. RooAbsProx",MatchSource.WIKI,doc/master/classRooAbsProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsProxy.html
https://root.cern/doc/master/classRooAbsReal.html:1469,Availability,error,error,1469,"it » RooFit Core. ; Abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc. ; Implementation of RooAbsReal may be derived, thus no interface is provided to modify the contents. PyROOT; Some member functions of RooAbsReal that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooAbsReal::plotOn, RooAbsReal::createHistogram, RooAbsReal::chi2FitTo, RooAbsReal::createChi2, RooAbsReal::createRunningIntegral and RooAbsReal::createIntegral For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; var.plotOn(frame, ROOT.RooFit.Components(""background"")); ; # With keyword arguments:; var.plotOn(frame, Components=""background""). Definition at line 59 of file RooAbsReal.h. Classes; class  EvalError;  ; class  EvalErrorContext;  Context to temporarily change the error logging mode as long as the context is alive. More...;  ; struct  GlobalSelectComponentRAII;  ; struct  PlotOpt;  ; class  Ref;  A RooAbsReal::Ref can be constructed from a RooAbsReal& or a double that will be implicitly converted to a RooConstVar&. More...;  . Public Types; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x0200000",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:1514,Availability,alive,alive,1514,"it » RooFit Core. ; Abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc. ; Implementation of RooAbsReal may be derived, thus no interface is provided to modify the contents. PyROOT; Some member functions of RooAbsReal that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooAbsReal::plotOn, RooAbsReal::createHistogram, RooAbsReal::chi2FitTo, RooAbsReal::createChi2, RooAbsReal::createRunningIntegral and RooAbsReal::createIntegral For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; var.plotOn(frame, ROOT.RooFit.Components(""background"")); ; # With keyword arguments:; var.plotOn(frame, Components=""background""). Definition at line 59 of file RooAbsReal.h. Classes; class  EvalError;  ; class  EvalErrorContext;  Context to temporarily change the error logging mode as long as the context is alive. More...;  ; struct  GlobalSelectComponentRAII;  ; struct  PlotOpt;  ; class  Ref;  A RooAbsReal::Ref can be constructed from a RooAbsReal& or a double that will be implicitly converted to a RooConstVar&. More...;  . Public Types; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x0200000",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:16137,Availability,error,error,16137,"s parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; TClass * IsA () const override;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override;  Equality operator when comparing to ano",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:34795,Availability,mask,mask,34795,"s);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const Ro",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:41052,Availability,error,error,41052,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:41141,Availability,error,error,41141,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:41296,Availability,error,error,41296,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:41593,Availability,error,error,41593,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:45677,Availability,error,error,45677,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption s",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:47180,Availability,error,error,47180,"_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:47580,Availability,error,error,47580,"ion_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static vo",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:47802,Availability,error,error,47802,"eam, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:47862,Availability,error,error,47862,"eam, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:47998,Availability,error,errors,47998,"tual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:48161,Availability,error,error,48161,"();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get st",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:48268,Availability,error,error,48268,"  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bo",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:54407,Availability,error,error,54407,"bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:59804,Availability,error,error,59804,"_namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; double _DEBUG_getVal (const RooArgSet *normalisationSet) const;  Debug version of getVal(), which is slow and does error checking. ;  . Friends; class AddCacheElem;  ; class BatchInterfaceAccessor;  ; class RooAddHelpers;  ; class RooAddModel;  ; class RooAddPdf;  ; class RooFit::EvalContext;  ; class RooRealBinding;  ; class RooRealSumFunc;  ; class RooRealSumPdf;  ; class RooVectorDataStore;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <RooAbsReal.h>. Inheritance diagram for RooAbsReal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:62338,Availability,error,error,62338,"structor ; Definition at line 199 of file RooAbsReal.cxx. ◆ RooAbsReal() [2/4]. RooAbsReal::RooAbsReal ; (; const char * ; name, . const char * ; title, . const char * ; unit = """" . ). Constructor with unit label. ; Definition at line 205 of file RooAbsReal.cxx. ◆ RooAbsReal() [3/4]. RooAbsReal::RooAbsReal ; (; const char * ; name, . const char * ; title, . double ; minVal, . double ; maxVal, . const char * ; unit = """" . ). Constructor with plot range and unit label. ; Definition at line 213 of file RooAbsReal.cxx. ◆ RooAbsReal() [4/4]. RooAbsReal::RooAbsReal ; (; const RooAbsReal & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 224 of file RooAbsReal.cxx. ◆ ~RooAbsReal(). RooAbsReal::~RooAbsReal ; (; ). override . Destructor. ; Definition at line 238 of file RooAbsReal.cxx. Member Function Documentation. ◆ _DEBUG_getVal(). double RooAbsReal::_DEBUG_getVal ; (; const RooArgSet * ; normalisationSet); const. private . Debug version of getVal(), which is slow and does error checking. ; Definition at line 4434 of file RooAbsReal.cxx. ◆ analyticalIntegral(). double RooAbsReal::analyticalIntegral ; (; Int_t ; code, . const char * ; rangeName = nullptr . ); const. virtual . Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ; This functions will only be called with codes returned by getAnalyticalIntegral, except code zero. ; Reimplemented in RooLegacyExpPoly, RooPowerSum, RooGaussModel, RooLandau, RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGExpModel, RooJohnson, RooKeysPdf, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooUniform, RooAddition, RooBinSamplingPdf, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooProduct, RooTruthModel, RooWrapperPdf, RooFixedProdPdf, RooLegendre, RooNonCentralChiSquar",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:68719,Availability,error,error,68719,"t RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Perform a \( \chi^2 \) fit to given histogram. ; By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession; The following named arguments are supported. Options to control construction of chi2 . Extended(bool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on the fly on all observables. Multiple comma separated range names can be specified. . NumCPU(int num) Parallelize NLL calculation on num CPUs . Optimize(bool flag) Activate constant term optimization (on by default) . IntegrateBins() Integrate PDF within each bin. This sets the desired precision. Options to control flow of fit procedur",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:69144,Availability,error,error,69144,"ool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on the fly on all observables. Multiple comma separated range names can be specified. . NumCPU(int num) Parallelize NLL calculation on num CPUs . Optimize(bool flag) Activate constant term optimization (on by default) . IntegrateBins() Integrate PDF within each bin. This sets the desired precision. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set M",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:70706,Availability,error,errors,70706,"tialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . Definition at line 4105 of file RooAbsReal.cxx. ◆ chi2FitTo() [2/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooLinkedList & ; cmdList . ). virtual . Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ; List of possible commands in the cmdList:. Type of CmdArg Effect on \( \chi^2 \) . DataError() Choose between:; RooAbsData::Expected: Expected Poisson error ( \( \sqrt{n_\text{expected}} \) from the PDF).; RooAbsData::SumW2: The observed error from the square root of the sum of weights, i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Po",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:70826,Availability,error,error,70826,"efault . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . Definition at line 4105 of file RooAbsReal.cxx. ◆ chi2FitTo() [2/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooLinkedList & ; cmdList . ). virtual . Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ; List of possible commands in the cmdList:. Type of CmdArg Effect on \( \chi^2 \) . DataError() Choose between:; RooAbsData::Expected: Expected Poisson error ( \( \sqrt{n_\text{expected}} \) from the PDF).; RooAbsData::SumW2: The observed error from the square root of the sum of weights, i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \( n_\text{observed} \). If for a given bin \( ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:70906,Availability,error,error,70906,"lag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . Definition at line 4105 of file RooAbsReal.cxx. ◆ chi2FitTo() [2/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooLinkedList & ; cmdList . ). virtual . Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ; List of possible commands in the cmdList:. Type of CmdArg Effect on \( \chi^2 \) . DataError() Choose between:; RooAbsData::Expected: Expected Poisson error ( \( \sqrt{n_\text{expected}} \) from the PDF).; RooAbsData::SumW2: The observed error from the square root of the sum of weights, i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \( n_\text{observed} \). If for a given bin \( n_\text{expected} \) is lower than the \( n_\text{observed} \), the lower uncertainty is taken (e",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:71412,Availability,error,error,71412," off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . Definition at line 4105 of file RooAbsReal.cxx. ◆ chi2FitTo() [2/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooLinkedList & ; cmdList . ). virtual . Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ; List of possible commands in the cmdList:. Type of CmdArg Effect on \( \chi^2 \) . DataError() Choose between:; RooAbsData::Expected: Expected Poisson error ( \( \sqrt{n_\text{expected}} \) from the PDF).; RooAbsData::SumW2: The observed error from the square root of the sum of weights, i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \( n_\text{observed} \). If for a given bin \( n_\text{expected} \) is lower than the \( n_\text{observed} \), the lower uncertainty is taken (e.g., the difference between the mean and the 16 % quantile). If \( n_\text{expected} \) is higher than \( n_\text{observed} \), the higher uncertainty is taken (e.g., the difference between the 84 % quantile and the mean).; RooAbsData::Auto (default): RooAbsData::Expected for unweighted data, RooAbsData::SumW2 for weighted data. . Extended() Use expected number of events of an extended p.d.f as normalization . NumCPU() Activate parallel processing feature . Range() Calculate \( \chi^2 \) only in selected r",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:71499,Availability,error,error,71499," RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . Definition at line 4105 of file RooAbsReal.cxx. ◆ chi2FitTo() [2/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooLinkedList & ; cmdList . ). virtual . Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ; List of possible commands in the cmdList:. Type of CmdArg Effect on \( \chi^2 \) . DataError() Choose between:; RooAbsData::Expected: Expected Poisson error ( \( \sqrt{n_\text{expected}} \) from the PDF).; RooAbsData::SumW2: The observed error from the square root of the sum of weights, i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \( n_\text{observed} \). If for a given bin \( n_\text{expected} \) is lower than the \( n_\text{observed} \), the lower uncertainty is taken (e.g., the difference between the mean and the 16 % quantile). If \( n_\text{expected} \) is higher than \( n_\text{observed} \), the higher uncertainty is taken (e.g., the difference between the 84 % quantile and the mean).; RooAbsData::Auto (default): RooAbsData::Expected for unweighted data, RooAbsData::SumW2 for weighted data. . Extended() Use expected number of events of an extended p.d.f as normalization . NumCPU() Activate parallel processing feature . Range() Calculate \( \chi^2 \) only in selected region . Verbose() Verbose output of GOF framework . IntegrateBins() Integrate PDF within each bin. This ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:71565,Availability,error,errors,71565,"isable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . Definition at line 4105 of file RooAbsReal.cxx. ◆ chi2FitTo() [2/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooLinkedList & ; cmdList . ). virtual . Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ; List of possible commands in the cmdList:. Type of CmdArg Effect on \( \chi^2 \) . DataError() Choose between:; RooAbsData::Expected: Expected Poisson error ( \( \sqrt{n_\text{expected}} \) from the PDF).; RooAbsData::SumW2: The observed error from the square root of the sum of weights, i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \( n_\text{observed} \). If for a given bin \( n_\text{expected} \) is lower than the \( n_\text{observed} \), the lower uncertainty is taken (e.g., the difference between the mean and the 16 % quantile). If \( n_\text{expected} \) is higher than \( n_\text{observed} \), the higher uncertainty is taken (e.g., the difference between the 84 % quantile and the mean).; RooAbsData::Auto (default): RooAbsData::Expected for unweighted data, RooAbsData::SumW2 for weighted data. . Extended() Use expected number of events of an extended p.d.f as normalization . NumCPU() Activate parallel processing feature . Range() Calculate \( \chi^2 \) only in selected region . Verbose() Verbose output of GOF framework . IntegrateBins() Integrate PDF within each bin. This sets the desired precision. Only useful for binned fits. . SumCoefRange() Set the range",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:71671,Availability,error,errors,71671," errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . Definition at line 4105 of file RooAbsReal.cxx. ◆ chi2FitTo() [2/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooLinkedList & ; cmdList . ). virtual . Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ; List of possible commands in the cmdList:. Type of CmdArg Effect on \( \chi^2 \) . DataError() Choose between:; RooAbsData::Expected: Expected Poisson error ( \( \sqrt{n_\text{expected}} \) from the PDF).; RooAbsData::SumW2: The observed error from the square root of the sum of weights, i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \( n_\text{observed} \). If for a given bin \( n_\text{expected} \) is lower than the \( n_\text{observed} \), the lower uncertainty is taken (e.g., the difference between the mean and the 16 % quantile). If \( n_\text{expected} \) is higher than \( n_\text{observed} \), the higher uncertainty is taken (e.g., the difference between the 84 % quantile and the mean).; RooAbsData::Auto (default): RooAbsData::Expected for unweighted data, RooAbsData::SumW2 for weighted data. . Extended() Use expected number of events of an extended p.d.f as normalization . NumCPU() Activate parallel processing feature . Range() Calculate \( \chi^2 \) only in selected region . Verbose() Verbose output of GOF framework . IntegrateBins() Integrate PDF within each bin. This sets the desired precision. Only useful for binned fits. . SumCoefRange() Set the range in which to interpret the coefficients of RooAddPdf components . SplitRange() Fit ranges used in different ca",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:73710,Availability,error,errors,73710,"ter the category. Using Range(""range""), SplitRange() as switches, different ranges could be set like this: myVariable.setRange(""range_pi0"", 135, 210);; myVariable.setRange(""range_gamma"", 50, 210);; . ConditionalObservables(Args_t &&... argsOrArgSet) Define projected observables. Arguments can either be multiple RooRealVar or a single RooArgSet containing them. Definition at line 4159 of file RooAbsReal.cxx. ◆ chi2FitTo() [3/4]. RooAbsReal::chi2FitTo ; (; RooDataSet & ; xydata, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ; The y values can either be the event weights, or can be another column designated by the YVar() argument. The y value must have errors defined for the \( \chi^2 \) to be well defined. Options to control construction of the chi-square . YVar(RooRealVar& yvar) Designate given column in dataset as Y value . Integrate(bool flag) Integrate function over range specified by X errors rather than take value at bin center. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit ste",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:73954,Availability,error,errors,73954,"vables(Args_t &&... argsOrArgSet) Define projected observables. Arguments can either be multiple RooRealVar or a single RooArgSet containing them. Definition at line 4159 of file RooAbsReal.cxx. ◆ chi2FitTo() [3/4]. RooAbsReal::chi2FitTo ; (; RooDataSet & ; xydata, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ; The y values can either be the event weights, or can be another column designated by the YVar() argument. The y value must have errors defined for the \( \chi^2 \) to be well defined. Options to control construction of the chi-square . YVar(RooRealVar& yvar) Designate given column in dataset as Y value . Integrate(bool flag) Integrate function over range specified by X errors rather than take value at bin center. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:75031,Availability,error,errors,75031,"tialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4236 of file RooAbsReal.cxx. ◆ chi2FitTo() [4/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataSet & ; xydata, . const RooLinkedList & ; cmdList . ). virtual . Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ; The y values can either be the event weights, or can be another column designated by the YVar() argument. The y value must have errors defined for the \( \chi^2 \) to be well defined. Options to control construction of the chi-square . YVar(RooRealVar& yvar) Designate given column in dataset as Y valu",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:75151,Availability,error,error,75151,"efault . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4236 of file RooAbsReal.cxx. ◆ chi2FitTo() [4/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataSet & ; xydata, . const RooLinkedList & ; cmdList . ). virtual . Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ; The y values can either be the event weights, or can be another column designated by the YVar() argument. The y value must have errors defined for the \( \chi^2 \) to be well defined. Options to control construction of the chi-square . YVar(RooRealVar& yvar) Designate given column in dataset as Y value . Integrate(bool flag) Integrate function over range specified by X errors",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:75231,Availability,error,error,75231,"lag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4236 of file RooAbsReal.cxx. ◆ chi2FitTo() [4/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataSet & ; xydata, . const RooLinkedList & ; cmdList . ). virtual . Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ; The y values can either be the event weights, or can be another column designated by the YVar() argument. The y value must have errors defined for the \( \chi^2 \) to be well defined. Options to control construction of the chi-square . YVar(RooRealVar& yvar) Designate given column in dataset as Y value . Integrate(bool flag) Integrate function over range specified by X errors rather than take value at bin center. Options to control flow of fit procedure . InitialHesse(bo",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:75871,Availability,error,errors,75871,". Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4236 of file RooAbsReal.cxx. ◆ chi2FitTo() [4/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataSet & ; xydata, . const RooLinkedList & ; cmdList . ). virtual . Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ; The y values can either be the event weights, or can be another column designated by the YVar() argument. The y value must have errors defined for the \( \chi^2 \) to be well defined. Options to control construction of the chi-square . YVar(RooRealVar& yvar) Designate given column in dataset as Y value . Integrate(bool flag) Integrate function over range specified by X errors rather than take value at bin center. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit ste",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:76115,Availability,error,errors,76115,"ut completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4236 of file RooAbsReal.cxx. ◆ chi2FitTo() [4/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataSet & ; xydata, . const RooLinkedList & ; cmdList . ). virtual . Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ; The y values can either be the event weights, or can be another column designated by the YVar() argument. The y value must have errors defined for the \( \chi^2 \) to be well defined. Options to control construction of the chi-square . YVar(RooRealVar& yvar) Designate given column in dataset as Y value . Integrate(bool flag) Integrate function over range specified by X errors rather than take value at bin center. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:77192,Availability,error,errors,77192,"tialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4254 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 548 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3542 of file RooAbsReal.cx",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:77312,Availability,error,error,77312,"efault . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4254 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 548 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3542 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:77392,Availability,error,error,77392,"lag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4254 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 548 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3542 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy th",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:78143,Availability,error,error,78143,"lErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4254 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 548 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3542 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 2997 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) variable from a histogram and this function. ; Parameters. arg1,arg2,arg3,arg",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:80837,Availability,error,errors,80837,"teChi2 ; (; RooDataHist & ; data, . const RooLinkedList & ; cmdList . ). virtual . See alsoRooAbsReal::createChi2(RooDataHist&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ; Parameters. datahist data ; cmdListList with RooCmdArg() from the table . Definition at line 4200 of file RooAbsReal.cxx. ◆ createChi2() [3/4]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createChi2 ; (; RooDataSet & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) from a series of x and y values stored in a dataset. ; The y values can either be the event weights (default), or can be another column designated by the YVar() argument. The y value must have errors defined for the \( \chi^2 \) to be well defined.; The following named arguments are supported. Options to control construction of the \( \chi^2 \) . YVar(RooRealVar& yvar) Designate given column in dataset as Y value . Integrate(bool flag) Integrate function over range specified by X errors rather than take value at bin center. . Definition at line 4276 of file RooAbsReal.cxx. ◆ createChi2() [4/4]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createChi2 ; (; RooDataSet & ; data, . const RooLinkedList & ; cmdList . ). virtual . See RooAbsReal::createChi2(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ; Definition at line 4292 of file RooAbsReal.cxx. ◆ createFundamental(). RooFit::OwningPtr< RooAbsArg > RooAbsReal::createFundamental ; (; const char * ; newname = nullptr); const. overridevirtual . Create a RooRealVar fundamental object with our properties. ; The new object will be created without a",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:81129,Availability,error,errors,81129,"; Parameters. datahist data ; cmdListList with RooCmdArg() from the table . Definition at line 4200 of file RooAbsReal.cxx. ◆ createChi2() [3/4]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createChi2 ; (; RooDataSet & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) from a series of x and y values stored in a dataset. ; The y values can either be the event weights (default), or can be another column designated by the YVar() argument. The y value must have errors defined for the \( \chi^2 \) to be well defined.; The following named arguments are supported. Options to control construction of the \( \chi^2 \) . YVar(RooRealVar& yvar) Designate given column in dataset as Y value . Integrate(bool flag) Integrate function over range specified by X errors rather than take value at bin center. . Definition at line 4276 of file RooAbsReal.cxx. ◆ createChi2() [4/4]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createChi2 ; (; RooDataSet & ; data, . const RooLinkedList & ; cmdList . ). virtual . See RooAbsReal::createChi2(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ; Definition at line 4292 of file RooAbsReal.cxx. ◆ createFundamental(). RooFit::OwningPtr< RooAbsArg > RooAbsReal::createFundamental ; (; const char * ; newname = nullptr); const. overridevirtual . Create a RooRealVar fundamental object with our properties. ; The new object will be created without any fit limits. ; Implements RooAbsArg.; Definition at line 3130 of file RooAbsReal.cxx. ◆ createHistogram() [1/3]. RooAbsReal::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; xvar, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 =",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:91798,Availability,error,error,91798,"Obs = nullptr . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; Create a new object \( G \) that represents the normalized projection: ; \[; G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; \]. where \( F[x,y,p] \) is the function we represent, and \( \{ p \} \) are the remaining variables (""parameters"").; Parameters. [in]dependentVarsDependent variables over which to normalise, \( \{x\} \). ; [in]projectedVarsVariables to project out, \( \{ y \} \). ; [out]cloneSetWill be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object. The latter will also be returned. The caller takes ownership of this set. ; [in]rangeNameOptional range for projection integrals ; [in]condObsConditional observables, which are not integrated for normalisation, even if they are in dependentVars or projectedVars. . ReturnsA pointer to the newly created object, or zero in case of an error. The caller is responsible for deleting the cloneSet (which includes the returned projection object). ; Definition at line 816 of file RooAbsReal.cxx. ◆ createPlotProjection() [2/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; depVars, . const RooArgSet & ; projVars, . RooArgSet *& ; cloneSet . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; createPlotProjection() ; Definition at line 787 of file RooAbsReal.cxx. ◆ createProfile(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createProfile ; (; const RooArgSet & ; paramsOfInterest). virtual . Create a RooProfileLL object that eliminates all nuisance parameters in the present function. ; The nuisance parameters are defined as all parameters of the function except the stated paramsOfInterest ; Reimplemented in RooProfileLL.; Definition at line 471 of file RooAbsReal.cxx. ◆ createRunningIntegral() [1/2",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:99076,Availability,error,error,99076,"Pdf, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooJohnson, RooLandau, RooLegacyExpPoly, RooLognormal, RooNovosibirsk, RooPoisson, RooPolynomial, RooPowerSum, RooVoigtian, RooAbsCachedPdf, RooAddition, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooBinWidthFunction, RooConstraintSum, RooGenericPdf, RooHistFunc, RooHistPdf, RooPolyVar, RooProduct, RooRatio, RooRealSumPdf, RooTruthModel, RooNormalizedPdf, RooHypatia2, RooLegendre, RooFormulaVar, and RooFixedProdPdf.; Definition at line 4343 of file RooAbsReal.cxx. ◆ enableOffsetting(). void RooAbsReal::enableOffsetting ; (; bool ; flag). virtual . Reimplemented in RooAbsTestStatistic, and RooRealMPFE.; Definition at line 4484 of file RooAbsReal.cxx. ◆ evalErrorIter(). EvalErrorData::ErrorList::iterator RooAbsReal::evalErrorIter ; (; ). static . Definition at line 181 of file RooAbsReal.cxx. ◆ evalErrorLoggingMode(). RooAbsReal::ErrorLoggingMode RooAbsReal::evalErrorLoggingMode ; (; ). static . Return current evaluation error logging mode. ; Definition at line 4302 of file RooAbsReal.cxx. ◆ evaluate(). virtual double RooAbsReal::evaluate ; (; ); const. protectedpure virtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implemented in RooStats::HistFactory::FlexibleInterpVar, RooStats::HistFactory::LinInterpVar, ParamHistFunc, PiecewiseInterpolation, RooStats::HistFactory::RooBarlowBeestonLL, Roo2DKeysPdf, RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, Ro",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:102251,Availability,error,error,102251,"ooNumRunningInt, RooPolyFunc, RooPolyVar, RooProdPdf, RooProduct, RooProfileLL, RooProjectedPdf, RooPullVar, RooRangeBoolean, RooRatio, RooRealIntegral, RooRealSumFunc, RooRealSumPdf, RooRealVar, RooRecursiveFraction, RooSecondMoment, RooSimultaneous, RooTruthModel, RooWrapperPdf, RooAbsTestStatistic, RooGenProdProj, RooNormalizedPdf, RooFixedProdPdf, RooRealMPFE, RooHypatia2, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooStats::Heaviside, ProgressMonitor, xRooProjectedPdf, and PdfWrapper. ◆ fillDataHist(). RooDataHist * RooAbsReal::fillDataHist ; (; RooDataHist * ; hist, . const RooArgSet * ; normSet, . double ; scaleFactor, . bool ; correctForBinSize = false, . bool ; showProgress = false . ); const. Fill a RooDataHist with values sampled from this function at the bin centers. ; If extendedMode is true, the p.d.f. values is multiplied by the number of expected events in each bin; An optional scaling by a given scaleFactor can be performed. Returns a pointer to the input RooDataHist, or zero in case of an error.; If correctForBinSize is true the RooDataHist is filled with the functions density (function value times the bin volume) rather than function value.; If showProgress is true a process indicator is printed on stdout in steps of one percent, which is mostly useful for the sampling of expensive functions such as likelihoods ; Definition at line 1124 of file RooAbsReal.cxx. ◆ fillHistogram(). TH1 * RooAbsReal::fillHistogram ; (; TH1 * ; hist, . const RooArgList & ; plotVars, . double ; scaleFactor = 1, . const RooArgSet * ; projectedVars = nullptr, . bool ; scaleForDensity = true, . const RooArgSet * ; condObs = nullptr, . bool ; setError = true . ); const. Fill the ROOT histogram 'hist' with values sampled from this function at the bin centers. ; Our value is calculated by first integrating out any variables in projectedVars and then scaling the result by scaleFactor. Returns a pointer to the input histogram, or zero in case of an error. The input hist",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:103200,Availability,error,error,103200," be performed. Returns a pointer to the input RooDataHist, or zero in case of an error.; If correctForBinSize is true the RooDataHist is filled with the functions density (function value times the bin volume) rather than function value.; If showProgress is true a process indicator is printed on stdout in steps of one percent, which is mostly useful for the sampling of expensive functions such as likelihoods ; Definition at line 1124 of file RooAbsReal.cxx. ◆ fillHistogram(). TH1 * RooAbsReal::fillHistogram ; (; TH1 * ; hist, . const RooArgList & ; plotVars, . double ; scaleFactor = 1, . const RooArgSet * ; projectedVars = nullptr, . bool ; scaleForDensity = true, . const RooArgSet * ; condObs = nullptr, . bool ; setError = true . ); const. Fill the ROOT histogram 'hist' with values sampled from this function at the bin centers. ; Our value is calculated by first integrating out any variables in projectedVars and then scaling the result by scaleFactor. Returns a pointer to the input histogram, or zero in case of an error. The input histogram can be any TH1 subclass, and therefore of arbitrary dimension. Variables are matched with the (x,y,...) dimensions of the input histogram according to the order in which they appear in the input plotVars list. If scaleForDensity is true the histogram is filled with a the functions density rather than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 947 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3099 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids i",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:119941,Availability,error,error,119941,".; Definition at line 370 of file RooAbsReal.h. ◆ isSelectedComp(). bool RooAbsReal::isSelectedComp ; (; ); const. If true, the current pdf is a selected component (for use in plotting) ; Definition at line 2956 of file RooAbsReal.cxx. ◆ isValid(). bool RooAbsReal::isValid ; (; ); const. inlineoverrideprotectedvirtual . Check if current value is valid. ; Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 445 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 447 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition a",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:119969,Availability,error,errors,119969,"nt pdf is a selected component (for use in plotting) ; Definition at line 2956 of file RooAbsReal.cxx. ◆ isValid(). bool RooAbsReal::isValid ; (; ); const. inlineoverrideprotectedvirtual . Check if current value is valid. ; Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 445 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 447 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . cons",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:120116,Availability,error,errors,120116,"nt pdf is a selected component (for use in plotting) ; Definition at line 2956 of file RooAbsReal.cxx. ◆ isValid(). bool RooAbsReal::isValid ; (; ); const. inlineoverrideprotectedvirtual . Check if current value is valid. ; Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 445 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 447 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . cons",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:120585,Availability,error,error,120585,"a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 447 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:120667,Availability,error,errors,120667,"oRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 447 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of va",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:120831,Availability,error,error,120831,"(; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input paramete",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:121207,Availability,error,error,121207,"al method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2903 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the content of proxy 'a' occurs in set 'allDeps' then the argument held in 'a' is copied from allDeps to a",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:121267,Availability,error,error,121267,"al method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2903 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the content of proxy 'a' occurs in set 'allDeps' then the argument held in 'a' is copied from allDeps to a",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:126753,Availability,error,errors,126753,"tralIf true, the central moment is given by \( \langle (x- \langle x \rangle )^2 \rangle \) ; [in]takeRootCalculate the square root ; [in]intNormObsIf true, the moment of the function integrated over all normalization observables is returned. . Definition at line 4034 of file RooAbsReal.cxx. ◆ moment() [2/2]. RooAbsMoment * RooAbsReal::moment ; (; RooRealVar & ; obs, . Int_t ; order, . bool ; central, . bool ; takeRoot . ). Return function representing moment of function of given order. ; Parameters. [in]obsObservable to calculate the moments for ; [in]orderOrder of the moment ; [in]centralIf true, the central moment is given by \( \langle (x- \langle x \rangle )^2 \rangle \) ; [in]takeRootCalculate the square root . Definition at line 4015 of file RooAbsReal.cxx. ◆ numEvalErrorItems(). Int_t RooAbsReal::numEvalErrorItems ; (; ). static . Definition at line 176 of file RooAbsReal.cxx. ◆ numEvalErrors(). Int_t RooAbsReal::numEvalErrors ; (; ). static . Return the number of logged evaluation errors since the last clearing. ; Definition at line 3624 of file RooAbsReal.cxx. ◆ offset(). virtual double RooAbsReal::offset ; (; ); const. inlinevirtual . Reimplemented in RooAbsTestStatistic.; Definition at line 371 of file RooAbsReal.h. ◆ operator==() [1/2]. bool RooAbsReal::operator== ; (; const RooAbsArg & ; other); const. overridevirtual . Equality operator when comparing to another RooAbsArg. ; Only functional when the other arg is a RooAbsReal ; Implements RooAbsArg.; Definition at line 261 of file RooAbsReal.cxx. ◆ operator==() [2/2]. bool RooAbsReal::operator== ; (; double ; value); const. Equality operator comparing to a double. ; Definition at line 250 of file RooAbsReal.cxx. ◆ plotAsymOn(). RooPlot * RooAbsReal::plotAsymOn ; (; RooPlot * ; frame, . const RooAbsCategoryLValue & ; asymCat, . PlotOpt ; o . ); const. protectedvirtual . Definition at line 2199 of file RooAbsReal.cxx. ◆ plotOn() [1/3]. RooAbsReal::plotOn ; (; RooPlot * ; frame, . const RooCmdArg & ; arg1 ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:130893,Availability,error,errors,130893,"s given in the set, ignoring the default projection behavior. Advanced use only. ProjWData(const RooAbsData& d) Override default projection technique (integration). For observables present in given dataset projection of PDF is achieved by constructing an average over all observable values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique. ProjWData(const RooArgSet& s, const RooAbsData& d) As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging. ProjectionRange(const char* rn) Override default range of projection integrals to a different range specified by given range name. This technique allows you to project a finite width slice in a real-valued observable. NumCPU(Int_t ncpu) Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData). Misc content control . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per curve. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. EvalErrorValue(double value) Set curve points at which (pdf) evaluation errors occur to specified value. By default the function value is plotted. Normalization(double scale, ScaleType code) Adjust normalization by given scale factor. Interpretation of number depends on code:; Relative: relative adjustment factor for a normalized function,; NumEvent: scale to match given number of events.; Raw: relative adjustment factor for an un-normalized function. Name(const chat* name) Give curve specified name in frame. Useful if curve is to be referenced later. Asymmetry(const RooCategory& c) Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than the PDF projection. Category must have two states with indices -1 and +1 or three state",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:130997,Availability,error,error,130997,"ced use only. ProjWData(const RooAbsData& d) Override default projection technique (integration). For observables present in given dataset projection of PDF is achieved by constructing an average over all observable values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique. ProjWData(const RooArgSet& s, const RooAbsData& d) As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging. ProjectionRange(const char* rn) Override default range of projection integrals to a different range specified by given range name. This technique allows you to project a finite width slice in a real-valued observable. NumCPU(Int_t ncpu) Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData). Misc content control . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per curve. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. EvalErrorValue(double value) Set curve points at which (pdf) evaluation errors occur to specified value. By default the function value is plotted. Normalization(double scale, ScaleType code) Adjust normalization by given scale factor. Interpretation of number depends on code:; Relative: relative adjustment factor for a normalized function,; NumEvent: scale to match given number of events.; Raw: relative adjustment factor for an un-normalized function. Name(const chat* name) Give curve specified name in frame. Useful if curve is to be referenced later. Asymmetry(const RooCategory& c) Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than the PDF projection. Category must have two states with indices -1 and +1 or three states with indices -1,0 and +1. ShiftToZero(bool flag) Shift entire curv",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:131077,Availability,error,error,131077,"For observables present in given dataset projection of PDF is achieved by constructing an average over all observable values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique. ProjWData(const RooArgSet& s, const RooAbsData& d) As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging. ProjectionRange(const char* rn) Override default range of projection integrals to a different range specified by given range name. This technique allows you to project a finite width slice in a real-valued observable. NumCPU(Int_t ncpu) Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData). Misc content control . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per curve. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. EvalErrorValue(double value) Set curve points at which (pdf) evaluation errors occur to specified value. By default the function value is plotted. Normalization(double scale, ScaleType code) Adjust normalization by given scale factor. Interpretation of number depends on code:; Relative: relative adjustment factor for a normalized function,; NumEvent: scale to match given number of events.; Raw: relative adjustment factor for an un-normalized function. Name(const chat* name) Give curve specified name in frame. Useful if curve is to be referenced later. Asymmetry(const RooCategory& c) Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than the PDF projection. Category must have two states with indices -1 and +1 or three states with indices -1,0 and +1. ShiftToZero(bool flag) Shift entire curve such that lowest visible point is at exactly zero. Mostly useful when plotting \( -\log(L) \) o",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:131198,Availability,error,errors,131198,"able values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique. ProjWData(const RooArgSet& s, const RooAbsData& d) As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging. ProjectionRange(const char* rn) Override default range of projection integrals to a different range specified by given range name. This technique allows you to project a finite width slice in a real-valued observable. NumCPU(Int_t ncpu) Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData). Misc content control . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per curve. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. EvalErrorValue(double value) Set curve points at which (pdf) evaluation errors occur to specified value. By default the function value is plotted. Normalization(double scale, ScaleType code) Adjust normalization by given scale factor. Interpretation of number depends on code:; Relative: relative adjustment factor for a normalized function,; NumEvent: scale to match given number of events.; Raw: relative adjustment factor for an un-normalized function. Name(const chat* name) Give curve specified name in frame. Useful if curve is to be referenced later. Asymmetry(const RooCategory& c) Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than the PDF projection. Category must have two states with indices -1 and +1 or three states with indices -1,0 and +1. ShiftToZero(bool flag) Shift entire curve such that lowest visible point is at exactly zero. Mostly useful when plotting \( -\log(L) \) or \( \chi^2 \) distributions. AddTo(const char* name, double_t wgtSelf, double_t wgtOther) Add constructed project",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:133416,Availability,down,downward,133416,"nst RooArgSet& compSet) As above, but pass a RooArgSet of the components themselves. Plotting control . DrawOption(const char* opt) Select ROOT draw option for resulting TGraph object. Currently supported options are ""F"" (fill), ""L"" (line), and ""P"" (points). NoteOption ""P"" will cause RooFit to plot (and treat) this pdf as if it were data! This is intended for plotting ""corrected data""-type pdfs such as ""data-minus-background"" or unfolded datasets. LineStyle(Int_t style) Select line style by ROOT line style code, default is solid. LineColor(Int_t color) Select line color by ROOT color code, default is blue. LineWidth(Int_t width) Select line with in pixels, default is 3. MarkerStyle(Int_t style) Select the ROOT marker style, default is 21. MarkerColor(Int_t color) Select the ROOT marker color, default is black. MarkerSize(double size) Select the ROOT marker size. FillStyle(Int_t style) Select fill style, default is not filled. If a filled style is selected, also use VLines() to add vertical downward lines at end of curve to ensure proper closure. Add DrawOption(""F"") for filled drawing. . FillColor(Int_t color) Select fill color by ROOT color code. Range(const char* name) Only draw curve in range defined by given name. Range(double lo, double hi) Only draw curve in specified range. VLines() Add vertical lines to y=0 at end points of curve. Precision(double eps) Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. Higher precision will result in more and more densely spaced curve points. Invisible(bool flag) Add curve to frame, but do not display. Useful in combination AddTo(). VisualizeError(const RooFitResult& fitres, double Z=1, bool linearMethod=true) Visualize the uncertainty on the parameters, as given in fitres, at 'Z' sigma'. The linear method is fast but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made. Intervals from the sampling method can be asymmetric, and may ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:134720,Availability,error,error,134720," end points of curve. Precision(double eps) Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. Higher precision will result in more and more densely spaced curve points. Invisible(bool flag) Add curve to frame, but do not display. Useful in combination AddTo(). VisualizeError(const RooFitResult& fitres, double Z=1, bool linearMethod=true) Visualize the uncertainty on the parameters, as given in fitres, at 'Z' sigma'. The linear method is fast but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made. Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate. VisualizeError(const RooFitResult& fitres, const RooArgSet& param, double Z=1, bool linearMethod=true) Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma' . Details on error band visualization; VisualizeError() uses plotOnWithErrorBand(). Documentation of the latter: See alsoplotOnWithErrorBand(). PyROOT; The RooAbsReal::plotOn() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Reimplemented in RooSimultaneous, RooAbsPdf, and RooSimultaneous.; Definition at line 1611 of file RooAbsReal.cxx. ◆ plotOn() [2/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . PlotOpt ; o . ); const. protectedvirtual . Plotting engine function for internal use. ; Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted function that occur in the previously plotted dataset are projected via partial integration, otherwise no projections are performed. Optionally, certain projections can be performed by summing over the values present in a provided dataset ('projData'), to correctly project out data dependents that are not properly described by the PDF (e.g. per-event errors).; The fun",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:135732,Availability,error,errors,135732," visualization; VisualizeError() uses plotOnWithErrorBand(). Documentation of the latter: See alsoplotOnWithErrorBand(). PyROOT; The RooAbsReal::plotOn() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Reimplemented in RooSimultaneous, RooAbsPdf, and RooSimultaneous.; Definition at line 1611 of file RooAbsReal.cxx. ◆ plotOn() [2/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . PlotOpt ; o . ); const. protectedvirtual . Plotting engine function for internal use. ; Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted function that occur in the previously plotted dataset are projected via partial integration, otherwise no projections are performed. Optionally, certain projections can be performed by summing over the values present in a provided dataset ('projData'), to correctly project out data dependents that are not properly described by the PDF (e.g. per-event errors).; The functions value can be multiplied with an optional scale factor. The interpretation of the scale factor is unique for generic real functions, for PDFs there are various interpretations possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; The default projection behaviour can be overridden by supplying an optional set of dependents to project via RooFit command arguments. ; Reimplemented in RooAbsPdf, and RooSimultaneous.; Definition at line 1883 of file RooAbsReal.cxx. ◆ plotOn() [3/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . RooLinkedList & ; cmdList . ); const. virtual . Internal back-end function of plotOn() with named arguments. ; Reimplemented in RooAbsPdf, RooSimultaneous, and RooSimultaneous.; Definition at line 1631 of file RooAbsReal.cxx. ◆ plotOnCompSelect(). void RooAbsReal::plotOnCompSelect ; (; RooArgSet * ; selNodes); const. protected . Helper function for plotting of composite p.d.fs. ; Given a set of selected",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:137406,Availability,error,errors,137406,"l.cxx. ◆ plotOnCompSelect(). void RooAbsReal::plotOnCompSelect ; (; RooArgSet * ; selNodes); const. protected . Helper function for plotting of composite p.d.fs. ; Given a set of selected components that should be plotted, find all nodes that (in)directly depend on these selected nodes. Mark all directly and indirectly selected nodes as 'selected' using the selectComp() method ; Definition at line 1438 of file RooAbsReal.cxx. ◆ plotOnWithErrorBand(). RooPlot * RooAbsReal::plotOnWithErrorBand ; (; RooPlot * ; frame, . const RooFitResult & ; fr, . double ; Z, . const RooArgSet * ; params, . const RooLinkedList & ; argList, . bool ; linMethod . ); const. protected . Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ; Parameters. [in]frameRooPlot to plot on ; [in]frThe RooFitResult, where errors can be extracted ; [in]ZThe desired significance (width) of the error band ; [in]paramsIf non-zero, consider only the subset of the parameters in fr for the error evaluation ; [in]argListOptional RooCmdArg that can be applied to a regular plotOn() operation ; [in]linMethodBy default (linMethod=true), a linearized error is shown. . ReturnsThe RooPlot the band was plotted on (for chaining of plotting commands).; The linearized error is calculated as follows: ; \[; \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; \]. where ; \[; F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; \]. with \( f(x) \) the plotted curve and \( \mathrm{d}a \) taken from the fit result, and \( \mathrm{Corr}(a,a') \) = the correlation matrix from the fit result, and \( Z \) = requested signifance ( \( Z \sigma \) band); The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; Alternatively, a more robust error is calculated us",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:137477,Availability,error,error,137477,"l.cxx. ◆ plotOnCompSelect(). void RooAbsReal::plotOnCompSelect ; (; RooArgSet * ; selNodes); const. protected . Helper function for plotting of composite p.d.fs. ; Given a set of selected components that should be plotted, find all nodes that (in)directly depend on these selected nodes. Mark all directly and indirectly selected nodes as 'selected' using the selectComp() method ; Definition at line 1438 of file RooAbsReal.cxx. ◆ plotOnWithErrorBand(). RooPlot * RooAbsReal::plotOnWithErrorBand ; (; RooPlot * ; frame, . const RooFitResult & ; fr, . double ; Z, . const RooArgSet * ; params, . const RooLinkedList & ; argList, . bool ; linMethod . ); const. protected . Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ; Parameters. [in]frameRooPlot to plot on ; [in]frThe RooFitResult, where errors can be extracted ; [in]ZThe desired significance (width) of the error band ; [in]paramsIf non-zero, consider only the subset of the parameters in fr for the error evaluation ; [in]argListOptional RooCmdArg that can be applied to a regular plotOn() operation ; [in]linMethodBy default (linMethod=true), a linearized error is shown. . ReturnsThe RooPlot the band was plotted on (for chaining of plotting commands).; The linearized error is calculated as follows: ; \[; \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; \]. where ; \[; F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; \]. with \( f(x) \) the plotted curve and \( \mathrm{d}a \) taken from the fit result, and \( \mathrm{Corr}(a,a') \) = the correlation matrix from the fit result, and \( Z \) = requested signifance ( \( Z \sigma \) band); The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; Alternatively, a more robust error is calculated us",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:137570,Availability,error,error,137570,"l.cxx. ◆ plotOnCompSelect(). void RooAbsReal::plotOnCompSelect ; (; RooArgSet * ; selNodes); const. protected . Helper function for plotting of composite p.d.fs. ; Given a set of selected components that should be plotted, find all nodes that (in)directly depend on these selected nodes. Mark all directly and indirectly selected nodes as 'selected' using the selectComp() method ; Definition at line 1438 of file RooAbsReal.cxx. ◆ plotOnWithErrorBand(). RooPlot * RooAbsReal::plotOnWithErrorBand ; (; RooPlot * ; frame, . const RooFitResult & ; fr, . double ; Z, . const RooArgSet * ; params, . const RooLinkedList & ; argList, . bool ; linMethod . ); const. protected . Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ; Parameters. [in]frameRooPlot to plot on ; [in]frThe RooFitResult, where errors can be extracted ; [in]ZThe desired significance (width) of the error band ; [in]paramsIf non-zero, consider only the subset of the parameters in fr for the error evaluation ; [in]argListOptional RooCmdArg that can be applied to a regular plotOn() operation ; [in]linMethodBy default (linMethod=true), a linearized error is shown. . ReturnsThe RooPlot the band was plotted on (for chaining of plotting commands).; The linearized error is calculated as follows: ; \[; \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; \]. where ; \[; F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; \]. with \( f(x) \) the plotted curve and \( \mathrm{d}a \) taken from the fit result, and \( \mathrm{Corr}(a,a') \) = the correlation matrix from the fit result, and \( Z \) = requested signifance ( \( Z \sigma \) band); The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; Alternatively, a more robust error is calculated us",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:137728,Availability,error,error,137728,"l.cxx. ◆ plotOnCompSelect(). void RooAbsReal::plotOnCompSelect ; (; RooArgSet * ; selNodes); const. protected . Helper function for plotting of composite p.d.fs. ; Given a set of selected components that should be plotted, find all nodes that (in)directly depend on these selected nodes. Mark all directly and indirectly selected nodes as 'selected' using the selectComp() method ; Definition at line 1438 of file RooAbsReal.cxx. ◆ plotOnWithErrorBand(). RooPlot * RooAbsReal::plotOnWithErrorBand ; (; RooPlot * ; frame, . const RooFitResult & ; fr, . double ; Z, . const RooArgSet * ; params, . const RooLinkedList & ; argList, . bool ; linMethod . ); const. protected . Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ; Parameters. [in]frameRooPlot to plot on ; [in]frThe RooFitResult, where errors can be extracted ; [in]ZThe desired significance (width) of the error band ; [in]paramsIf non-zero, consider only the subset of the parameters in fr for the error evaluation ; [in]argListOptional RooCmdArg that can be applied to a regular plotOn() operation ; [in]linMethodBy default (linMethod=true), a linearized error is shown. . ReturnsThe RooPlot the band was plotted on (for chaining of plotting commands).; The linearized error is calculated as follows: ; \[; \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; \]. where ; \[; F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; \]. with \( f(x) \) the plotted curve and \( \mathrm{d}a \) taken from the fit result, and \( \mathrm{Corr}(a,a') \) = the correlation matrix from the fit result, and \( Z \) = requested signifance ( \( Z \sigma \) band); The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; Alternatively, a more robust error is calculated us",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:137842,Availability,error,error,137842," using the selectComp() method ; Definition at line 1438 of file RooAbsReal.cxx. ◆ plotOnWithErrorBand(). RooPlot * RooAbsReal::plotOnWithErrorBand ; (; RooPlot * ; frame, . const RooFitResult & ; fr, . double ; Z, . const RooArgSet * ; params, . const RooLinkedList & ; argList, . bool ; linMethod . ); const. protected . Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ; Parameters. [in]frameRooPlot to plot on ; [in]frThe RooFitResult, where errors can be extracted ; [in]ZThe desired significance (width) of the error band ; [in]paramsIf non-zero, consider only the subset of the parameters in fr for the error evaluation ; [in]argListOptional RooCmdArg that can be applied to a regular plotOn() operation ; [in]linMethodBy default (linMethod=true), a linearized error is shown. . ReturnsThe RooPlot the band was plotted on (for chaining of plotting commands).; The linearized error is calculated as follows: ; \[; \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; \]. where ; \[; F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; \]. with \( f(x) \) the plotted curve and \( \mathrm{d}a \) taken from the fit result, and \( \mathrm{Corr}(a,a') \) = the correlation matrix from the fit result, and \( Z \) = requested signifance ( \( Z \sigma \) band); The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations for each value of x, where N% is con",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:137888,Availability,error,error,137888," using the selectComp() method ; Definition at line 1438 of file RooAbsReal.cxx. ◆ plotOnWithErrorBand(). RooPlot * RooAbsReal::plotOnWithErrorBand ; (; RooPlot * ; frame, . const RooFitResult & ; fr, . double ; Z, . const RooArgSet * ; params, . const RooLinkedList & ; argList, . bool ; linMethod . ); const. protected . Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ; Parameters. [in]frameRooPlot to plot on ; [in]frThe RooFitResult, where errors can be extracted ; [in]ZThe desired significance (width) of the error band ; [in]paramsIf non-zero, consider only the subset of the parameters in fr for the error evaluation ; [in]argListOptional RooCmdArg that can be applied to a regular plotOn() operation ; [in]linMethodBy default (linMethod=true), a linearized error is shown. . ReturnsThe RooPlot the band was plotted on (for chaining of plotting commands).; The linearized error is calculated as follows: ; \[; \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; \]. where ; \[; F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; \]. with \( f(x) \) the plotted curve and \( \mathrm{d}a \) taken from the fit result, and \( \mathrm{Corr}(a,a') \) = the correlation matrix from the fit result, and \( Z \) = requested signifance ( \( Z \sigma \) band); The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations for each value of x, where N% is con",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:138515,Availability,robust,robust,138515,"msIf non-zero, consider only the subset of the parameters in fr for the error evaluation ; [in]argListOptional RooCmdArg that can be applied to a regular plotOn() operation ; [in]linMethodBy default (linMethod=true), a linearized error is shown. . ReturnsThe RooPlot the band was plotted on (for chaining of plotting commands).; The linearized error is calculated as follows: ; \[; \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; \]. where ; \[; F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; \]. with \( f(x) \) the plotted curve and \( \mathrm{d}a \) taken from the fit result, and \( \mathrm{Corr}(a,a') \) = the correlation matrix from the fit result, and \( Z \) = requested signifance ( \( Z \sigma \) band); The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111) Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate. ; Definition at line 2601 of file RooAbsReal.cxx. ◆ plotSamplingHint(). std::list< double > * RooAbsReal::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Inter",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:138522,Availability,error,error,138522,"msIf non-zero, consider only the subset of the parameters in fr for the error evaluation ; [in]argListOptional RooCmdArg that can be applied to a regular plotOn() operation ; [in]linMethodBy default (linMethod=true), a linearized error is shown. . ReturnsThe RooPlot the band was plotted on (for chaining of plotting commands).; The linearized error is calculated as follows: ; \[; \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; \]. where ; \[; F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; \]. with \( f(x) \) the plotted curve and \( \mathrm{d}a \) taken from the fit result, and \( \mathrm{Corr}(a,a') \) = the correlation matrix from the fit result, and \( Z \) = requested signifance ( \( Z \sigma \) band); The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111) Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate. ; Definition at line 2601 of file RooAbsReal.cxx. ◆ plotSamplingHint(). std::list< double > * RooAbsReal::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Inter",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:138766,Availability,error,error,138766,"arized error is calculated as follows: ; \[; \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; \]. where ; \[; F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; \]. with \( f(x) \) the plotted curve and \( \mathrm{d}a \) taken from the fit result, and \( \mathrm{Corr}(a,a') \) = the correlation matrix from the fit result, and \( Z \) = requested signifance ( \( Z \sigma \) band); The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111) Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate. ; Definition at line 2601 of file RooAbsReal.cxx. ◆ plotSamplingHint(). std::list< double > * RooAbsReal::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in RooLagrangianMorphFunc, RooAdditio",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:141335,Availability,error,error,141335," Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ; Definition at line 2860 of file RooAbsReal.cxx. ◆ preferredObservableScanOrder(). void RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3694 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3582 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 455 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 445 of file RooAbsReal.cxx. ◆",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:141407,Availability,error,errors,141407,"lotting operations. ; Definition at line 2860 of file RooAbsReal.cxx. ◆ preferredObservableScanOrder(). void RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3694 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3582 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 455 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 445 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:141529,Availability,error,error,141529,"id RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3694 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3582 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 455 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 445 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ;",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:141568,Availability,error,errors,141568,"id RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3694 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3582 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 455 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 445 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ;",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:141625,Availability,error,errors,141625,"deredObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3694 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3582 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 455 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 445 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooErrorVar, RooFormulaVar, RooGe",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:143117,Availability,error,error,143117,"alue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 445 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooErrorVar, RooFormulaVar, RooGenericPdf, RooLinearVar, and RooRealVar.; Definition at line 426 of file RooAbsReal.cxx. ◆ redirectServersHook(). bool RooAbsReal::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overrideprotectedvirtual . Function that is called at the end of redirectServers(). ; Can be overloaded to inject some class-dependent behavior after server redirection, e.g. resetting of caches. The return value is meant to be an error flag, so in case something goes wrong the function should return true. If you overload this function, don't forget to also call the function of the base class.; See alsoredirectServers() For a detailed explanation of the function parameters. ; Reimplemented from RooAbsArg.; Reimplemented in RooAddPdf, RooDerivative, RooProdPdf, RooProfileLL, RooFormulaVar, RooGenericPdf, RooNumConvolution, RooRealIntegral, RooResolutionModel, RooAbsTestStatistic, and RooProjectedPdf.; Definition at line 4474 of file RooAbsReal.cxx. ◆ selectComp(). void RooAbsReal::selectComp ; (; bool ; flag). inline . Definition at line 377 of file RooAbsReal.h. ◆ selectNormalization(). void RooAbsReal::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given set of observables to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice of normalization such as RooAddPdf ; Reimplemented in RooAddModel",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:145564,Availability,error,error,145564,"RooAddPdf ; Reimplemented in RooBernstein, RooChebychev, RooAddModel, RooAddPdf, RooProdPdf, and RooSimultaneous.; Definition at line 3373 of file RooAbsReal.cxx. ◆ setCachedValue(). void RooAbsReal::setCachedValue ; (; double ; value, . bool ; notifyClients = true . ). inlinefinalvirtual . Overwrite the value stored in this object's cache. ; This can be used to fake a computation that resulted in value. Parameters. [in]valueValue to write. ; [in]notifyClientsIf true, notify users of this object that its value changed. This is the default. . Reimplemented from RooAbsArg.; Definition at line 558 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAddition, RooConstraintSum, and RooAbsTestStatistic.; Definition at line 367 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4316 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 191 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3346 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3335 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (;",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:145624,Availability,error,error,145624,"Pdf, and RooSimultaneous.; Definition at line 3373 of file RooAbsReal.cxx. ◆ setCachedValue(). void RooAbsReal::setCachedValue ; (; double ; value, . bool ; notifyClients = true . ). inlinefinalvirtual . Overwrite the value stored in this object's cache. ; This can be used to fake a computation that resulted in value. Parameters. [in]valueValue to write. ; [in]notifyClientsIf true, notify users of this object that its value changed. This is the default. . Reimplemented from RooAbsArg.; Definition at line 558 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAddition, RooConstraintSum, and RooAbsTestStatistic.; Definition at line 367 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4316 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 191 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3346 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3335 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4324 of file RooAbsReal.cxx. ◆ setPl",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:145694,Availability,error,errors,145694,"Pdf, and RooSimultaneous.; Definition at line 3373 of file RooAbsReal.cxx. ◆ setCachedValue(). void RooAbsReal::setCachedValue ; (; double ; value, . bool ; notifyClients = true . ). inlinefinalvirtual . Overwrite the value stored in this object's cache. ; This can be used to fake a computation that resulted in value. Parameters. [in]valueValue to write. ; [in]notifyClientsIf true, notify users of this object that its value changed. This is the default. . Reimplemented from RooAbsArg.; Definition at line 558 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAddition, RooConstraintSum, and RooAbsTestStatistic.; Definition at line 367 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4316 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 191 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3346 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3335 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4324 of file RooAbsReal.cxx. ◆ setPl",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:145810,Availability,error,error,145810," double ; value, . bool ; notifyClients = true . ). inlinefinalvirtual . Overwrite the value stored in this object's cache. ; This can be used to fake a computation that resulted in value. Parameters. [in]valueValue to write. ; [in]notifyClientsIf true, notify users of this object that its value changed. This is the default. . Reimplemented from RooAbsArg.; Definition at line 558 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAddition, RooConstraintSum, and RooAbsTestStatistic.; Definition at line 367 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4316 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 191 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3346 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3335 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4324 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at l",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:151078,Availability,error,error,151078,"icPdf, RooHistFunc, RooHistPdf, RooLinearCombination, RooLinearVar, RooMoment, RooMultiVarGaussian, RooNumCdf, RooNumConvolution, RooNumConvPdf, RooNumRunningInt, RooPolyFunc, RooPolyVar, RooProdPdf, RooProduct, RooProfileLL, RooProjectedPdf, RooPullVar, RooRangeBoolean, RooRatio, RooRealIntegral, RooRealSumFunc, RooRealSumPdf, RooRealVar, RooRecursiveFraction, RooResolutionModel, RooSecondMoment, RooSimultaneous, RooTruthModel, RooWrapperPdf, RooLegendre, RooNonCentralChiSquare, and RooSpHarmonic. ◆ StreamerNVirtual(). void RooAbsReal::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 548 of file RooAbsReal.h. ◆ syncCache(). void RooAbsReal::syncCache ; (; const RooArgSet * ; set = nullptr). inlineoverrideprotectedvirtual . Implements RooAbsArg.; Reimplemented in RooErrorVar.; Definition at line 456 of file RooAbsReal.h. ◆ traceEval(). double RooAbsReal::traceEval ; (; const RooArgSet * ; set); const. protected . Calculate current value of object, with error tracing wrapper. ; Definition at line 319 of file RooAbsReal.cxx. ◆ writeToStream(). void RooAbsReal::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . Write object contents to stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooConstVar, RooErrorVar, RooFormulaVar, RooGenericPdf, RooLinearVar, and RooRealVar.; Definition at line 436 of file RooAbsReal.cxx. Friends And Related Symbol Documentation. ◆ AddCacheElem. friend class AddCacheElem. friend . Definition at line 407 of file RooAbsReal.h. ◆ BatchInterfaceAccessor. friend class BatchInterfaceAccessor. friend . Definition at line 399 of file RooAbsReal.h. ◆ RooAddHelpers. friend class RooAddHelpers. friend . Definition at line 404 of file RooAbsReal.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 406 of file RooAbsReal.h. ◆ RooAddPdf. friend class RooAddPdf. friend . Definition at line 405 of file RooAbsReal.h. ◆ RooFit::Eva",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:8876,Deployability,configurat,configuration,8876,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:8906,Deployability,integrat,integration,8906,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:9837,Deployability,configurat,configuration,9837,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:9867,Deployability,integrat,integration,9867,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:14462,Deployability,integrat,integration,14462,"on tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:14474,Deployability,configurat,configuration,14474,"on tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:14589,Deployability,integrat,integration,14589," void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool h",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:14601,Deployability,configurat,configuration,14601," void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool h",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:18691,Deployability,integrat,integration,18691,"uble xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &o",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:18703,Deployability,configurat,configuration,18703,"uble xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &o",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:18824,Deployability,integrat,integrator,18824,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constru",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:18835,Deployability,configurat,configuration,18835,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constru",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:18868,Deployability,integrat,integration,18868,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constru",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:18880,Deployability,configurat,configuration,18880,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constru",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:19290,Deployability,integrat,integrator,19290,"ing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollec",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:19301,Deployability,configurat,configuration,19301,"ing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollec",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:19431,Deployability,integrat,integrator,19431,"mmy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:19442,Deployability,configurat,configuration,19442,"mmy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:31358,Deployability,update,updates,31358,"ar *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashContext &ctx) const;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooWorkspace * workspace () const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const RooAbsArg &arg) const;  Check if this is serving values to arg. ;  ; bool isValueServer (const char *name) const;  Check if this is serving values to an object with name name. ;  ; bool isShapeServer (const RooAbsArg &arg) const;  Check if this is serving shape to arg. ;  ; bool isShapeServer (const char *name) const;  Check if this is serving shape to an object with name name. ;  ; void leafNodeServerList (RooAbsColl",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:33409,Deployability,integrat,integrated,33409," *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all leaf nodes of the arg tree, starting with ourself as top node. ;  ; void branchNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all branch nodes of the arg tree starting with ourself as top node. ;  ; void treeNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool doBranch=true, bool doLeaf=true, bool valueOnly=false, bool recurseNonDerived=false) const;  Fill supplied list with nodes of the arg tree, following all server links, starting with ourself as top node. ;  ; virtual bool isFundamental () const;  Is this object a fundamental type that can be added to a dataset? Fundamental-type subclasses override this method to return true. ;  ; virtual bool isLValue () const;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool redirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool isRecursionStep=false);  Replace all direct servers of this object with the new servers in newServerList. ;  ; bool redirectServers (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:47323,Deployability,integrat,integration,47323,"onst;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:47335,Deployability,configurat,configuration,47335,"onst;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:51179,Deployability,integrat,integrated,51179,"irty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:51237,Deployability,integrat,integration,51237,"irty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:57246,Deployability,integrat,integration,57246," void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . Protected Attributes; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToke",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:86532,Deployability,configurat,configuration,86532," 1183 of file RooAbsReal.cxx. ◆ createIntegral() [1/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const char * ; rangeName . ); const. inline . Create integral over observables in iset in range named rangeName. ; Definition at line 207 of file RooAbsReal.h. ◆ createIntegral() [2/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ; Definition at line 211 of file RooAbsReal.h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:86562,Deployability,integrat,integration,86562," 1183 of file RooAbsReal.cxx. ◆ createIntegral() [1/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const char * ; rangeName . ); const. inline . Create integral over observables in iset in range named rangeName. ; Definition at line 207 of file RooAbsReal.h. ◆ createIntegral() [2/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ; Definition at line 211 of file RooAbsReal.h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:86998,Deployability,integrat,integration,86998,"set in range named rangeName with integrand normalized over observables in nset. ; Definition at line 211 of file RooAbsReal.h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:87192,Deployability,integrat,integrates,87192,".h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const Roo",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:87217,Deployability,integrat,integrates,87217,".h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const Roo",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:87478,Deployability,integrat,integrated,87478,"in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is aut",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:87562,Deployability,integrat,integration,87562,"r any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; No",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:88308,Deployability,integrat,integration,88308,"d is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:88504,Deployability,integrat,integrates,88504,"ain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 514 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr<",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:88529,Deployability,integrat,integrates,88529,"ain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 514 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr<",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:88633,Deployability,integrat,integrating,88633,"rmed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 514 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create int",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:89020,Deployability,configurat,configuration,89020,"mdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 514 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ; Definition at line 220 of file RooAbsReal.h. ◆ createIntObj(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntObj ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset, . const RooNumIntConfig * ; cfg, . const char * ; rangeName . ); const. protected . Inter",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:89050,Deployability,integrat,integration,89050,"mdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 514 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ; Definition at line 220 of file RooAbsReal.h. ◆ createIntObj(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntObj ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset, . const RooNumIntConfig * ; cfg, . const char * ; rangeName . ); const. protected . Inter",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:89712,Deployability,configurat,configuration,89712,"tegral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 514 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ; Definition at line 220 of file RooAbsReal.h. ◆ createIntObj(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntObj ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset, . const RooNumIntConfig * ; cfg, . const char * ; rangeName . ); const. protected . Internal utility function for createIntegral() that creates the actual integral object. ; Definition at line 590 of file RooAbsReal.cxx. ◆ createIntRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Utility function for createRunningIntegral. ; It creates an object implementing the standard (analytical) integration technique for calculating the running integral. ; Definition at line 3827 of file RooAbsReal.cxx. ◆ createPlotProjection() [1/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; dependentVars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:89742,Deployability,integrat,integration,89742,"tegral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 514 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ; Definition at line 220 of file RooAbsReal.h. ◆ createIntObj(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntObj ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset, . const RooNumIntConfig * ; cfg, . const char * ; rangeName . ); const. protected . Internal utility function for createIntegral() that creates the actual integral object. ; Definition at line 590 of file RooAbsReal.cxx. ◆ createIntRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Utility function for createRunningIntegral. ; It creates an object implementing the standard (analytical) integration technique for calculating the running integral. ; Definition at line 3827 of file RooAbsReal.cxx. ◆ createPlotProjection() [1/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; dependentVars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:90404,Deployability,integrat,integration,90404,"file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ; Definition at line 220 of file RooAbsReal.h. ◆ createIntObj(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntObj ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset, . const RooNumIntConfig * ; cfg, . const char * ; rangeName . ); const. protected . Internal utility function for createIntegral() that creates the actual integral object. ; Definition at line 590 of file RooAbsReal.cxx. ◆ createIntRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Utility function for createRunningIntegral. ; It creates an object implementing the standard (analytical) integration technique for calculating the running integral. ; Definition at line 3827 of file RooAbsReal.cxx. ◆ createPlotProjection() [1/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; dependentVars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; cloneSet, . const char * ; rangeName = nullptr, . const RooArgSet * ; condObs = nullptr . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; Create a new object \( G \) that represents the normalized projection: ; \[; G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; \]. where \( F[x,y,p] \) is the function we represent, and \( \{ p \} \) are the remaining variables (""parameters"").; Parameters. [in]dependentVarsDependent variables over which to normalise, \( \{x\} \). ; [in]projectedVarsVariables to project out, \( \{ y \} \). ; [out]cloneSetWill be set to a RooArgSet*, which will",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:91646,Deployability,integrat,integrated,91646,"Vars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; cloneSet, . const char * ; rangeName = nullptr, . const RooArgSet * ; condObs = nullptr . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; Create a new object \( G \) that represents the normalized projection: ; \[; G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; \]. where \( F[x,y,p] \) is the function we represent, and \( \{ p \} \) are the remaining variables (""parameters"").; Parameters. [in]dependentVarsDependent variables over which to normalise, \( \{x\} \). ; [in]projectedVarsVariables to project out, \( \{ y \} \). ; [out]cloneSetWill be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object. The latter will also be returned. The caller takes ownership of this set. ; [in]rangeNameOptional range for projection integrals ; [in]condObsConditional observables, which are not integrated for normalisation, even if they are in dependentVars or projectedVars. . ReturnsA pointer to the newly created object, or zero in case of an error. The caller is responsible for deleting the cloneSet (which includes the returned projection object). ; Definition at line 816 of file RooAbsReal.cxx. ◆ createPlotProjection() [2/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; depVars, . const RooArgSet & ; projVars, . RooArgSet *& ; cloneSet . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; createPlotProjection() ; Definition at line 787 of file RooAbsReal.cxx. ◆ createProfile(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createProfile ; (; const RooArgSet & ; paramsOfInterest). virtual . Create a RooProfileLL object that eliminates all nuisance parameters in the present function. ; The nuisance parameters are defined as all parameters of the function except the s",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:93692,Deployability,integrat,integration,93692,"bsReal.cxx. ◆ createRunningIntegral() [1/2]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ; Definition at line 3706 of file RooAbsReal.cxx. ◆ createRunningIntegral() [2/2]. RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the us",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:93886,Deployability,integrat,integrates,93886,"ooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ; Definition at line 3706 of file RooAbsReal.cxx. ◆ createRunningIntegral() [2/2]. RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:93911,Deployability,integrat,integrates,93911,"ooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ; Definition at line 3706 of file RooAbsReal.cxx. ◆ createRunningIntegral() [2/2]. RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:94039,Deployability,integrat,integration,94039,"(; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:94263,Deployability,integrat,integration,94263,"(; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:94396,Deployability,integrat,integrates,94396,"(; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:94526,Deployability,integrat,integration,94526,"he running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; The following named arguments are accepted . Effect on integral creation . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of int",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:94855,Deployability,integrat,integrate,94855," name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; The following named arguments are accepted . Effect on integral creation . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf . ScanNum() Apply scanning technique if cdf integral involves numeric integration . ScanAll() Always apply scanning technique . ScanNone() Never apply scanning technique . PyROOT; The RooAbsReal::creat",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:95381,Deployability,integrat,integration,95381,"gInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; The following named arguments are accepted . Effect on integral creation . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf . ScanNum() Apply scanning technique if cdf integral involves numeric integration . ScanAll() Always apply scanning technique . ScanNone() Never apply scanning technique . PyROOT; The RooAbsReal::createRunningIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 3750 of file RooAbsReal.cxx. ◆ createScanRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createScanRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . Int_t ; numScanBins, . Int_t ; intOrder . ). Utility function for createRunningIntegral that construct an object implementing the numeric scanning technique for calculating the running integral. ; Definition at line 3810 of file RooAbsReal.cxx",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:95643,Deployability,integrat,integration,95643,"parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; The following named arguments are accepted . Effect on integral creation . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf . ScanNum() Apply scanning technique if cdf integral involves numeric integration . ScanAll() Always apply scanning technique . ScanNone() Never apply scanning technique . PyROOT; The RooAbsReal::createRunningIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 3750 of file RooAbsReal.cxx. ◆ createScanRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createScanRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . Int_t ; numScanBins, . Int_t ; intOrder . ). Utility function for createRunningIntegral that construct an object implementing the numeric scanning technique for calculating the running integral. ; Definition at line 3810 of file RooAbsReal.cxx. ◆ DeclFileName(). static const char * RooAbsReal::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 548 of file RooAbsReal.h. ◆ defaultErrorLevel(). virtual double RooAbsReal::defaultErrorLevel ; (; ); ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:96987,Deployability,integrat,integration,96987,"wningPtr< RooAbsReal > RooAbsReal::createScanRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . Int_t ; numScanBins, . Int_t ; intOrder . ). Utility function for createRunningIntegral that construct an object implementing the numeric scanning technique for calculating the running integral. ; Definition at line 3810 of file RooAbsReal.cxx. ◆ DeclFileName(). static const char * RooAbsReal::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 548 of file RooAbsReal.h. ◆ defaultErrorLevel(). virtual double RooAbsReal::defaultErrorLevel ; (; ); const. inlinevirtual . Reimplemented in RooAddition, RooFit::TestStatistics::RooRealL, RooFormulaVar, RooFit::Experimental::RooFuncWrapper, RooChi2Var, RooNLLVar, RooXYChi2Var, and ProgressMonitor.; Definition at line 248 of file RooAbsReal.h. ◆ defaultIntegratorConfig(). RooNumIntConfig * RooAbsReal::defaultIntegratorConfig ; (; ). static . Returns the default numeric integration configuration for all RooAbsReals. ; Definition at line 3272 of file RooAbsReal.cxx. ◆ derivative() [1/2]. RooDerivative * RooAbsReal::derivative ; (; RooRealVar & ; obs, . const RooArgSet & ; normSet, . Int_t ; order, . double ; eps = 0.001 . ). Return function representing first, second or third order derivative of this function. ; Definition at line 3999 of file RooAbsReal.cxx. ◆ derivative() [2/2]. RooDerivative * RooAbsReal::derivative ; (; RooRealVar & ; obs, . Int_t ; order = 1, . double ; eps = 0.001 . ). Return function representing first, second or third order derivative of this function. ; Definition at line 3987 of file RooAbsReal.cxx. ◆ doEval(). void RooAbsReal::doEval ; (; RooFit::EvalContext & ; ctx); const. virtual . Base function for computing multiple values of a RooAbsReal. ; Parameters. ctxAn evaluation context object . Reimplemented in RooStats::HistFactory::FlexibleInterpVar, ParamHistFunc, PiecewiseInterpolation, RooArgusBG, RooBernstein, RooBifurGauss, RooBM",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:96999,Deployability,configurat,configuration,96999,"wningPtr< RooAbsReal > RooAbsReal::createScanRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . Int_t ; numScanBins, . Int_t ; intOrder . ). Utility function for createRunningIntegral that construct an object implementing the numeric scanning technique for calculating the running integral. ; Definition at line 3810 of file RooAbsReal.cxx. ◆ DeclFileName(). static const char * RooAbsReal::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 548 of file RooAbsReal.h. ◆ defaultErrorLevel(). virtual double RooAbsReal::defaultErrorLevel ; (; ); const. inlinevirtual . Reimplemented in RooAddition, RooFit::TestStatistics::RooRealL, RooFormulaVar, RooFit::Experimental::RooFuncWrapper, RooChi2Var, RooNLLVar, RooXYChi2Var, and ProgressMonitor.; Definition at line 248 of file RooAbsReal.h. ◆ defaultIntegratorConfig(). RooNumIntConfig * RooAbsReal::defaultIntegratorConfig ; (; ). static . Returns the default numeric integration configuration for all RooAbsReals. ; Definition at line 3272 of file RooAbsReal.cxx. ◆ derivative() [1/2]. RooDerivative * RooAbsReal::derivative ; (; RooRealVar & ; obs, . const RooArgSet & ; normSet, . Int_t ; order, . double ; eps = 0.001 . ). Return function representing first, second or third order derivative of this function. ; Definition at line 3999 of file RooAbsReal.cxx. ◆ derivative() [2/2]. RooDerivative * RooAbsReal::derivative ; (; RooRealVar & ; obs, . Int_t ; order = 1, . double ; eps = 0.001 . ). Return function representing first, second or third order derivative of this function. ; Definition at line 3987 of file RooAbsReal.cxx. ◆ doEval(). void RooAbsReal::doEval ; (; RooFit::EvalContext & ; ctx); const. virtual . Base function for computing multiple values of a RooAbsReal. ; Parameters. ctxAn evaluation context object . Reimplemented in RooStats::HistFactory::FlexibleInterpVar, ParamHistFunc, PiecewiseInterpolation, RooArgusBG, RooBernstein, RooBifurGauss, RooBM",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:103045,Deployability,integrat,integrating,103045,"plied by the number of expected events in each bin; An optional scaling by a given scaleFactor can be performed. Returns a pointer to the input RooDataHist, or zero in case of an error.; If correctForBinSize is true the RooDataHist is filled with the functions density (function value times the bin volume) rather than function value.; If showProgress is true a process indicator is printed on stdout in steps of one percent, which is mostly useful for the sampling of expensive functions such as likelihoods ; Definition at line 1124 of file RooAbsReal.cxx. ◆ fillHistogram(). TH1 * RooAbsReal::fillHistogram ; (; TH1 * ; hist, . const RooArgList & ; plotVars, . double ; scaleFactor = 1, . const RooArgSet * ; projectedVars = nullptr, . bool ; scaleForDensity = true, . const RooArgSet * ; condObs = nullptr, . bool ; setError = true . ); const. Fill the ROOT histogram 'hist' with values sampled from this function at the bin centers. ; Our value is calculated by first integrating out any variables in projectedVars and then scaling the result by scaleFactor. Returns a pointer to the input histogram, or zero in case of an error. The input histogram can be any TH1 subclass, and therefore of arbitrary dimension. Variables are matched with the (x,y,...) dimensions of the input histogram according to the order in which they appear in the input plotVars list. If scaleForDensity is true the histogram is filled with a the functions density rather than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 947 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3099 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs,",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:104333,Deployability,integrat,integration,104333," histogram according to the order in which they appear in the input plotVars list. If scaleForDensity is true the histogram is filled with a the functions density rather than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 947 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3099 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 701 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4051 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ; If the force flag is false, the normalization choice is only fixed for those RooAddPd",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:104405,Deployability,integrat,integrated,104405," histogram according to the order in which they appear in the input plotVars list. If scaleForDensity is true the histogram is filled with a the functions density rather than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 947 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3099 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 701 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4051 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ; If the force flag is false, the normalization choice is only fixed for those RooAddPd",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:104598,Deployability,integrat,integrated,104598,"her than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 947 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3099 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 701 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4051 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ; If the force flag is false, the normalization choice is only fixed for those RooAddPdf components that have the default 'automatic' interpretation of coefficients (i.e. the interpretation is defined by the observables passed to getVal()). If force is ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:107641,Deployability,integrat,integration,107641,"ooRealSumPdf, RooAbsAnaConvPdf, RooAbsCachedPdf, RooBinSamplingPdf, RooHistFunc, RooHistPdf, RooProdPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 164 of file RooAbsReal.h. ◆ forceNumInt(). virtual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3887 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 368 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralW",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:107737,Deployability,integrat,integrate,107737,"rojectedPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 164 of file RooAbsReal.h. ◆ forceNumInt(). virtual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3887 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 368 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullpt",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:107809,Deployability,integrat,integration,107809,"rojectedPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 164 of file RooAbsReal.h. ◆ forceNumInt(). virtual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3887 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 368 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullpt",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:107821,Deployability,configurat,configuration,107821,"rojectedPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 164 of file RooAbsReal.h. ◆ forceNumInt(). virtual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3887 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 368 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullpt",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:107842,Deployability,integrat,integration,107842,"tual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3887 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 368 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. virtual . Variant of getAnalyticalIntegral that is also passed the normalization set that should be a",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:109790,Deployability,integrat,integration,109790,"gral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ; For certain operator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 351 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to em",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:109802,Deployability,configurat,configuration,109802,"gral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ; For certain operator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 351 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to em",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:109857,Deployability,configurat,configuration,109857,"rator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 351 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFun",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:109909,Deployability,configurat,configuration,109909,"rator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 351 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFun",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:109958,Deployability,configurat,configuration,109958,"rator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 351 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFun",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:110175,Deployability,integrat,integration,110175,"izedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 351 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3386 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:110187,Deployability,configurat,configuration,110187,"izedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 351 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3386 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:110242,Deployability,configurat,configuration,110242,"oExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 351 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3386 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line 406 of file RooAbsReal.cxx. ◆ getPropagatedError(). double RooAbsReal::getPropagatedError ; (; const RooFitResult & ; fr, . const RooArgSe",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:110294,Deployability,configurat,configuration,110294,"oExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 351 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3386 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line 406 of file RooAbsReal.cxx. ◆ getPropagatedError(). double RooAbsReal::getPropagatedError ; (; const RooFitResult & ; fr, . const RooArgSe",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:110343,Deployability,configurat,configuration,110343,"oExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 351 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3386 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line 406 of file RooAbsReal.cxx. ◆ getPropagatedError(). double RooAbsReal::getPropagatedError ; (; const RooFitResult & ; fr, . const RooArgSe",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:113784,Deployability,integrat,integrated,113784," inline . Like getVal(const RooArgSet*), but always requires an argument for normalisation. ; Definition at line 126 of file RooAbsReal.h. ◆ getVal() [2/2]. double RooAbsReal::getVal ; (; const RooArgSet * ; normalisationSet = nullptr); const. inline . Evaluate object. ; Returns either cached value or triggers a recalculation. The recalculation happens by calling getValV(), which in the end calls the virtual evaluate() functions of the respective PDFs. Parameters. [in]normalisationSetgetValV() reacts differently depending on the value of the normalisation set. If the set is nullptr, an unnormalised value is returned. . NoteThe normalisation is arbitrary, because it is up to the implementation of the PDF to e.g. leave out normalisation constants for speed reasons. The range of the variables is also ignored.; To normalise the result properly, a RooArgSet has to be passed, which contains the variables to normalise over. These are integrated over their current ranges to compute the normalisation constant, and the unnormalised result is divided by this value. ; Definition at line 103 of file RooAbsReal.h. ◆ getValV(). double RooAbsReal::getValV ; (; const RooArgSet * ; nset = nullptr); const. virtual . Return value of object. ; If the cache is clean, return the cached value, otherwise recalculate on the fly and refill the cache ; Reimplemented in RooConstVar, RooNormalizedPdf, ProgressMonitor, RooAbsHiddenReal, RooConvCoefVar, RooRealVar, RooResolutionModel, RooRealMPFE, RooMomentMorph, RooMomentMorphFunc, RooMomentMorphFuncND, RooAbsCachedPdf, RooAbsCachedReal, RooAbsPdf, RooAddPdf, RooErrorVar, and RooRealIntegral.; Definition at line 300 of file RooAbsReal.cxx. ◆ globalSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch controlling the activation of the selectComp() functionality. ; Definition at line 2966 of file RooAbsReal.cxx. ◆ gradient(). virtual void RooAbsReal::gradient ; (; double * ; ); const. inlinevirtual . Rei",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:115537,Deployability,integrat,integrated,115537,"balSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch controlling the activation of the selectComp() functionality. ; Definition at line 2966 of file RooAbsReal.cxx. ◆ gradient(). virtual void RooAbsReal::gradient ; (; double * ; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 388 of file RooAbsReal.h. ◆ hasGradient(). virtual bool RooAbsReal::hasGradient ; (; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 387 of file RooAbsReal.h. ◆ hideOffset(). bool RooAbsReal::hideOffset ; (; ). static . Definition at line 192 of file RooAbsReal.cxx. ◆ integralNameSuffix(). TString RooAbsReal::integralNameSuffix ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const char * ; rangeName = nullptr, . bool ; omitEmpty = false . ); const. protected . Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ; Definition at line 755 of file RooAbsReal.cxx. ◆ IsA(). TClass * RooAbsReal::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, RooGamma, RooGaussian",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:115595,Deployability,integrat,integration,115595,"balSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch controlling the activation of the selectComp() functionality. ; Definition at line 2966 of file RooAbsReal.cxx. ◆ gradient(). virtual void RooAbsReal::gradient ; (; double * ; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 388 of file RooAbsReal.h. ◆ hasGradient(). virtual bool RooAbsReal::hasGradient ; (; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 387 of file RooAbsReal.h. ◆ hideOffset(). bool RooAbsReal::hideOffset ; (; ). static . Definition at line 192 of file RooAbsReal.cxx. ◆ integralNameSuffix(). TString RooAbsReal::integralNameSuffix ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const char * ; rangeName = nullptr, . bool ; omitEmpty = false . ); const. protected . Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ; Definition at line 755 of file RooAbsReal.cxx. ◆ IsA(). TClass * RooAbsReal::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, RooGamma, RooGaussian",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:125932,Deployability,integrat,integrated,125932,"t * RooAbsReal::mean ; (; RooRealVar & ; obs). inline . Definition at line 359 of file RooAbsReal.h. ◆ mean() [2/2]. RooAbsMoment * RooAbsReal::mean ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 360 of file RooAbsReal.h. ◆ minTrialSamples(). virtual Int_t RooAbsReal::minTrialSamples ; (; const RooArgSet & ; ); const. inlinevirtual . Reimplemented in RooBinSamplingPdf, and RooWrapperPdf.; Definition at line 241 of file RooAbsReal.h. ◆ moment() [1/2]. RooAbsMoment * RooAbsReal::moment ; (; RooRealVar & ; obs, . const RooArgSet & ; normObs, . Int_t ; order, . bool ; central, . bool ; takeRoot, . bool ; intNormObs . ). Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ; Parameters. [in]obsObservable to calculate the moments for ; [in]normObsNormalise w.r.t. these observables ; [in]orderOrder of the moment ; [in]centralIf true, the central moment is given by \( \langle (x- \langle x \rangle )^2 \rangle \) ; [in]takeRootCalculate the square root ; [in]intNormObsIf true, the moment of the function integrated over all normalization observables is returned. . Definition at line 4034 of file RooAbsReal.cxx. ◆ moment() [2/2]. RooAbsMoment * RooAbsReal::moment ; (; RooRealVar & ; obs, . Int_t ; order, . bool ; central, . bool ; takeRoot . ). Return function representing moment of function of given order. ; Parameters. [in]obsObservable to calculate the moments for ; [in]orderOrder of the moment ; [in]centralIf true, the central moment is given by \( \langle (x- \langle x \rangle )^2 \rangle \) ; [in]takeRootCalculate the square root . Definition at line 4015 of file RooAbsReal.cxx. ◆ numEvalErrorItems(). Int_t RooAbsReal::numEvalErrorItems ; (; ). static . Definition at line 176 of file RooAbsReal.cxx. ◆ numEvalErrors(). Int_t RooAbsReal::numEvalErrors ; (; ). static . Return the number of logged evaluation errors since the last clearing. ; Definition at line 3624 of file RooAbsReal.cxx. ◆ off",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:128507,Deployability,integrat,integrated,128507,"(; RooPlot * ; frame, . const RooAbsCategoryLValue & ; asymCat, . PlotOpt ; o . ); const. protectedvirtual . Definition at line 2199 of file RooAbsReal.cxx. ◆ plotOn() [1/3]. RooAbsReal::plotOn ; (; RooPlot * ; frame, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {}, . const RooCmdArg & ; arg9 = {}, . const RooCmdArg & ; arg10 = {} . ); const. virtual . Plot (project) PDF on specified frame. ; If a PDF is plotted in an empty frame, it will show a unit normalized curve in the frame variable, taken at the present value of other observables defined for this PDF.; Parameters. [in]framepointer to RooPlot ; [in]arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10Ordered arguments. If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projected curve integrated over all variables that were present in the shown dataset except for the one on the x-axis. The normalization of the curve will also be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; This function takes the following named arguments . Projection control . Slice(const RooArgSet& set) Override default projection behaviour by omitting observables listed in set from the projection, i.e. by not integrating over these. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*,",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:129002,Deployability,integrat,integrating,129002,"rg9 = {}, . const RooCmdArg & ; arg10 = {} . ); const. virtual . Plot (project) PDF on specified frame. ; If a PDF is plotted in an empty frame, it will show a unit normalized curve in the frame variable, taken at the present value of other observables defined for this PDF.; Parameters. [in]framepointer to RooPlot ; [in]arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10Ordered arguments. If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projected curve integrated over all variables that were present in the shown dataset except for the one on the x-axis. The normalization of the curve will also be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; This function takes the following named arguments . Projection control . Slice(const RooArgSet& set) Override default projection behaviour by omitting observables listed in set from the projection, i.e. by not integrating over these. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*, std::string> const&) argument explained below. Slice(std::map<RooCategory*, std::string> const&) Omits multiple categories from the projection, as explianed above. Can be used with initializer lists for convenience, e.g. pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""}, {&jetCategory, ""3jet""}});. Project(const RooArgSet& set) Override default projection behaviour by projecting over observables given in the set, ignoring the default projection behavior. Advanced use only. ProjWData(const RooAbsData& d)",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:129330,Deployability,integrat,integrating,129330,"g4,arg5,arg6,arg7,arg8,arg9,arg10Ordered arguments. If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projected curve integrated over all variables that were present in the shown dataset except for the one on the x-axis. The normalization of the curve will also be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; This function takes the following named arguments . Projection control . Slice(const RooArgSet& set) Override default projection behaviour by omitting observables listed in set from the projection, i.e. by not integrating over these. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*, std::string> const&) argument explained below. Slice(std::map<RooCategory*, std::string> const&) Omits multiple categories from the projection, as explianed above. Can be used with initializer lists for convenience, e.g. pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""}, {&jetCategory, ""3jet""}});. Project(const RooArgSet& set) Override default projection behaviour by projecting over observables given in the set, ignoring the default projection behavior. Advanced use only. ProjWData(const RooAbsData& d) Override default projection technique (integration). For observables present in given dataset projection of PDF is achieved by constructing an average over all observable values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique. ProjWData(const RooArgSet& s, const RooAbsData& d) A",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:130050,Deployability,integrat,integration,130050,"ese. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*, std::string> const&) argument explained below. Slice(std::map<RooCategory*, std::string> const&) Omits multiple categories from the projection, as explianed above. Can be used with initializer lists for convenience, e.g. pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""}, {&jetCategory, ""3jet""}});. Project(const RooArgSet& set) Override default projection behaviour by projecting over observables given in the set, ignoring the default projection behavior. Advanced use only. ProjWData(const RooAbsData& d) Override default projection technique (integration). For observables present in given dataset projection of PDF is achieved by constructing an average over all observable values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique. ProjWData(const RooArgSet& s, const RooAbsData& d) As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging. ProjectionRange(const char* rn) Override default range of projection integrals to a different range specified by given range name. This technique allows you to project a finite width slice in a real-valued observable. NumCPU(Int_t ncpu) Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData). Misc content control . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per curve. A negative value suppress output completely, a zero value will only print the error count per p.d.f co",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:135459,Deployability,integrat,integration,135459,"form better in the presence of strong correlations, but may take (much) longer to calculate. VisualizeError(const RooFitResult& fitres, const RooArgSet& param, double Z=1, bool linearMethod=true) Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma' . Details on error band visualization; VisualizeError() uses plotOnWithErrorBand(). Documentation of the latter: See alsoplotOnWithErrorBand(). PyROOT; The RooAbsReal::plotOn() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Reimplemented in RooSimultaneous, RooAbsPdf, and RooSimultaneous.; Definition at line 1611 of file RooAbsReal.cxx. ◆ plotOn() [2/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . PlotOpt ; o . ); const. protectedvirtual . Plotting engine function for internal use. ; Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted function that occur in the previously plotted dataset are projected via partial integration, otherwise no projections are performed. Optionally, certain projections can be performed by summing over the values present in a provided dataset ('projData'), to correctly project out data dependents that are not properly described by the PDF (e.g. per-event errors).; The functions value can be multiplied with an optional scale factor. The interpretation of the scale factor is unique for generic real functions, for PDFs there are various interpretations possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; The default projection behaviour can be overridden by supplying an optional set of dependents to project via RooFit command arguments. ; Reimplemented in RooAbsPdf, and RooSimultaneous.; Definition at line 1883 of file RooAbsReal.cxx. ◆ plotOn() [3/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . RooLinkedList & ; cmdList . ); const. virtual . Internal back-end function of plotOn() wi",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:146128,Deployability,integrat,integration,146128,"rg.; Definition at line 558 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAddition, RooConstraintSum, and RooAbsTestStatistic.; Definition at line 367 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4316 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 191 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3346 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3335 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4324 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 416 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:146140,Deployability,configurat,configuration,146140,"rg.; Definition at line 558 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAddition, RooConstraintSum, and RooAbsTestStatistic.; Definition at line 367 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4316 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 191 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3346 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3335 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4324 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 416 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:146355,Deployability,integrat,integrator,146355,"ition at line 367 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4316 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 191 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3346 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3335 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4324 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 416 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooAr",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:146366,Deployability,configurat,configuration,146366,"ition at line 367 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4316 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 191 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3346 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3335 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4324 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 416 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooAr",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:146399,Deployability,integrat,integration,146399,"ition at line 367 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4316 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 191 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3346 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3335 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4324 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 416 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooAr",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:146411,Deployability,configurat,configuration,146411,"ition at line 367 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4316 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 191 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3346 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3335 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4324 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 416 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooAr",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:147592,Deployability,integrat,integrator,147592,"inition at line 4324 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 416 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 362 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3282 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3294 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1B",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:147603,Deployability,configurat,configuration,147603,"inition at line 4324 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 416 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 362 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3282 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3294 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1B",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:147674,Deployability,configurat,configuration,147674,"Real::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 416 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 362 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3282 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3294 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:147909,Deployability,integrat,integrator,147909,"verrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 362 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3282 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3294 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:147920,Deployability,configurat,configuration,147920,"verrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 362 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3282 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3294 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:147991,Deployability,configurat,configuration,147991,"; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 362 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3282 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3294 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, Ro",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:148101,Deployability,integrat,integrator,148101,"; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 362 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3282 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3294 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, Ro",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:148112,Deployability,configurat,configuration,148112,"; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 362 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3282 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3294 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, Ro",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:148138,Deployability,install,installed,148138,"; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 362 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3282 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3294 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, Ro",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:148163,Deployability,configurat,configuration,148163,"; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 362 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3282 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3294 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, Ro",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:152687,Deployability,integrat,integration,152687,ss BatchInterfaceAccessor. friend . Definition at line 399 of file RooAbsReal.h. ◆ RooAddHelpers. friend class RooAddHelpers. friend . Definition at line 404 of file RooAbsReal.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 406 of file RooAbsReal.h. ◆ RooAddPdf. friend class RooAddPdf. friend . Definition at line 405 of file RooAbsReal.h. ◆ RooFit::EvalContext. friend class RooFit::EvalContext. friend . Definition at line 408 of file RooAbsReal.h. ◆ RooRealBinding. friend class RooRealBinding. friend . Definition at line 401 of file RooAbsReal.h. ◆ RooRealSumFunc. friend class RooRealSumFunc. friend . Definition at line 403 of file RooAbsReal.h. ◆ RooRealSumPdf. friend class RooRealSumPdf. friend . Definition at line 402 of file RooAbsReal.h. ◆ RooVectorDataStore. friend class RooVectorDataStore. friend . Definition at line 400 of file RooAbsReal.h. Member Data Documentation. ◆ _forceNumInt. bool RooAbsReal::_forceNumInt = false. protected . Force numerical integration if flag set. ; Definition at line 539 of file RooAbsReal.h. ◆ _globalSelectComp. bool RooAbsReal::_globalSelectComp = false. staticprotected . Definition at line 545 of file RooAbsReal.h. ◆ _hideOffset. bool RooAbsReal::_hideOffset = true. staticprotected . Offset hiding flag. ; Definition at line 546 of file RooAbsReal.h. ◆ _label. TString RooAbsReal::_label. protected . Plot label for objects value. ; Definition at line 538 of file RooAbsReal.h. ◆ _lastNormSetId. RooFit::UniqueId<RooArgSet>::Value_t RooAbsReal::_lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval. mutableprotected . Component selection flag for RooAbsPdf::plotCompOn. ; ! ; Definition at line 543 of file RooAbsReal.h. ◆ _plotBins. Int_t RooAbsReal::_plotBins = 100. protected . Number of plot bins. ; Definition at line 535 of file RooAbsReal.h. ◆ _plotMax. double RooAbsReal::_plotMax = 0.0. protected . Maximum of plot range. ; Definition at line 534 of file RooAbsReal.h. ◆ _plotMin. double RooAbsReal::_plotMin,MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:4705,Energy Efficiency,adapt,adaptor,4705,"(const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:66394,Energy Efficiency,adapt,adaptor,66394,"le RooAbsReal.cxx. ◆ binBoundaries(). std::list< double > * RooAbsReal::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in ParamHistFunc, PiecewiseInterpolation, RooLagrangianMorphFunc, RooMomentMorphFunc, RooParamHistFunc, RooAddition, RooAddPdf, RooFormulaVar, RooHistFunc, RooHistPdf, RooProdPdf, RooProduct, RooRealSumFunc, RooRealSumPdf, RooBinSamplingPdf, RooBinWidthFunction, RooLinearCombination, RooWrapperPdf, and PdfWrapper.; Definition at line 3560 of file RooAbsReal.cxx. ◆ bindVars(). RooFit::OwningPtr< RooAbsFunc > RooAbsReal::bindVars ; (; const RooArgSet & ; vars, . const RooArgSet * ; nset = nullptr, . bool ; clipInvalid = false . ); const. Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ; For example, calling bindVars({x1,x3}) on an object F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the current values of x2 and x4. The caller takes ownership of the returned adaptor. ; Definition at line 2980 of file RooAbsReal.cxx. ◆ buildCallToAnalyticIntegral(). std::string RooAbsReal::buildCallToAnalyticIntegral ; (; Int_t ; code, . const char * ; rangeName, . RooFit::Detail::CodeSquashContext & ; ctx . ); const. virtual . This function defines the analytical integral translation for the class. ; Parameters. [in]codeThe code that decides the integrands. ; [in]rangeNameName of the normalization range. ; [in]ctxAn object to manage auxiliary information for code-squashing. ReturnsThe representative code string of the integral for the given object. ; Reimplemented in RooLognormal, RooPoisson, RooHistFunc, RooHistPdf, RooBernstein, RooBifurGauss, RooCBShape, RooChebychev, RooExponential, RooGamma, RooGaussian, RooLa",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:66669,Energy Efficiency,adapt,adaptor,66669,"bs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in ParamHistFunc, PiecewiseInterpolation, RooLagrangianMorphFunc, RooMomentMorphFunc, RooParamHistFunc, RooAddition, RooAddPdf, RooFormulaVar, RooHistFunc, RooHistPdf, RooProdPdf, RooProduct, RooRealSumFunc, RooRealSumPdf, RooBinSamplingPdf, RooBinWidthFunction, RooLinearCombination, RooWrapperPdf, and PdfWrapper.; Definition at line 3560 of file RooAbsReal.cxx. ◆ bindVars(). RooFit::OwningPtr< RooAbsFunc > RooAbsReal::bindVars ; (; const RooArgSet & ; vars, . const RooArgSet * ; nset = nullptr, . bool ; clipInvalid = false . ); const. Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ; For example, calling bindVars({x1,x3}) on an object F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the current values of x2 and x4. The caller takes ownership of the returned adaptor. ; Definition at line 2980 of file RooAbsReal.cxx. ◆ buildCallToAnalyticIntegral(). std::string RooAbsReal::buildCallToAnalyticIntegral ; (; Int_t ; code, . const char * ; rangeName, . RooFit::Detail::CodeSquashContext & ; ctx . ); const. virtual . This function defines the analytical integral translation for the class. ; Parameters. [in]codeThe code that decides the integrands. ; [in]rangeNameName of the normalization range. ; [in]ctxAn object to manage auxiliary information for code-squashing. ReturnsThe representative code string of the integral for the given object. ; Reimplemented in RooLognormal, RooPoisson, RooHistFunc, RooHistPdf, RooBernstein, RooBifurGauss, RooCBShape, RooChebychev, RooExponential, RooGamma, RooGaussian, RooLandau, RooPolynomial, RooUniform, RooEfficiency, and RooPolyVar.; Definition at line 4425 of file RooAbsReal.cxx. ◆ chi2FitTo() [1/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const Roo",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:70379,Energy Efficiency,consumption,consumption,70379,"e fly on all observables. Multiple comma separated range names can be specified. . NumCPU(int num) Parallelize NLL calculation on num CPUs . Optimize(bool flag) Activate constant term optimization (on by default) . IntegrateBins() Integrate PDF within each bin. This sets the desired precision. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . Definition at line 4105 of file RooAbsReal.cxx. ◆ chi2FitTo() [2/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooLinkedList & ; cmdList . ). virtual . Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ; List of possible commands in the cmdList:. Type of CmdArg Effect on \( \chi^2 \) . DataError() Choose between:; RooAbs",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:74704,Energy Efficiency,consumption,consumption,74704," have errors defined for the \( \chi^2 \) to be well defined. Options to control construction of the chi-square . YVar(RooRealVar& yvar) Designate given column in dataset as Y value . Integrate(bool flag) Integrate function over range specified by X errors rather than take value at bin center. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4236 of file RooAbsReal.cxx. ◆ chi2FitTo() [4/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataSet & ; xydata, . const RooLinkedList & ; cmdList . ). virtual . Perform a 2-D \( \chi^2 \) fit using a series of x and y ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:76865,Energy Efficiency,consumption,consumption,76865," have errors defined for the \( \chi^2 \) to be well defined. Options to control construction of the chi-square . YVar(RooRealVar& yvar) Designate given column in dataset as Y value . Integrate(bool flag) Integrate function over range specified by X errors rather than take value at bin center. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4254 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:109109,Energy Efficiency,efficient,efficient,109109,"al, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 368 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. virtual . Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ; For certain operator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 351 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:110739,Energy Efficiency,efficient,efficiently,110739,"ion used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3386 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line 406 of file RooAbsReal.cxx. ◆ getPropagatedError(). double RooAbsReal::getPropagatedError ; (; const RooFitResult & ; fr, . const RooArgSet & ; nset = {} . ); const. Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ; Estimates the uncertainty \(\sigma_f(x;\theta)\) on a function \(f(x;\theta)\) represented by this RooAbsReal. Here, \(\theta\) is a vector of parameters with uncertainties \(\sigma_\theta\), and \(x\) are usually observables. The uncertainty is estimated by linearly propagating the parameter uncertainties using the correlation matrix from a fit result.; The square of ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:774,Integrability,interface,interface,774,". ROOT: RooAbsReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooAbsReal Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc. ; Implementation of RooAbsReal may be derived, thus no interface is provided to modify the contents. PyROOT; Some member functions of RooAbsReal that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooAbsReal::plotOn, RooAbsReal::createHistogram, RooAbsReal::chi2FitTo, RooAbsReal::createChi2, RooAbsReal::createRunningIntegral and RooAbsReal::createIntegral For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; var.plotOn(frame, ROOT.RooFit.Components(""background"")); ; # With keyword arguments:; var.plotOn(frame, Components=""background""). Definition at line 59 of file RooAbsReal.h. Classes; class  EvalError;  ; class  EvalErrorContext;  Context to temporarily change the error logging mode as long as the context is alive. More...;  ; struct  GlobalSelectComponentRAII;  ; struct  PlotOpt;  ; class  Ref;  A RooAbsReal::Ref can be constructed from a RooAbsReal& or a double that will be implicitly converted to a RooConstVar&. More...;  . Public Types; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Alw",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:4695,Integrability,interface,interface,4695,"(const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:8906,Integrability,integrat,integration,8906,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:9867,Integrability,integrat,integration,9867,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:10088,Integrability,depend,dependentVars,10088,"nction over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the present function. ;  ; RooFit::OwningPtr< RooAbsReal > createRunningIntegral (const RooArgSet &iset, const RooArgSet &nset={});  Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ;  ; RooFit::OwningPtr< RooAbsReal > createRunningIntegral (const RooArgSet &iset, const RooCmdArg &",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:14462,Integrability,integrat,integration,14462,"on tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:14589,Integrability,integrat,integration,14589," void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool h",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:16066,Integrability,message,message,16066,"s parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; TClass * IsA () const override;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override;  Equality operator when comparing to ano",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:16143,Integrability,message,message,16143,"s parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; TClass * IsA () const override;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override;  Equality operator when comparing to ano",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:18691,Integrability,integrat,integration,18691,"uble xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &o",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:18824,Integrability,integrat,integrator,18824,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constru",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:18868,Integrability,integrat,integration,18868,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constru",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:19290,Integrability,integrat,integrator,19290,"ing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollec",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:19431,Integrability,integrat,integrator,19431,"mmy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:20911,Integrability,depend,dependent,20911," ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained T",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:21118,Integrability,depend,dependent,21118," transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileCon",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:22285,Integrability,depend,dependsOn,22285,"can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:22403,Integrability,depend,depend,22403,"can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:22465,Integrability,depend,dependsOn,22465,"lone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depLis",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:22594,Integrability,depend,depend,22594,"lone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depLis",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:22674,Integrability,depend,dependsOn,22674,"st override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:22790,Integrability,depend,depend,22790,"st override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:22862,Integrability,depend,dependsOnValue,22862,"td::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgS",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:22973,Integrability,depend,depends,22973,"td::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgS",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:23042,Integrability,depend,dependsOnValue,23042,"ing results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:23164,Integrability,depend,depends,23164,"ing results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:24151,Integrability,depend,dependents,24151," bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable lis",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:24341,Integrability,depend,depends,24341,"me) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set o",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:25068,Integrability,depend,dependents,25068,"oArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; virtual bool getParameters (const RooArgSet *observables, RooArgSet &outputSet, bool stripDisconnected=true) const;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:27091,Integrability,depend,depend,27091,"connected=true) const;  Return RooArgSet with all variables (tree leaf nodes of expression tree) ;  ; void graphVizTree (const char *fileName, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Create a GraphViz .dot file visualizing the expression tree headed by this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; v",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:27497,Integrability,depend,dependents,27497,"izTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:27703,Integrability,depend,dependents,27703,"am. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:28941,Integrability,interface,interface,28941,"y of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::ostream &os, const char *indent="""", const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; virtual void printCompactTreeHook (std::ostream &os, const char *ind="""");  Hook function interface for object to insert additional information when printed in the context of a tree structure. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; virtual void printMetaArgs (std::ostream &) const;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (co",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:33409,Integrability,integrat,integrated,33409," *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all leaf nodes of the arg tree, starting with ourself as top node. ;  ; void branchNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all branch nodes of the arg tree starting with ourself as top node. ;  ; void treeNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool doBranch=true, bool doLeaf=true, bool valueOnly=false, bool recurseNonDerived=false) const;  Fill supplied list with nodes of the arg tree, following all server links, starting with ourself as top node. ;  ; virtual bool isFundamental () const;  Is this object a fundamental type that can be added to a dataset? Fundamental-type subclasses override this method to return true. ;  ; virtual bool isLValue () const;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool redirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool isRecursionStep=false);  Replace all direct servers of this object with the new servers in newServerList. ;  ; bool redirectServers (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:34266,Integrability,depend,depend,34266,"tal-type subclasses override this method to return true. ;  ; virtual bool isLValue () const;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool redirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool isRecursionStep=false);  Replace all direct servers of this object with the new servers in newServerList. ;  ; bool redirectServers (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old s",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:34963,Integrability,depend,depend,34963,"Change=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:37628,Integrability,depend,dependentOverlaps,37628,"es. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void F",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:37737,Integrability,depend,dependentOverlaps,37737,"operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  R",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:41058,Integrability,message,message,41058,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:41599,Integrability,message,message,41599,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:42589,Integrability,message,message,42589,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:45683,Integrability,message,message,45683,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption s",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:46056,Integrability,message,message,46056," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char *",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:47186,Integrability,message,messages,47186,"_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:47323,Integrability,integrat,integration,47323,"onst;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:47725,Integrability,message,message,47725,"eam, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:47816,Integrability,message,messages,47816,"eam, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:51179,Integrability,integrat,integrated,51179,"irty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:51237,Integrability,integrat,integration,51237,"irty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:54421,Integrability,wrap,wrapper,54421,"bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:57246,Integrability,integrat,integration,57246," void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . Protected Attributes; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToke",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:66384,Integrability,interface,interface,66384,"le RooAbsReal.cxx. ◆ binBoundaries(). std::list< double > * RooAbsReal::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in ParamHistFunc, PiecewiseInterpolation, RooLagrangianMorphFunc, RooMomentMorphFunc, RooParamHistFunc, RooAddition, RooAddPdf, RooFormulaVar, RooHistFunc, RooHistPdf, RooProdPdf, RooProduct, RooRealSumFunc, RooRealSumPdf, RooBinSamplingPdf, RooBinWidthFunction, RooLinearCombination, RooWrapperPdf, and PdfWrapper.; Definition at line 3560 of file RooAbsReal.cxx. ◆ bindVars(). RooFit::OwningPtr< RooAbsFunc > RooAbsReal::bindVars ; (; const RooArgSet & ; vars, . const RooArgSet * ; nset = nullptr, . bool ; clipInvalid = false . ); const. Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ; For example, calling bindVars({x1,x3}) on an object F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the current values of x2 and x4. The caller takes ownership of the returned adaptor. ; Definition at line 2980 of file RooAbsReal.cxx. ◆ buildCallToAnalyticIntegral(). std::string RooAbsReal::buildCallToAnalyticIntegral ; (; Int_t ; code, . const char * ; rangeName, . RooFit::Detail::CodeSquashContext & ; ctx . ); const. virtual . This function defines the analytical integral translation for the class. ; Parameters. [in]codeThe code that decides the integrands. ; [in]rangeNameName of the normalization range. ; [in]ctxAn object to manage auxiliary information for code-squashing. ReturnsThe representative code string of the integral for the given object. ; Reimplemented in RooLognormal, RooPoisson, RooHistFunc, RooHistPdf, RooBernstein, RooBifurGauss, RooCBShape, RooChebychev, RooExponential, RooGamma, RooGaussian, RooLa",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:68725,Integrability,message,messages,68725,"t RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Perform a \( \chi^2 \) fit to given histogram. ; By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession; The following named arguments are supported. Options to control construction of chi2 . Extended(bool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on the fly on all observables. Multiple comma separated range names can be specified. . NumCPU(int num) Parallelize NLL calculation on num CPUs . Optimize(bool flag) Activate constant term optimization (on by default) . IntegrateBins() Integrate PDF within each bin. This sets the desired precision. Options to control flow of fit procedur",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:70530,Integrability,message,messages,70530,"ool flag) Activate constant term optimization (on by default) . IntegrateBins() Integrate PDF within each bin. This sets the desired precision. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . Definition at line 4105 of file RooAbsReal.cxx. ◆ chi2FitTo() [2/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooLinkedList & ; cmdList . ). virtual . Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ; List of possible commands in the cmdList:. Type of CmdArg Effect on \( \chi^2 \) . DataError() Choose between:; RooAbsData::Expected: Expected Poisson error ( \( \sqrt{n_\text{expected}} \) from the PDF).; RooAbsData::SumW2: The observed error from the square root of th",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:70925,Integrability,message,messages,70925,"lag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . Definition at line 4105 of file RooAbsReal.cxx. ◆ chi2FitTo() [2/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooLinkedList & ; cmdList . ). virtual . Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ; List of possible commands in the cmdList:. Type of CmdArg Effect on \( \chi^2 \) . DataError() Choose between:; RooAbsData::Expected: Expected Poisson error ( \( \sqrt{n_\text{expected}} \) from the PDF).; RooAbsData::SumW2: The observed error from the square root of the sum of weights, i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \( n_\text{observed} \). If for a given bin \( n_\text{expected} \) is lower than the \( n_\text{observed} \), the lower uncertainty is taken (e",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:74855,Integrability,message,messages,74855,"n column in dataset as Y value . Integrate(bool flag) Integrate function over range specified by X errors rather than take value at bin center. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4236 of file RooAbsReal.cxx. ◆ chi2FitTo() [4/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataSet & ; xydata, . const RooLinkedList & ; cmdList . ). virtual . Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ; The y values can either be the event weights, or can be another column designated by the YVar() argument. The y v",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:75250,Integrability,message,messages,75250,"lag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4236 of file RooAbsReal.cxx. ◆ chi2FitTo() [4/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataSet & ; xydata, . const RooLinkedList & ; cmdList . ). virtual . Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ; The y values can either be the event weights, or can be another column designated by the YVar() argument. The y value must have errors defined for the \( \chi^2 \) to be well defined. Options to control construction of the chi-square . YVar(RooRealVar& yvar) Designate given column in dataset as Y value . Integrate(bool flag) Integrate function over range specified by X errors rather than take value at bin center. Options to control flow of fit procedure . InitialHesse(bo",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:77016,Integrability,message,messages,77016,"n column in dataset as Y value . Integrate(bool flag) Integrate function over range specified by X errors rather than take value at bin center. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4254 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 548 o",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:77411,Integrability,message,messages,77411,"lag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4254 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 548 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3542 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy th",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:78149,Integrability,message,messages,78149,"lErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4254 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 548 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3542 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 2997 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) variable from a histogram and this function. ; Parameters. arg1,arg2,arg3,arg",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:86562,Integrability,integrat,integration,86562," 1183 of file RooAbsReal.cxx. ◆ createIntegral() [1/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const char * ; rangeName . ); const. inline . Create integral over observables in iset in range named rangeName. ; Definition at line 207 of file RooAbsReal.h. ◆ createIntegral() [2/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ; Definition at line 211 of file RooAbsReal.h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:86998,Integrability,integrat,integration,86998,"set in range named rangeName with integrand normalized over observables in nset. ; Definition at line 211 of file RooAbsReal.h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:87192,Integrability,integrat,integrates,87192,".h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const Roo",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:87217,Integrability,integrat,integrates,87217,".h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const Roo",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:87478,Integrability,integrat,integrated,87478,"in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is aut",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:87562,Integrability,integrat,integration,87562,"r any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; No",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:88308,Integrability,integrat,integration,88308,"d is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:88504,Integrability,integrat,integrates,88504,"ain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 514 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr<",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:88529,Integrability,integrat,integrates,88529,"ain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 514 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr<",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:88633,Integrability,integrat,integrating,88633,"rmed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 514 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create int",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:89050,Integrability,integrat,integration,89050,"mdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 514 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ; Definition at line 220 of file RooAbsReal.h. ◆ createIntObj(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntObj ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset, . const RooNumIntConfig * ; cfg, . const char * ; rangeName . ); const. protected . Inter",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:89742,Integrability,integrat,integration,89742,"tegral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 514 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ; Definition at line 220 of file RooAbsReal.h. ◆ createIntObj(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntObj ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset, . const RooNumIntConfig * ; cfg, . const char * ; rangeName . ); const. protected . Internal utility function for createIntegral() that creates the actual integral object. ; Definition at line 590 of file RooAbsReal.cxx. ◆ createIntRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Utility function for createRunningIntegral. ; It creates an object implementing the standard (analytical) integration technique for calculating the running integral. ; Definition at line 3827 of file RooAbsReal.cxx. ◆ createPlotProjection() [1/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; dependentVars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:90404,Integrability,integrat,integration,90404,"file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ; Definition at line 220 of file RooAbsReal.h. ◆ createIntObj(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntObj ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset, . const RooNumIntConfig * ; cfg, . const char * ; rangeName . ); const. protected . Internal utility function for createIntegral() that creates the actual integral object. ; Definition at line 590 of file RooAbsReal.cxx. ◆ createIntRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Utility function for createRunningIntegral. ; It creates an object implementing the standard (analytical) integration technique for calculating the running integral. ; Definition at line 3827 of file RooAbsReal.cxx. ◆ createPlotProjection() [1/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; dependentVars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; cloneSet, . const char * ; rangeName = nullptr, . const RooArgSet * ; condObs = nullptr . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; Create a new object \( G \) that represents the normalized projection: ; \[; G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; \]. where \( F[x,y,p] \) is the function we represent, and \( \{ p \} \) are the remaining variables (""parameters"").; Parameters. [in]dependentVarsDependent variables over which to normalise, \( \{x\} \). ; [in]projectedVarsVariables to project out, \( \{ y \} \). ; [out]cloneSetWill be set to a RooArgSet*, which will",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:90623,Integrability,depend,dependentVars,90623,"geName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ; Definition at line 220 of file RooAbsReal.h. ◆ createIntObj(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntObj ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset, . const RooNumIntConfig * ; cfg, . const char * ; rangeName . ); const. protected . Internal utility function for createIntegral() that creates the actual integral object. ; Definition at line 590 of file RooAbsReal.cxx. ◆ createIntRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Utility function for createRunningIntegral. ; It creates an object implementing the standard (analytical) integration technique for calculating the running integral. ; Definition at line 3827 of file RooAbsReal.cxx. ◆ createPlotProjection() [1/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; dependentVars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; cloneSet, . const char * ; rangeName = nullptr, . const RooArgSet * ; condObs = nullptr . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; Create a new object \( G \) that represents the normalized projection: ; \[; G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; \]. where \( F[x,y,p] \) is the function we represent, and \( \{ p \} \) are the remaining variables (""parameters"").; Parameters. [in]dependentVarsDependent variables over which to normalise, \( \{x\} \). ; [in]projectedVarsVariables to project out, \( \{ y \} \). ; [out]cloneSetWill be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object. The latter will also be returned. The caller takes ownership of this set. ; [in]rangeNameOptional range for projection integral",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:91217,Integrability,depend,dependentVarsDependent,91217,"t & ; iset, . const RooArgSet & ; nset = {} . ). Utility function for createRunningIntegral. ; It creates an object implementing the standard (analytical) integration technique for calculating the running integral. ; Definition at line 3827 of file RooAbsReal.cxx. ◆ createPlotProjection() [1/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; dependentVars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; cloneSet, . const char * ; rangeName = nullptr, . const RooArgSet * ; condObs = nullptr . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; Create a new object \( G \) that represents the normalized projection: ; \[; G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; \]. where \( F[x,y,p] \) is the function we represent, and \( \{ p \} \) are the remaining variables (""parameters"").; Parameters. [in]dependentVarsDependent variables over which to normalise, \( \{x\} \). ; [in]projectedVarsVariables to project out, \( \{ y \} \). ; [out]cloneSetWill be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object. The latter will also be returned. The caller takes ownership of this set. ; [in]rangeNameOptional range for projection integrals ; [in]condObsConditional observables, which are not integrated for normalisation, even if they are in dependentVars or projectedVars. . ReturnsA pointer to the newly created object, or zero in case of an error. The caller is responsible for deleting the cloneSet (which includes the returned projection object). ; Definition at line 816 of file RooAbsReal.cxx. ◆ createPlotProjection() [2/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; depVars, . const RooArgSet & ; projVars, . RooArgSet *& ; cloneSet . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:91646,Integrability,integrat,integrated,91646,"Vars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; cloneSet, . const char * ; rangeName = nullptr, . const RooArgSet * ; condObs = nullptr . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; Create a new object \( G \) that represents the normalized projection: ; \[; G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; \]. where \( F[x,y,p] \) is the function we represent, and \( \{ p \} \) are the remaining variables (""parameters"").; Parameters. [in]dependentVarsDependent variables over which to normalise, \( \{x\} \). ; [in]projectedVarsVariables to project out, \( \{ y \} \). ; [out]cloneSetWill be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object. The latter will also be returned. The caller takes ownership of this set. ; [in]rangeNameOptional range for projection integrals ; [in]condObsConditional observables, which are not integrated for normalisation, even if they are in dependentVars or projectedVars. . ReturnsA pointer to the newly created object, or zero in case of an error. The caller is responsible for deleting the cloneSet (which includes the returned projection object). ; Definition at line 816 of file RooAbsReal.cxx. ◆ createPlotProjection() [2/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; depVars, . const RooArgSet & ; projVars, . RooArgSet *& ; cloneSet . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; createPlotProjection() ; Definition at line 787 of file RooAbsReal.cxx. ◆ createProfile(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createProfile ; (; const RooArgSet & ; paramsOfInterest). virtual . Create a RooProfileLL object that eliminates all nuisance parameters in the present function. ; The nuisance parameters are defined as all parameters of the function except the s",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:91696,Integrability,depend,dependentVars,91696,"Vars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; cloneSet, . const char * ; rangeName = nullptr, . const RooArgSet * ; condObs = nullptr . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; Create a new object \( G \) that represents the normalized projection: ; \[; G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; \]. where \( F[x,y,p] \) is the function we represent, and \( \{ p \} \) are the remaining variables (""parameters"").; Parameters. [in]dependentVarsDependent variables over which to normalise, \( \{x\} \). ; [in]projectedVarsVariables to project out, \( \{ y \} \). ; [out]cloneSetWill be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object. The latter will also be returned. The caller takes ownership of this set. ; [in]rangeNameOptional range for projection integrals ; [in]condObsConditional observables, which are not integrated for normalisation, even if they are in dependentVars or projectedVars. . ReturnsA pointer to the newly created object, or zero in case of an error. The caller is responsible for deleting the cloneSet (which includes the returned projection object). ; Definition at line 816 of file RooAbsReal.cxx. ◆ createPlotProjection() [2/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; depVars, . const RooArgSet & ; projVars, . RooArgSet *& ; cloneSet . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; createPlotProjection() ; Definition at line 787 of file RooAbsReal.cxx. ◆ createProfile(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createProfile ; (; const RooArgSet & ; paramsOfInterest). virtual . Create a RooProfileLL object that eliminates all nuisance parameters in the present function. ; The nuisance parameters are defined as all parameters of the function except the s",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:93692,Integrability,integrat,integration,93692,"bsReal.cxx. ◆ createRunningIntegral() [1/2]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ; Definition at line 3706 of file RooAbsReal.cxx. ◆ createRunningIntegral() [2/2]. RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the us",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:93886,Integrability,integrat,integrates,93886,"ooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ; Definition at line 3706 of file RooAbsReal.cxx. ◆ createRunningIntegral() [2/2]. RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:93911,Integrability,integrat,integrates,93911,"ooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ; Definition at line 3706 of file RooAbsReal.cxx. ◆ createRunningIntegral() [2/2]. RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:94039,Integrability,integrat,integration,94039,"(; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:94263,Integrability,integrat,integration,94263,"(; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:94396,Integrability,integrat,integrates,94396,"(; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:94526,Integrability,integrat,integration,94526,"he running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; The following named arguments are accepted . Effect on integral creation . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of int",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:94855,Integrability,integrat,integrate,94855," name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; The following named arguments are accepted . Effect on integral creation . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf . ScanNum() Apply scanning technique if cdf integral involves numeric integration . ScanAll() Always apply scanning technique . ScanNone() Never apply scanning technique . PyROOT; The RooAbsReal::creat",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:95381,Integrability,integrat,integration,95381,"gInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; The following named arguments are accepted . Effect on integral creation . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf . ScanNum() Apply scanning technique if cdf integral involves numeric integration . ScanAll() Always apply scanning technique . ScanNone() Never apply scanning technique . PyROOT; The RooAbsReal::createRunningIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 3750 of file RooAbsReal.cxx. ◆ createScanRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createScanRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . Int_t ; numScanBins, . Int_t ; intOrder . ). Utility function for createRunningIntegral that construct an object implementing the numeric scanning technique for calculating the running integral. ; Definition at line 3810 of file RooAbsReal.cxx",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:95643,Integrability,integrat,integration,95643,"parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; The following named arguments are accepted . Effect on integral creation . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf . ScanNum() Apply scanning technique if cdf integral involves numeric integration . ScanAll() Always apply scanning technique . ScanNone() Never apply scanning technique . PyROOT; The RooAbsReal::createRunningIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 3750 of file RooAbsReal.cxx. ◆ createScanRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createScanRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . Int_t ; numScanBins, . Int_t ; intOrder . ). Utility function for createRunningIntegral that construct an object implementing the numeric scanning technique for calculating the running integral. ; Definition at line 3810 of file RooAbsReal.cxx. ◆ DeclFileName(). static const char * RooAbsReal::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 548 of file RooAbsReal.h. ◆ defaultErrorLevel(). virtual double RooAbsReal::defaultErrorLevel ; (; ); ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:96987,Integrability,integrat,integration,96987,"wningPtr< RooAbsReal > RooAbsReal::createScanRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . Int_t ; numScanBins, . Int_t ; intOrder . ). Utility function for createRunningIntegral that construct an object implementing the numeric scanning technique for calculating the running integral. ; Definition at line 3810 of file RooAbsReal.cxx. ◆ DeclFileName(). static const char * RooAbsReal::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 548 of file RooAbsReal.h. ◆ defaultErrorLevel(). virtual double RooAbsReal::defaultErrorLevel ; (; ); const. inlinevirtual . Reimplemented in RooAddition, RooFit::TestStatistics::RooRealL, RooFormulaVar, RooFit::Experimental::RooFuncWrapper, RooChi2Var, RooNLLVar, RooXYChi2Var, and ProgressMonitor.; Definition at line 248 of file RooAbsReal.h. ◆ defaultIntegratorConfig(). RooNumIntConfig * RooAbsReal::defaultIntegratorConfig ; (; ). static . Returns the default numeric integration configuration for all RooAbsReals. ; Definition at line 3272 of file RooAbsReal.cxx. ◆ derivative() [1/2]. RooDerivative * RooAbsReal::derivative ; (; RooRealVar & ; obs, . const RooArgSet & ; normSet, . Int_t ; order, . double ; eps = 0.001 . ). Return function representing first, second or third order derivative of this function. ; Definition at line 3999 of file RooAbsReal.cxx. ◆ derivative() [2/2]. RooDerivative * RooAbsReal::derivative ; (; RooRealVar & ; obs, . Int_t ; order = 1, . double ; eps = 0.001 . ). Return function representing first, second or third order derivative of this function. ; Definition at line 3987 of file RooAbsReal.cxx. ◆ doEval(). void RooAbsReal::doEval ; (; RooFit::EvalContext & ; ctx); const. virtual . Base function for computing multiple values of a RooAbsReal. ; Parameters. ctxAn evaluation context object . Reimplemented in RooStats::HistFactory::FlexibleInterpVar, ParamHistFunc, PiecewiseInterpolation, RooArgusBG, RooBernstein, RooBifurGauss, RooBM",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:103045,Integrability,integrat,integrating,103045,"plied by the number of expected events in each bin; An optional scaling by a given scaleFactor can be performed. Returns a pointer to the input RooDataHist, or zero in case of an error.; If correctForBinSize is true the RooDataHist is filled with the functions density (function value times the bin volume) rather than function value.; If showProgress is true a process indicator is printed on stdout in steps of one percent, which is mostly useful for the sampling of expensive functions such as likelihoods ; Definition at line 1124 of file RooAbsReal.cxx. ◆ fillHistogram(). TH1 * RooAbsReal::fillHistogram ; (; TH1 * ; hist, . const RooArgList & ; plotVars, . double ; scaleFactor = 1, . const RooArgSet * ; projectedVars = nullptr, . bool ; scaleForDensity = true, . const RooArgSet * ; condObs = nullptr, . bool ; setError = true . ); const. Fill the ROOT histogram 'hist' with values sampled from this function at the bin centers. ; Our value is calculated by first integrating out any variables in projectedVars and then scaling the result by scaleFactor. Returns a pointer to the input histogram, or zero in case of an error. The input histogram can be any TH1 subclass, and therefore of arbitrary dimension. Variables are matched with the (x,y,...) dimensions of the input histogram according to the order in which they appear in the input plotVars list. If scaleForDensity is true the histogram is filled with a the functions density rather than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 947 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3099 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs,",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:104333,Integrability,integrat,integration,104333," histogram according to the order in which they appear in the input plotVars list. If scaleForDensity is true the histogram is filled with a the functions density rather than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 947 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3099 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 701 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4051 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ; If the force flag is false, the normalization choice is only fixed for those RooAddPd",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:104405,Integrability,integrat,integrated,104405," histogram according to the order in which they appear in the input plotVars list. If scaleForDensity is true the histogram is filled with a the functions density rather than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 947 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3099 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 701 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4051 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ; If the force flag is false, the normalization choice is only fixed for those RooAddPd",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:104560,Integrability,depend,depend,104560,"her than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 947 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3099 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 701 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4051 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ; If the force flag is false, the normalization choice is only fixed for those RooAddPdf components that have the default 'automatic' interpretation of coefficients (i.e. the interpretation is defined by the observables passed to getVal()). If force is ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:104598,Integrability,integrat,integrated,104598,"her than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 947 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3099 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 701 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4051 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ; If the force flag is false, the normalization choice is only fixed for those RooAddPdf components that have the default 'automatic' interpretation of coefficients (i.e. the interpretation is defined by the observables passed to getVal()). If force is ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:107620,Integrability,depend,dependents,107620,"ooRealSumPdf, RooAbsAnaConvPdf, RooAbsCachedPdf, RooBinSamplingPdf, RooHistFunc, RooHistPdf, RooProdPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 164 of file RooAbsReal.h. ◆ forceNumInt(). virtual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3887 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 368 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralW",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:107641,Integrability,integrat,integration,107641,"ooRealSumPdf, RooAbsAnaConvPdf, RooAbsCachedPdf, RooBinSamplingPdf, RooHistFunc, RooHistPdf, RooProdPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 164 of file RooAbsReal.h. ◆ forceNumInt(). virtual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3887 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 368 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralW",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:107706,Integrability,depend,dependents,107706,"rojectedPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 164 of file RooAbsReal.h. ◆ forceNumInt(). virtual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3887 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 368 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullpt",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:107737,Integrability,integrat,integrate,107737,"rojectedPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 164 of file RooAbsReal.h. ◆ forceNumInt(). virtual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3887 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 368 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullpt",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:107809,Integrability,integrat,integration,107809,"rojectedPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 164 of file RooAbsReal.h. ◆ forceNumInt(). virtual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3887 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 368 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullpt",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:107842,Integrability,integrat,integration,107842,"tual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3887 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 368 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. virtual . Variant of getAnalyticalIntegral that is also passed the normalization set that should be a",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:109790,Integrability,integrat,integration,109790,"gral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ; For certain operator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 351 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to em",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:110175,Integrability,integrat,integration,110175,"izedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 351 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3386 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:113361,Integrability,depend,depending,113361,"RooAbsReal.cxx. ◆ getTitle(). TString RooAbsReal::getTitle ; (; bool ; appendUnit = false); const. Return this variable's title string. ; If appendUnit is true and this variable has units, also append a string "" (<unit>)"". ; Definition at line 285 of file RooAbsReal.cxx. ◆ getUnit(). const Text_t * RooAbsReal::getUnit ; (; ); const. inline . Definition at line 143 of file RooAbsReal.h. ◆ getVal() [1/2]. double RooAbsReal::getVal ; (; const RooArgSet & ; normalisationSet); const. inline . Like getVal(const RooArgSet*), but always requires an argument for normalisation. ; Definition at line 126 of file RooAbsReal.h. ◆ getVal() [2/2]. double RooAbsReal::getVal ; (; const RooArgSet * ; normalisationSet = nullptr); const. inline . Evaluate object. ; Returns either cached value or triggers a recalculation. The recalculation happens by calling getValV(), which in the end calls the virtual evaluate() functions of the respective PDFs. Parameters. [in]normalisationSetgetValV() reacts differently depending on the value of the normalisation set. If the set is nullptr, an unnormalised value is returned. . NoteThe normalisation is arbitrary, because it is up to the implementation of the PDF to e.g. leave out normalisation constants for speed reasons. The range of the variables is also ignored.; To normalise the result properly, a RooArgSet has to be passed, which contains the variables to normalise over. These are integrated over their current ranges to compute the normalisation constant, and the unnormalised result is divided by this value. ; Definition at line 103 of file RooAbsReal.h. ◆ getValV(). double RooAbsReal::getValV ; (; const RooArgSet * ; nset = nullptr); const. virtual . Return value of object. ; If the cache is clean, return the cached value, otherwise recalculate on the fly and refill the cache ; Reimplemented in RooConstVar, RooNormalizedPdf, ProgressMonitor, RooAbsHiddenReal, RooConvCoefVar, RooRealVar, RooResolutionModel, RooRealMPFE, RooMomentMorph, RooMomentM",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:113784,Integrability,integrat,integrated,113784," inline . Like getVal(const RooArgSet*), but always requires an argument for normalisation. ; Definition at line 126 of file RooAbsReal.h. ◆ getVal() [2/2]. double RooAbsReal::getVal ; (; const RooArgSet * ; normalisationSet = nullptr); const. inline . Evaluate object. ; Returns either cached value or triggers a recalculation. The recalculation happens by calling getValV(), which in the end calls the virtual evaluate() functions of the respective PDFs. Parameters. [in]normalisationSetgetValV() reacts differently depending on the value of the normalisation set. If the set is nullptr, an unnormalised value is returned. . NoteThe normalisation is arbitrary, because it is up to the implementation of the PDF to e.g. leave out normalisation constants for speed reasons. The range of the variables is also ignored.; To normalise the result properly, a RooArgSet has to be passed, which contains the variables to normalise over. These are integrated over their current ranges to compute the normalisation constant, and the unnormalised result is divided by this value. ; Definition at line 103 of file RooAbsReal.h. ◆ getValV(). double RooAbsReal::getValV ; (; const RooArgSet * ; nset = nullptr); const. virtual . Return value of object. ; If the cache is clean, return the cached value, otherwise recalculate on the fly and refill the cache ; Reimplemented in RooConstVar, RooNormalizedPdf, ProgressMonitor, RooAbsHiddenReal, RooConvCoefVar, RooRealVar, RooResolutionModel, RooRealMPFE, RooMomentMorph, RooMomentMorphFunc, RooMomentMorphFuncND, RooAbsCachedPdf, RooAbsCachedReal, RooAbsPdf, RooAddPdf, RooErrorVar, and RooRealIntegral.; Definition at line 300 of file RooAbsReal.cxx. ◆ globalSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch controlling the activation of the selectComp() functionality. ; Definition at line 2966 of file RooAbsReal.cxx. ◆ gradient(). virtual void RooAbsReal::gradient ; (; double * ; ); const. inlinevirtual . Rei",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:115537,Integrability,integrat,integrated,115537,"balSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch controlling the activation of the selectComp() functionality. ; Definition at line 2966 of file RooAbsReal.cxx. ◆ gradient(). virtual void RooAbsReal::gradient ; (; double * ; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 388 of file RooAbsReal.h. ◆ hasGradient(). virtual bool RooAbsReal::hasGradient ; (; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 387 of file RooAbsReal.h. ◆ hideOffset(). bool RooAbsReal::hideOffset ; (; ). static . Definition at line 192 of file RooAbsReal.cxx. ◆ integralNameSuffix(). TString RooAbsReal::integralNameSuffix ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const char * ; rangeName = nullptr, . bool ; omitEmpty = false . ); const. protected . Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ; Definition at line 755 of file RooAbsReal.cxx. ◆ IsA(). TClass * RooAbsReal::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, RooGamma, RooGaussian",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:115595,Integrability,integrat,integration,115595,"balSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch controlling the activation of the selectComp() functionality. ; Definition at line 2966 of file RooAbsReal.cxx. ◆ gradient(). virtual void RooAbsReal::gradient ; (; double * ; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 388 of file RooAbsReal.h. ◆ hasGradient(). virtual bool RooAbsReal::hasGradient ; (; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 387 of file RooAbsReal.h. ◆ hideOffset(). bool RooAbsReal::hideOffset ; (; ). static . Definition at line 192 of file RooAbsReal.cxx. ◆ integralNameSuffix(). TString RooAbsReal::integralNameSuffix ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const char * ; rangeName = nullptr, . bool ; omitEmpty = false . ); const. protected . Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ; Definition at line 755 of file RooAbsReal.cxx. ◆ IsA(). TClass * RooAbsReal::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, RooGamma, RooGaussian",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:119860,Integrability,message,message,119860,"ual bool RooAbsReal::isOffsetting ; (; ); const. inlinevirtual . Reimplemented in RooAbsTestStatistic.; Definition at line 370 of file RooAbsReal.h. ◆ isSelectedComp(). bool RooAbsReal::isSelectedComp ; (; ); const. If true, the current pdf is a selected component (for use in plotting) ; Definition at line 2956 of file RooAbsReal.cxx. ◆ isValid(). bool RooAbsReal::isValid ; (; ); const. inlineoverrideprotectedvirtual . Check if current value is valid. ; Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 445 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 447 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error log",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:119947,Integrability,message,message,119947,".; Definition at line 370 of file RooAbsReal.h. ◆ isSelectedComp(). bool RooAbsReal::isSelectedComp ; (; ); const. If true, the current pdf is a selected component (for use in plotting) ; Definition at line 2956 of file RooAbsReal.cxx. ◆ isValid(). bool RooAbsReal::isValid ; (; ); const. inlineoverrideprotectedvirtual . Check if current value is valid. ; Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 445 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 447 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition a",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:119983,Integrability,rout,routed,119983,"nt pdf is a selected component (for use in plotting) ; Definition at line 2956 of file RooAbsReal.cxx. ◆ isValid(). bool RooAbsReal::isValid ; (; ); const. inlineoverrideprotectedvirtual . Check if current value is valid. ; Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 445 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 447 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . cons",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:120010,Integrability,protocol,protocol,120010,"nt pdf is a selected component (for use in plotting) ; Definition at line 2956 of file RooAbsReal.cxx. ◆ isValid(). bool RooAbsReal::isValid ; (; ); const. inlineoverrideprotectedvirtual . Check if current value is valid. ; Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 445 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 447 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . cons",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:120047,Integrability,message,message,120047,"nt pdf is a selected component (for use in plotting) ; Definition at line 2956 of file RooAbsReal.cxx. ◆ isValid(). bool RooAbsReal::isValid ; (; ); const. inlineoverrideprotectedvirtual . Check if current value is valid. ; Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 445 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 447 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . cons",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:120268,Integrability,message,messages,120268," Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 445 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 447 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Defin",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:120407,Integrability,message,messages,120407," . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 447 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:121112,Integrability,message,message,121112,"uation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2903 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a . ); const. protected . Utility function for use in getAnalytic",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:121221,Integrability,message,messages,121221,"al method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2903 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the content of proxy 'a' occurs in set 'allDeps' then the argument held in 'a' is copied from allDeps to a",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:121765,Integrability,depend,depend,121765,"immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2903 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the content of proxy 'a' occurs in set 'allDeps' then the argument held in 'a' is copied from allDeps to analDeps ; Definition at line 3146 of file RooAbsReal.cxx. ◆ matchArgs() [2/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a, . const RooArgProxy & ; b . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the contents of proxies a,b occur in set 'allDeps' then the arguments held in a,b are copied from allDeps to analDeps ; Definition at line 3163 of file RooAbsReal.cxx. ◆ matchArgs() [3",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:125932,Integrability,integrat,integrated,125932,"t * RooAbsReal::mean ; (; RooRealVar & ; obs). inline . Definition at line 359 of file RooAbsReal.h. ◆ mean() [2/2]. RooAbsMoment * RooAbsReal::mean ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 360 of file RooAbsReal.h. ◆ minTrialSamples(). virtual Int_t RooAbsReal::minTrialSamples ; (; const RooArgSet & ; ); const. inlinevirtual . Reimplemented in RooBinSamplingPdf, and RooWrapperPdf.; Definition at line 241 of file RooAbsReal.h. ◆ moment() [1/2]. RooAbsMoment * RooAbsReal::moment ; (; RooRealVar & ; obs, . const RooArgSet & ; normObs, . Int_t ; order, . bool ; central, . bool ; takeRoot, . bool ; intNormObs . ). Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ; Parameters. [in]obsObservable to calculate the moments for ; [in]normObsNormalise w.r.t. these observables ; [in]orderOrder of the moment ; [in]centralIf true, the central moment is given by \( \langle (x- \langle x \rangle )^2 \rangle \) ; [in]takeRootCalculate the square root ; [in]intNormObsIf true, the moment of the function integrated over all normalization observables is returned. . Definition at line 4034 of file RooAbsReal.cxx. ◆ moment() [2/2]. RooAbsMoment * RooAbsReal::moment ; (; RooRealVar & ; obs, . Int_t ; order, . bool ; central, . bool ; takeRoot . ). Return function representing moment of function of given order. ; Parameters. [in]obsObservable to calculate the moments for ; [in]orderOrder of the moment ; [in]centralIf true, the central moment is given by \( \langle (x- \langle x \rangle )^2 \rangle \) ; [in]takeRootCalculate the square root . Definition at line 4015 of file RooAbsReal.cxx. ◆ numEvalErrorItems(). Int_t RooAbsReal::numEvalErrorItems ; (; ). static . Definition at line 176 of file RooAbsReal.cxx. ◆ numEvalErrors(). Int_t RooAbsReal::numEvalErrors ; (; ). static . Return the number of logged evaluation errors since the last clearing. ; Definition at line 3624 of file RooAbsReal.cxx. ◆ off",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:128507,Integrability,integrat,integrated,128507,"(; RooPlot * ; frame, . const RooAbsCategoryLValue & ; asymCat, . PlotOpt ; o . ); const. protectedvirtual . Definition at line 2199 of file RooAbsReal.cxx. ◆ plotOn() [1/3]. RooAbsReal::plotOn ; (; RooPlot * ; frame, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {}, . const RooCmdArg & ; arg9 = {}, . const RooCmdArg & ; arg10 = {} . ); const. virtual . Plot (project) PDF on specified frame. ; If a PDF is plotted in an empty frame, it will show a unit normalized curve in the frame variable, taken at the present value of other observables defined for this PDF.; Parameters. [in]framepointer to RooPlot ; [in]arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10Ordered arguments. If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projected curve integrated over all variables that were present in the shown dataset except for the one on the x-axis. The normalization of the curve will also be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; This function takes the following named arguments . Projection control . Slice(const RooArgSet& set) Override default projection behaviour by omitting observables listed in set from the projection, i.e. by not integrating over these. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*,",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:128723,Integrability,message,message,128723,"1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {}, . const RooCmdArg & ; arg9 = {}, . const RooCmdArg & ; arg10 = {} . ); const. virtual . Plot (project) PDF on specified frame. ; If a PDF is plotted in an empty frame, it will show a unit normalized curve in the frame variable, taken at the present value of other observables defined for this PDF.; Parameters. [in]framepointer to RooPlot ; [in]arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10Ordered arguments. If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projected curve integrated over all variables that were present in the shown dataset except for the one on the x-axis. The normalization of the curve will also be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; This function takes the following named arguments . Projection control . Slice(const RooArgSet& set) Override default projection behaviour by omitting observables listed in set from the projection, i.e. by not integrating over these. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*, std::string> const&) argument explained below. Slice(std::map<RooCategory*, std::string> const&) Omits multiple categories from the projection, as explianed above. Can be used with initializer lists for convenience, e.g. pdf.plotOn(frame, Slic",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:129002,Integrability,integrat,integrating,129002,"rg9 = {}, . const RooCmdArg & ; arg10 = {} . ); const. virtual . Plot (project) PDF on specified frame. ; If a PDF is plotted in an empty frame, it will show a unit normalized curve in the frame variable, taken at the present value of other observables defined for this PDF.; Parameters. [in]framepointer to RooPlot ; [in]arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10Ordered arguments. If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projected curve integrated over all variables that were present in the shown dataset except for the one on the x-axis. The normalization of the curve will also be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; This function takes the following named arguments . Projection control . Slice(const RooArgSet& set) Override default projection behaviour by omitting observables listed in set from the projection, i.e. by not integrating over these. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*, std::string> const&) argument explained below. Slice(std::map<RooCategory*, std::string> const&) Omits multiple categories from the projection, as explianed above. Can be used with initializer lists for convenience, e.g. pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""}, {&jetCategory, ""3jet""}});. Project(const RooArgSet& set) Override default projection behaviour by projecting over observables given in the set, ignoring the default projection behavior. Advanced use only. ProjWData(const RooAbsData& d)",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:129330,Integrability,integrat,integrating,129330,"g4,arg5,arg6,arg7,arg8,arg9,arg10Ordered arguments. If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projected curve integrated over all variables that were present in the shown dataset except for the one on the x-axis. The normalization of the curve will also be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; This function takes the following named arguments . Projection control . Slice(const RooArgSet& set) Override default projection behaviour by omitting observables listed in set from the projection, i.e. by not integrating over these. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*, std::string> const&) argument explained below. Slice(std::map<RooCategory*, std::string> const&) Omits multiple categories from the projection, as explianed above. Can be used with initializer lists for convenience, e.g. pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""}, {&jetCategory, ""3jet""}});. Project(const RooArgSet& set) Override default projection behaviour by projecting over observables given in the set, ignoring the default projection behavior. Advanced use only. ProjWData(const RooAbsData& d) Override default projection technique (integration). For observables present in given dataset projection of PDF is achieved by constructing an average over all observable values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique. ProjWData(const RooArgSet& s, const RooAbsData& d) A",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:130050,Integrability,integrat,integration,130050,"ese. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*, std::string> const&) argument explained below. Slice(std::map<RooCategory*, std::string> const&) Omits multiple categories from the projection, as explianed above. Can be used with initializer lists for convenience, e.g. pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""}, {&jetCategory, ""3jet""}});. Project(const RooArgSet& set) Override default projection behaviour by projecting over observables given in the set, ignoring the default projection behavior. Advanced use only. ProjWData(const RooAbsData& d) Override default projection technique (integration). For observables present in given dataset projection of PDF is achieved by constructing an average over all observable values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique. ProjWData(const RooArgSet& s, const RooAbsData& d) As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging. ProjectionRange(const char* rn) Override default range of projection integrals to a different range specified by given range name. This technique allows you to project a finite width slice in a real-valued observable. NumCPU(Int_t ncpu) Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData). Misc content control . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per curve. A negative value suppress output completely, a zero value will only print the error count per p.d.f co",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:131096,Integrability,message,messages,131096,"For observables present in given dataset projection of PDF is achieved by constructing an average over all observable values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique. ProjWData(const RooArgSet& s, const RooAbsData& d) As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging. ProjectionRange(const char* rn) Override default range of projection integrals to a different range specified by given range name. This technique allows you to project a finite width slice in a real-valued observable. NumCPU(Int_t ncpu) Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData). Misc content control . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per curve. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. EvalErrorValue(double value) Set curve points at which (pdf) evaluation errors occur to specified value. By default the function value is plotted. Normalization(double scale, ScaleType code) Adjust normalization by given scale factor. Interpretation of number depends on code:; Relative: relative adjustment factor for a normalized function,; NumEvent: scale to match given number of events.; Raw: relative adjustment factor for an un-normalized function. Name(const chat* name) Give curve specified name in frame. Useful if curve is to be referenced later. Asymmetry(const RooCategory& c) Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than the PDF projection. Category must have two states with indices -1 and +1 or three states with indices -1,0 and +1. ShiftToZero(bool flag) Shift entire curve such that lowest visible point is at exactly zero. Mostly useful when plotting \( -\log(L) \) o",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:131386,Integrability,depend,depends,131386,"data averaging. ProjectionRange(const char* rn) Override default range of projection integrals to a different range specified by given range name. This technique allows you to project a finite width slice in a real-valued observable. NumCPU(Int_t ncpu) Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData). Misc content control . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per curve. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. EvalErrorValue(double value) Set curve points at which (pdf) evaluation errors occur to specified value. By default the function value is plotted. Normalization(double scale, ScaleType code) Adjust normalization by given scale factor. Interpretation of number depends on code:; Relative: relative adjustment factor for a normalized function,; NumEvent: scale to match given number of events.; Raw: relative adjustment factor for an un-normalized function. Name(const chat* name) Give curve specified name in frame. Useful if curve is to be referenced later. Asymmetry(const RooCategory& c) Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than the PDF projection. Category must have two states with indices -1 and +1 or three states with indices -1,0 and +1. ShiftToZero(bool flag) Shift entire curve such that lowest visible point is at exactly zero. Mostly useful when plotting \( -\log(L) \) or \( \chi^2 \) distributions. AddTo(const char* name, double_t wgtSelf, double_t wgtOther) Add constructed projection to already existing curve with given name and relative weight factors . Components(const char* names) When plotting sums of PDFs, plot only the named components (e.g. only the signal of a signal+background model). . Components(const RooArgSet& compSet) As a",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:135459,Integrability,integrat,integration,135459,"form better in the presence of strong correlations, but may take (much) longer to calculate. VisualizeError(const RooFitResult& fitres, const RooArgSet& param, double Z=1, bool linearMethod=true) Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma' . Details on error band visualization; VisualizeError() uses plotOnWithErrorBand(). Documentation of the latter: See alsoplotOnWithErrorBand(). PyROOT; The RooAbsReal::plotOn() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Reimplemented in RooSimultaneous, RooAbsPdf, and RooSimultaneous.; Definition at line 1611 of file RooAbsReal.cxx. ◆ plotOn() [2/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . PlotOpt ; o . ); const. protectedvirtual . Plotting engine function for internal use. ; Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted function that occur in the previously plotted dataset are projected via partial integration, otherwise no projections are performed. Optionally, certain projections can be performed by summing over the values present in a provided dataset ('projData'), to correctly project out data dependents that are not properly described by the PDF (e.g. per-event errors).; The functions value can be multiplied with an optional scale factor. The interpretation of the scale factor is unique for generic real functions, for PDFs there are various interpretations possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; The default projection behaviour can be overridden by supplying an optional set of dependents to project via RooFit command arguments. ; Reimplemented in RooAbsPdf, and RooSimultaneous.; Definition at line 1883 of file RooAbsReal.cxx. ◆ plotOn() [3/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . RooLinkedList & ; cmdList . ); const. virtual . Internal back-end function of plotOn() wi",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:135662,Integrability,depend,dependents,135662,"lize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma' . Details on error band visualization; VisualizeError() uses plotOnWithErrorBand(). Documentation of the latter: See alsoplotOnWithErrorBand(). PyROOT; The RooAbsReal::plotOn() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Reimplemented in RooSimultaneous, RooAbsPdf, and RooSimultaneous.; Definition at line 1611 of file RooAbsReal.cxx. ◆ plotOn() [2/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . PlotOpt ; o . ); const. protectedvirtual . Plotting engine function for internal use. ; Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted function that occur in the previously plotted dataset are projected via partial integration, otherwise no projections are performed. Optionally, certain projections can be performed by summing over the values present in a provided dataset ('projData'), to correctly project out data dependents that are not properly described by the PDF (e.g. per-event errors).; The functions value can be multiplied with an optional scale factor. The interpretation of the scale factor is unique for generic real functions, for PDFs there are various interpretations possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; The default projection behaviour can be overridden by supplying an optional set of dependents to project via RooFit command arguments. ; Reimplemented in RooAbsPdf, and RooSimultaneous.; Definition at line 1883 of file RooAbsReal.cxx. ◆ plotOn() [3/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . RooLinkedList & ; cmdList . ); const. virtual . Internal back-end function of plotOn() with named arguments. ; Reimplemented in RooAbsPdf, RooSimultaneous, and RooSimultaneous.; Definition at line 1631 of file RooAbsReal.cxx. ◆ plotOnCompSelect(). void RooAbsReal::plotOnCompSelect ; (; Roo",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:136100,Integrability,depend,dependents,136100,"ition at line 1611 of file RooAbsReal.cxx. ◆ plotOn() [2/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . PlotOpt ; o . ); const. protectedvirtual . Plotting engine function for internal use. ; Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted function that occur in the previously plotted dataset are projected via partial integration, otherwise no projections are performed. Optionally, certain projections can be performed by summing over the values present in a provided dataset ('projData'), to correctly project out data dependents that are not properly described by the PDF (e.g. per-event errors).; The functions value can be multiplied with an optional scale factor. The interpretation of the scale factor is unique for generic real functions, for PDFs there are various interpretations possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; The default projection behaviour can be overridden by supplying an optional set of dependents to project via RooFit command arguments. ; Reimplemented in RooAbsPdf, and RooSimultaneous.; Definition at line 1883 of file RooAbsReal.cxx. ◆ plotOn() [3/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . RooLinkedList & ; cmdList . ); const. virtual . Internal back-end function of plotOn() with named arguments. ; Reimplemented in RooAbsPdf, RooSimultaneous, and RooSimultaneous.; Definition at line 1631 of file RooAbsReal.cxx. ◆ plotOnCompSelect(). void RooAbsReal::plotOnCompSelect ; (; RooArgSet * ; selNodes); const. protected . Helper function for plotting of composite p.d.fs. ; Given a set of selected components that should be plotted, find all nodes that (in)directly depend on these selected nodes. Mark all directly and indirectly selected nodes as 'selected' using the selectComp() method ; Definition at line 1438 of file RooAbsReal.cxx. ◆ plotOnWithErrorBand(). RooPlot * RooAbsReal::plotOnWithErrorBand ; (; RooPlot * ; frame, . const RooFitResu",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:136800,Integrability,depend,depend,136800," multiplied with an optional scale factor. The interpretation of the scale factor is unique for generic real functions, for PDFs there are various interpretations possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; The default projection behaviour can be overridden by supplying an optional set of dependents to project via RooFit command arguments. ; Reimplemented in RooAbsPdf, and RooSimultaneous.; Definition at line 1883 of file RooAbsReal.cxx. ◆ plotOn() [3/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . RooLinkedList & ; cmdList . ); const. virtual . Internal back-end function of plotOn() with named arguments. ; Reimplemented in RooAbsPdf, RooSimultaneous, and RooSimultaneous.; Definition at line 1631 of file RooAbsReal.cxx. ◆ plotOnCompSelect(). void RooAbsReal::plotOnCompSelect ; (; RooArgSet * ; selNodes); const. protected . Helper function for plotting of composite p.d.fs. ; Given a set of selected components that should be plotted, find all nodes that (in)directly depend on these selected nodes. Mark all directly and indirectly selected nodes as 'selected' using the selectComp() method ; Definition at line 1438 of file RooAbsReal.cxx. ◆ plotOnWithErrorBand(). RooPlot * RooAbsReal::plotOnWithErrorBand ; (; RooPlot * ; frame, . const RooFitResult & ; fr, . double ; Z, . const RooArgSet * ; params, . const RooLinkedList & ; argList, . bool ; linMethod . ); const. protected . Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ; Parameters. [in]frameRooPlot to plot on ; [in]frThe RooFitResult, where errors can be extracted ; [in]ZThe desired significance (width) of the error band ; [in]paramsIf non-zero, consider only the subset of the parameters in fr for the error evaluation ; [in]argListOptional RooCmdArg that can be applied to a regular plotOn() operation ; [in]linMethodBy default (linMethod=true), a linearized error is shown. . ReturnsThe RooPlot the",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:141535,Integrability,message,messages,141535,"id RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3694 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3582 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 455 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 445 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ;",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:141589,Integrability,message,message,141589,"deredObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3694 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3582 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 455 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 445 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooErrorVar, RooFormulaVar, RooGe",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:142993,Integrability,inject,inject,142993,"ar, RooRealIntegral, and RooRealVar.; Definition at line 455 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 445 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooErrorVar, RooFormulaVar, RooGenericPdf, RooLinearVar, and RooRealVar.; Definition at line 426 of file RooAbsReal.cxx. ◆ redirectServersHook(). bool RooAbsReal::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overrideprotectedvirtual . Function that is called at the end of redirectServers(). ; Can be overloaded to inject some class-dependent behavior after server redirection, e.g. resetting of caches. The return value is meant to be an error flag, so in case something goes wrong the function should return true. If you overload this function, don't forget to also call the function of the base class.; See alsoredirectServers() For a detailed explanation of the function parameters. ; Reimplemented from RooAbsArg.; Reimplemented in RooAddPdf, RooDerivative, RooProdPdf, RooProfileLL, RooFormulaVar, RooGenericPdf, RooNumConvolution, RooRealIntegral, RooResolutionModel, RooAbsTestStatistic, and RooProjectedPdf.; Definition at line 4474 of file RooAbsReal.cxx. ◆ selectComp(). void RooAbsReal::selectComp ; (; bool ; flag). inline . Definition at line 377 of file RooAbsReal.h. ◆ selectNormalization(). void RooAbsReal::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given set of observables to interpret function value. ; Needed f",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:143011,Integrability,depend,dependent,143011,"ar, RooRealIntegral, and RooRealVar.; Definition at line 455 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 445 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooErrorVar, RooFormulaVar, RooGenericPdf, RooLinearVar, and RooRealVar.; Definition at line 426 of file RooAbsReal.cxx. ◆ redirectServersHook(). bool RooAbsReal::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overrideprotectedvirtual . Function that is called at the end of redirectServers(). ; Can be overloaded to inject some class-dependent behavior after server redirection, e.g. resetting of caches. The return value is meant to be an error flag, so in case something goes wrong the function should return true. If you overload this function, don't forget to also call the function of the base class.; See alsoredirectServers() For a detailed explanation of the function parameters. ; Reimplemented from RooAbsArg.; Reimplemented in RooAddPdf, RooDerivative, RooProdPdf, RooProfileLL, RooFormulaVar, RooGenericPdf, RooNumConvolution, RooRealIntegral, RooResolutionModel, RooAbsTestStatistic, and RooProjectedPdf.; Definition at line 4474 of file RooAbsReal.cxx. ◆ selectComp(). void RooAbsReal::selectComp ; (; bool ; flag). inline . Definition at line 377 of file RooAbsReal.h. ◆ selectNormalization(). void RooAbsReal::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given set of observables to interpret function value. ; Needed f",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:144050,Integrability,depend,depends,144050,"eant to be an error flag, so in case something goes wrong the function should return true. If you overload this function, don't forget to also call the function of the base class.; See alsoredirectServers() For a detailed explanation of the function parameters. ; Reimplemented from RooAbsArg.; Reimplemented in RooAddPdf, RooDerivative, RooProdPdf, RooProfileLL, RooFormulaVar, RooGenericPdf, RooNumConvolution, RooRealIntegral, RooResolutionModel, RooAbsTestStatistic, and RooProjectedPdf.; Definition at line 4474 of file RooAbsReal.cxx. ◆ selectComp(). void RooAbsReal::selectComp ; (; bool ; flag). inline . Definition at line 377 of file RooAbsReal.h. ◆ selectNormalization(). void RooAbsReal::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given set of observables to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice of normalization such as RooAddPdf ; Reimplemented in RooAddModel, RooAddPdf, and RooSimultaneous.; Definition at line 3360 of file RooAbsReal.cxx. ◆ selectNormalizationRange(). void RooAbsReal::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given normalization range to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice of normalization such as RooAddPdf ; Reimplemented in RooBernstein, RooChebychev, RooAddModel, RooAddPdf, RooProdPdf, and RooSimultaneous.; Definition at line 3373 of file RooAbsReal.cxx. ◆ setCachedValue(). void RooAbsReal::setCachedValue ; (; double ; value, . bool ; notifyClients = true . ). inlinefinalvirtual . Overwrite the value stored in this object's cache. ; This can be used to fake a computation that resulted in value. Parameters. [in]valueValue to write. ; [in]notifyClientsIf true, notify users of this object that its value changed. This is the d",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:144518,Integrability,depend,depends,144518,"df.; Definition at line 4474 of file RooAbsReal.cxx. ◆ selectComp(). void RooAbsReal::selectComp ; (; bool ; flag). inline . Definition at line 377 of file RooAbsReal.h. ◆ selectNormalization(). void RooAbsReal::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given set of observables to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice of normalization such as RooAddPdf ; Reimplemented in RooAddModel, RooAddPdf, and RooSimultaneous.; Definition at line 3360 of file RooAbsReal.cxx. ◆ selectNormalizationRange(). void RooAbsReal::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given normalization range to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice of normalization such as RooAddPdf ; Reimplemented in RooBernstein, RooChebychev, RooAddModel, RooAddPdf, RooProdPdf, and RooSimultaneous.; Definition at line 3373 of file RooAbsReal.cxx. ◆ setCachedValue(). void RooAbsReal::setCachedValue ; (; double ; value, . bool ; notifyClients = true . ). inlinefinalvirtual . Overwrite the value stored in this object's cache. ; This can be used to fake a computation that resulted in value. Parameters. [in]valueValue to write. ; [in]notifyClientsIf true, notify users of this object that its value changed. This is the default. . Reimplemented from RooAbsArg.; Definition at line 558 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAddition, RooConstraintSum, and RooAbsTestStatistic.; Definition at line 367 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Optio",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:146128,Integrability,integrat,integration,146128,"rg.; Definition at line 558 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAddition, RooConstraintSum, and RooAbsTestStatistic.; Definition at line 367 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4316 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 191 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3346 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3335 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4324 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 416 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:146355,Integrability,integrat,integrator,146355,"ition at line 367 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4316 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 191 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3346 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3335 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4324 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 416 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooAr",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:146399,Integrability,integrat,integration,146399,"ition at line 367 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4316 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 191 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3346 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3335 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4324 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 416 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooAr",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:147592,Integrability,integrat,integrator,147592,"inition at line 4324 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 416 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 362 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3282 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3294 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1B",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:147909,Integrability,integrat,integrator,147909,"verrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 362 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3282 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3294 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:148101,Integrability,integrat,integrator,148101,"; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 362 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3282 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3294 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, Ro",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:151092,Integrability,wrap,wrapper,151092,"icPdf, RooHistFunc, RooHistPdf, RooLinearCombination, RooLinearVar, RooMoment, RooMultiVarGaussian, RooNumCdf, RooNumConvolution, RooNumConvPdf, RooNumRunningInt, RooPolyFunc, RooPolyVar, RooProdPdf, RooProduct, RooProfileLL, RooProjectedPdf, RooPullVar, RooRangeBoolean, RooRatio, RooRealIntegral, RooRealSumFunc, RooRealSumPdf, RooRealVar, RooRecursiveFraction, RooResolutionModel, RooSecondMoment, RooSimultaneous, RooTruthModel, RooWrapperPdf, RooLegendre, RooNonCentralChiSquare, and RooSpHarmonic. ◆ StreamerNVirtual(). void RooAbsReal::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 548 of file RooAbsReal.h. ◆ syncCache(). void RooAbsReal::syncCache ; (; const RooArgSet * ; set = nullptr). inlineoverrideprotectedvirtual . Implements RooAbsArg.; Reimplemented in RooErrorVar.; Definition at line 456 of file RooAbsReal.h. ◆ traceEval(). double RooAbsReal::traceEval ; (; const RooArgSet * ; set); const. protected . Calculate current value of object, with error tracing wrapper. ; Definition at line 319 of file RooAbsReal.cxx. ◆ writeToStream(). void RooAbsReal::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . Write object contents to stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooConstVar, RooErrorVar, RooFormulaVar, RooGenericPdf, RooLinearVar, and RooRealVar.; Definition at line 436 of file RooAbsReal.cxx. Friends And Related Symbol Documentation. ◆ AddCacheElem. friend class AddCacheElem. friend . Definition at line 407 of file RooAbsReal.h. ◆ BatchInterfaceAccessor. friend class BatchInterfaceAccessor. friend . Definition at line 399 of file RooAbsReal.h. ◆ RooAddHelpers. friend class RooAddHelpers. friend . Definition at line 404 of file RooAbsReal.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 406 of file RooAbsReal.h. ◆ RooAddPdf. friend class RooAddPdf. friend . Definition at line 405 of file RooAbsReal.h. ◆ RooFit::Eva",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:152687,Integrability,integrat,integration,152687,ss BatchInterfaceAccessor. friend . Definition at line 399 of file RooAbsReal.h. ◆ RooAddHelpers. friend class RooAddHelpers. friend . Definition at line 404 of file RooAbsReal.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 406 of file RooAbsReal.h. ◆ RooAddPdf. friend class RooAddPdf. friend . Definition at line 405 of file RooAbsReal.h. ◆ RooFit::EvalContext. friend class RooFit::EvalContext. friend . Definition at line 408 of file RooAbsReal.h. ◆ RooRealBinding. friend class RooRealBinding. friend . Definition at line 401 of file RooAbsReal.h. ◆ RooRealSumFunc. friend class RooRealSumFunc. friend . Definition at line 403 of file RooAbsReal.h. ◆ RooRealSumPdf. friend class RooRealSumPdf. friend . Definition at line 402 of file RooAbsReal.h. ◆ RooVectorDataStore. friend class RooVectorDataStore. friend . Definition at line 400 of file RooAbsReal.h. Member Data Documentation. ◆ _forceNumInt. bool RooAbsReal::_forceNumInt = false. protected . Force numerical integration if flag set. ; Definition at line 539 of file RooAbsReal.h. ◆ _globalSelectComp. bool RooAbsReal::_globalSelectComp = false. staticprotected . Definition at line 545 of file RooAbsReal.h. ◆ _hideOffset. bool RooAbsReal::_hideOffset = true. staticprotected . Offset hiding flag. ; Definition at line 546 of file RooAbsReal.h. ◆ _label. TString RooAbsReal::_label. protected . Plot label for objects value. ; Definition at line 538 of file RooAbsReal.h. ◆ _lastNormSetId. RooFit::UniqueId<RooArgSet>::Value_t RooAbsReal::_lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval. mutableprotected . Component selection flag for RooAbsPdf::plotCompOn. ; ! ; Definition at line 543 of file RooAbsReal.h. ◆ _plotBins. Int_t RooAbsReal::_plotBins = 100. protected . Number of plot bins. ; Definition at line 535 of file RooAbsReal.h. ◆ _plotMax. double RooAbsReal::_plotMax = 0.0. protected . Maximum of plot range. ; Definition at line 534 of file RooAbsReal.h. ◆ _plotMin. double RooAbsReal::_plotMin,MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:1954,Modifiability,inherit,inherited,1954,"lowing code is equivalent in PyROOT: # Directly passing a RooCmdArg:; var.plotOn(frame, ROOT.RooFit.Components(""background"")); ; # With keyword arguments:; var.plotOn(frame, Components=""background""). Definition at line 59 of file RooAbsReal.h. Classes; class  EvalError;  ; class  EvalErrorContext;  Context to temporarily change the error logging mode as long as the context is alive. More...;  ; struct  GlobalSelectComponentRAII;  ; struct  PlotOpt;  ; class  Ref;  A RooAbsReal::Ref can be constructed from a RooAbsReal& or a double that will be implicitly converted to a RooConstVar&. More...;  . Public Types; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAdd",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:2364,Modifiability,inherit,inherited,2364,"lowing code is equivalent in PyROOT: # Directly passing a RooCmdArg:; var.plotOn(frame, ROOT.RooFit.Components(""background"")); ; # With keyword arguments:; var.plotOn(frame, Components=""background""). Definition at line 59 of file RooAbsReal.h. Classes; class  EvalError;  ; class  EvalErrorContext;  Context to temporarily change the error logging mode as long as the context is alive. More...;  ; struct  GlobalSelectComponentRAII;  ; struct  PlotOpt;  ; class  Ref;  A RooAbsReal::Ref can be constructed from a RooAbsReal& or a double that will be implicitly converted to a RooConstVar&. More...;  . Public Types; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAdd",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:3002,Modifiability,inherit,inherited,3002,"ctivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  . Public Member Functions;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implemen",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:4705,Modifiability,adapt,adaptor,4705,"(const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:4752,Modifiability,variab,variables,4752,"(const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:6432,Modifiability,variab,variable,6432,"2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooLinkedList &cmdList);  Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create a \( \chi^2 \) variable from a histogram and this function. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataHist &data, const RooLinkedList &cmdList);  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataSet &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create a \( \chi^2 \) from a series of x and y values stored in a dataset. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataSet &data, const RooLinkedList &cmdList);  See RooAbsReal::createChi2(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooAbsArg > createFundamental (const char *newname=",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:8113,Modifiability,variab,variables,8113,"inkedList &cmdList);  See RooAbsReal::createChi2(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooAbsArg > createFundamental (const char *newname=nullptr) const override;  Create a RooRealVar fundamental object with our properties. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nu",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:8876,Modifiability,config,configuration,8876,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:9837,Modifiability,config,configuration,9837,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:14474,Modifiability,config,configuration,14474,"on tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:14601,Modifiability,config,configuration,14601," void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool h",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:14864,Modifiability,variab,variable,14864,"arameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; TClass * IsA () const override;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAb",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:15113,Modifiability,variab,variable,15113,"alIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; TClass * IsA () const override;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serve",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:18703,Modifiability,config,configuration,18703,"uble xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &o",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:18800,Modifiability,config,config,18800,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constru",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:18835,Modifiability,config,configuration,18835,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constru",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:18880,Modifiability,config,configuration,18880,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constru",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:19053,Modifiability,variab,variable,19053,"es for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:19301,Modifiability,config,configuration,19301,"ing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollec",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:19442,Modifiability,config,configuration,19442,"mmy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:19771,Modifiability,inherit,inherited,19771,"tegration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollectio",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:20840,Modifiability,variab,variable,20840," ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained T",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:20875,Modifiability,variab,variables,20875," ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained T",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:21047,Modifiability,variab,variable,21047," transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileCon",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:21082,Modifiability,variab,variables,21082," transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileCon",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:21404,Modifiability,variab,variables,21404,"ponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ;",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:24107,Modifiability,variab,variable,24107," bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable lis",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:25024,Modifiability,variab,variable,25024,"oArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; virtual bool getParameters (const RooArgSet *observables, RooArgSet &outputSet, bool stripDisconnected=true) const;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:26217,Modifiability,variab,variables,26217," set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; virtual bool getParameters (const RooArgSet *observables, RooArgSet &outputSet, bool stripDisconnected=true) const;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (const Text_t *key) const;  Get string attribute mapped under key 'key'. ;  ; bool getTransientAttribute (const Text_t *name) const;  Check if a named attribute is set. ;  ; RooFit::OwningPtr< RooArgSet > getVariables (bool stripDisconnected=true) const;  Return RooArgSet with all variables (tree leaf nodes of expression tree) ;  ; void graphVizTree (const char *fileName, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Create a GraphViz .dot file visualizing the expression tree headed by this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:38049,Modifiability,inherit,inherited,38049," ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:39595,Modifiability,inherit,inherited,39595,"ects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:40688,Modifiability,inherit,inheritance,40688,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:42687,Modifiability,inherit,inherits,42687,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:42804,Modifiability,inherit,inherits,42804,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:46363,Modifiability,inherit,inherited,46363,"id SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalEr",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:47335,Modifiability,config,configuration,47335,"onst;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:48367,Modifiability,inherit,inherited,48367,"tic std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static T",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:48613,Modifiability,inherit,inherited,48613,"sages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given am",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:48823,Modifiability,inherit,inherited,48823,"sages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given am",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:49341,Modifiability,inherit,inherited,49341,"void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:50928,Modifiability,parameteriz,parameterized,50928,"en amount. ;  . Protected Member Functions; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:54463,Modifiability,inherit,inherited,54463," general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtua",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:56606,Modifiability,inherit,inherited,56606," attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . Protected Attributes; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buff",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:56983,Modifiability,inherit,inherited,56983,"alization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . Protected Attributes; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; s",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:57942,Modifiability,inherit,inherited,57942,"tion issues that cannot be handled in a single ioStreamer pass. ;  . Protected Attributes; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:59218,Modifiability,inherit,inherited,59218," RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; double _DEBUG_getVal (const RooArgSet *normalisationSet) const;  Debug version of getVal(), which is slow and does error checking. ;  . Friends; class AddCacheElem;  ; class BatchInterfaceAccessor;  ; class RooAddHelpers;  ; class RooAddModel;  ; class RooAddPdf;  ; class RooFit::EvalContext;  ; class RooRealBinding;  ; class RooRealSumFunc;  ; class RooRealSumPdf;  ; class RooVectorDataStore;  . Additional Inherited Members;  Public Attri",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:59436,Modifiability,inherit,inherited,59436,"tant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; double _DEBUG_getVal (const RooArgSet *normalisationSet) const;  Debug version of getVal(), which is slow and does error checking. ;  . Friends; class AddCacheElem;  ; class BatchInterfaceAccessor;  ; class RooAddHelpers;  ; class RooAddModel;  ; class RooAddPdf;  ; class RooFit::EvalContext;  ; class RooRealBinding;  ; class RooRealSumFunc;  ; class RooRealSumPdf;  ; class RooVectorDataStore;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:59605,Modifiability,inherit,inherited,59605,"ched isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; double _DEBUG_getVal (const RooArgSet *normalisationSet) const;  Debug version of getVal(), which is slow and does error checking. ;  . Friends; class AddCacheElem;  ; class BatchInterfaceAccessor;  ; class RooAddHelpers;  ; class RooAddModel;  ; class RooAddPdf;  ; class RooFit::EvalContext;  ; class RooRealBinding;  ; class RooRealSumFunc;  ; class RooRealSumPdf;  ; class RooVectorDataStore;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <RooAbsReal.h>. Inheritance diagram fo",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:60138,Modifiability,inherit,inherited,60138," > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; double _DEBUG_getVal (const RooArgSet *normalisationSet) const;  Debug version of getVal(), which is slow and does error checking. ;  . Friends; class AddCacheElem;  ; class BatchInterfaceAccessor;  ; class RooAddHelpers;  ; class RooAddModel;  ; class RooAddPdf;  ; class RooFit::EvalContext;  ; class RooRealBinding;  ; class RooRealSumFunc;  ; class RooRealSumPdf;  ; class RooVectorDataStore;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <RooAbsReal.h>. Inheritance diagram for RooAbsReal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ value_type. using RooAbsReal::value_type = double. Definition at line 61 of file RooAbsReal.h. Member Enumeration Documentation. ◆ ErrorLoggingMode. enum RooAbsReal::ErrorLoggingMode. EnumeratorPrintErrors ; CollectErrors ; CountErrors ; Ignore . Definition at line 317 of file RooAbsReal.h. ◆ ScaleType. enum RooAbsReal::ScaleType. EnumeratorRaw ; Relative ; NumEvent ; RelativeExpected .",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:60498,Modifiability,inherit,inherited,60498,"rited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; double _DEBUG_getVal (const RooArgSet *normalisationSet) const;  Debug version of getVal(), which is slow and does error checking. ;  . Friends; class AddCacheElem;  ; class BatchInterfaceAccessor;  ; class RooAddHelpers;  ; class RooAddModel;  ; class RooAddPdf;  ; class RooFit::EvalContext;  ; class RooRealBinding;  ; class RooRealSumFunc;  ; class RooRealSumPdf;  ; class RooVectorDataStore;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <RooAbsReal.h>. Inheritance diagram for RooAbsReal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ value_type. using RooAbsReal::value_type = double. Definition at line 61 of file RooAbsReal.h. Member Enumeration Documentation. ◆ ErrorLoggingMode. enum RooAbsReal::ErrorLoggingMode. EnumeratorPrintErrors ; CollectErrors ; CountErrors ; Ignore . Definition at line 317 of file RooAbsReal.h. ◆ ScaleType. enum RooAbsReal::ScaleType. EnumeratorRaw ; Relative ; NumEvent ; RelativeExpected . Definition at line 276 of file RooAbsReal.h. Constructor & Destructor Documentation. ◆ RooAbsReal() [1/4]. RooAbsReal::RooAbsReal ; (; ). coverity[UNINIT_CTOR] Default constructor ; Definition at line 199 of file RooAbsReal.cxx. ◆ RooAbsReal() [2/4]. RooAbsReal::RooAbsReal ; (; const char * ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:66394,Modifiability,adapt,adaptor,66394,"le RooAbsReal.cxx. ◆ binBoundaries(). std::list< double > * RooAbsReal::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in ParamHistFunc, PiecewiseInterpolation, RooLagrangianMorphFunc, RooMomentMorphFunc, RooParamHistFunc, RooAddition, RooAddPdf, RooFormulaVar, RooHistFunc, RooHistPdf, RooProdPdf, RooProduct, RooRealSumFunc, RooRealSumPdf, RooBinSamplingPdf, RooBinWidthFunction, RooLinearCombination, RooWrapperPdf, and PdfWrapper.; Definition at line 3560 of file RooAbsReal.cxx. ◆ bindVars(). RooFit::OwningPtr< RooAbsFunc > RooAbsReal::bindVars ; (; const RooArgSet & ; vars, . const RooArgSet * ; nset = nullptr, . bool ; clipInvalid = false . ); const. Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ; For example, calling bindVars({x1,x3}) on an object F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the current values of x2 and x4. The caller takes ownership of the returned adaptor. ; Definition at line 2980 of file RooAbsReal.cxx. ◆ buildCallToAnalyticIntegral(). std::string RooAbsReal::buildCallToAnalyticIntegral ; (; Int_t ; code, . const char * ; rangeName, . RooFit::Detail::CodeSquashContext & ; ctx . ); const. virtual . This function defines the analytical integral translation for the class. ; Parameters. [in]codeThe code that decides the integrands. ; [in]rangeNameName of the normalization range. ; [in]ctxAn object to manage auxiliary information for code-squashing. ReturnsThe representative code string of the integral for the given object. ; Reimplemented in RooLognormal, RooPoisson, RooHistFunc, RooHistPdf, RooBernstein, RooBifurGauss, RooCBShape, RooChebychev, RooExponential, RooGamma, RooGaussian, RooLa",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:66441,Modifiability,variab,variables,66441,"le RooAbsReal.cxx. ◆ binBoundaries(). std::list< double > * RooAbsReal::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in ParamHistFunc, PiecewiseInterpolation, RooLagrangianMorphFunc, RooMomentMorphFunc, RooParamHistFunc, RooAddition, RooAddPdf, RooFormulaVar, RooHistFunc, RooHistPdf, RooProdPdf, RooProduct, RooRealSumFunc, RooRealSumPdf, RooBinSamplingPdf, RooBinWidthFunction, RooLinearCombination, RooWrapperPdf, and PdfWrapper.; Definition at line 3560 of file RooAbsReal.cxx. ◆ bindVars(). RooFit::OwningPtr< RooAbsFunc > RooAbsReal::bindVars ; (; const RooArgSet & ; vars, . const RooArgSet * ; nset = nullptr, . bool ; clipInvalid = false . ); const. Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ; For example, calling bindVars({x1,x3}) on an object F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the current values of x2 and x4. The caller takes ownership of the returned adaptor. ; Definition at line 2980 of file RooAbsReal.cxx. ◆ buildCallToAnalyticIntegral(). std::string RooAbsReal::buildCallToAnalyticIntegral ; (; Int_t ; code, . const char * ; rangeName, . RooFit::Detail::CodeSquashContext & ; ctx . ); const. virtual . This function defines the analytical integral translation for the class. ; Parameters. [in]codeThe code that decides the integrands. ; [in]rangeNameName of the normalization range. ; [in]ctxAn object to manage auxiliary information for code-squashing. ReturnsThe representative code string of the integral for the given object. ; Reimplemented in RooLognormal, RooPoisson, RooHistFunc, RooHistPdf, RooBernstein, RooBifurGauss, RooCBShape, RooChebychev, RooExponential, RooGamma, RooGaussian, RooLa",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:66669,Modifiability,adapt,adaptor,66669,"bs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in ParamHistFunc, PiecewiseInterpolation, RooLagrangianMorphFunc, RooMomentMorphFunc, RooParamHistFunc, RooAddition, RooAddPdf, RooFormulaVar, RooHistFunc, RooHistPdf, RooProdPdf, RooProduct, RooRealSumFunc, RooRealSumPdf, RooBinSamplingPdf, RooBinWidthFunction, RooLinearCombination, RooWrapperPdf, and PdfWrapper.; Definition at line 3560 of file RooAbsReal.cxx. ◆ bindVars(). RooFit::OwningPtr< RooAbsFunc > RooAbsReal::bindVars ; (; const RooArgSet & ; vars, . const RooArgSet * ; nset = nullptr, . bool ; clipInvalid = false . ); const. Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ; For example, calling bindVars({x1,x3}) on an object F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the current values of x2 and x4. The caller takes ownership of the returned adaptor. ; Definition at line 2980 of file RooAbsReal.cxx. ◆ buildCallToAnalyticIntegral(). std::string RooAbsReal::buildCallToAnalyticIntegral ; (; Int_t ; code, . const char * ; rangeName, . RooFit::Detail::CodeSquashContext & ; ctx . ); const. virtual . This function defines the analytical integral translation for the class. ; Parameters. [in]codeThe code that decides the integrands. ; [in]rangeNameName of the normalization range. ; [in]ctxAn object to manage auxiliary information for code-squashing. ReturnsThe representative code string of the integral for the given object. ; Reimplemented in RooLognormal, RooPoisson, RooHistFunc, RooHistPdf, RooBernstein, RooBifurGauss, RooCBShape, RooChebychev, RooExponential, RooGamma, RooGaussian, RooLandau, RooPolynomial, RooUniform, RooEfficiency, and RooPolyVar.; Definition at line 4425 of file RooAbsReal.cxx. ◆ chi2FitTo() [1/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const Roo",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:68398,Modifiability,extend,extended,68398,"v, RooExponential, RooGamma, RooGaussian, RooLandau, RooPolynomial, RooUniform, RooEfficiency, and RooPolyVar.; Definition at line 4425 of file RooAbsReal.cxx. ◆ chi2FitTo() [1/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Perform a \( \chi^2 \) fit to given histogram. ; By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession; The following named arguments are supported. Options to control construction of chi2 . Extended(bool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:68469,Modifiability,extend,extended,68469,"RooAbsReal.cxx. ◆ chi2FitTo() [1/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Perform a \( \chi^2 \) fit to given histogram. ; By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession; The following named arguments are supported. Options to control construction of chi2 . Extended(bool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on the fly on all observables. Multiple comma separated range names can be specified. . NumCPU(int num) Parallelize NLL calculation on num CPUs . O",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:68598,Modifiability,extend,extended,68598,"RooAbsReal.cxx. ◆ chi2FitTo() [1/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Perform a \( \chi^2 \) fit to given histogram. ; By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession; The following named arguments are supported. Options to control construction of chi2 . Extended(bool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on the fly on all observables. Multiple comma separated range names can be specified. . NumCPU(int num) Parallelize NLL calculation on num CPUs . O",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:68864,Modifiability,extend,extended,68864,"ooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Perform a \( \chi^2 \) fit to given histogram. ; By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession; The following named arguments are supported. Options to control construction of chi2 . Extended(bool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on the fly on all observables. Multiple comma separated range names can be specified. . NumCPU(int num) Parallelize NLL calculation on num CPUs . Optimize(bool flag) Activate constant term optimization (on by default) . IntegrateBins() Integrate PDF within each bin. This sets the desired precision. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:68999,Modifiability,extend,extended,68999,"E in succession; The following named arguments are supported. Options to control construction of chi2 . Extended(bool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on the fly on all observables. Multiple comma separated range names can be specified. . NumCPU(int num) Parallelize NLL calculation on num CPUs . Optimize(bool flag) Activate constant term optimization (on by default) . IntegrateBins() Integrate PDF within each bin. This sets the desired precision. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bo",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:72273,Modifiability,extend,extended,72273,"ult. ; List of possible commands in the cmdList:. Type of CmdArg Effect on \( \chi^2 \) . DataError() Choose between:; RooAbsData::Expected: Expected Poisson error ( \( \sqrt{n_\text{expected}} \) from the PDF).; RooAbsData::SumW2: The observed error from the square root of the sum of weights, i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \( n_\text{observed} \). If for a given bin \( n_\text{expected} \) is lower than the \( n_\text{observed} \), the lower uncertainty is taken (e.g., the difference between the mean and the 16 % quantile). If \( n_\text{expected} \) is higher than \( n_\text{observed} \), the higher uncertainty is taken (e.g., the difference between the 84 % quantile and the mean).; RooAbsData::Auto (default): RooAbsData::Expected for unweighted data, RooAbsData::SumW2 for weighted data. . Extended() Use expected number of events of an extended p.d.f as normalization . NumCPU() Activate parallel processing feature . Range() Calculate \( \chi^2 \) only in selected region . Verbose() Verbose output of GOF framework . IntegrateBins() Integrate PDF within each bin. This sets the desired precision. Only useful for binned fits. . SumCoefRange() Set the range in which to interpret the coefficients of RooAddPdf components . SplitRange() Fit ranges used in different categories get named after the category. Using Range(""range""), SplitRange() as switches, different ranges could be set like this: myVariable.setRange(""range_pi0"", 135, 210);; myVariable.setRange(""range_gamma"", 50, 210);; . ConditionalObservables(Args_t &&... argsOrArgSet) Define projected observables. Arguments can either be multiple RooRealVar or a single RooArgSet containing them. Definition at line 4159 of file RooAbsReal.cxx. ◆ chi2FitTo() [3/4]. RooAbsReal::chi2FitTo ; (; RooDataSet & ; xydata, . const RooCmdArg & ; arg1 = {}, . const RooCmd",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:79058,Modifiability,variab,variable,79058,"oAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3542 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 2997 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) variable from a histogram and this function. ; Parameters. arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8ordered arguments. The list of supported command arguments is given in the documentation for RooChi2Var::RooChi2Var(const char name, const char title, RooAbsReal& func, RooDataHist& hdata, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&).; Parameters. dataHistogram with data . Returns\( \chi^2 \) variable. PyROOT; The RooAbsReal::createChi2() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4178 of file RooAbsReal.cxx. ◆ createChi2() [2/4]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooLinkedList & ; cmdList . ). virtual . See alsoRooAbsReal::createChi2(RooDataHist&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,cons",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:79561,Modifiability,variab,variable,79561,"lean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 2997 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) variable from a histogram and this function. ; Parameters. arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8ordered arguments. The list of supported command arguments is given in the documentation for RooChi2Var::RooChi2Var(const char name, const char title, RooAbsReal& func, RooDataHist& hdata, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&).; Parameters. dataHistogram with data . Returns\( \chi^2 \) variable. PyROOT; The RooAbsReal::createChi2() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4178 of file RooAbsReal.cxx. ◆ createChi2() [2/4]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooLinkedList & ; cmdList . ). virtual . See alsoRooAbsReal::createChi2(RooDataHist&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ; Parameters. datahist data ; cmdListList with RooCmdArg() from the table . Definition at line 4200 of file RooAbsReal.cxx. ◆ createChi2() [3/4]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createChi2 ; (; RooDataSet & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCm",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:83357,Modifiability,extend,extended,83357,"Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function. ; Parameters. [in]nameName of the ROOT histogram ; [in]xvarObservable to be std::mapped on x axis of ROOT histogram ; [in]arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8Arguments according to list below . ReturnsTH1 *, one of TH{1,2,3}. The caller takes ownership. Effect on histogram creation . IntrinsicBinning() Apply binning defined by function or pdf (as advertised via binBoundaries() method) . Binning(const char* name) Apply binning with given name to x axis of histogram . Binning(RooAbsBinning& binning) Apply specified binning to x axis of histogram . Binning(int nbins, [double lo, double hi]) Apply specified binning to x axis of histogram . ConditionalObservables(Args_t &&... argsOrArgSet) Do not normalise PDF over following observables when projecting PDF into histogram. . Scaling(bool) Apply density-correction scaling (multiply by bin volume), default is true . Extended(bool) Plot event yield instead of probability density (for extended pdfs only). YVar(const RooAbsRealLValue& var,...) Observable to be std::mapped on y axis of ROOT histogram. The YVar() and ZVar() arguments can be supplied with optional Binning() arguments to control the binning of the Y and Z axes, e.g. createHistogram(""histo"",x,Binning(-1,1,20), YVar(y,Binning(-1,1,30)), ZVar(z,Binning(""zbinning""))); RooAbsReal::createHistogramTH1 * createHistogram(RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) constCreate and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables w...Definition RooAbsReal.cxx:1183; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; . ZVar(const RooAbsRealLValue& var,...) Observable to be std::mapped on z axis of ROOT histogram . PyROOT; The RooAbsReal::createHistogram() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:83921,Modifiability,variab,variables,83921,"dvertised via binBoundaries() method) . Binning(const char* name) Apply binning with given name to x axis of histogram . Binning(RooAbsBinning& binning) Apply specified binning to x axis of histogram . Binning(int nbins, [double lo, double hi]) Apply specified binning to x axis of histogram . ConditionalObservables(Args_t &&... argsOrArgSet) Do not normalise PDF over following observables when projecting PDF into histogram. . Scaling(bool) Apply density-correction scaling (multiply by bin volume), default is true . Extended(bool) Plot event yield instead of probability density (for extended pdfs only). YVar(const RooAbsRealLValue& var,...) Observable to be std::mapped on y axis of ROOT histogram. The YVar() and ZVar() arguments can be supplied with optional Binning() arguments to control the binning of the Y and Z axes, e.g. createHistogram(""histo"",x,Binning(-1,1,20), YVar(y,Binning(-1,1,30)), ZVar(z,Binning(""zbinning""))); RooAbsReal::createHistogramTH1 * createHistogram(RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) constCreate and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables w...Definition RooAbsReal.cxx:1183; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; . ZVar(const RooAbsRealLValue& var,...) Observable to be std::mapped on z axis of ROOT histogram . PyROOT; The RooAbsReal::createHistogram() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1263 of file RooAbsReal.cxx. ◆ createHistogram() [2/3]. TH1 * RooAbsReal::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; xvar, . RooLinkedList & ; argList . ); const. Internal method implementing createHistogram. ; Definition at line 1281 of file RooAbsReal.cxx. ◆ createHistogram() [3/3]. TH1 * RooAbsReal::createHistogram ; (; RooStringView ; varNameList, . Int_t ; xbins = 0, . Int_t ; ybins = 0, . Int_t ; zbi",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:84878,Modifiability,variab,variables,84878," a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables w...Definition RooAbsReal.cxx:1183; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; . ZVar(const RooAbsRealLValue& var,...) Observable to be std::mapped on z axis of ROOT histogram . PyROOT; The RooAbsReal::createHistogram() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1263 of file RooAbsReal.cxx. ◆ createHistogram() [2/3]. TH1 * RooAbsReal::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; xvar, . RooLinkedList & ; argList . ); const. Internal method implementing createHistogram. ; Definition at line 1281 of file RooAbsReal.cxx. ◆ createHistogram() [3/3]. TH1 * RooAbsReal::createHistogram ; (; RooStringView ; varNameList, . Int_t ; xbins = 0, . Int_t ; ybins = 0, . Int_t ; zbins = 0 . ); const. Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ; Parameters. [in]varNameListList of variables to use for x, y, z axis, separated by ':' ; [in]xbinsNumber of bins for first variable ; [in]ybinsNumber of bins for second variable ; [in]zbinsNumber of bins for third variable . ReturnsTH1*, which is one of TH[1-3]. The histogram is owned by the caller.; For a greater degree of control use RooAbsReal::createHistogram(const char *, const RooAbsRealLValue&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) const ; Definition at line 1183 of file RooAbsReal.cxx. ◆ createIntegral() [1/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const char * ; rangeName . ); const. inline . Create integral over observables in iset in range named rangeName. ; Definition at line 207 of file RooAbsReal.h. ◆ createIntegral() [2/6]. RooFit::OwningPtr< RooAbsReal",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:84943,Modifiability,variab,variables,84943,"ition legend1.C:17; . ZVar(const RooAbsRealLValue& var,...) Observable to be std::mapped on z axis of ROOT histogram . PyROOT; The RooAbsReal::createHistogram() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1263 of file RooAbsReal.cxx. ◆ createHistogram() [2/3]. TH1 * RooAbsReal::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; xvar, . RooLinkedList & ; argList . ); const. Internal method implementing createHistogram. ; Definition at line 1281 of file RooAbsReal.cxx. ◆ createHistogram() [3/3]. TH1 * RooAbsReal::createHistogram ; (; RooStringView ; varNameList, . Int_t ; xbins = 0, . Int_t ; ybins = 0, . Int_t ; zbins = 0 . ); const. Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ; Parameters. [in]varNameListList of variables to use for x, y, z axis, separated by ':' ; [in]xbinsNumber of bins for first variable ; [in]ybinsNumber of bins for second variable ; [in]zbinsNumber of bins for third variable . ReturnsTH1*, which is one of TH[1-3]. The histogram is owned by the caller.; For a greater degree of control use RooAbsReal::createHistogram(const char *, const RooAbsRealLValue&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) const ; Definition at line 1183 of file RooAbsReal.cxx. ◆ createIntegral() [1/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const char * ; rangeName . ); const. inline . Create integral over observables in iset in range named rangeName. ; Definition at line 207 of file RooAbsReal.h. ◆ createIntegral() [2/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:85031,Modifiability,variab,variable,85031,"ition legend1.C:17; . ZVar(const RooAbsRealLValue& var,...) Observable to be std::mapped on z axis of ROOT histogram . PyROOT; The RooAbsReal::createHistogram() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1263 of file RooAbsReal.cxx. ◆ createHistogram() [2/3]. TH1 * RooAbsReal::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; xvar, . RooLinkedList & ; argList . ); const. Internal method implementing createHistogram. ; Definition at line 1281 of file RooAbsReal.cxx. ◆ createHistogram() [3/3]. TH1 * RooAbsReal::createHistogram ; (; RooStringView ; varNameList, . Int_t ; xbins = 0, . Int_t ; ybins = 0, . Int_t ; zbins = 0 . ); const. Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ; Parameters. [in]varNameListList of variables to use for x, y, z axis, separated by ':' ; [in]xbinsNumber of bins for first variable ; [in]ybinsNumber of bins for second variable ; [in]zbinsNumber of bins for third variable . ReturnsTH1*, which is one of TH[1-3]. The histogram is owned by the caller.; For a greater degree of control use RooAbsReal::createHistogram(const char *, const RooAbsRealLValue&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) const ; Definition at line 1183 of file RooAbsReal.cxx. ◆ createIntegral() [1/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const char * ; rangeName . ); const. inline . Create integral over observables in iset in range named rangeName. ; Definition at line 207 of file RooAbsReal.h. ◆ createIntegral() [2/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:85077,Modifiability,variab,variable,85077,"ition legend1.C:17; . ZVar(const RooAbsRealLValue& var,...) Observable to be std::mapped on z axis of ROOT histogram . PyROOT; The RooAbsReal::createHistogram() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1263 of file RooAbsReal.cxx. ◆ createHistogram() [2/3]. TH1 * RooAbsReal::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; xvar, . RooLinkedList & ; argList . ); const. Internal method implementing createHistogram. ; Definition at line 1281 of file RooAbsReal.cxx. ◆ createHistogram() [3/3]. TH1 * RooAbsReal::createHistogram ; (; RooStringView ; varNameList, . Int_t ; xbins = 0, . Int_t ; ybins = 0, . Int_t ; zbins = 0 . ); const. Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ; Parameters. [in]varNameListList of variables to use for x, y, z axis, separated by ':' ; [in]xbinsNumber of bins for first variable ; [in]ybinsNumber of bins for second variable ; [in]zbinsNumber of bins for third variable . ReturnsTH1*, which is one of TH[1-3]. The histogram is owned by the caller.; For a greater degree of control use RooAbsReal::createHistogram(const char *, const RooAbsRealLValue&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) const ; Definition at line 1183 of file RooAbsReal.cxx. ◆ createIntegral() [1/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const char * ; rangeName . ); const. inline . Create integral over observables in iset in range named rangeName. ; Definition at line 207 of file RooAbsReal.h. ◆ createIntegral() [2/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:85122,Modifiability,variab,variable,85122,"ition legend1.C:17; . ZVar(const RooAbsRealLValue& var,...) Observable to be std::mapped on z axis of ROOT histogram . PyROOT; The RooAbsReal::createHistogram() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1263 of file RooAbsReal.cxx. ◆ createHistogram() [2/3]. TH1 * RooAbsReal::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; xvar, . RooLinkedList & ; argList . ); const. Internal method implementing createHistogram. ; Definition at line 1281 of file RooAbsReal.cxx. ◆ createHistogram() [3/3]. TH1 * RooAbsReal::createHistogram ; (; RooStringView ; varNameList, . Int_t ; xbins = 0, . Int_t ; ybins = 0, . Int_t ; zbins = 0 . ); const. Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ; Parameters. [in]varNameListList of variables to use for x, y, z axis, separated by ':' ; [in]xbinsNumber of bins for first variable ; [in]ybinsNumber of bins for second variable ; [in]zbinsNumber of bins for third variable . ReturnsTH1*, which is one of TH[1-3]. The histogram is owned by the caller.; For a greater degree of control use RooAbsReal::createHistogram(const char *, const RooAbsRealLValue&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) const ; Definition at line 1183 of file RooAbsReal.cxx. ◆ createIntegral() [1/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const char * ; rangeName . ); const. inline . Create integral over observables in iset in range named rangeName. ; Definition at line 207 of file RooAbsReal.h. ◆ createIntegral() [2/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:86532,Modifiability,config,configuration,86532," 1183 of file RooAbsReal.cxx. ◆ createIntegral() [1/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const char * ; rangeName . ); const. inline . Create integral over observables in iset in range named rangeName. ; Definition at line 207 of file RooAbsReal.h. ◆ createIntegral() [2/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ; Definition at line 211 of file RooAbsReal.h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:87179,Modifiability,variab,variables,87179,".h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const Roo",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:87540,Modifiability,config,configure,87540,"r any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; No",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:88491,Modifiability,variab,variables,88491,"ain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 514 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr<",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:89020,Modifiability,config,configuration,89020,"mdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 514 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ; Definition at line 220 of file RooAbsReal.h. ◆ createIntObj(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntObj ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset, . const RooNumIntConfig * ; cfg, . const char * ; rangeName . ); const. protected . Inter",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:89712,Modifiability,config,configuration,89712,"tegral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 514 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ; Definition at line 220 of file RooAbsReal.h. ◆ createIntObj(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntObj ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset, . const RooNumIntConfig * ; cfg, . const char * ; rangeName . ); const. protected . Internal utility function for createIntegral() that creates the actual integral object. ; Definition at line 590 of file RooAbsReal.cxx. ◆ createIntRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Utility function for createRunningIntegral. ; It creates an object implementing the standard (analytical) integration technique for calculating the running integral. ; Definition at line 3827 of file RooAbsReal.cxx. ◆ createPlotProjection() [1/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; dependentVars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:91174,Modifiability,variab,variables,91174,"ooAbsReal.cxx. ◆ createIntRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Utility function for createRunningIntegral. ; It creates an object implementing the standard (analytical) integration technique for calculating the running integral. ; Definition at line 3827 of file RooAbsReal.cxx. ◆ createPlotProjection() [1/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; dependentVars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; cloneSet, . const char * ; rangeName = nullptr, . const RooArgSet * ; condObs = nullptr . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; Create a new object \( G \) that represents the normalized projection: ; \[; G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; \]. where \( F[x,y,p] \) is the function we represent, and \( \{ p \} \) are the remaining variables (""parameters"").; Parameters. [in]dependentVarsDependent variables over which to normalise, \( \{x\} \). ; [in]projectedVarsVariables to project out, \( \{ y \} \). ; [out]cloneSetWill be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object. The latter will also be returned. The caller takes ownership of this set. ; [in]rangeNameOptional range for projection integrals ; [in]condObsConditional observables, which are not integrated for normalisation, even if they are in dependentVars or projectedVars. . ReturnsA pointer to the newly created object, or zero in case of an error. The caller is responsible for deleting the cloneSet (which includes the returned projection object). ; Definition at line 816 of file RooAbsReal.cxx. ◆ createPlotProjection() [2/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; depVars, . const RooArgSet & ; projVars, . RooArgSet *& ; cloneSet . ); const. ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:91240,Modifiability,variab,variables,91240,"t & ; iset, . const RooArgSet & ; nset = {} . ). Utility function for createRunningIntegral. ; It creates an object implementing the standard (analytical) integration technique for calculating the running integral. ; Definition at line 3827 of file RooAbsReal.cxx. ◆ createPlotProjection() [1/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; dependentVars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; cloneSet, . const char * ; rangeName = nullptr, . const RooArgSet * ; condObs = nullptr . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; Create a new object \( G \) that represents the normalized projection: ; \[; G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; \]. where \( F[x,y,p] \) is the function we represent, and \( \{ p \} \) are the remaining variables (""parameters"").; Parameters. [in]dependentVarsDependent variables over which to normalise, \( \{x\} \). ; [in]projectedVarsVariables to project out, \( \{ y \} \). ; [out]cloneSetWill be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object. The latter will also be returned. The caller takes ownership of this set. ; [in]rangeNameOptional range for projection integrals ; [in]condObsConditional observables, which are not integrated for normalisation, even if they are in dependentVars or projectedVars. . ReturnsA pointer to the newly created object, or zero in case of an error. The caller is responsible for deleting the cloneSet (which includes the returned projection object). ; Definition at line 816 of file RooAbsReal.cxx. ◆ createPlotProjection() [2/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; depVars, . const RooArgSet & ; projVars, . RooArgSet *& ; cloneSet . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:93873,Modifiability,variab,variables,93873,"ooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ; Definition at line 3706 of file RooAbsReal.cxx. ◆ createRunningIntegral() [2/2]. RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:96999,Modifiability,config,configuration,96999,"wningPtr< RooAbsReal > RooAbsReal::createScanRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . Int_t ; numScanBins, . Int_t ; intOrder . ). Utility function for createRunningIntegral that construct an object implementing the numeric scanning technique for calculating the running integral. ; Definition at line 3810 of file RooAbsReal.cxx. ◆ DeclFileName(). static const char * RooAbsReal::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 548 of file RooAbsReal.h. ◆ defaultErrorLevel(). virtual double RooAbsReal::defaultErrorLevel ; (; ); const. inlinevirtual . Reimplemented in RooAddition, RooFit::TestStatistics::RooRealL, RooFormulaVar, RooFit::Experimental::RooFuncWrapper, RooChi2Var, RooNLLVar, RooXYChi2Var, and ProgressMonitor.; Definition at line 248 of file RooAbsReal.h. ◆ defaultIntegratorConfig(). RooNumIntConfig * RooAbsReal::defaultIntegratorConfig ; (; ). static . Returns the default numeric integration configuration for all RooAbsReals. ; Definition at line 3272 of file RooAbsReal.cxx. ◆ derivative() [1/2]. RooDerivative * RooAbsReal::derivative ; (; RooRealVar & ; obs, . const RooArgSet & ; normSet, . Int_t ; order, . double ; eps = 0.001 . ). Return function representing first, second or third order derivative of this function. ; Definition at line 3999 of file RooAbsReal.cxx. ◆ derivative() [2/2]. RooDerivative * RooAbsReal::derivative ; (; RooRealVar & ; obs, . Int_t ; order = 1, . double ; eps = 0.001 . ). Return function representing first, second or third order derivative of this function. ; Definition at line 3987 of file RooAbsReal.cxx. ◆ doEval(). void RooAbsReal::doEval ; (; RooFit::EvalContext & ; ctx); const. virtual . Base function for computing multiple values of a RooAbsReal. ; Parameters. ctxAn evaluation context object . Reimplemented in RooStats::HistFactory::FlexibleInterpVar, ParamHistFunc, PiecewiseInterpolation, RooArgusBG, RooBernstein, RooBifurGauss, RooBM",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:102024,Modifiability,extend,extendedMode,102024,"er, RooFit::Experimental::RooFuncWrapper, RooGenericPdf, RooHistFunc, RooHistPdf, RooLinearCombination, RooLinearVar, RooMoment, RooMultiVarGaussian, RooNumConvolution, RooNumConvPdf, RooNumRunningInt, RooPolyFunc, RooPolyVar, RooProdPdf, RooProduct, RooProfileLL, RooProjectedPdf, RooPullVar, RooRangeBoolean, RooRatio, RooRealIntegral, RooRealSumFunc, RooRealSumPdf, RooRealVar, RooRecursiveFraction, RooSecondMoment, RooSimultaneous, RooTruthModel, RooWrapperPdf, RooAbsTestStatistic, RooGenProdProj, RooNormalizedPdf, RooFixedProdPdf, RooRealMPFE, RooHypatia2, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooStats::Heaviside, ProgressMonitor, xRooProjectedPdf, and PdfWrapper. ◆ fillDataHist(). RooDataHist * RooAbsReal::fillDataHist ; (; RooDataHist * ; hist, . const RooArgSet * ; normSet, . double ; scaleFactor, . bool ; correctForBinSize = false, . bool ; showProgress = false . ); const. Fill a RooDataHist with values sampled from this function at the bin centers. ; If extendedMode is true, the p.d.f. values is multiplied by the number of expected events in each bin; An optional scaling by a given scaleFactor can be performed. Returns a pointer to the input RooDataHist, or zero in case of an error.; If correctForBinSize is true the RooDataHist is filled with the functions density (function value times the bin volume) rather than function value.; If showProgress is true a process indicator is printed on stdout in steps of one percent, which is mostly useful for the sampling of expensive functions such as likelihoods ; Definition at line 1124 of file RooAbsReal.cxx. ◆ fillHistogram(). TH1 * RooAbsReal::fillHistogram ; (; TH1 * ; hist, . const RooArgList & ; plotVars, . double ; scaleFactor = 1, . const RooArgSet * ; projectedVars = nullptr, . bool ; scaleForDensity = true, . const RooArgSet * ; condObs = nullptr, . bool ; setError = true . ); const. Fill the ROOT histogram 'hist' with values sampled from this function at the bin centers. ; Our value is calculated",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:103065,Modifiability,variab,variables,103065,"plied by the number of expected events in each bin; An optional scaling by a given scaleFactor can be performed. Returns a pointer to the input RooDataHist, or zero in case of an error.; If correctForBinSize is true the RooDataHist is filled with the functions density (function value times the bin volume) rather than function value.; If showProgress is true a process indicator is printed on stdout in steps of one percent, which is mostly useful for the sampling of expensive functions such as likelihoods ; Definition at line 1124 of file RooAbsReal.cxx. ◆ fillHistogram(). TH1 * RooAbsReal::fillHistogram ; (; TH1 * ; hist, . const RooArgList & ; plotVars, . double ; scaleFactor = 1, . const RooArgSet * ; projectedVars = nullptr, . bool ; scaleForDensity = true, . const RooArgSet * ; condObs = nullptr, . bool ; setError = true . ); const. Fill the ROOT histogram 'hist' with values sampled from this function at the bin centers. ; Our value is calculated by first integrating out any variables in projectedVars and then scaling the result by scaleFactor. Returns a pointer to the input histogram, or zero in case of an error. The input histogram can be any TH1 subclass, and therefore of arbitrary dimension. Variables are matched with the (x,y,...) dimensions of the input histogram according to the order in which they appear in the input plotVars list. If scaleForDensity is true the histogram is filled with a the functions density rather than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 947 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3099 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs,",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:104256,Modifiability,parameteriz,parameterized,104256,"error. The input histogram can be any TH1 subclass, and therefore of arbitrary dimension. Variables are matched with the (x,y,...) dimensions of the input histogram according to the order in which they appear in the input plotVars list. If scaleForDensity is true the histogram is filled with a the functions density rather than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 947 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3099 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 701 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4051 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expr",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:104507,Modifiability,parameteriz,parameterized,104507,"her than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 947 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3099 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 701 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4051 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ; If the force flag is false, the normalization choice is only fixed for those RooAddPdf components that have the default 'automatic' interpretation of coefficients (i.e. the interpretation is defined by the observables passed to getVal()). If force is ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:104534,Modifiability,parameteriz,parameterization,104534,"her than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 947 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3099 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 701 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4051 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ; If the force flag is false, the normalization choice is only fixed for those RooAddPdf components that have the default 'automatic' interpretation of coefficients (i.e. the interpretation is defined by the observables passed to getVal()). If force is ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:107821,Modifiability,config,configuration,107821,"rojectedPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 164 of file RooAbsReal.h. ◆ forceNumInt(). virtual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3887 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 368 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullpt",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:109802,Modifiability,config,configuration,109802,"gral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ; For certain operator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 351 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to em",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:109857,Modifiability,config,configuration,109857,"rator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 351 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFun",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:109909,Modifiability,config,configuration,109909,"rator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 351 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFun",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:109958,Modifiability,config,configuration,109958,"rator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 351 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFun",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:110187,Modifiability,config,configuration,110187,"izedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 351 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3386 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:110242,Modifiability,config,configuration,110242,"oExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 351 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3386 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line 406 of file RooAbsReal.cxx. ◆ getPropagatedError(). double RooAbsReal::getPropagatedError ; (; const RooFitResult & ; fr, . const RooArgSe",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:110294,Modifiability,config,configuration,110294,"oExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 351 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3386 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line 406 of file RooAbsReal.cxx. ◆ getPropagatedError(). double RooAbsReal::getPropagatedError ; (; const RooFitResult & ; fr, . const RooArgSe",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:110343,Modifiability,config,configuration,110343,"oExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 351 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3386 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line 406 of file RooAbsReal.cxx. ◆ getPropagatedError(). double RooAbsReal::getPropagatedError ; (; const RooFitResult & ; fr, . const RooArgSe",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:111159,Modifiability,variab,variable,111159,"); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3386 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line 406 of file RooAbsReal.cxx. ◆ getPropagatedError(). double RooAbsReal::getPropagatedError ; (; const RooFitResult & ; fr, . const RooArgSet & ; nset = {} . ); const. Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ; Estimates the uncertainty \(\sigma_f(x;\theta)\) on a function \(f(x;\theta)\) represented by this RooAbsReal. Here, \(\theta\) is a vector of parameters with uncertainties \(\sigma_\theta\), and \(x\) are usually observables. The uncertainty is estimated by linearly propagating the parameter uncertainties using the correlation matrix from a fit result.; The square of the uncertainty on \(f(x;\theta)\) is calculated as follows: ; \[; \sigma_f(x)^2 = \Delta f_i(x) \cdot \mathrm{Corr}_{i, j} \cdot \Delta f_j(x),; \]. where \( \Delta f_i(x) = \frac{1}{2} \left(f(x;\theta_i + \sigma_{\theta_i}) - f(x; \theta_i - \sigma_{\theta_i}) \right) \) is the vector of function variations when changing the para",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:112471,Modifiability,variab,variable,112471,"f(x;\theta)\) on a function \(f(x;\theta)\) represented by this RooAbsReal. Here, \(\theta\) is a vector of parameters with uncertainties \(\sigma_\theta\), and \(x\) are usually observables. The uncertainty is estimated by linearly propagating the parameter uncertainties using the correlation matrix from a fit result.; The square of the uncertainty on \(f(x;\theta)\) is calculated as follows: ; \[; \sigma_f(x)^2 = \Delta f_i(x) \cdot \mathrm{Corr}_{i, j} \cdot \Delta f_j(x),; \]. where \( \Delta f_i(x) = \frac{1}{2} \left(f(x;\theta_i + \sigma_{\theta_i}) - f(x; \theta_i - \sigma_{\theta_i}) \right) \) is the vector of function variations when changing the parameters one at a time, and \( \mathrm{Corr}_{i,j} = \left(\sigma_{\theta_i} \sigma_{\theta_j}\right)^{-1} \cdot \mathrm{Cov}_{i,j} \) is the correlation matrix from the fit result. ; Definition at line 2472 of file RooAbsReal.cxx. ◆ getTitle(). TString RooAbsReal::getTitle ; (; bool ; appendUnit = false); const. Return this variable's title string. ; If appendUnit is true and this variable has units, also append a string "" (<unit>)"". ; Definition at line 285 of file RooAbsReal.cxx. ◆ getUnit(). const Text_t * RooAbsReal::getUnit ; (; ); const. inline . Definition at line 143 of file RooAbsReal.h. ◆ getVal() [1/2]. double RooAbsReal::getVal ; (; const RooArgSet & ; normalisationSet); const. inline . Like getVal(const RooArgSet*), but always requires an argument for normalisation. ; Definition at line 126 of file RooAbsReal.h. ◆ getVal() [2/2]. double RooAbsReal::getVal ; (; const RooArgSet * ; normalisationSet = nullptr); const. inline . Evaluate object. ; Returns either cached value or triggers a recalculation. The recalculation happens by calling getValV(), which in the end calls the virtual evaluate() functions of the respective PDFs. Parameters. [in]normalisationSetgetValV() reacts differently depending on the value of the normalisation set. If the set is nullptr, an unnormalised value is returned. . NoteThe",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:112529,Modifiability,variab,variable,112529,"s RooAbsReal. Here, \(\theta\) is a vector of parameters with uncertainties \(\sigma_\theta\), and \(x\) are usually observables. The uncertainty is estimated by linearly propagating the parameter uncertainties using the correlation matrix from a fit result.; The square of the uncertainty on \(f(x;\theta)\) is calculated as follows: ; \[; \sigma_f(x)^2 = \Delta f_i(x) \cdot \mathrm{Corr}_{i, j} \cdot \Delta f_j(x),; \]. where \( \Delta f_i(x) = \frac{1}{2} \left(f(x;\theta_i + \sigma_{\theta_i}) - f(x; \theta_i - \sigma_{\theta_i}) \right) \) is the vector of function variations when changing the parameters one at a time, and \( \mathrm{Corr}_{i,j} = \left(\sigma_{\theta_i} \sigma_{\theta_j}\right)^{-1} \cdot \mathrm{Cov}_{i,j} \) is the correlation matrix from the fit result. ; Definition at line 2472 of file RooAbsReal.cxx. ◆ getTitle(). TString RooAbsReal::getTitle ; (; bool ; appendUnit = false); const. Return this variable's title string. ; If appendUnit is true and this variable has units, also append a string "" (<unit>)"". ; Definition at line 285 of file RooAbsReal.cxx. ◆ getUnit(). const Text_t * RooAbsReal::getUnit ; (; ); const. inline . Definition at line 143 of file RooAbsReal.h. ◆ getVal() [1/2]. double RooAbsReal::getVal ; (; const RooArgSet & ; normalisationSet); const. inline . Like getVal(const RooArgSet*), but always requires an argument for normalisation. ; Definition at line 126 of file RooAbsReal.h. ◆ getVal() [2/2]. double RooAbsReal::getVal ; (; const RooArgSet * ; normalisationSet = nullptr); const. inline . Evaluate object. ; Returns either cached value or triggers a recalculation. The recalculation happens by calling getValV(), which in the end calls the virtual evaluate() functions of the respective PDFs. Parameters. [in]normalisationSetgetValV() reacts differently depending on the value of the normalisation set. If the set is nullptr, an unnormalised value is returned. . NoteThe normalisation is arbitrary, because it is up to the implement",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:113634,Modifiability,variab,variables,113634,"nit(). const Text_t * RooAbsReal::getUnit ; (; ); const. inline . Definition at line 143 of file RooAbsReal.h. ◆ getVal() [1/2]. double RooAbsReal::getVal ; (; const RooArgSet & ; normalisationSet); const. inline . Like getVal(const RooArgSet*), but always requires an argument for normalisation. ; Definition at line 126 of file RooAbsReal.h. ◆ getVal() [2/2]. double RooAbsReal::getVal ; (; const RooArgSet * ; normalisationSet = nullptr); const. inline . Evaluate object. ; Returns either cached value or triggers a recalculation. The recalculation happens by calling getValV(), which in the end calls the virtual evaluate() functions of the respective PDFs. Parameters. [in]normalisationSetgetValV() reacts differently depending on the value of the normalisation set. If the set is nullptr, an unnormalised value is returned. . NoteThe normalisation is arbitrary, because it is up to the implementation of the PDF to e.g. leave out normalisation constants for speed reasons. The range of the variables is also ignored.; To normalise the result properly, a RooArgSet has to be passed, which contains the variables to normalise over. These are integrated over their current ranges to compute the normalisation constant, and the unnormalised result is divided by this value. ; Definition at line 103 of file RooAbsReal.h. ◆ getValV(). double RooAbsReal::getValV ; (; const RooArgSet * ; nset = nullptr); const. virtual . Return value of object. ; If the cache is clean, return the cached value, otherwise recalculate on the fly and refill the cache ; Reimplemented in RooConstVar, RooNormalizedPdf, ProgressMonitor, RooAbsHiddenReal, RooConvCoefVar, RooRealVar, RooResolutionModel, RooRealMPFE, RooMomentMorph, RooMomentMorphFunc, RooMomentMorphFuncND, RooAbsCachedPdf, RooAbsCachedReal, RooAbsPdf, RooAddPdf, RooErrorVar, and RooRealIntegral.; Definition at line 300 of file RooAbsReal.cxx. ◆ globalSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:113745,Modifiability,variab,variables,113745,"t line 143 of file RooAbsReal.h. ◆ getVal() [1/2]. double RooAbsReal::getVal ; (; const RooArgSet & ; normalisationSet); const. inline . Like getVal(const RooArgSet*), but always requires an argument for normalisation. ; Definition at line 126 of file RooAbsReal.h. ◆ getVal() [2/2]. double RooAbsReal::getVal ; (; const RooArgSet * ; normalisationSet = nullptr); const. inline . Evaluate object. ; Returns either cached value or triggers a recalculation. The recalculation happens by calling getValV(), which in the end calls the virtual evaluate() functions of the respective PDFs. Parameters. [in]normalisationSetgetValV() reacts differently depending on the value of the normalisation set. If the set is nullptr, an unnormalised value is returned. . NoteThe normalisation is arbitrary, because it is up to the implementation of the PDF to e.g. leave out normalisation constants for speed reasons. The range of the variables is also ignored.; To normalise the result properly, a RooArgSet has to be passed, which contains the variables to normalise over. These are integrated over their current ranges to compute the normalisation constant, and the unnormalised result is divided by this value. ; Definition at line 103 of file RooAbsReal.h. ◆ getValV(). double RooAbsReal::getValV ; (; const RooArgSet * ; nset = nullptr); const. virtual . Return value of object. ; If the cache is clean, return the cached value, otherwise recalculate on the fly and refill the cache ; Reimplemented in RooConstVar, RooNormalizedPdf, ProgressMonitor, RooAbsHiddenReal, RooConvCoefVar, RooRealVar, RooResolutionModel, RooRealMPFE, RooMomentMorph, RooMomentMorphFunc, RooMomentMorphFuncND, RooAbsCachedPdf, RooAbsCachedReal, RooAbsPdf, RooAddPdf, RooErrorVar, and RooRealIntegral.; Definition at line 300 of file RooAbsReal.cxx. ◆ globalSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch controlling the activation of the selectComp() functionality. ; Definition at l",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:121690,Modifiability,variab,variables,121690,"immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2903 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the content of proxy 'a' occurs in set 'allDeps' then the argument held in 'a' is copied from allDeps to analDeps ; Definition at line 3146 of file RooAbsReal.cxx. ◆ matchArgs() [2/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a, . const RooArgProxy & ; b . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the contents of proxies a,b occur in set 'allDeps' then the arguments held in a,b are copied from allDeps to analDeps ; Definition at line 3163 of file RooAbsReal.cxx. ◆ matchArgs() [3",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:121740,Modifiability,variab,variables,121740,"immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2903 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the content of proxy 'a' occurs in set 'allDeps' then the argument held in 'a' is copied from allDeps to analDeps ; Definition at line 3146 of file RooAbsReal.cxx. ◆ matchArgs() [2/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a, . const RooArgProxy & ; b . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the contents of proxies a,b occur in set 'allDeps' then the arguments held in a,b are copied from allDeps to analDeps ; Definition at line 3163 of file RooAbsReal.cxx. ◆ matchArgs() [3",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:128204,Modifiability,variab,variable,128204,"s a RooAbsReal ; Implements RooAbsArg.; Definition at line 261 of file RooAbsReal.cxx. ◆ operator==() [2/2]. bool RooAbsReal::operator== ; (; double ; value); const. Equality operator comparing to a double. ; Definition at line 250 of file RooAbsReal.cxx. ◆ plotAsymOn(). RooPlot * RooAbsReal::plotAsymOn ; (; RooPlot * ; frame, . const RooAbsCategoryLValue & ; asymCat, . PlotOpt ; o . ); const. protectedvirtual . Definition at line 2199 of file RooAbsReal.cxx. ◆ plotOn() [1/3]. RooAbsReal::plotOn ; (; RooPlot * ; frame, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {}, . const RooCmdArg & ; arg9 = {}, . const RooCmdArg & ; arg10 = {} . ); const. virtual . Plot (project) PDF on specified frame. ; If a PDF is plotted in an empty frame, it will show a unit normalized curve in the frame variable, taken at the present value of other observables defined for this PDF.; Parameters. [in]framepointer to RooPlot ; [in]arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10Ordered arguments. If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projected curve integrated over all variables that were present in the shown dataset except for the one on the x-axis. The normalization of the curve will also be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; This function takes the following named arguments . Projection control . Slice(const RooArgSet& set) Override default projection behaviour by omitting observables listed in set from the projection, i.e. by not integrating over these. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:128527,Modifiability,variab,variables,128527,"(; RooPlot * ; frame, . const RooAbsCategoryLValue & ; asymCat, . PlotOpt ; o . ); const. protectedvirtual . Definition at line 2199 of file RooAbsReal.cxx. ◆ plotOn() [1/3]. RooAbsReal::plotOn ; (; RooPlot * ; frame, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {}, . const RooCmdArg & ; arg9 = {}, . const RooCmdArg & ; arg10 = {} . ); const. virtual . Plot (project) PDF on specified frame. ; If a PDF is plotted in an empty frame, it will show a unit normalized curve in the frame variable, taken at the present value of other observables defined for this PDF.; Parameters. [in]framepointer to RooPlot ; [in]arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10Ordered arguments. If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projected curve integrated over all variables that were present in the shown dataset except for the one on the x-axis. The normalization of the curve will also be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; This function takes the following named arguments . Projection control . Slice(const RooArgSet& set) Override default projection behaviour by omitting observables listed in set from the projection, i.e. by not integrating over these. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*,",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:146140,Modifiability,config,configuration,146140,"rg.; Definition at line 558 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAddition, RooConstraintSum, and RooAbsTestStatistic.; Definition at line 367 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4316 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 191 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3346 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3335 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4324 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 416 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:146332,Modifiability,config,config,146332,"mented in ProgressMonitor, RooAddition, RooConstraintSum, and RooAbsTestStatistic.; Definition at line 367 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4316 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 191 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3346 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3335 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4324 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 416 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h.",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:146366,Modifiability,config,configuration,146366,"ition at line 367 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4316 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 191 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3346 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3335 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4324 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 416 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooAr",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:146411,Modifiability,config,configuration,146411,"ition at line 367 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4316 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 191 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3346 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3335 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4324 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 416 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooAr",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:146758,Modifiability,variab,variable,146758,"o printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4316 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 191 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3346 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3335 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4324 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 416 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 362 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3282 of",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:147603,Modifiability,config,configuration,147603,"inition at line 4324 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 416 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 362 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3282 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3294 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1B",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:147674,Modifiability,config,configuration,147674,"Real::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 416 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 362 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3282 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3294 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:147920,Modifiability,config,configuration,147920,"verrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3116 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 362 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3282 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3294 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:147991,Modifiability,config,configuration,147991,"; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 362 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3282 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3294 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, Ro",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:148112,Modifiability,config,configuration,148112,"; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 362 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3282 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3294 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, Ro",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:148163,Modifiability,config,configuration,148163,"; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 361 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 362 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3282 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3294 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, Ro",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:18567,Performance,cache,cache,18567,"e. ;  ; virtual RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const;  Internal back-end function of plotOn() with named arguments. ;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the special",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:35171,Performance,optimiz,optimizeCacheMode,35171,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void se",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:35231,Performance,cache,cache,35231,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void se",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:35242,Performance,optimiz,optimization,35242,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void se",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:35311,Performance,optimiz,optimizeCacheMode,35311," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAnd",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:35423,Performance,cache,cache,35423," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAnd",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:35434,Performance,optimiz,optimization,35434," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAnd",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:35555,Performance,cache,cacheList,35555,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructo",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:35662,Performance,cache,cached,35662,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructo",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:35787,Performance,cache,cacheList,35787,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void set",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:35925,Performance,cache,cached,35925,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void set",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:36119,Performance,perform,perform,36119,"eChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirt",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:36141,Performance,optimiz,optimization,36141,"eChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirt",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:36440,Performance,cache,cache,36440,"acheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache ()",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:36528,Performance,cache,cache,36528,"rgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:36663,Performance,cache,caches,36663,"list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependen",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:36739,Performance,cache,cache,36739,". ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverl",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:37215,Performance,cache,cacheUniqueSuffix,37215,"ool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ;",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:37395,Performance,cache,cache,37395,"ool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ;",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:50135,Performance,cache,cached,50135,"tatic Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:50176,Performance,cache,cache,50176,"tatic Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:53512,Performance,perform,perform,53512,"bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; virtual RooPlot * plotOn (RooPlot *frame, PlotOpt o) const;  Plotting engine function for internal use. ;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:55559,Performance,optimiz,optimizeDirtyHook,55559,";  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoErr",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:56047,Performance,cache,cached,56047,"id graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Fi",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:58779,Performance,cache,cache,58779," _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; double _DEBUG_getVal (const RooArgSet *normalisationSet) const;  Debug version of getVal(), w",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:59520,Performance,cache,cache,59520,"tant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; double _DEBUG_getVal (const RooArgSet *normalisationSet) const;  Debug version of getVal(), which is slow and does error checking. ;  . Friends; class AddCacheElem;  ; class BatchInterfaceAccessor;  ; class RooAddHelpers;  ; class RooAddModel;  ; class RooAddPdf;  ; class RooFit::EvalContext;  ; class RooRealBinding;  ; class RooRealSumFunc;  ; class RooRealSumPdf;  ; class RooVectorDataStore;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:64693,Performance,cache,cache,64693," getAnalyticalIntegral, except code zero. ; Reimplemented in RooNormalizedPdf, RooBinSamplingPdf, RooWrapperPdf, RooFixedProdPdf, ParamHistFunc, PiecewiseInterpolation, RooLagrangianMorphFunc, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooAbsPdf, RooAddModel, RooAddPdf, RooExtendPdf, RooProdPdf, RooProjectedPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 380 of file RooAbsReal.cxx. ◆ asTF(). TF1 * RooAbsReal::asTF ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3911 of file RooAbsReal.cxx. ◆ attachToTree(). void RooAbsReal::attachToTree ; (; TTree & ; t, . Int_t ; bufSize = 32000 . ). overrideprotectedvirtual . Attach object to a branch of given TTree. ; By default it will register the internal value cache RooAbsReal::_value as branch buffer for a double tree branch with the same name as this object. If no double branch is found with the name of this object, this method looks for a Float_t Int_t, UChar_t and UInt_t, etc branch. If any of these are found, a TreeReadBuffer that branch is created, and saved in _treeReadBuffer. TreeReadBuffer::operator double() can be used to convert the values. This is used by copyCache(). ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3028 of file RooAbsReal.cxx. ◆ attachToVStore(). void RooAbsReal::attachToVStore ; (; RooVectorDataStore & ; vstore). overrideprotectedvirtual . Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3012 of file RooAbsReal.cxx. ◆ binBoundaries(). std::list< double > * RooAbsReal::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [i",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:69563,Performance,optimiz,optimization,69563,"nts (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on the fly on all observables. Multiple comma separated range names can be specified. . NumCPU(int num) Parallelize NLL calculation on num CPUs . Optimize(bool flag) Activate constant term optimization (on by default) . IntegrateBins() Integrate PDF within each bin. This sets the desired precision. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:78381,Performance,cache,cached,78381,"p to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4254 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 548 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3542 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 2997 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) variable from a histogram and this function. ; Parameters. arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8ordered arguments. The list of supported command arguments is given in the documentation for RooChi2Var::RooChi2Var(const char name, const char title, RooAbsReal& func, RooDataHist& hdata, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, con",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:78422,Performance,cache,cache,78422,"p to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4254 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 548 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3542 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 2997 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) variable from a histogram and this function. ; Parameters. arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8ordered arguments. The list of supported command arguments is given in the documentation for RooChi2Var::RooChi2Var(const char name, const char title, RooAbsReal& func, RooDataHist& hdata, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, con",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:78470,Performance,cache,cached,78470,"honized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4254 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 548 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3542 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 2997 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) variable from a histogram and this function. ; Parameters. arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8ordered arguments. The list of supported command arguments is given in the documentation for RooChi2Var::RooChi2Var(const char name, const char title, RooAbsReal& func, RooDataHist& hdata, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&,const RooCm",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:78545,Performance,cache,cache,78545,"honized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4254 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 548 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3542 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 2997 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) variable from a histogram and this function. ; Parameters. arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8ordered arguments. The list of supported command arguments is given in the documentation for RooChi2Var::RooChi2Var(const char name, const char title, RooAbsReal& func, RooDataHist& hdata, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&,const RooCm",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:87030,Performance,perform,performed,87030,"set in range named rangeName with integrand normalized over observables in nset. ; Definition at line 211 of file RooAbsReal.h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:87396,Performance,perform,performed,87396,"in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is aut",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:87444,Performance,perform,performed,87444,"in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is aut",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:87635,Performance,perform,performed,87635,"it::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:88340,Performance,perform,performed,88340,"d is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 553 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:93724,Performance,perform,performed,93724,"bsReal.cxx. ◆ createRunningIntegral() [1/2]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ; Definition at line 3706 of file RooAbsReal.cxx. ◆ createRunningIntegral() [2/2]. RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the us",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:94466,Performance,perform,performance,94466,"he running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; The following named arguments are accepted . Effect on integral creation . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of int",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:94501,Performance,perform,perform,94501,"he running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; The following named arguments are accepted . Effect on integral creation . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of int",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:102174,Performance,perform,performed,102174,"LinearCombination, RooLinearVar, RooMoment, RooMultiVarGaussian, RooNumConvolution, RooNumConvPdf, RooNumRunningInt, RooPolyFunc, RooPolyVar, RooProdPdf, RooProduct, RooProfileLL, RooProjectedPdf, RooPullVar, RooRangeBoolean, RooRatio, RooRealIntegral, RooRealSumFunc, RooRealSumPdf, RooRealVar, RooRecursiveFraction, RooSecondMoment, RooSimultaneous, RooTruthModel, RooWrapperPdf, RooAbsTestStatistic, RooGenProdProj, RooNormalizedPdf, RooFixedProdPdf, RooRealMPFE, RooHypatia2, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooStats::Heaviside, ProgressMonitor, xRooProjectedPdf, and PdfWrapper. ◆ fillDataHist(). RooDataHist * RooAbsReal::fillDataHist ; (; RooDataHist * ; hist, . const RooArgSet * ; normSet, . double ; scaleFactor, . bool ; correctForBinSize = false, . bool ; showProgress = false . ); const. Fill a RooDataHist with values sampled from this function at the bin centers. ; If extendedMode is true, the p.d.f. values is multiplied by the number of expected events in each bin; An optional scaling by a given scaleFactor can be performed. Returns a pointer to the input RooDataHist, or zero in case of an error.; If correctForBinSize is true the RooDataHist is filled with the functions density (function value times the bin volume) rather than function value.; If showProgress is true a process indicator is printed on stdout in steps of one percent, which is mostly useful for the sampling of expensive functions such as likelihoods ; Definition at line 1124 of file RooAbsReal.cxx. ◆ fillHistogram(). TH1 * RooAbsReal::fillHistogram ; (; TH1 * ; hist, . const RooArgList & ; plotVars, . double ; scaleFactor = 1, . const RooArgSet * ; projectedVars = nullptr, . bool ; scaleForDensity = true, . const RooArgSet * ; condObs = nullptr, . bool ; setError = true . ); const. Fill the ROOT histogram 'hist' with values sampled from this function at the bin centers. ; Our value is calculated by first integrating out any variables in projectedVars and then scaling the result ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:104867,Performance,perform,performed,104867,"on at line 3099 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 701 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4051 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ; If the force flag is false, the normalization choice is only fixed for those RooAddPdf components that have the default 'automatic' interpretation of coefficients (i.e. the interpretation is defined by the observables passed to getVal()). If force is true, also RooAddPdf that already have a fixed interpretation are changed to a new fixed interpretation. ; Definition at line 3650 of file RooAbsReal.cxx. ◆ fixAddCoefRange(). void RooAbsReal::fixAddCoefRange ; (; const char * ; rangeName = nullptr, . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree head",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:107861,Performance,perform,performed,107861,"tual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3887 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 368 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. virtual . Variant of getAnalyticalIntegral that is also passed the normalization set that should be a",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:113130,Performance,cache,cached,113130," parameters one at a time, and \( \mathrm{Corr}_{i,j} = \left(\sigma_{\theta_i} \sigma_{\theta_j}\right)^{-1} \cdot \mathrm{Cov}_{i,j} \) is the correlation matrix from the fit result. ; Definition at line 2472 of file RooAbsReal.cxx. ◆ getTitle(). TString RooAbsReal::getTitle ; (; bool ; appendUnit = false); const. Return this variable's title string. ; If appendUnit is true and this variable has units, also append a string "" (<unit>)"". ; Definition at line 285 of file RooAbsReal.cxx. ◆ getUnit(). const Text_t * RooAbsReal::getUnit ; (; ); const. inline . Definition at line 143 of file RooAbsReal.h. ◆ getVal() [1/2]. double RooAbsReal::getVal ; (; const RooArgSet & ; normalisationSet); const. inline . Like getVal(const RooArgSet*), but always requires an argument for normalisation. ; Definition at line 126 of file RooAbsReal.h. ◆ getVal() [2/2]. double RooAbsReal::getVal ; (; const RooArgSet * ; normalisationSet = nullptr); const. inline . Evaluate object. ; Returns either cached value or triggers a recalculation. The recalculation happens by calling getValV(), which in the end calls the virtual evaluate() functions of the respective PDFs. Parameters. [in]normalisationSetgetValV() reacts differently depending on the value of the normalisation set. If the set is nullptr, an unnormalised value is returned. . NoteThe normalisation is arbitrary, because it is up to the implementation of the PDF to e.g. leave out normalisation constants for speed reasons. The range of the variables is also ignored.; To normalise the result properly, a RooArgSet has to be passed, which contains the variables to normalise over. These are integrated over their current ranges to compute the normalisation constant, and the unnormalised result is divided by this value. ; Definition at line 103 of file RooAbsReal.h. ◆ getValV(). double RooAbsReal::getValV ; (; const RooArgSet * ; nset = nullptr); const. virtual . Return value of object. ; If the cache is clean, return the cached value, otherwis",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:114093,Performance,cache,cache,114093," respective PDFs. Parameters. [in]normalisationSetgetValV() reacts differently depending on the value of the normalisation set. If the set is nullptr, an unnormalised value is returned. . NoteThe normalisation is arbitrary, because it is up to the implementation of the PDF to e.g. leave out normalisation constants for speed reasons. The range of the variables is also ignored.; To normalise the result properly, a RooArgSet has to be passed, which contains the variables to normalise over. These are integrated over their current ranges to compute the normalisation constant, and the unnormalised result is divided by this value. ; Definition at line 103 of file RooAbsReal.h. ◆ getValV(). double RooAbsReal::getValV ; (; const RooArgSet * ; nset = nullptr); const. virtual . Return value of object. ; If the cache is clean, return the cached value, otherwise recalculate on the fly and refill the cache ; Reimplemented in RooConstVar, RooNormalizedPdf, ProgressMonitor, RooAbsHiddenReal, RooConvCoefVar, RooRealVar, RooResolutionModel, RooRealMPFE, RooMomentMorph, RooMomentMorphFunc, RooMomentMorphFuncND, RooAbsCachedPdf, RooAbsCachedReal, RooAbsPdf, RooAddPdf, RooErrorVar, and RooRealIntegral.; Definition at line 300 of file RooAbsReal.cxx. ◆ globalSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch controlling the activation of the selectComp() functionality. ; Definition at line 2966 of file RooAbsReal.cxx. ◆ gradient(). virtual void RooAbsReal::gradient ; (; double * ; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 388 of file RooAbsReal.h. ◆ hasGradient(). virtual bool RooAbsReal::hasGradient ; (; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 387 of file RooAbsReal.h. ◆ hideOffset(). bool RooAbsReal::hideOffset ; (; ). static . Definition at line 192 of file RooAbsReal.cxx. ◆ integralNameSuffix(). TString RooAbsReal::inte",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:114120,Performance,cache,cached,114120," respective PDFs. Parameters. [in]normalisationSetgetValV() reacts differently depending on the value of the normalisation set. If the set is nullptr, an unnormalised value is returned. . NoteThe normalisation is arbitrary, because it is up to the implementation of the PDF to e.g. leave out normalisation constants for speed reasons. The range of the variables is also ignored.; To normalise the result properly, a RooArgSet has to be passed, which contains the variables to normalise over. These are integrated over their current ranges to compute the normalisation constant, and the unnormalised result is divided by this value. ; Definition at line 103 of file RooAbsReal.h. ◆ getValV(). double RooAbsReal::getValV ; (; const RooArgSet * ; nset = nullptr); const. virtual . Return value of object. ; If the cache is clean, return the cached value, otherwise recalculate on the fly and refill the cache ; Reimplemented in RooConstVar, RooNormalizedPdf, ProgressMonitor, RooAbsHiddenReal, RooConvCoefVar, RooRealVar, RooResolutionModel, RooRealMPFE, RooMomentMorph, RooMomentMorphFunc, RooMomentMorphFuncND, RooAbsCachedPdf, RooAbsCachedReal, RooAbsPdf, RooAddPdf, RooErrorVar, and RooRealIntegral.; Definition at line 300 of file RooAbsReal.cxx. ◆ globalSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch controlling the activation of the selectComp() functionality. ; Definition at line 2966 of file RooAbsReal.cxx. ◆ gradient(). virtual void RooAbsReal::gradient ; (; double * ; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 388 of file RooAbsReal.h. ◆ hasGradient(). virtual bool RooAbsReal::hasGradient ; (; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 387 of file RooAbsReal.h. ◆ hideOffset(). bool RooAbsReal::hideOffset ; (; ). static . Definition at line 192 of file RooAbsReal.cxx. ◆ integralNameSuffix(). TString RooAbsReal::inte",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:114182,Performance,cache,cache,114182," respective PDFs. Parameters. [in]normalisationSetgetValV() reacts differently depending on the value of the normalisation set. If the set is nullptr, an unnormalised value is returned. . NoteThe normalisation is arbitrary, because it is up to the implementation of the PDF to e.g. leave out normalisation constants for speed reasons. The range of the variables is also ignored.; To normalise the result properly, a RooArgSet has to be passed, which contains the variables to normalise over. These are integrated over their current ranges to compute the normalisation constant, and the unnormalised result is divided by this value. ; Definition at line 103 of file RooAbsReal.h. ◆ getValV(). double RooAbsReal::getValV ; (; const RooArgSet * ; nset = nullptr); const. virtual . Return value of object. ; If the cache is clean, return the cached value, otherwise recalculate on the fly and refill the cache ; Reimplemented in RooConstVar, RooNormalizedPdf, ProgressMonitor, RooAbsHiddenReal, RooConvCoefVar, RooRealVar, RooResolutionModel, RooRealMPFE, RooMomentMorph, RooMomentMorphFunc, RooMomentMorphFuncND, RooAbsCachedPdf, RooAbsCachedReal, RooAbsPdf, RooAddPdf, RooErrorVar, and RooRealIntegral.; Definition at line 300 of file RooAbsReal.cxx. ◆ globalSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch controlling the activation of the selectComp() functionality. ; Definition at line 2966 of file RooAbsReal.cxx. ◆ gradient(). virtual void RooAbsReal::gradient ; (; double * ; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 388 of file RooAbsReal.h. ◆ hasGradient(). virtual bool RooAbsReal::hasGradient ; (; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 387 of file RooAbsReal.h. ◆ hideOffset(). bool RooAbsReal::hideOffset ; (; ). static . Definition at line 192 of file RooAbsReal.cxx. ◆ integralNameSuffix(). TString RooAbsReal::inte",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:128780,Performance,perform,performed,128780,"1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {}, . const RooCmdArg & ; arg9 = {}, . const RooCmdArg & ; arg10 = {} . ); const. virtual . Plot (project) PDF on specified frame. ; If a PDF is plotted in an empty frame, it will show a unit normalized curve in the frame variable, taken at the present value of other observables defined for this PDF.; Parameters. [in]framepointer to RooPlot ; [in]arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10Ordered arguments. If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projected curve integrated over all variables that were present in the shown dataset except for the one on the x-axis. The normalization of the curve will also be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; This function takes the following named arguments . Projection control . Slice(const RooArgSet& set) Override default projection behaviour by omitting observables listed in set from the projection, i.e. by not integrating over these. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*, std::string> const&) argument explained below. Slice(std::map<RooCategory*, std::string> const&) Omits multiple categories from the projection, as explianed above. Can be used with initializer lists for convenience, e.g. pdf.plotOn(frame, Slic",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:134411,Performance,perform,perform,134411,"nes at end of curve to ensure proper closure. Add DrawOption(""F"") for filled drawing. . FillColor(Int_t color) Select fill color by ROOT color code. Range(const char* name) Only draw curve in range defined by given name. Range(double lo, double hi) Only draw curve in specified range. VLines() Add vertical lines to y=0 at end points of curve. Precision(double eps) Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. Higher precision will result in more and more densely spaced curve points. Invisible(bool flag) Add curve to frame, but do not display. Useful in combination AddTo(). VisualizeError(const RooFitResult& fitres, double Z=1, bool linearMethod=true) Visualize the uncertainty on the parameters, as given in fitres, at 'Z' sigma'. The linear method is fast but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made. Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate. VisualizeError(const RooFitResult& fitres, const RooArgSet& param, double Z=1, bool linearMethod=true) Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma' . Details on error band visualization; VisualizeError() uses plotOnWithErrorBand(). Documentation of the latter: See alsoplotOnWithErrorBand(). PyROOT; The RooAbsReal::plotOn() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Reimplemented in RooSimultaneous, RooAbsPdf, and RooSimultaneous.; Definition at line 1611 of file RooAbsReal.cxx. ◆ plotOn() [2/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . PlotOpt ; o . ); const. protectedvirtual . Plotting engine function for internal use. ; Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted function that occur in the previously plotted da",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:135501,Performance,perform,performed,135501,"form better in the presence of strong correlations, but may take (much) longer to calculate. VisualizeError(const RooFitResult& fitres, const RooArgSet& param, double Z=1, bool linearMethod=true) Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma' . Details on error band visualization; VisualizeError() uses plotOnWithErrorBand(). Documentation of the latter: See alsoplotOnWithErrorBand(). PyROOT; The RooAbsReal::plotOn() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Reimplemented in RooSimultaneous, RooAbsPdf, and RooSimultaneous.; Definition at line 1611 of file RooAbsReal.cxx. ◆ plotOn() [2/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . PlotOpt ; o . ); const. protectedvirtual . Plotting engine function for internal use. ; Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted function that occur in the previously plotted dataset are projected via partial integration, otherwise no projections are performed. Optionally, certain projections can be performed by summing over the values present in a provided dataset ('projData'), to correctly project out data dependents that are not properly described by the PDF (e.g. per-event errors).; The functions value can be multiplied with an optional scale factor. The interpretation of the scale factor is unique for generic real functions, for PDFs there are various interpretations possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; The default projection behaviour can be overridden by supplying an optional set of dependents to project via RooFit command arguments. ; Reimplemented in RooAbsPdf, and RooSimultaneous.; Definition at line 1883 of file RooAbsReal.cxx. ◆ plotOn() [3/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . RooLinkedList & ; cmdList . ); const. virtual . Internal back-end function of plotOn() wi",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:135551,Performance,perform,performed,135551,"lize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma' . Details on error band visualization; VisualizeError() uses plotOnWithErrorBand(). Documentation of the latter: See alsoplotOnWithErrorBand(). PyROOT; The RooAbsReal::plotOn() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Reimplemented in RooSimultaneous, RooAbsPdf, and RooSimultaneous.; Definition at line 1611 of file RooAbsReal.cxx. ◆ plotOn() [2/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . PlotOpt ; o . ); const. protectedvirtual . Plotting engine function for internal use. ; Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted function that occur in the previously plotted dataset are projected via partial integration, otherwise no projections are performed. Optionally, certain projections can be performed by summing over the values present in a provided dataset ('projData'), to correctly project out data dependents that are not properly described by the PDF (e.g. per-event errors).; The functions value can be multiplied with an optional scale factor. The interpretation of the scale factor is unique for generic real functions, for PDFs there are various interpretations possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; The default projection behaviour can be overridden by supplying an optional set of dependents to project via RooFit command arguments. ; Reimplemented in RooAbsPdf, and RooSimultaneous.; Definition at line 1883 of file RooAbsReal.cxx. ◆ plotOn() [3/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . RooLinkedList & ; cmdList . ); const. virtual . Internal back-end function of plotOn() with named arguments. ; Reimplemented in RooAbsPdf, RooSimultaneous, and RooSimultaneous.; Definition at line 1631 of file RooAbsReal.cxx. ◆ plotOnCompSelect(). void RooAbsReal::plotOnCompSelect ; (; Roo",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:139191,Performance,perform,perform,139191,"rom the fit result, and \( Z \) = requested signifance ( \( Z \sigma \) band); The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111) Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate. ; Definition at line 2601 of file RooAbsReal.cxx. ◆ plotSamplingHint(). std::list< double > * RooAbsReal::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in RooLagrangianMorphFunc, RooAddition, RooFormulaVar, RooProduct, RooRealSumFunc, RooRealSumPdf, ParamHistFunc, PiecewiseInterpolation, RooMomentMorphFunc, RooParametricStepFunction, RooParamHistFunc, RooStepFunction, RooAddPdf, RooBinSamplingPdf, RooBinWidthFunction, RooHistFunc, RooHistPdf, RooLinearCombination, RooProdPdf, RooRangeBoolean, RooRealIntegral, and RooWrapperPdf.; ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:140360,Performance,perform,perform,140360," RooAbsReal::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in RooLagrangianMorphFunc, RooAddition, RooFormulaVar, RooProduct, RooRealSumFunc, RooRealSumPdf, ParamHistFunc, PiecewiseInterpolation, RooMomentMorphFunc, RooParametricStepFunction, RooParamHistFunc, RooStepFunction, RooAddPdf, RooBinSamplingPdf, RooBinWidthFunction, RooHistFunc, RooHistPdf, RooLinearCombination, RooProdPdf, RooRangeBoolean, RooRealIntegral, and RooWrapperPdf.; Definition at line 3571 of file RooAbsReal.cxx. ◆ plotSanityChecks(). bool RooAbsReal::plotSanityChecks ; (; RooPlot * ; frame); const. protected . Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ; Definition at line 2860 of file RooAbsReal.cxx. ◆ preferredObservableScanOrder(). void RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3694 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:143074,Performance,cache,caches,143074,"455 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 445 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooErrorVar, RooFormulaVar, RooGenericPdf, RooLinearVar, and RooRealVar.; Definition at line 426 of file RooAbsReal.cxx. ◆ redirectServersHook(). bool RooAbsReal::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overrideprotectedvirtual . Function that is called at the end of redirectServers(). ; Can be overloaded to inject some class-dependent behavior after server redirection, e.g. resetting of caches. The return value is meant to be an error flag, so in case something goes wrong the function should return true. If you overload this function, don't forget to also call the function of the base class.; See alsoredirectServers() For a detailed explanation of the function parameters. ; Reimplemented from RooAbsArg.; Reimplemented in RooAddPdf, RooDerivative, RooProdPdf, RooProfileLL, RooFormulaVar, RooGenericPdf, RooNumConvolution, RooRealIntegral, RooResolutionModel, RooAbsTestStatistic, and RooProjectedPdf.; Definition at line 4474 of file RooAbsReal.cxx. ◆ selectComp(). void RooAbsReal::selectComp ; (; bool ; flag). inline . Definition at line 377 of file RooAbsReal.h. ◆ selectNormalization(). void RooAbsReal::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given set of observables to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:144901,Performance,cache,cache,144901,"= false . ). protectedvirtual . Interface function to force use of a given set of observables to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice of normalization such as RooAddPdf ; Reimplemented in RooAddModel, RooAddPdf, and RooSimultaneous.; Definition at line 3360 of file RooAbsReal.cxx. ◆ selectNormalizationRange(). void RooAbsReal::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given normalization range to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice of normalization such as RooAddPdf ; Reimplemented in RooBernstein, RooChebychev, RooAddModel, RooAddPdf, RooProdPdf, and RooSimultaneous.; Definition at line 3373 of file RooAbsReal.cxx. ◆ setCachedValue(). void RooAbsReal::setCachedValue ; (; double ; value, . bool ; notifyClients = true . ). inlinefinalvirtual . Overwrite the value stored in this object's cache. ; This can be used to fake a computation that resulted in value. Parameters. [in]valueValue to write. ; [in]notifyClientsIf true, notify users of this object that its value changed. This is the default. . Reimplemented from RooAbsArg.; Definition at line 558 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAddition, RooConstraintSum, and RooAbsTestStatistic.; Definition at line 367 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4316 of file Ro",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:53528,Safety,sanity check,sanity check,53528,"bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; virtual RooPlot * plotOn (RooPlot *frame, PlotOpt o) const;  Plotting engine function for internal use. ;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:53560,Safety,safe,safe,53560,"bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; virtual RooPlot * plotOn (RooPlot *frame, PlotOpt o) const;  Plotting engine function for internal use. ;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:68253,Safety,predict,predicted,68253,"lemented in RooLognormal, RooPoisson, RooHistFunc, RooHistPdf, RooBernstein, RooBifurGauss, RooCBShape, RooChebychev, RooExponential, RooGamma, RooGaussian, RooLandau, RooPolynomial, RooUniform, RooEfficiency, and RooPolyVar.; Definition at line 4425 of file RooAbsReal.cxx. ◆ chi2FitTo() [1/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Perform a \( \chi^2 \) fit to given histogram. ; By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession; The following named arguments are supported. Options to control construction of chi2 . Extended(bool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:68354,Safety,predict,predicted,68354,"v, RooExponential, RooGamma, RooGaussian, RooLandau, RooPolynomial, RooUniform, RooEfficiency, and RooPolyVar.; Definition at line 4425 of file RooAbsReal.cxx. ◆ chi2FitTo() [1/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Perform a \( \chi^2 \) fit to given histogram. ; By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession; The following named arguments are supported. Options to control construction of chi2 . Extended(bool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:68525,Safety,predict,prediction,68525,"RooAbsReal.cxx. ◆ chi2FitTo() [1/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Perform a \( \chi^2 \) fit to given histogram. ; By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession; The following named arguments are supported. Options to control construction of chi2 . Extended(bool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on the fly on all observables. Multiple comma separated range names can be specified. . NumCPU(int num) Parallelize NLL calculation on num CPUs . O",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:68660,Safety,predict,prediction,68660,"t RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Perform a \( \chi^2 \) fit to given histogram. ; By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession; The following named arguments are supported. Options to control construction of chi2 . Extended(bool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on the fly on all observables. Multiple comma separated range names can be specified. . NumCPU(int num) Parallelize NLL calculation on num CPUs . Optimize(bool flag) Activate constant term optimization (on by default) . IntegrateBins() Integrate PDF within each bin. This sets the desired precision. Options to control flow of fit procedur",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:140376,Safety,sanity check,sanity check,140376," RooAbsReal::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in RooLagrangianMorphFunc, RooAddition, RooFormulaVar, RooProduct, RooRealSumFunc, RooRealSumPdf, ParamHistFunc, PiecewiseInterpolation, RooMomentMorphFunc, RooParametricStepFunction, RooParamHistFunc, RooStepFunction, RooAddPdf, RooBinSamplingPdf, RooBinWidthFunction, RooHistFunc, RooHistPdf, RooLinearCombination, RooProdPdf, RooRangeBoolean, RooRealIntegral, and RooWrapperPdf.; Definition at line 3571 of file RooAbsReal.cxx. ◆ plotSanityChecks(). bool RooAbsReal::plotSanityChecks ; (; RooPlot * ; frame); const. protected . Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ; Definition at line 2860 of file RooAbsReal.cxx. ◆ preferredObservableScanOrder(). void RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3694 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:140408,Safety,safe,safe,140408," RooAbsReal::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in RooLagrangianMorphFunc, RooAddition, RooFormulaVar, RooProduct, RooRealSumFunc, RooRealSumPdf, ParamHistFunc, PiecewiseInterpolation, RooMomentMorphFunc, RooParametricStepFunction, RooParamHistFunc, RooStepFunction, RooAddPdf, RooBinSamplingPdf, RooBinWidthFunction, RooHistFunc, RooHistPdf, RooLinearCombination, RooProdPdf, RooRangeBoolean, RooRealIntegral, and RooWrapperPdf.; Definition at line 3571 of file RooAbsReal.cxx. ◆ plotSanityChecks(). bool RooAbsReal::plotSanityChecks ; (; RooPlot * ; frame); const. protected . Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ; Definition at line 2860 of file RooAbsReal.cxx. ◆ preferredObservableScanOrder(). void RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3694 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:38917,Security,hash,hash,38917,"ED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:142993,Security,inject,inject,142993,"ar, RooRealIntegral, and RooRealVar.; Definition at line 455 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 445 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooErrorVar, RooFormulaVar, RooGenericPdf, RooLinearVar, and RooRealVar.; Definition at line 426 of file RooAbsReal.cxx. ◆ redirectServersHook(). bool RooAbsReal::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overrideprotectedvirtual . Function that is called at the end of redirectServers(). ; Can be overloaded to inject some class-dependent behavior after server redirection, e.g. resetting of caches. The return value is meant to be an error flag, so in case something goes wrong the function should return true. If you overload this function, don't forget to also call the function of the base class.; See alsoredirectServers() For a detailed explanation of the function parameters. ; Reimplemented from RooAbsArg.; Reimplemented in RooAddPdf, RooDerivative, RooProdPdf, RooProfileLL, RooFormulaVar, RooGenericPdf, RooNumConvolution, RooRealIntegral, RooResolutionModel, RooAbsTestStatistic, and RooProjectedPdf.; Definition at line 4474 of file RooAbsReal.cxx. ◆ selectComp(). void RooAbsReal::selectComp ; (; bool ; flag). inline . Definition at line 377 of file RooAbsReal.h. ◆ selectNormalization(). void RooAbsReal::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given set of observables to interpret function value. ; Needed f",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:1475,Testability,log,logging,1475,"it » RooFit Core. ; Abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc. ; Implementation of RooAbsReal may be derived, thus no interface is provided to modify the contents. PyROOT; Some member functions of RooAbsReal that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooAbsReal::plotOn, RooAbsReal::createHistogram, RooAbsReal::chi2FitTo, RooAbsReal::createChi2, RooAbsReal::createRunningIntegral and RooAbsReal::createIntegral For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; var.plotOn(frame, ROOT.RooFit.Components(""background"")); ; # With keyword arguments:; var.plotOn(frame, Components=""background""). Definition at line 59 of file RooAbsReal.h. Classes; class  EvalError;  ; class  EvalErrorContext;  Context to temporarily change the error logging mode as long as the context is alive. More...;  ; struct  GlobalSelectComponentRAII;  ; struct  PlotOpt;  ; class  Ref;  A RooAbsReal::Ref can be constructed from a RooAbsReal& or a double that will be implicitly converted to a RooConstVar&. More...;  . Public Types; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x0200000",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:16040,Testability,log,logEvalError,16040,"s parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; TClass * IsA () const override;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override;  Equality operator when comparing to ano",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:27461,Testability,test,testArg,27461,"izTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:27585,Testability,test,testArg,27585,"izTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:27667,Testability,test,testArg,27667,"am. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:27791,Testability,test,testArg,27791,"am. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:27895,Testability,test,testArg,27895,") const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::ostream &os, const char *indent="""", const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; virtual void printCompactTreeHook (std::ostream &os",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:35689,Testability,test,test,35689,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructo",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:35952,Testability,test,test,35952,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void set",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:47586,Testability,log,logging,47586,"ion_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static vo",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:47647,Testability,log,logEvalError,47647,"eam, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:47808,Testability,log,logging,47808,"eam, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:47868,Testability,log,logging,47868,"eam, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:47980,Testability,log,logged,47980,"tual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:48143,Testability,log,logged,48143,"();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get st",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:48274,Testability,log,logging,48274,"  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bo",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:60340,Testability,test,testArg,60340,"rited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; double _DEBUG_getVal (const RooArgSet *normalisationSet) const;  Debug version of getVal(), which is slow and does error checking. ;  . Friends; class AddCacheElem;  ; class BatchInterfaceAccessor;  ; class RooAddHelpers;  ; class RooAddModel;  ; class RooAddPdf;  ; class RooFit::EvalContext;  ; class RooRealBinding;  ; class RooRealSumFunc;  ; class RooRealSumPdf;  ; class RooVectorDataStore;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <RooAbsReal.h>. Inheritance diagram for RooAbsReal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ value_type. using RooAbsReal::value_type = double. Definition at line 61 of file RooAbsReal.h. Member Enumeration Documentation. ◆ ErrorLoggingMode. enum RooAbsReal::ErrorLoggingMode. EnumeratorPrintErrors ; CollectErrors ; CountErrors ; Ignore . Definition at line 317 of file RooAbsReal.h. ◆ ScaleType. enum RooAbsReal::ScaleType. EnumeratorRaw ; Relative ; NumEvent ; RelativeExpected . Definition at line 276 of file RooAbsReal.h. Constructor & Destructor Documentation. ◆ RooAbsReal() [1/4]. RooAbsReal::RooAbsReal ; (; ). coverity[UNINIT_CTOR] Default constructor ; Definition at line 199 of file RooAbsReal.cxx. ◆ RooAbsReal() [2/4]. RooAbsReal::RooAbsReal ; (; const char * ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:60387,Testability,test,testArg,60387,"rited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; double _DEBUG_getVal (const RooArgSet *normalisationSet) const;  Debug version of getVal(), which is slow and does error checking. ;  . Friends; class AddCacheElem;  ; class BatchInterfaceAccessor;  ; class RooAddHelpers;  ; class RooAddModel;  ; class RooAddPdf;  ; class RooFit::EvalContext;  ; class RooRealBinding;  ; class RooRealSumFunc;  ; class RooRealSumPdf;  ; class RooVectorDataStore;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <RooAbsReal.h>. Inheritance diagram for RooAbsReal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ value_type. using RooAbsReal::value_type = double. Definition at line 61 of file RooAbsReal.h. Member Enumeration Documentation. ◆ ErrorLoggingMode. enum RooAbsReal::ErrorLoggingMode. EnumeratorPrintErrors ; CollectErrors ; CountErrors ; Ignore . Definition at line 317 of file RooAbsReal.h. ◆ ScaleType. enum RooAbsReal::ScaleType. EnumeratorRaw ; Relative ; NumEvent ; RelativeExpected . Definition at line 276 of file RooAbsReal.h. Constructor & Destructor Documentation. ◆ RooAbsReal() [1/4]. RooAbsReal::RooAbsReal ; (; ). coverity[UNINIT_CTOR] Default constructor ; Definition at line 199 of file RooAbsReal.cxx. ◆ RooAbsReal() [2/4]. RooAbsReal::RooAbsReal ; (; const char * ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:60417,Testability,test,testArg,60417,"rited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; double _DEBUG_getVal (const RooArgSet *normalisationSet) const;  Debug version of getVal(), which is slow and does error checking. ;  . Friends; class AddCacheElem;  ; class BatchInterfaceAccessor;  ; class RooAddHelpers;  ; class RooAddModel;  ; class RooAddPdf;  ; class RooFit::EvalContext;  ; class RooRealBinding;  ; class RooRealSumFunc;  ; class RooRealSumPdf;  ; class RooVectorDataStore;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <RooAbsReal.h>. Inheritance diagram for RooAbsReal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ value_type. using RooAbsReal::value_type = double. Definition at line 61 of file RooAbsReal.h. Member Enumeration Documentation. ◆ ErrorLoggingMode. enum RooAbsReal::ErrorLoggingMode. EnumeratorPrintErrors ; CollectErrors ; CountErrors ; Ignore . Definition at line 317 of file RooAbsReal.h. ◆ ScaleType. enum RooAbsReal::ScaleType. EnumeratorRaw ; Relative ; NumEvent ; RelativeExpected . Definition at line 276 of file RooAbsReal.h. Constructor & Destructor Documentation. ◆ RooAbsReal() [1/4]. RooAbsReal::RooAbsReal ; (; ). coverity[UNINIT_CTOR] Default constructor ; Definition at line 199 of file RooAbsReal.cxx. ◆ RooAbsReal() [2/4]. RooAbsReal::RooAbsReal ; (; const char * ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:60468,Testability,test,testArg,60468,"rited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; double _DEBUG_getVal (const RooArgSet *normalisationSet) const;  Debug version of getVal(), which is slow and does error checking. ;  . Friends; class AddCacheElem;  ; class BatchInterfaceAccessor;  ; class RooAddHelpers;  ; class RooAddModel;  ; class RooAddPdf;  ; class RooFit::EvalContext;  ; class RooRealBinding;  ; class RooRealSumFunc;  ; class RooRealSumPdf;  ; class RooVectorDataStore;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <RooAbsReal.h>. Inheritance diagram for RooAbsReal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ value_type. using RooAbsReal::value_type = double. Definition at line 61 of file RooAbsReal.h. Member Enumeration Documentation. ◆ ErrorLoggingMode. enum RooAbsReal::ErrorLoggingMode. EnumeratorPrintErrors ; CollectErrors ; CountErrors ; Ignore . Definition at line 317 of file RooAbsReal.h. ◆ ScaleType. enum RooAbsReal::ScaleType. EnumeratorRaw ; Relative ; NumEvent ; RelativeExpected . Definition at line 276 of file RooAbsReal.h. Constructor & Destructor Documentation. ◆ RooAbsReal() [1/4]. RooAbsReal::RooAbsReal ; (; ). coverity[UNINIT_CTOR] Default constructor ; Definition at line 199 of file RooAbsReal.cxx. ◆ RooAbsReal() [2/4]. RooAbsReal::RooAbsReal ; (; const char * ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:99082,Testability,log,logging,99082,"Pdf, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooJohnson, RooLandau, RooLegacyExpPoly, RooLognormal, RooNovosibirsk, RooPoisson, RooPolynomial, RooPowerSum, RooVoigtian, RooAbsCachedPdf, RooAddition, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooBinWidthFunction, RooConstraintSum, RooGenericPdf, RooHistFunc, RooHistPdf, RooPolyVar, RooProduct, RooRatio, RooRealSumPdf, RooTruthModel, RooNormalizedPdf, RooHypatia2, RooLegendre, RooFormulaVar, and RooFixedProdPdf.; Definition at line 4343 of file RooAbsReal.cxx. ◆ enableOffsetting(). void RooAbsReal::enableOffsetting ; (; bool ; flag). virtual . Reimplemented in RooAbsTestStatistic, and RooRealMPFE.; Definition at line 4484 of file RooAbsReal.cxx. ◆ evalErrorIter(). EvalErrorData::ErrorList::iterator RooAbsReal::evalErrorIter ; (; ). static . Definition at line 181 of file RooAbsReal.cxx. ◆ evalErrorLoggingMode(). RooAbsReal::ErrorLoggingMode RooAbsReal::evalErrorLoggingMode ; (; ). static . Return current evaluation error logging mode. ; Definition at line 4302 of file RooAbsReal.cxx. ◆ evaluate(). virtual double RooAbsReal::evaluate ; (; ); const. protectedpure virtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implemented in RooStats::HistFactory::FlexibleInterpVar, RooStats::HistFactory::LinInterpVar, ParamHistFunc, PiecewiseInterpolation, RooStats::HistFactory::RooBarlowBeestonLL, Roo2DKeysPdf, RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, Ro",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:119788,Testability,log,logEvalError,119788,"ile RooAbsReal.cxx. ◆ isOffsetting(). virtual bool RooAbsReal::isOffsetting ; (; ); const. inlinevirtual . Reimplemented in RooAbsTestStatistic.; Definition at line 370 of file RooAbsReal.h. ◆ isSelectedComp(). bool RooAbsReal::isSelectedComp ; (; ); const. If true, the current pdf is a selected component (for use in plotting) ; Definition at line 2956 of file RooAbsReal.cxx. ◆ isValid(). bool RooAbsReal::isValid ; (; ); const. inlineoverrideprotectedvirtual . Check if current value is valid. ; Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 445 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 447 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:119827,Testability,log,logEvalError,119827,"ual bool RooAbsReal::isOffsetting ; (; ); const. inlinevirtual . Reimplemented in RooAbsTestStatistic.; Definition at line 370 of file RooAbsReal.h. ◆ isSelectedComp(). bool RooAbsReal::isSelectedComp ; (; ); const. If true, the current pdf is a selected component (for use in plotting) ; Definition at line 2956 of file RooAbsReal.cxx. ◆ isValid(). bool RooAbsReal::isValid ; (; ); const. inlineoverrideprotectedvirtual . Check if current value is valid. ; Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 445 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 447 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error log",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:120196,Testability,log,logEvalError,120196," Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 445 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 447 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Defin",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:120416,Testability,log,logged,120416," . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 447 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:120591,Testability,log,logging,120591,"a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 447 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:120837,Testability,log,logging,120837,"(; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input paramete",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:120978,Testability,log,logEvalError,120978,"ed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2903 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; al",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:121017,Testability,log,logEvalError,121017,"oFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2903 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArg",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:121213,Testability,log,logging,121213,"al method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2903 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the content of proxy 'a' occurs in set 'allDeps' then the argument held in 'a' is copied from allDeps to a",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:121273,Testability,log,logging,121273,"al method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2903 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the content of proxy 'a' occurs in set 'allDeps' then the argument held in 'a' is copied from allDeps to a",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:126735,Testability,log,logged,126735,"tralIf true, the central moment is given by \( \langle (x- \langle x \rangle )^2 \rangle \) ; [in]takeRootCalculate the square root ; [in]intNormObsIf true, the moment of the function integrated over all normalization observables is returned. . Definition at line 4034 of file RooAbsReal.cxx. ◆ moment() [2/2]. RooAbsMoment * RooAbsReal::moment ; (; RooRealVar & ; obs, . Int_t ; order, . bool ; central, . bool ; takeRoot . ). Return function representing moment of function of given order. ; Parameters. [in]obsObservable to calculate the moments for ; [in]orderOrder of the moment ; [in]centralIf true, the central moment is given by \( \langle (x- \langle x \rangle )^2 \rangle \) ; [in]takeRootCalculate the square root . Definition at line 4015 of file RooAbsReal.cxx. ◆ numEvalErrorItems(). Int_t RooAbsReal::numEvalErrorItems ; (; ). static . Definition at line 176 of file RooAbsReal.cxx. ◆ numEvalErrors(). Int_t RooAbsReal::numEvalErrors ; (; ). static . Return the number of logged evaluation errors since the last clearing. ; Definition at line 3624 of file RooAbsReal.cxx. ◆ offset(). virtual double RooAbsReal::offset ; (; ); const. inlinevirtual . Reimplemented in RooAbsTestStatistic.; Definition at line 371 of file RooAbsReal.h. ◆ operator==() [1/2]. bool RooAbsReal::operator== ; (; const RooAbsArg & ; other); const. overridevirtual . Equality operator when comparing to another RooAbsArg. ; Only functional when the other arg is a RooAbsReal ; Implements RooAbsArg.; Definition at line 261 of file RooAbsReal.cxx. ◆ operator==() [2/2]. bool RooAbsReal::operator== ; (; double ; value); const. Equality operator comparing to a double. ; Definition at line 250 of file RooAbsReal.cxx. ◆ plotAsymOn(). RooPlot * RooAbsReal::plotAsymOn ; (; RooPlot * ; frame, . const RooAbsCategoryLValue & ; asymCat, . PlotOpt ; o . ); const. protectedvirtual . Definition at line 2199 of file RooAbsReal.cxx. ◆ plotOn() [1/3]. RooAbsReal::plotOn ; (; RooPlot * ; frame, . const RooCmdArg & ; arg1 ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:132053,Testability,log,log,132053,"rint details of each error up to numErr messages per p.d.f component. EvalErrorValue(double value) Set curve points at which (pdf) evaluation errors occur to specified value. By default the function value is plotted. Normalization(double scale, ScaleType code) Adjust normalization by given scale factor. Interpretation of number depends on code:; Relative: relative adjustment factor for a normalized function,; NumEvent: scale to match given number of events.; Raw: relative adjustment factor for an un-normalized function. Name(const chat* name) Give curve specified name in frame. Useful if curve is to be referenced later. Asymmetry(const RooCategory& c) Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than the PDF projection. Category must have two states with indices -1 and +1 or three states with indices -1,0 and +1. ShiftToZero(bool flag) Shift entire curve such that lowest visible point is at exactly zero. Mostly useful when plotting \( -\log(L) \) or \( \chi^2 \) distributions. AddTo(const char* name, double_t wgtSelf, double_t wgtOther) Add constructed projection to already existing curve with given name and relative weight factors . Components(const char* names) When plotting sums of PDFs, plot only the named components (e.g. only the signal of a signal+background model). . Components(const RooArgSet& compSet) As above, but pass a RooArgSet of the components themselves. Plotting control . DrawOption(const char* opt) Select ROOT draw option for resulting TGraph object. Currently supported options are ""F"" (fill), ""L"" (line), and ""P"" (points). NoteOption ""P"" will cause RooFit to plot (and treat) this pdf as if it were data! This is intended for plotting ""corrected data""-type pdfs such as ""data-minus-background"" or unfolded datasets. LineStyle(Int_t style) Select line style by ROOT line style code, default is solid. LineColor(Int_t color) Select line color by ROOT color code, default is blue. LineWidth(Int_t width) Select l",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:141317,Testability,log,logged,141317," Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ; Definition at line 2860 of file RooAbsReal.cxx. ◆ preferredObservableScanOrder(). void RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3694 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3582 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 455 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 445 of file RooAbsReal.cxx. ◆",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:141632,Testability,log,logged,141632,"deredObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3694 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3582 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 455 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 445 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooErrorVar, RooFormulaVar, RooGe",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:145570,Testability,log,logging,145570,"RooAddPdf ; Reimplemented in RooBernstein, RooChebychev, RooAddModel, RooAddPdf, RooProdPdf, and RooSimultaneous.; Definition at line 3373 of file RooAbsReal.cxx. ◆ setCachedValue(). void RooAbsReal::setCachedValue ; (; double ; value, . bool ; notifyClients = true . ). inlinefinalvirtual . Overwrite the value stored in this object's cache. ; This can be used to fake a computation that resulted in value. Parameters. [in]valueValue to write. ; [in]notifyClientsIf true, notify users of this object that its value changed. This is the default. . Reimplemented from RooAbsArg.; Definition at line 558 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAddition, RooConstraintSum, and RooAbsTestStatistic.; Definition at line 367 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4316 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 191 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3346 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3335 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (;",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:29999,Usability,clear,clear,29999,"ert additional information when printed in the context of a tree structure. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; virtual void printMetaArgs (std::ostream &) const;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashCon",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:30682,Usability,clear,clear,30682,"bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashContext &ctx) const;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooWorkspace * workspace () const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not f",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:31098,Usability,simpl,simple,31098," ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashContext &ctx) const;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooWorkspace * workspace () const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (c",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:47127,Usability,clear,clearEvalErrorLog,47127,"_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:48020,Usability,clear,clearing,48020,"tual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:54775,Usability,clear,clearShapeDirty,54775,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:54809,Usability,clear,clearValueAndShapeDirty,54809,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:54851,Usability,clear,clearValueDirty,54851,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:78040,Usability,clear,clearEvalErrorLog,78040,". Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4254 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 548 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3542 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 2997 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:78078,Usability,clear,clearEvalErrorLog,78078,"isable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4254 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 548 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3542 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 2997 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) variable from a histogra",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:121791,Usability,clear,cleared,121791,"atically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2903 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the content of proxy 'a' occurs in set 'allDeps' then the argument held in 'a' is copied from allDeps to analDeps ; Definition at line 3146 of file RooAbsReal.cxx. ◆ matchArgs() [2/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a, . const RooArgProxy & ; b . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the contents of proxies a,b occur in set 'allDeps' then the arguments held in a,b are copied from allDeps to analDeps ; Definition at line 3163 of file RooAbsReal.cxx. ◆ matchArgs() [3/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsReal.html:126775,Usability,clear,clearing,126775,"tralIf true, the central moment is given by \( \langle (x- \langle x \rangle )^2 \rangle \) ; [in]takeRootCalculate the square root ; [in]intNormObsIf true, the moment of the function integrated over all normalization observables is returned. . Definition at line 4034 of file RooAbsReal.cxx. ◆ moment() [2/2]. RooAbsMoment * RooAbsReal::moment ; (; RooRealVar & ; obs, . Int_t ; order, . bool ; central, . bool ; takeRoot . ). Return function representing moment of function of given order. ; Parameters. [in]obsObservable to calculate the moments for ; [in]orderOrder of the moment ; [in]centralIf true, the central moment is given by \( \langle (x- \langle x \rangle )^2 \rangle \) ; [in]takeRootCalculate the square root . Definition at line 4015 of file RooAbsReal.cxx. ◆ numEvalErrorItems(). Int_t RooAbsReal::numEvalErrorItems ; (; ). static . Definition at line 176 of file RooAbsReal.cxx. ◆ numEvalErrors(). Int_t RooAbsReal::numEvalErrors ; (; ). static . Return the number of logged evaluation errors since the last clearing. ; Definition at line 3624 of file RooAbsReal.cxx. ◆ offset(). virtual double RooAbsReal::offset ; (; ); const. inlinevirtual . Reimplemented in RooAbsTestStatistic.; Definition at line 371 of file RooAbsReal.h. ◆ operator==() [1/2]. bool RooAbsReal::operator== ; (; const RooAbsArg & ; other); const. overridevirtual . Equality operator when comparing to another RooAbsArg. ; Only functional when the other arg is a RooAbsReal ; Implements RooAbsArg.; Definition at line 261 of file RooAbsReal.cxx. ◆ operator==() [2/2]. bool RooAbsReal::operator== ; (; double ; value); const. Equality operator comparing to a double. ; Definition at line 250 of file RooAbsReal.cxx. ◆ plotAsymOn(). RooPlot * RooAbsReal::plotAsymOn ; (; RooPlot * ; frame, . const RooAbsCategoryLValue & ; asymCat, . PlotOpt ; o . ); const. protectedvirtual . Definition at line 2199 of file RooAbsReal.cxx. ◆ plotOn() [1/3]. RooAbsReal::plotOn ; (; RooPlot * ; frame, . const RooCmdArg & ; arg1 ",MatchSource.WIKI,doc/master/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html
https://root.cern/doc/master/classRooAbsRealLValue.html:21843,Availability,error,error,21843,"oArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override;  Equality operator when comparing to ano",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:39703,Availability,mask,mask,39703,"s);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const Ro",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:45960,Availability,error,error,45960,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:46049,Availability,error,error,46049,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:46204,Availability,error,error,46204,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:46501,Availability,error,error,46501,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:50585,Availability,error,error,50585,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption s",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:52996,Availability,error,error,52996,"Virtual_b);  ;  Public Member Functions inherited from RooAbsLValue; virtual ~RooAbsLValue ()=default;  ; virtual std::list< std::string > getBinningNames () const =0;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, const RooAbsBinning **bins);  Create a 1,2, or 3D-histogram with appropriate scale and labels. ;  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, double *xlo, double *xhi, Int_t *nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static voi",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:53396,Availability,error,error,53396,"st &vars, const char *tAxisLabel, const RooAbsBinning **bins);  Create a 1,2, or 3D-histogram with appropriate scale and labels. ;  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, double *xlo, double *xhi, Int_t *nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static vo",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:53618,Availability,error,error,53618,"nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:53678,Availability,error,error,53678,"nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:53814,Availability,error,errors,53814,"Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:53977,Availability,error,error,53977,"();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get st",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:54084,Availability,error,error,54084,"  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bo",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:60439,Availability,error,error,60439,"bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:825,Deployability,integrat,integration,825,". ROOT: RooAbsRealLValue Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; RooAbsRealLValue Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for objects that represent a real value that may appear on the left hand side of an equation ('lvalue'). ; Each implementation must provide a setVal() member to allow direct modification of the value. RooAbsRealLValue may be derived, but its functional relation to other RooAbsArg must be invertible; This class has methods that export the defined range of the lvalue, but doesn't hold its values because these limits may be derived from limits of client object. The range serve as integration range when interpreted as a observable and a boundaries when interpreted as a parameter. PyROOT; Some member functions of RooAbsRealLValue that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooAbsRealLValue::createHistogram and RooAbsRealLValue::frame. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; frame = x.frame(ROOT.RooFit.Name(""xframe""), ROOT.RooFit.Title(""RooPlot with decorations""), ROOT.RooFit.Bins(40)); ; # With keyword arguments:; frame = x.frame(Name=""xframe"", Title=""RooPlot with decorations"", Bins=40). Definition at line 31 of file RooAbsRealLValue.h. Public Member Functions;  RooAbsRealLValue ();  ;  RooAbsRealLValue (const char *name, const char *title, const char *unit="""");  Constructor. ;  ;  RooAbsRealLValue (const RooAbsRealLValue &other, const char *name=nullptr);  Copy constructor. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel, const RooAbsBinning &bins) const;  Crea",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:5403,Deployability,configurat,configuration,5403,"={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ;  ; RooPlot * frame (const RooLinkedList &cmdList) const;  Back-end function for named argument frame() method. ;  ; RooPlot * frame (double lo, double hi) const;  Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ;  ; RooPlot * frame (double lo, double hi, Int_t nbins) const;  Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ;  ; RooPlot * frame (Int_t nbins) const;  Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ;  ; Int_t getBin (const char *rangeName=nullptr) const override;  ; virtual Int_t getBin (const RooAbsBinning &binning) const;  ; Int_t getBin (const RooAbsBinning *ptr) const override;  ; virtual const RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false) const =0;  Retrieve binning configuration with given name or default binning. ;  ; virtual RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false)=0;  Retrieve binning configuration with given name or default binning. ;  ; const RooAbsBinning * getBinningPtr (const char *rangeName) const override;  ; virtual Int_t getBins (const char *name=nullptr) const;  Get number of bins of currently defined range. ;  ; double getBinWidth (Int_t i, const char *rangeName=nullptr) const override;  ; virtual double getBinWidth (Int_t i, const RooAbsBinning &binning) const;  ; virtual double getMax (const char *name=nullptr) const;  Get maximum of currently defined range. ;  ; virtual double getMin (const char *name=nullptr) const;  Get minimum of currently defined range. ;  ; std::pair< double, double > getRange (const char *name=nullptr) const; ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:5587,Deployability,configurat,configuration,5587,"ack-end function for named argument frame() method. ;  ; RooPlot * frame (double lo, double hi) const;  Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ;  ; RooPlot * frame (double lo, double hi, Int_t nbins) const;  Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ;  ; RooPlot * frame (Int_t nbins) const;  Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ;  ; Int_t getBin (const char *rangeName=nullptr) const override;  ; virtual Int_t getBin (const RooAbsBinning &binning) const;  ; Int_t getBin (const RooAbsBinning *ptr) const override;  ; virtual const RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false) const =0;  Retrieve binning configuration with given name or default binning. ;  ; virtual RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false)=0;  Retrieve binning configuration with given name or default binning. ;  ; const RooAbsBinning * getBinningPtr (const char *rangeName) const override;  ; virtual Int_t getBins (const char *name=nullptr) const;  Get number of bins of currently defined range. ;  ; double getBinWidth (Int_t i, const char *rangeName=nullptr) const override;  ; virtual double getBinWidth (Int_t i, const RooAbsBinning &binning) const;  ; virtual double getMax (const char *name=nullptr) const;  Get maximum of currently defined range. ;  ; virtual double getMin (const char *name=nullptr) const;  Get minimum of currently defined range. ;  ; std::pair< double, double > getRange (const char *name=nullptr) const;  Get low and high bound of the variable. ;  ; virtual bool hasBinning (const char *name) const =0;  Check if binning with given name has been defined. ;  ; bool hasMax (const char *name=nullptr) const;  Check if variable has an upper bound. ;  ; bool hasMin (const char *name=nullptr",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:7456,Deployability,integrat,integrated,7456,"n defined. ;  ; bool hasMax (const char *name=nullptr) const;  Check if variable has an upper bound. ;  ; bool hasMin (const char *name=nullptr) const;  Check if variable has a lower bound. ;  ; bool hasRange (const char *name) const override;  Check if variable has a binning with given name. ;  ; bool inRange (const char *name) const override;  Check if current value is inside range with given name. ;  ; bool inRange (double value, const char *rangeName, double *clippedValue=nullptr) const;  Return true if the input value is within our fit range. ;  ; void inRange (std::span< const double > values, std::string const &rangeName, std::vector< bool > &out) const;  Vectorized version of RooAbsRealLValue::inRange(double, const char*, double*). ;  ; TClass * IsA () const override;  ; virtual bool isJacobianOK (const RooArgSet &depList) const;  ; bool isLValue () const override;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool isValidReal (double value, bool printError=false) const override;  Check if given value is valid. ;  ; virtual double jacobian () const;  ; Int_t numBins (const char *rangeName=nullptr) const override;  ; virtual Int_t numBins (const RooAbsBinning &binning) const;  ; virtual RooAbsArg & operator= (double newValue);  Assignment operator from a double. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void randomize (const char *rangeName=nullptr) override;  Set a new value sampled from a uniform distribution over the fit range. ;  ; virtual void randomize (const RooAbsBinning &binning);  Set a new value sampled from a uniform distribution over the fit range. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from given stream. ;  ; void setBin (Int_t",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:14914,Deployability,configurat,configuration,14914,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAb",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:14944,Deployability,integrat,integration,14944,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAb",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:15578,Deployability,configurat,configuration,15578,"st;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:15608,Deployability,integrat,integration,15608,"st;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:20203,Deployability,integrat,integration,20203,"on tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:20215,Deployability,configurat,configuration,20215,"on tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:20330,Deployability,integrat,integration,20330," void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool h",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:20342,Deployability,configurat,configuration,20342," void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool h",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:24123,Deployability,integrat,integration,24123,"st;  Plot (project) PDF on specified frame. ;  ; virtual RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const;  Internal back-end function of plotOn() with named arguments. ;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const c",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:24135,Deployability,configurat,configuration,24135,"st;  Plot (project) PDF on specified frame. ;  ; virtual RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const;  Internal back-end function of plotOn() with named arguments. ;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const c",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:24256,Deployability,integrat,integrator,24256,"amed arguments. ;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:24267,Deployability,configurat,configuration,24267,"amed arguments. ;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:24300,Deployability,integrat,integration,24300,"amed arguments. ;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:24312,Deployability,configurat,configuration,24312,"amed arguments. ;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:24722,Deployability,integrat,integrator,24722,"unction objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:24733,Deployability,configurat,configuration,24733,"unction objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:24863,Deployability,integrat,integrator,24863,"bject value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disab",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:24874,Deployability,configurat,configuration,24874,"bject value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disab",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:36498,Deployability,update,updates,36498,"ar *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashContext &ctx) const;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooWorkspace * workspace () const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const RooAbsArg &arg) const;  Check if this is serving values to arg. ;  ; bool isValueServer (const char *name) const;  Check if this is serving values to an object with name name. ;  ; bool isShapeServer (const RooAbsArg &arg) const;  Check if this is serving shape to arg. ;  ; bool isShapeServer (const char *name) const;  Check if this is serving shape to an object with name name. ;  ; void leafNodeServerList (RooAbsColl",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:53139,Deployability,integrat,integration,53139,"tatic Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, const RooAbsBinning **bins);  Create a 1,2, or 3D-histogram with appropriate scale and labels. ;  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, double *xlo, double *xhi, Int_t *nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:53151,Deployability,configurat,configuration,53151,"tatic Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, const RooAbsBinning **bins);  Create a 1,2, or 3D-histogram with appropriate scale and labels. ;  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, double *xlo, double *xhi, Int_t *nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:57390,Deployability,integrat,integrated,57390," of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b, const RooArgProxy &c) const;  Utility function for use in getAnalyticalIntegral().",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:57448,Deployability,integrat,integration,57448," of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b, const RooArgProxy &c) const;  Utility function for use in getAnalyticalIntegral().",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:65409,Deployability,integrat,integration,65409,"SingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:75494,Deployability,integrat,integration,75494,"sible for deleting it. ; Definition at line 923 of file RooAbsRealLValue.cxx. ◆ createHistogram() [11/11]. TH1 * RooAbsRealLValue::createHistogram ; (; const char * ; name, . RooArgList & ; vars, . const char * ; tAxisLabel, . double * ; xlo, . double * ; xhi, . Int_t * ; nBins . ). static . Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ; The dimensions of the arrays xlo,xhi, nBins should match the number of objects in vars. ; Definition at line 897 of file RooAbsRealLValue.cxx. ◆ createIntegral(). RooFit::OwningPtr< RooAbsReal > RooAbsRealLValue::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. overridevirtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 1056 of file RooAbsRealLValue.cxx. ◆ DeclFileName(). static const char * RooAbsRealLValue::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 164 of file RooAbsRealLValue.h. ◆ fitRangeOKForPlotting(). bool",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:75688,Deployability,integrat,integrates,75688,"Value::createHistogram ; (; const char * ; name, . RooArgList & ; vars, . const char * ; tAxisLabel, . double * ; xlo, . double * ; xhi, . Int_t * ; nBins . ). static . Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ; The dimensions of the arrays xlo,xhi, nBins should match the number of objects in vars. ; Definition at line 897 of file RooAbsRealLValue.cxx. ◆ createIntegral(). RooFit::OwningPtr< RooAbsReal > RooAbsRealLValue::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. overridevirtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 1056 of file RooAbsRealLValue.cxx. ◆ DeclFileName(). static const char * RooAbsRealLValue::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 164 of file RooAbsRealLValue.h. ◆ fitRangeOKForPlotting(). bool RooAbsRealLValue::fitRangeOKForPlotting ; (; ); const. protected . Check if fit range is usable as plot range, i.e. ; it is ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:75713,Deployability,integrat,integrates,75713,"Value::createHistogram ; (; const char * ; name, . RooArgList & ; vars, . const char * ; tAxisLabel, . double * ; xlo, . double * ; xhi, . Int_t * ; nBins . ). static . Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ; The dimensions of the arrays xlo,xhi, nBins should match the number of objects in vars. ; Definition at line 897 of file RooAbsRealLValue.cxx. ◆ createIntegral(). RooFit::OwningPtr< RooAbsReal > RooAbsRealLValue::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. overridevirtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 1056 of file RooAbsRealLValue.cxx. ◆ DeclFileName(). static const char * RooAbsRealLValue::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 164 of file RooAbsRealLValue.h. ◆ fitRangeOKForPlotting(). bool RooAbsRealLValue::fitRangeOKForPlotting ; (; ); const. protected . Check if fit range is usable as plot range, i.e. ; it is ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:75974,Deployability,integrat,integrated,75974,"nd binning specified in xlo,xhi and nBins. ; The dimensions of the arrays xlo,xhi, nBins should match the number of objects in vars. ; Definition at line 897 of file RooAbsRealLValue.cxx. ◆ createIntegral(). RooFit::OwningPtr< RooAbsReal > RooAbsRealLValue::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. overridevirtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 1056 of file RooAbsRealLValue.cxx. ◆ DeclFileName(). static const char * RooAbsRealLValue::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 164 of file RooAbsRealLValue.h. ◆ fitRangeOKForPlotting(). bool RooAbsRealLValue::fitRangeOKForPlotting ; (; ); const. protected . Check if fit range is usable as plot range, i.e. ; it is neither open ended, nor empty ; Definition at line 493 of file RooAbsRealLValue.cxx. ◆ frame() [1/6]. RooPlot * RooAbsRealLValue::frame ; (; ); const. Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ; Use x.frame() ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:76058,Deployability,integrat,integration,76058,"s in vars. ; Definition at line 897 of file RooAbsRealLValue.cxx. ◆ createIntegral(). RooFit::OwningPtr< RooAbsReal > RooAbsRealLValue::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. overridevirtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 1056 of file RooAbsRealLValue.cxx. ◆ DeclFileName(). static const char * RooAbsRealLValue::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 164 of file RooAbsRealLValue.h. ◆ fitRangeOKForPlotting(). bool RooAbsRealLValue::fitRangeOKForPlotting ; (; ); const. protected . Check if fit range is usable as plot range, i.e. ; it is neither open ended, nor empty ; Definition at line 493 of file RooAbsRealLValue.cxx. ◆ frame() [1/6]. RooPlot * RooAbsRealLValue::frame ; (; ); const. Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ; Use x.frame() as the first argument to a y.plotOn(...) method, for example. The caller is responsible for deleting the returned object.;",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:80873,Deployability,configurat,configuration,80873,"o a y.plotOn(...) method, for example. The caller is responsible for deleting the returned object.; The current fit range may not be open ended or empty. ; Definition at line 349 of file RooAbsRealLValue.cxx. ◆ getBin() [1/3]. Int_t RooAbsRealLValue::getBin ; (; const char * ; rangeName = nullptr); const. inlineoverridevirtual . Implements RooAbsLValue.; Definition at line 50 of file RooAbsRealLValue.h. ◆ getBin() [2/3]. virtual Int_t RooAbsRealLValue::getBin ; (; const RooAbsBinning & ; binning); const. inlinevirtual . Definition at line 60 of file RooAbsRealLValue.h. ◆ getBin() [3/3]. Int_t RooAbsRealLValue::getBin ; (; const RooAbsBinning * ; ptr); const. inlineoverridevirtual . Implements RooAbsLValue.; Definition at line 57 of file RooAbsRealLValue.h. ◆ getBinning() [1/2]. virtual const RooAbsBinning & RooAbsRealLValue::getBinning ; (; const char * ; name = nullptr, . bool ; verbose = true, . bool ; createOnTheFly = false . ); const. pure virtual . Retrieve binning configuration with given name or default binning. ; Implemented in RooErrorVar, RooLinearVar, and RooRealVar. ◆ getBinning() [2/2]. virtual RooAbsBinning & RooAbsRealLValue::getBinning ; (; const char * ; name = nullptr, . bool ; verbose = true, . bool ; createOnTheFly = false . ). pure virtual . Retrieve binning configuration with given name or default binning. ; Implemented in RooErrorVar, RooLinearVar, and RooRealVar. ◆ getBinningPtr(). const RooAbsBinning * RooAbsRealLValue::getBinningPtr ; (; const char * ; rangeName); const. inlineoverridevirtual . Implements RooAbsLValue.; Definition at line 56 of file RooAbsRealLValue.h. ◆ getBins(). virtual Int_t RooAbsRealLValue::getBins ; (; const char * ; name = nullptr); const. inlinevirtual . Get number of bins of currently defined range. ; Parameters. nameOptionally, request number of bins for range with given name. . Definition at line 78 of file RooAbsRealLValue.h. ◆ getBinWidth() [1/2]. double RooAbsRealLValue::getBinWidth ; (; Int_t ; i, . const cha",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:81188,Deployability,configurat,configuration,81188,"erridevirtual . Implements RooAbsLValue.; Definition at line 50 of file RooAbsRealLValue.h. ◆ getBin() [2/3]. virtual Int_t RooAbsRealLValue::getBin ; (; const RooAbsBinning & ; binning); const. inlinevirtual . Definition at line 60 of file RooAbsRealLValue.h. ◆ getBin() [3/3]. Int_t RooAbsRealLValue::getBin ; (; const RooAbsBinning * ; ptr); const. inlineoverridevirtual . Implements RooAbsLValue.; Definition at line 57 of file RooAbsRealLValue.h. ◆ getBinning() [1/2]. virtual const RooAbsBinning & RooAbsRealLValue::getBinning ; (; const char * ; name = nullptr, . bool ; verbose = true, . bool ; createOnTheFly = false . ); const. pure virtual . Retrieve binning configuration with given name or default binning. ; Implemented in RooErrorVar, RooLinearVar, and RooRealVar. ◆ getBinning() [2/2]. virtual RooAbsBinning & RooAbsRealLValue::getBinning ; (; const char * ; name = nullptr, . bool ; verbose = true, . bool ; createOnTheFly = false . ). pure virtual . Retrieve binning configuration with given name or default binning. ; Implemented in RooErrorVar, RooLinearVar, and RooRealVar. ◆ getBinningPtr(). const RooAbsBinning * RooAbsRealLValue::getBinningPtr ; (; const char * ; rangeName); const. inlineoverridevirtual . Implements RooAbsLValue.; Definition at line 56 of file RooAbsRealLValue.h. ◆ getBins(). virtual Int_t RooAbsRealLValue::getBins ; (; const char * ; name = nullptr); const. inlinevirtual . Get number of bins of currently defined range. ; Parameters. nameOptionally, request number of bins for range with given name. . Definition at line 78 of file RooAbsRealLValue.h. ◆ getBinWidth() [1/2]. double RooAbsRealLValue::getBinWidth ; (; Int_t ; i, . const char * ; rangeName = nullptr . ); const. inlineoverridevirtual . Implements RooAbsLValue.; Definition at line 52 of file RooAbsRealLValue.h. ◆ getBinWidth() [2/2]. virtual double RooAbsRealLValue::getBinWidth ; (; Int_t ; i, . const RooAbsBinning & ; binning . ); const. inlinevirtual . Definition at line 62 of file R",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:87052,Deployability,integrat,integrated,87052,"n at line 93 of file RooAbsRealLValue.cxx. ◆ inRange() [3/3]. void RooAbsRealLValue::inRange ; (; std::span< const double > ; values, . std::string const & ; rangeName, . std::vector< bool > & ; out . ); const. Vectorized version of RooAbsRealLValue::inRange(double, const char*, double*). ; Definition at line 124 of file RooAbsRealLValue.cxx. ◆ IsA(). TClass * RooAbsRealLValue::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Reimplemented in RooErrorVar, RooLinearVar, and RooRealVar.; Definition at line 164 of file RooAbsRealLValue.h. ◆ isJacobianOK(). bool RooAbsRealLValue::isJacobianOK ; (; const RooArgSet & ; depList); const. virtual . Reimplemented in RooLinearVar.; Definition at line 1046 of file RooAbsRealLValue.cxx. ◆ isLValue(). bool RooAbsRealLValue::isLValue ; (; ); const. inlineoverridevirtual . Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ; Reimplemented from RooAbsArg.; Definition at line 103 of file RooAbsRealLValue.h. ◆ isValidReal(). bool RooAbsRealLValue::isValidReal ; (; double ; value, . bool ; printError = false . ); const. overridevirtual . Check if given value is valid. ; Reimplemented from RooAbsReal.; Definition at line 150 of file RooAbsRealLValue.cxx. ◆ jacobian(). virtual double RooAbsRealLValue::jacobian ; (; ); const. inlinevirtual . Reimplemented in RooLinearVar.; Definition at line 101 of file RooAbsRealLValue.h. ◆ numBins() [1/2]. Int_t RooAbsRealLValue::numBins ; (; const char * ; rangeName = nullptr); const. inlineoverridevirtual . Implements RooAbsLValue.; Definition at line 51 of file RooAbsRealLValue.h. ◆ numBins() [2/2]. virtual Int_t RooAbsRealLValue::numBins ; (; const RooAbsBinning & ; binning); const. inlinevirtual . Definition at line 61 of file RooAbsRealLValue.h. ◆ operator=(). RooAbsArg & RooAbsRealLValue::",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:10743,Energy Efficiency,adapt,adaptor,10743,"(const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:825,Integrability,integrat,integration,825,". ROOT: RooAbsRealLValue Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; RooAbsRealLValue Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for objects that represent a real value that may appear on the left hand side of an equation ('lvalue'). ; Each implementation must provide a setVal() member to allow direct modification of the value. RooAbsRealLValue may be derived, but its functional relation to other RooAbsArg must be invertible; This class has methods that export the defined range of the lvalue, but doesn't hold its values because these limits may be derived from limits of client object. The range serve as integration range when interpreted as a observable and a boundaries when interpreted as a parameter. PyROOT; Some member functions of RooAbsRealLValue that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooAbsRealLValue::createHistogram and RooAbsRealLValue::frame. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; frame = x.frame(ROOT.RooFit.Name(""xframe""), ROOT.RooFit.Title(""RooPlot with decorations""), ROOT.RooFit.Bins(40)); ; # With keyword arguments:; frame = x.frame(Name=""xframe"", Title=""RooPlot with decorations"", Bins=40). Definition at line 31 of file RooAbsRealLValue.h. Public Member Functions;  RooAbsRealLValue ();  ;  RooAbsRealLValue (const char *name, const char *title, const char *unit="""");  Constructor. ;  ;  RooAbsRealLValue (const RooAbsRealLValue &other, const char *name=nullptr);  Copy constructor. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel, const RooAbsBinning &bins) const;  Crea",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:7456,Integrability,integrat,integrated,7456,"n defined. ;  ; bool hasMax (const char *name=nullptr) const;  Check if variable has an upper bound. ;  ; bool hasMin (const char *name=nullptr) const;  Check if variable has a lower bound. ;  ; bool hasRange (const char *name) const override;  Check if variable has a binning with given name. ;  ; bool inRange (const char *name) const override;  Check if current value is inside range with given name. ;  ; bool inRange (double value, const char *rangeName, double *clippedValue=nullptr) const;  Return true if the input value is within our fit range. ;  ; void inRange (std::span< const double > values, std::string const &rangeName, std::vector< bool > &out) const;  Vectorized version of RooAbsRealLValue::inRange(double, const char*, double*). ;  ; TClass * IsA () const override;  ; virtual bool isJacobianOK (const RooArgSet &depList) const;  ; bool isLValue () const override;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool isValidReal (double value, bool printError=false) const override;  Check if given value is valid. ;  ; virtual double jacobian () const;  ; Int_t numBins (const char *rangeName=nullptr) const override;  ; virtual Int_t numBins (const RooAbsBinning &binning) const;  ; virtual RooAbsArg & operator= (double newValue);  Assignment operator from a double. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void randomize (const char *rangeName=nullptr) override;  Set a new value sampled from a uniform distribution over the fit range. ;  ; virtual void randomize (const RooAbsBinning &binning);  Set a new value sampled from a uniform distribution over the fit range. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from given stream. ;  ; void setBin (Int_t",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:10733,Integrability,interface,interface,10733,"(const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:14944,Integrability,integrat,integration,14944,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAb",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:15608,Integrability,integrat,integration,15608,"st;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:15829,Integrability,depend,dependentVars,15829,"pecified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the present function. ;  ; RooFit::OwningPtr< RooAbsReal > createRunningIntegral (const RooArgSet &iset, const RooArgSet &nset={});  Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ;  ; RooFit::OwningPtr< RooAbsReal > createRunningIntegral (const RooArgSet &iset, const RooCmdArg &",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:20203,Integrability,integrat,integration,20203,"on tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:20330,Integrability,integrat,integration,20330," void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool h",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:21772,Integrability,message,message,21772,"oArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override;  Equality operator when comparing to ano",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:21849,Integrability,message,message,21849,"oArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override;  Equality operator when comparing to ano",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:24123,Integrability,integrat,integration,24123,"st;  Plot (project) PDF on specified frame. ;  ; virtual RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const;  Internal back-end function of plotOn() with named arguments. ;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const c",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:24256,Integrability,integrat,integrator,24256,"amed arguments. ;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:24300,Integrability,integrat,integration,24300,"amed arguments. ;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:24722,Integrability,integrat,integrator,24722,"unction objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:24863,Integrability,integrat,integrator,24863,"bject value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disab",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:26144,Integrability,depend,dependent,26144," ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained T",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:26351,Integrability,depend,dependent,26351," transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileCon",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:27518,Integrability,depend,dependsOn,27518,"can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:27636,Integrability,depend,depend,27636,"can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:27698,Integrability,depend,dependsOn,27698,"lone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depLis",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:27827,Integrability,depend,depend,27827,"lone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depLis",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:27907,Integrability,depend,dependsOn,27907,"st override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:28023,Integrability,depend,depend,28023,"st override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:28095,Integrability,depend,dependsOnValue,28095,"td::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgS",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:28206,Integrability,depend,depends,28206,"td::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgS",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:28275,Integrability,depend,dependsOnValue,28275,"ing results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:28397,Integrability,depend,depends,28397,"ing results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:29384,Integrability,depend,dependents,29384," bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable lis",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:29574,Integrability,depend,depends,29574,"me) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set o",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:30301,Integrability,depend,dependents,30301,"oArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; virtual bool getParameters (const RooArgSet *observables, RooArgSet &outputSet, bool stripDisconnected=true) const;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:32231,Integrability,depend,depend,32231," if a named attribute is set. ;  ; RooFit::OwningPtr< RooArgSet > getVariables (bool stripDisconnected=true) const;  Return RooArgSet with all variables (tree leaf nodes of expression tree) ;  ; void graphVizTree (const char *fileName, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Create a GraphViz .dot file visualizing the expression tree headed by this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; v",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:32637,Integrability,depend,dependents,32637,"z .dot file visualizing the expression tree headed by this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:32843,Integrability,depend,dependents,32843,"hViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:34081,Integrability,interface,interface,34081,"y of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::ostream &os, const char *indent="""", const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; virtual void printCompactTreeHook (std::ostream &os, const char *ind="""");  Hook function interface for object to insert additional information when printed in the context of a tree structure. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; virtual void printMetaArgs (std::ostream &) const;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (co",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:39174,Integrability,depend,depend,39174,"st;  Fill supplied list with nodes of the arg tree, following all server links, starting with ourself as top node. ;  ; virtual bool isFundamental () const;  Is this object a fundamental type that can be added to a dataset? Fundamental-type subclasses override this method to return true. ;  ; bool redirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool isRecursionStep=false);  Replace all direct servers of this object with the new servers in newServerList. ;  ; bool redirectServers (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old s",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:39871,Integrability,depend,depend,39871,"Change=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:42536,Integrability,depend,dependentOverlaps,42536,"es. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void F",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:42645,Integrability,depend,dependentOverlaps,42645,"operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  R",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:45966,Integrability,message,message,45966,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:46507,Integrability,message,message,46507,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:47497,Integrability,message,message,47497,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:50591,Integrability,message,message,50591,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption s",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:50964,Integrability,message,message,50964," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsLValue; virtual ~RooAbsLValue ()=d",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:53002,Integrability,message,messages,53002,"Virtual_b);  ;  Public Member Functions inherited from RooAbsLValue; virtual ~RooAbsLValue ()=default;  ; virtual std::list< std::string > getBinningNames () const =0;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, const RooAbsBinning **bins);  Create a 1,2, or 3D-histogram with appropriate scale and labels. ;  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, double *xlo, double *xhi, Int_t *nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static voi",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:53139,Integrability,integrat,integration,53139,"tatic Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, const RooAbsBinning **bins);  Create a 1,2, or 3D-histogram with appropriate scale and labels. ;  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, double *xlo, double *xhi, Int_t *nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:53541,Integrability,message,message,53541,"nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:53632,Integrability,message,messages,53632,"nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:57390,Integrability,integrat,integrated,57390," of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b, const RooArgProxy &c) const;  Utility function for use in getAnalyticalIntegral().",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:57448,Integrability,integrat,integration,57448," of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b, const RooArgProxy &c) const;  Utility function for use in getAnalyticalIntegral().",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:60453,Integrability,wrap,wrapper,60453,"bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:65409,Integrability,integrat,integration,65409,"SingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:75494,Integrability,integrat,integration,75494,"sible for deleting it. ; Definition at line 923 of file RooAbsRealLValue.cxx. ◆ createHistogram() [11/11]. TH1 * RooAbsRealLValue::createHistogram ; (; const char * ; name, . RooArgList & ; vars, . const char * ; tAxisLabel, . double * ; xlo, . double * ; xhi, . Int_t * ; nBins . ). static . Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ; The dimensions of the arrays xlo,xhi, nBins should match the number of objects in vars. ; Definition at line 897 of file RooAbsRealLValue.cxx. ◆ createIntegral(). RooFit::OwningPtr< RooAbsReal > RooAbsRealLValue::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. overridevirtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 1056 of file RooAbsRealLValue.cxx. ◆ DeclFileName(). static const char * RooAbsRealLValue::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 164 of file RooAbsRealLValue.h. ◆ fitRangeOKForPlotting(). bool",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:75688,Integrability,integrat,integrates,75688,"Value::createHistogram ; (; const char * ; name, . RooArgList & ; vars, . const char * ; tAxisLabel, . double * ; xlo, . double * ; xhi, . Int_t * ; nBins . ). static . Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ; The dimensions of the arrays xlo,xhi, nBins should match the number of objects in vars. ; Definition at line 897 of file RooAbsRealLValue.cxx. ◆ createIntegral(). RooFit::OwningPtr< RooAbsReal > RooAbsRealLValue::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. overridevirtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 1056 of file RooAbsRealLValue.cxx. ◆ DeclFileName(). static const char * RooAbsRealLValue::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 164 of file RooAbsRealLValue.h. ◆ fitRangeOKForPlotting(). bool RooAbsRealLValue::fitRangeOKForPlotting ; (; ); const. protected . Check if fit range is usable as plot range, i.e. ; it is ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:75713,Integrability,integrat,integrates,75713,"Value::createHistogram ; (; const char * ; name, . RooArgList & ; vars, . const char * ; tAxisLabel, . double * ; xlo, . double * ; xhi, . Int_t * ; nBins . ). static . Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ; The dimensions of the arrays xlo,xhi, nBins should match the number of objects in vars. ; Definition at line 897 of file RooAbsRealLValue.cxx. ◆ createIntegral(). RooFit::OwningPtr< RooAbsReal > RooAbsRealLValue::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. overridevirtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 1056 of file RooAbsRealLValue.cxx. ◆ DeclFileName(). static const char * RooAbsRealLValue::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 164 of file RooAbsRealLValue.h. ◆ fitRangeOKForPlotting(). bool RooAbsRealLValue::fitRangeOKForPlotting ; (; ); const. protected . Check if fit range is usable as plot range, i.e. ; it is ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:75974,Integrability,integrat,integrated,75974,"nd binning specified in xlo,xhi and nBins. ; The dimensions of the arrays xlo,xhi, nBins should match the number of objects in vars. ; Definition at line 897 of file RooAbsRealLValue.cxx. ◆ createIntegral(). RooFit::OwningPtr< RooAbsReal > RooAbsRealLValue::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. overridevirtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 1056 of file RooAbsRealLValue.cxx. ◆ DeclFileName(). static const char * RooAbsRealLValue::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 164 of file RooAbsRealLValue.h. ◆ fitRangeOKForPlotting(). bool RooAbsRealLValue::fitRangeOKForPlotting ; (; ); const. protected . Check if fit range is usable as plot range, i.e. ; it is neither open ended, nor empty ; Definition at line 493 of file RooAbsRealLValue.cxx. ◆ frame() [1/6]. RooPlot * RooAbsRealLValue::frame ; (; ); const. Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ; Use x.frame() ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:76058,Integrability,integrat,integration,76058,"s in vars. ; Definition at line 897 of file RooAbsRealLValue.cxx. ◆ createIntegral(). RooFit::OwningPtr< RooAbsReal > RooAbsRealLValue::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. overridevirtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 1056 of file RooAbsRealLValue.cxx. ◆ DeclFileName(). static const char * RooAbsRealLValue::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 164 of file RooAbsRealLValue.h. ◆ fitRangeOKForPlotting(). bool RooAbsRealLValue::fitRangeOKForPlotting ; (; ); const. protected . Check if fit range is usable as plot range, i.e. ; it is neither open ended, nor empty ; Definition at line 493 of file RooAbsRealLValue.cxx. ◆ frame() [1/6]. RooPlot * RooAbsRealLValue::frame ; (; ); const. Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ; Use x.frame() as the first argument to a y.plotOn(...) method, for example. The caller is responsible for deleting the returned object.;",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:87052,Integrability,integrat,integrated,87052,"n at line 93 of file RooAbsRealLValue.cxx. ◆ inRange() [3/3]. void RooAbsRealLValue::inRange ; (; std::span< const double > ; values, . std::string const & ; rangeName, . std::vector< bool > & ; out . ); const. Vectorized version of RooAbsRealLValue::inRange(double, const char*, double*). ; Definition at line 124 of file RooAbsRealLValue.cxx. ◆ IsA(). TClass * RooAbsRealLValue::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Reimplemented in RooErrorVar, RooLinearVar, and RooRealVar.; Definition at line 164 of file RooAbsRealLValue.h. ◆ isJacobianOK(). bool RooAbsRealLValue::isJacobianOK ; (; const RooArgSet & ; depList); const. virtual . Reimplemented in RooLinearVar.; Definition at line 1046 of file RooAbsRealLValue.cxx. ◆ isLValue(). bool RooAbsRealLValue::isLValue ; (; ); const. inlineoverridevirtual . Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ; Reimplemented from RooAbsArg.; Definition at line 103 of file RooAbsRealLValue.h. ◆ isValidReal(). bool RooAbsRealLValue::isValidReal ; (; double ; value, . bool ; printError = false . ); const. overridevirtual . Check if given value is valid. ; Reimplemented from RooAbsReal.; Definition at line 150 of file RooAbsRealLValue.cxx. ◆ jacobian(). virtual double RooAbsRealLValue::jacobian ; (; ); const. inlinevirtual . Reimplemented in RooLinearVar.; Definition at line 101 of file RooAbsRealLValue.h. ◆ numBins() [1/2]. Int_t RooAbsRealLValue::numBins ; (; const char * ; rangeName = nullptr); const. inlineoverridevirtual . Implements RooAbsLValue.; Definition at line 51 of file RooAbsRealLValue.h. ◆ numBins() [2/2]. virtual Int_t RooAbsRealLValue::numBins ; (; const RooAbsBinning & ; binning); const. inlinevirtual . Definition at line 61 of file RooAbsRealLValue.h. ◆ operator=(). RooAbsArg & RooAbsRealLValue::",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:1881,Modifiability,variab,variable,1881," range serve as integration range when interpreted as a observable and a boundaries when interpreted as a parameter. PyROOT; Some member functions of RooAbsRealLValue that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooAbsRealLValue::createHistogram and RooAbsRealLValue::frame. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; frame = x.frame(ROOT.RooFit.Name(""xframe""), ROOT.RooFit.Title(""RooPlot with decorations""), ROOT.RooFit.Bins(40)); ; # With keyword arguments:; frame = x.frame(Name=""xframe"", Title=""RooPlot with decorations"", Bins=40). Definition at line 31 of file RooAbsRealLValue.h. Public Member Functions;  RooAbsRealLValue ();  ;  RooAbsRealLValue (const char *name, const char *title, const char *unit="""");  Constructor. ;  ;  RooAbsRealLValue (const RooAbsRealLValue &other, const char *name=nullptr);  Copy constructor. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel, const RooAbsBinning &bins) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel, double xlo, double xhi, Int_t nBins) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH2F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const char *zAxisLabel, const RooAbsBinning **bins) const;  Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ;  ; TH2F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const char *zAxisLabel=nullptr, double *xlo=nullptr, double *xhi=nullptr, Int_t *nBins=nullptr) const;  Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specifi",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:2069,Modifiability,variab,variable,2069,"e a RooCmdArg as argument also support keyword arguments. So far, this applies to RooAbsRealLValue::createHistogram and RooAbsRealLValue::frame. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; frame = x.frame(ROOT.RooFit.Name(""xframe""), ROOT.RooFit.Title(""RooPlot with decorations""), ROOT.RooFit.Bins(40)); ; # With keyword arguments:; frame = x.frame(Name=""xframe"", Title=""RooPlot with decorations"", Bins=40). Definition at line 31 of file RooAbsRealLValue.h. Public Member Functions;  RooAbsRealLValue ();  ;  RooAbsRealLValue (const char *name, const char *title, const char *unit="""");  Constructor. ;  ;  RooAbsRealLValue (const RooAbsRealLValue &other, const char *name=nullptr);  Copy constructor. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel, const RooAbsBinning &bins) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel, double xlo, double xhi, Int_t nBins) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH2F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const char *zAxisLabel, const RooAbsBinning **bins) const;  Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ;  ; TH2F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const char *zAxisLabel=nullptr, double *xlo=nullptr, double *xhi=nullptr, Int_t *nBins=nullptr) const;  Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ;  ; TH3F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const RooAbsRealLValue &zvar, const char *tAxisLabel, const RooAbsBinning **bins) ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:2267,Modifiability,variab,variable,2267," PyROOT: # Directly passing a RooCmdArg:; frame = x.frame(ROOT.RooFit.Name(""xframe""), ROOT.RooFit.Title(""RooPlot with decorations""), ROOT.RooFit.Bins(40)); ; # With keyword arguments:; frame = x.frame(Name=""xframe"", Title=""RooPlot with decorations"", Bins=40). Definition at line 31 of file RooAbsRealLValue.h. Public Member Functions;  RooAbsRealLValue ();  ;  RooAbsRealLValue (const char *name, const char *title, const char *unit="""");  Constructor. ;  ;  RooAbsRealLValue (const RooAbsRealLValue &other, const char *name=nullptr);  Copy constructor. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel, const RooAbsBinning &bins) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel, double xlo, double xhi, Int_t nBins) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH2F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const char *zAxisLabel, const RooAbsBinning **bins) const;  Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ;  ; TH2F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const char *zAxisLabel=nullptr, double *xlo=nullptr, double *xhi=nullptr, Int_t *nBins=nullptr) const;  Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ;  ; TH3F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const RooAbsRealLValue &zvar, const char *tAxisLabel, const RooAbsBinning **bins) const;  ; TH3F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const RooAbsRealLValue &zvar, const char *tAxisLabel, double *xlo=nullptr, double *xhi=nullptr, Int_t *nBins=nu",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:2486,Modifiability,variab,variable,2486,"oPlot with decorations"", Bins=40). Definition at line 31 of file RooAbsRealLValue.h. Public Member Functions;  RooAbsRealLValue ();  ;  RooAbsRealLValue (const char *name, const char *title, const char *unit="""");  Constructor. ;  ;  RooAbsRealLValue (const RooAbsRealLValue &other, const char *name=nullptr);  Copy constructor. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel, const RooAbsBinning &bins) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel, double xlo, double xhi, Int_t nBins) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH2F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const char *zAxisLabel, const RooAbsBinning **bins) const;  Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ;  ; TH2F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const char *zAxisLabel=nullptr, double *xlo=nullptr, double *xhi=nullptr, Int_t *nBins=nullptr) const;  Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ;  ; TH3F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const RooAbsRealLValue &zvar, const char *tAxisLabel, const RooAbsBinning **bins) const;  ; TH3F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const RooAbsRealLValue &zvar, const char *tAxisLabel, double *xlo=nullptr, double *xhi=nullptr, Int_t *nBins=nullptr) const;  Create an empty 3D-histogram with appropriate scale and labels for this variable (x) and the specified y,z variables. ;  ; TH1 * createHistogram (const char *name, const RooCmdArg &arg1={}, const RooCmdArg &arg",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:2519,Modifiability,variab,variable,2519,"oPlot with decorations"", Bins=40). Definition at line 31 of file RooAbsRealLValue.h. Public Member Functions;  RooAbsRealLValue ();  ;  RooAbsRealLValue (const char *name, const char *title, const char *unit="""");  Constructor. ;  ;  RooAbsRealLValue (const RooAbsRealLValue &other, const char *name=nullptr);  Copy constructor. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel, const RooAbsBinning &bins) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel, double xlo, double xhi, Int_t nBins) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH2F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const char *zAxisLabel, const RooAbsBinning **bins) const;  Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ;  ; TH2F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const char *zAxisLabel=nullptr, double *xlo=nullptr, double *xhi=nullptr, Int_t *nBins=nullptr) const;  Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ;  ; TH3F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const RooAbsRealLValue &zvar, const char *tAxisLabel, const RooAbsBinning **bins) const;  ; TH3F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const RooAbsRealLValue &zvar, const char *tAxisLabel, double *xlo=nullptr, double *xhi=nullptr, Int_t *nBins=nullptr) const;  Create an empty 3D-histogram with appropriate scale and labels for this variable (x) and the specified y,z variables. ;  ; TH1 * createHistogram (const char *name, const RooCmdArg &arg1={}, const RooCmdArg &arg",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:2782,Modifiability,variab,variable,2782,"&other, const char *name=nullptr);  Copy constructor. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel, const RooAbsBinning &bins) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel, double xlo, double xhi, Int_t nBins) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH2F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const char *zAxisLabel, const RooAbsBinning **bins) const;  Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ;  ; TH2F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const char *zAxisLabel=nullptr, double *xlo=nullptr, double *xhi=nullptr, Int_t *nBins=nullptr) const;  Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ;  ; TH3F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const RooAbsRealLValue &zvar, const char *tAxisLabel, const RooAbsBinning **bins) const;  ; TH3F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const RooAbsRealLValue &zvar, const char *tAxisLabel, double *xlo=nullptr, double *xhi=nullptr, Int_t *nBins=nullptr) const;  Create an empty 3D-histogram with appropriate scale and labels for this variable (x) and the specified y,z variables. ;  ; TH1 * createHistogram (const char *name, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  ; TH1 * createHistogram (const char *name, const RooLinkedList &cmdList) const;  Create empty 1,2 or 3D ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:2815,Modifiability,variab,variable,2815,"&other, const char *name=nullptr);  Copy constructor. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel, const RooAbsBinning &bins) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel, double xlo, double xhi, Int_t nBins) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH2F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const char *zAxisLabel, const RooAbsBinning **bins) const;  Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ;  ; TH2F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const char *zAxisLabel=nullptr, double *xlo=nullptr, double *xhi=nullptr, Int_t *nBins=nullptr) const;  Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ;  ; TH3F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const RooAbsRealLValue &zvar, const char *tAxisLabel, const RooAbsBinning **bins) const;  ; TH3F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const RooAbsRealLValue &zvar, const char *tAxisLabel, double *xlo=nullptr, double *xhi=nullptr, Int_t *nBins=nullptr) const;  Create an empty 3D-histogram with appropriate scale and labels for this variable (x) and the specified y,z variables. ;  ; TH1 * createHistogram (const char *name, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  ; TH1 * createHistogram (const char *name, const RooLinkedList &cmdList) const;  Create empty 1,2 or 3D ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:3264,Modifiability,variab,variable,3264,"is variable. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel, double xlo, double xhi, Int_t nBins) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH2F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const char *zAxisLabel, const RooAbsBinning **bins) const;  Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ;  ; TH2F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const char *zAxisLabel=nullptr, double *xlo=nullptr, double *xhi=nullptr, Int_t *nBins=nullptr) const;  Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ;  ; TH3F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const RooAbsRealLValue &zvar, const char *tAxisLabel, const RooAbsBinning **bins) const;  ; TH3F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const RooAbsRealLValue &zvar, const char *tAxisLabel, double *xlo=nullptr, double *xhi=nullptr, Int_t *nBins=nullptr) const;  Create an empty 3D-histogram with appropriate scale and labels for this variable (x) and the specified y,z variables. ;  ; TH1 * createHistogram (const char *name, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  ; TH1 * createHistogram (const char *name, const RooLinkedList &cmdList) const;  Create empty 1,2 or 3D histogram Arguments recognized. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const override;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooPlot * frame () const;  Create a new RooPlot on the h",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:3299,Modifiability,variab,variables,3299,"is variable. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel, double xlo, double xhi, Int_t nBins) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH2F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const char *zAxisLabel, const RooAbsBinning **bins) const;  Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ;  ; TH2F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const char *zAxisLabel=nullptr, double *xlo=nullptr, double *xhi=nullptr, Int_t *nBins=nullptr) const;  Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ;  ; TH3F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const RooAbsRealLValue &zvar, const char *tAxisLabel, const RooAbsBinning **bins) const;  ; TH3F * createHistogram (const char *name, const RooAbsRealLValue &yvar, const RooAbsRealLValue &zvar, const char *tAxisLabel, double *xlo=nullptr, double *xhi=nullptr, Int_t *nBins=nullptr) const;  Create an empty 3D-histogram with appropriate scale and labels for this variable (x) and the specified y,z variables. ;  ; TH1 * createHistogram (const char *name, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  ; TH1 * createHistogram (const char *name, const RooLinkedList &cmdList) const;  Create empty 1,2 or 3D histogram Arguments recognized. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const override;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooPlot * frame () const;  Create a new RooPlot on the h",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:5403,Modifiability,config,configuration,5403,"={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ;  ; RooPlot * frame (const RooLinkedList &cmdList) const;  Back-end function for named argument frame() method. ;  ; RooPlot * frame (double lo, double hi) const;  Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ;  ; RooPlot * frame (double lo, double hi, Int_t nbins) const;  Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ;  ; RooPlot * frame (Int_t nbins) const;  Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ;  ; Int_t getBin (const char *rangeName=nullptr) const override;  ; virtual Int_t getBin (const RooAbsBinning &binning) const;  ; Int_t getBin (const RooAbsBinning *ptr) const override;  ; virtual const RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false) const =0;  Retrieve binning configuration with given name or default binning. ;  ; virtual RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false)=0;  Retrieve binning configuration with given name or default binning. ;  ; const RooAbsBinning * getBinningPtr (const char *rangeName) const override;  ; virtual Int_t getBins (const char *name=nullptr) const;  Get number of bins of currently defined range. ;  ; double getBinWidth (Int_t i, const char *rangeName=nullptr) const override;  ; virtual double getBinWidth (Int_t i, const RooAbsBinning &binning) const;  ; virtual double getMax (const char *name=nullptr) const;  Get maximum of currently defined range. ;  ; virtual double getMin (const char *name=nullptr) const;  Get minimum of currently defined range. ;  ; std::pair< double, double > getRange (const char *name=nullptr) const; ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:5587,Modifiability,config,configuration,5587,"ack-end function for named argument frame() method. ;  ; RooPlot * frame (double lo, double hi) const;  Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ;  ; RooPlot * frame (double lo, double hi, Int_t nbins) const;  Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ;  ; RooPlot * frame (Int_t nbins) const;  Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ;  ; Int_t getBin (const char *rangeName=nullptr) const override;  ; virtual Int_t getBin (const RooAbsBinning &binning) const;  ; Int_t getBin (const RooAbsBinning *ptr) const override;  ; virtual const RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false) const =0;  Retrieve binning configuration with given name or default binning. ;  ; virtual RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false)=0;  Retrieve binning configuration with given name or default binning. ;  ; const RooAbsBinning * getBinningPtr (const char *rangeName) const override;  ; virtual Int_t getBins (const char *name=nullptr) const;  Get number of bins of currently defined range. ;  ; double getBinWidth (Int_t i, const char *rangeName=nullptr) const override;  ; virtual double getBinWidth (Int_t i, const RooAbsBinning &binning) const;  ; virtual double getMax (const char *name=nullptr) const;  Get maximum of currently defined range. ;  ; virtual double getMin (const char *name=nullptr) const;  Get minimum of currently defined range. ;  ; std::pair< double, double > getRange (const char *name=nullptr) const;  Get low and high bound of the variable. ;  ; virtual bool hasBinning (const char *name) const =0;  Check if binning with given name has been defined. ;  ; bool hasMax (const char *name=nullptr) const;  Check if variable has an upper bound. ;  ; bool hasMin (const char *name=nullptr",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:6292,Modifiability,variab,variable,6292,"const override;  ; virtual const RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false) const =0;  Retrieve binning configuration with given name or default binning. ;  ; virtual RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false)=0;  Retrieve binning configuration with given name or default binning. ;  ; const RooAbsBinning * getBinningPtr (const char *rangeName) const override;  ; virtual Int_t getBins (const char *name=nullptr) const;  Get number of bins of currently defined range. ;  ; double getBinWidth (Int_t i, const char *rangeName=nullptr) const override;  ; virtual double getBinWidth (Int_t i, const RooAbsBinning &binning) const;  ; virtual double getMax (const char *name=nullptr) const;  Get maximum of currently defined range. ;  ; virtual double getMin (const char *name=nullptr) const;  Get minimum of currently defined range. ;  ; std::pair< double, double > getRange (const char *name=nullptr) const;  Get low and high bound of the variable. ;  ; virtual bool hasBinning (const char *name) const =0;  Check if binning with given name has been defined. ;  ; bool hasMax (const char *name=nullptr) const;  Check if variable has an upper bound. ;  ; bool hasMin (const char *name=nullptr) const;  Check if variable has a lower bound. ;  ; bool hasRange (const char *name) const override;  Check if variable has a binning with given name. ;  ; bool inRange (const char *name) const override;  Check if current value is inside range with given name. ;  ; bool inRange (double value, const char *rangeName, double *clippedValue=nullptr) const;  Return true if the input value is within our fit range. ;  ; void inRange (std::span< const double > values, std::string const &rangeName, std::vector< bool > &out) const;  Vectorized version of RooAbsRealLValue::inRange(double, const char*, double*). ;  ; TClass * IsA () const override;  ; virtual bool isJacobianOK (const RooArgSet &depList)",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:6473,Modifiability,variab,variable,6473,"; virtual RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false)=0;  Retrieve binning configuration with given name or default binning. ;  ; const RooAbsBinning * getBinningPtr (const char *rangeName) const override;  ; virtual Int_t getBins (const char *name=nullptr) const;  Get number of bins of currently defined range. ;  ; double getBinWidth (Int_t i, const char *rangeName=nullptr) const override;  ; virtual double getBinWidth (Int_t i, const RooAbsBinning &binning) const;  ; virtual double getMax (const char *name=nullptr) const;  Get maximum of currently defined range. ;  ; virtual double getMin (const char *name=nullptr) const;  Get minimum of currently defined range. ;  ; std::pair< double, double > getRange (const char *name=nullptr) const;  Get low and high bound of the variable. ;  ; virtual bool hasBinning (const char *name) const =0;  Check if binning with given name has been defined. ;  ; bool hasMax (const char *name=nullptr) const;  Check if variable has an upper bound. ;  ; bool hasMin (const char *name=nullptr) const;  Check if variable has a lower bound. ;  ; bool hasRange (const char *name) const override;  Check if variable has a binning with given name. ;  ; bool inRange (const char *name) const override;  Check if current value is inside range with given name. ;  ; bool inRange (double value, const char *rangeName, double *clippedValue=nullptr) const;  Return true if the input value is within our fit range. ;  ; void inRange (std::span< const double > values, std::string const &rangeName, std::vector< bool > &out) const;  Vectorized version of RooAbsRealLValue::inRange(double, const char*, double*). ;  ; TClass * IsA () const override;  ; virtual bool isJacobianOK (const RooArgSet &depList) const;  ; bool isLValue () const override;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:6563,Modifiability,variab,variable,6563,"reateOnTheFly=false)=0;  Retrieve binning configuration with given name or default binning. ;  ; const RooAbsBinning * getBinningPtr (const char *rangeName) const override;  ; virtual Int_t getBins (const char *name=nullptr) const;  Get number of bins of currently defined range. ;  ; double getBinWidth (Int_t i, const char *rangeName=nullptr) const override;  ; virtual double getBinWidth (Int_t i, const RooAbsBinning &binning) const;  ; virtual double getMax (const char *name=nullptr) const;  Get maximum of currently defined range. ;  ; virtual double getMin (const char *name=nullptr) const;  Get minimum of currently defined range. ;  ; std::pair< double, double > getRange (const char *name=nullptr) const;  Get low and high bound of the variable. ;  ; virtual bool hasBinning (const char *name) const =0;  Check if binning with given name has been defined. ;  ; bool hasMax (const char *name=nullptr) const;  Check if variable has an upper bound. ;  ; bool hasMin (const char *name=nullptr) const;  Check if variable has a lower bound. ;  ; bool hasRange (const char *name) const override;  Check if variable has a binning with given name. ;  ; bool inRange (const char *name) const override;  Check if current value is inside range with given name. ;  ; bool inRange (double value, const char *rangeName, double *clippedValue=nullptr) const;  Return true if the input value is within our fit range. ;  ; void inRange (std::span< const double > values, std::string const &rangeName, std::vector< bool > &out) const;  Vectorized version of RooAbsRealLValue::inRange(double, const char*, double*). ;  ; TClass * IsA () const override;  ; virtual bool isJacobianOK (const RooArgSet &depList) const;  ; bool isLValue () const override;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool isValidReal (double value, bool printError=false) cons",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:6655,Modifiability,variab,variable,6655,"const RooAbsBinning * getBinningPtr (const char *rangeName) const override;  ; virtual Int_t getBins (const char *name=nullptr) const;  Get number of bins of currently defined range. ;  ; double getBinWidth (Int_t i, const char *rangeName=nullptr) const override;  ; virtual double getBinWidth (Int_t i, const RooAbsBinning &binning) const;  ; virtual double getMax (const char *name=nullptr) const;  Get maximum of currently defined range. ;  ; virtual double getMin (const char *name=nullptr) const;  Get minimum of currently defined range. ;  ; std::pair< double, double > getRange (const char *name=nullptr) const;  Get low and high bound of the variable. ;  ; virtual bool hasBinning (const char *name) const =0;  Check if binning with given name has been defined. ;  ; bool hasMax (const char *name=nullptr) const;  Check if variable has an upper bound. ;  ; bool hasMin (const char *name=nullptr) const;  Check if variable has a lower bound. ;  ; bool hasRange (const char *name) const override;  Check if variable has a binning with given name. ;  ; bool inRange (const char *name) const override;  Check if current value is inside range with given name. ;  ; bool inRange (double value, const char *rangeName, double *clippedValue=nullptr) const;  Return true if the input value is within our fit range. ;  ; void inRange (std::span< const double > values, std::string const &rangeName, std::vector< bool > &out) const;  Vectorized version of RooAbsRealLValue::inRange(double, const char*, double*). ;  ; TClass * IsA () const override;  ; virtual bool isJacobianOK (const RooArgSet &depList) const;  ; bool isLValue () const override;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool isValidReal (double value, bool printError=false) const override;  Check if given value is valid. ;  ; virtual double jacobian () const;  ; Int_t numB",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:9343,Modifiability,inherit,inherited,9343,"geName=nullptr) override;  Set value to center of bin 'ibin' of binning 'rangeName' (or of default binning if no range is specified) ;  ; virtual void setBin (Int_t ibin, const RooAbsBinning &binning);  Set value to center of bin 'ibin' of binning 'binning'. ;  ; void setConstant (bool value=true);  ; virtual void setVal (double value)=0;  Set the current value of the object. Needs to be overridden by implementations. ;  ; virtual void setVal (double value, const char *);  Set the current value of the object. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; double volume (const char *rangeName) const override;  ; virtual double volume (const RooAbsBinning &binning) const;  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to given stream. ;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ; ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:10743,Modifiability,adapt,adaptor,10743,"(const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:10790,Modifiability,variab,variables,10790,"(const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:12470,Modifiability,variab,variable,12470,"2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooLinkedList &cmdList);  Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create a \( \chi^2 \) variable from a histogram and this function. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataHist &data, const RooLinkedList &cmdList);  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataSet &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create a \( \chi^2 \) from a series of x and y values stored in a dataset. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataSet &data, const RooLinkedList &cmdList);  See RooAbsReal::createChi2(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooAbsArg > createFundamental (const char *newname=",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:14151,Modifiability,variab,variables,14151,"inkedList &cmdList);  See RooAbsReal::createChi2(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooAbsArg > createFundamental (const char *newname=nullptr) const override;  Create a RooRealVar fundamental object with our properties. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const Roo",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:14914,Modifiability,config,configuration,14914,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAb",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:15578,Modifiability,config,configuration,15578,"st;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:20215,Modifiability,config,configuration,20215,"on tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:20342,Modifiability,config,configuration,20342," void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool h",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:20605,Modifiability,variab,variable,20605,"arameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=fa",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:20854,Modifiability,variab,variable,20854,"alIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log e",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:24135,Modifiability,config,configuration,24135,"st;  Plot (project) PDF on specified frame. ;  ; virtual RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const;  Internal back-end function of plotOn() with named arguments. ;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const c",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:24232,Modifiability,config,config,24232,"amed arguments. ;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:24267,Modifiability,config,configuration,24267,"amed arguments. ;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:24312,Modifiability,config,configuration,24312,"amed arguments. ;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:24485,Modifiability,variab,variable,24485," hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (cons",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:24733,Modifiability,config,configuration,24733,"unction objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:24874,Modifiability,config,configuration,24874,"bject value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disab",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:25004,Modifiability,inherit,inherited,25004,"is object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachD",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:26073,Modifiability,variab,variable,26073," ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained T",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:26108,Modifiability,variab,variables,26108," ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained T",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:26280,Modifiability,variab,variable,26280," transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileCon",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:26315,Modifiability,variab,variables,26315," transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileCon",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:26637,Modifiability,variab,variables,26637,"ponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ;",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:29340,Modifiability,variab,variable,29340," bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable lis",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:30257,Modifiability,variab,variable,30257,"oArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; virtual bool getParameters (const RooArgSet *observables, RooArgSet &outputSet, bool stripDisconnected=true) const;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:31450,Modifiability,variab,variables,31450," set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; virtual bool getParameters (const RooArgSet *observables, RooArgSet &outputSet, bool stripDisconnected=true) const;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (const Text_t *key) const;  Get string attribute mapped under key 'key'. ;  ; bool getTransientAttribute (const Text_t *name) const;  Check if a named attribute is set. ;  ; RooFit::OwningPtr< RooArgSet > getVariables (bool stripDisconnected=true) const;  Return RooArgSet with all variables (tree leaf nodes of expression tree) ;  ; void graphVizTree (const char *fileName, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Create a GraphViz .dot file visualizing the expression tree headed by this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () cons",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:42957,Modifiability,inherit,inherited,42957," ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:44503,Modifiability,inherit,inherited,44503,"ects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:45596,Modifiability,inherit,inheritance,45596,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:47595,Modifiability,inherit,inherits,47595,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:47712,Modifiability,inherit,inherits,47712,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:51271,Modifiability,inherit,inherited,51271,"id SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsLValue; virtual ~RooAbsLValue ()=default;  ; virtual std::list< std::string > getBinningNames () const =0;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, const RooAbsBinning **bins);  Create ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:51901,Modifiability,inherit,inherited,51901,"Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsLValue; virtual ~RooAbsLValue ()=default;  ; virtual std::list< std::string > getBinningNames () const =0;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, const RooAbsBinning **bins);  Create a 1,2, or 3D-histogram with appropriate scale and labels. ;  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, double *xlo, double *xhi, Int_t *nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEva",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:52629,Modifiability,variab,variables,52629,"tyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsLValue; virtual ~RooAbsLValue ()=default;  ; virtual std::list< std::string > getBinningNames () const =0;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, const RooAbsBinning **bins);  Create a 1,2, or 3D-histogram with appropriate scale and labels. ;  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, double *xlo, double *xhi, Int_t *nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverVa",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:52789,Modifiability,inherit,inherited,52789,"Virtual_b);  ;  Public Member Functions inherited from RooAbsLValue; virtual ~RooAbsLValue ()=default;  ; virtual std::list< std::string > getBinningNames () const =0;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, const RooAbsBinning **bins);  Create a 1,2, or 3D-histogram with appropriate scale and labels. ;  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, double *xlo, double *xhi, Int_t *nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static voi",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:53151,Modifiability,config,configuration,53151,"tatic Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, const RooAbsBinning **bins);  Create a 1,2, or 3D-histogram with appropriate scale and labels. ;  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, double *xlo, double *xhi, Int_t *nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:54183,Modifiability,inherit,inherited,54183,"tic std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static T",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:54429,Modifiability,inherit,inherited,54429,"sages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given am",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:54639,Modifiability,inherit,inherited,54639,"sages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given am",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:55157,Modifiability,inherit,inherited,55157,"void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  ;  Static Public Member Functions inherited from RooAbsLValue; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy cache of another RooAbsArg to our cache. ;  ; bool fitRangeOKForPlotting () const;  Check if fit range is usable as plot range, i.e. ;  ; virtual void setValFast (double value);  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach ob",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:55679,Modifiability,inherit,inherited,55679,"ion_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  ;  Static Public Member Functions inherited from RooAbsLValue; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy cache of another RooAbsArg to our cache. ;  ; bool fitRangeOKForPlotting () const;  Check if fit range is usable as plot range, i.e. ;  ; virtual void setValFast (double value);  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:56202,Modifiability,inherit,inherited,56202,"char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  ;  Static Public Member Functions inherited from RooAbsLValue; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy cache of another RooAbsArg to our cache. ;  ; bool fitRangeOKForPlotting () const;  Check if fit range is usable as plot range, i.e. ;  ; virtual void setValFast (double value);  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooAr",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:57139,Modifiability,parameteriz,parameterized,57139," cache. ;  ; bool fitRangeOKForPlotting () const;  Check if fit range is usable as plot range, i.e. ;  ; virtual void setValFast (double value);  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const Roo",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:60495,Modifiability,inherit,inherited,60495," general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtua",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:62638,Modifiability,inherit,inherited,62638," attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleK",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:62865,Modifiability,inherit,inherited,62865,"ged. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:63095,Modifiability,inherit,inherited,63095,"ged. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:63505,Modifiability,inherit,inherited,63505,"ged. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:64143,Modifiability,inherit,inherited,64143,"ctivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container t",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:64467,Modifiability,inherit,inherited,64467," ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:64827,Modifiability,inherit,inherited,64827,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from tree",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:64933,Modifiability,inherit,inherited,64933,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from tree",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:65119,Modifiability,inherit,inherited,65119," ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string >",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:65338,Modifiability,inherit,inherited,65338,"SingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:66105,Modifiability,inherit,inherited,66105,"handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:67381,Modifiability,inherit,inherited,67381,"::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAbsRealLValue.h>. Inheritance diagram for RooAbsRealLValue:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAbsRealLValue() [1/3]. RooAbsRealLValue::RooAbsRealLValue ; (; ). inline . Definition at line 34 of file RooAbsRealLValue.h. ◆ RooAbsRealLValue() [2/3]. RooAbsRealLValue::RooAbsRealLValue ; (; const char * ; name, . const char * ; title, . const char * ; unit = """" . ). Constructor. ; Definition at lin",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:67470,Modifiability,inherit,inherited,67470,"::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAbsRealLValue.h>. Inheritance diagram for RooAbsRealLValue:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAbsRealLValue() [1/3]. RooAbsRealLValue::RooAbsRealLValue ; (; ). inline . Definition at line 34 of file RooAbsRealLValue.h. ◆ RooAbsRealLValue() [2/3]. RooAbsRealLValue::RooAbsRealLValue ; (; const char * ; name, . const char * ; title, . const char * ; unit = """" . ). Constructor. ; Definition at lin",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:67626,Modifiability,inherit,inherited,67626,"d name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAbsRealLValue.h>. Inheritance diagram for RooAbsRealLValue:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAbsRealLValue() [1/3]. RooAbsRealLValue::RooAbsRealLValue ; (; ). inline . Definition at line 34 of file RooAbsRealLValue.h. ◆ RooAbsRealLValue() [2/3]. RooAbsRealLValue::RooAbsRealLValue ; (; const char * ; name, . const char * ; title, . const char * ; unit = """" . ). Constructor. ; Definition at line 65 of file RooAbsRealLValue.cxx. ◆ RooAbsRealLValue() [3/3]. RooAbsRealLValue::RooAbsRealLValue ; (; const RooAbsRealLValue & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 75 of file RooAbsRealLValue.cxx. Member Function Documentation. ◆ Class(). static ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:67795,Modifiability,inherit,inherited,67795,"; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAbsRealLValue.h>. Inheritance diagram for RooAbsRealLValue:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAbsRealLValue() [1/3]. RooAbsRealLValue::RooAbsRealLValue ; (; ). inline . Definition at line 34 of file RooAbsRealLValue.h. ◆ RooAbsRealLValue() [2/3]. RooAbsRealLValue::RooAbsRealLValue ; (; const char * ; name, . const char * ; title, . const char * ; unit = """" . ). Constructor. ; Definition at line 65 of file RooAbsRealLValue.cxx. ◆ RooAbsRealLValue() [3/3]. RooAbsRealLValue::RooAbsRealLValue ; (; const RooAbsRealLValue & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 75 of file RooAbsRealLValue.cxx. Member Function Documentation. ◆ Class(). static TClass * RooAbsRealLValue::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsRealLValue:",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:69594,Modifiability,variab,variable,69594,"; Definition at line 75 of file RooAbsRealLValue.cxx. Member Function Documentation. ◆ Class(). static TClass * RooAbsRealLValue::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsRealLValue::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsRealLValue::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 164 of file RooAbsRealLValue.h. ◆ copyCache(). void RooAbsRealLValue::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy cache of another RooAbsArg to our cache. ; Reimplemented from RooAbsReal.; Reimplemented in RooRealVar.; Definition at line 394 of file RooAbsRealLValue.cxx. ◆ createHistogram() [1/11]. TH1F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const char * ; yAxisLabel . ); const. Create an empty 1D-histogram with appropriate scale and labels for this variable. ; This method uses the default plot range which can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which can be changed with setPlotBins(). The caller takes ownership of the returned object and is responsible for deleting it. ; Definition at line 687 of file RooAbsRealLValue.cxx. ◆ createHistogram() [2/11]. TH1F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const char * ; yAxisLabel, . const RooAbsBinning & ; bins . ); const. Create an empty 1D-histogram with appropriate scale and labels for this variable. ; Definition at line 727 of file RooAbsRealLValue.cxx. ◆ createHistogram() [3/11]. TH1F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const char * ; yAxisLabel, . double ; xlo, . double ; xhi, . Int_t ; nBins . ); const. Create an empty 1D-histogram with appropriate scale and labels for this variable. ; This method uses the default plot range which can be changed using the s",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:70157,Modifiability,variab,variable,70157," ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy cache of another RooAbsArg to our cache. ; Reimplemented from RooAbsReal.; Reimplemented in RooRealVar.; Definition at line 394 of file RooAbsRealLValue.cxx. ◆ createHistogram() [1/11]. TH1F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const char * ; yAxisLabel . ); const. Create an empty 1D-histogram with appropriate scale and labels for this variable. ; This method uses the default plot range which can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which can be changed with setPlotBins(). The caller takes ownership of the returned object and is responsible for deleting it. ; Definition at line 687 of file RooAbsRealLValue.cxx. ◆ createHistogram() [2/11]. TH1F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const char * ; yAxisLabel, . const RooAbsBinning & ; bins . ); const. Create an empty 1D-histogram with appropriate scale and labels for this variable. ; Definition at line 727 of file RooAbsRealLValue.cxx. ◆ createHistogram() [3/11]. TH1F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const char * ; yAxisLabel, . double ; xlo, . double ; xhi, . Int_t ; nBins . ); const. Create an empty 1D-histogram with appropriate scale and labels for this variable. ; This method uses the default plot range which can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which can be changed with setPlotBins(). The caller takes ownership of the returned object and is responsible for deleting it. ; Definition at line 714 of file RooAbsRealLValue.cxx. ◆ createHistogram() [4/11]. TH2F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; yvar, . const char * ; zAxisLabel, . const RooAbsBinning ** ; bins . ); const. Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ; Def",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:70478,Modifiability,variab,variable,70478,"Histogram ; (; const char * ; name, . const char * ; yAxisLabel . ); const. Create an empty 1D-histogram with appropriate scale and labels for this variable. ; This method uses the default plot range which can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which can be changed with setPlotBins(). The caller takes ownership of the returned object and is responsible for deleting it. ; Definition at line 687 of file RooAbsRealLValue.cxx. ◆ createHistogram() [2/11]. TH1F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const char * ; yAxisLabel, . const RooAbsBinning & ; bins . ); const. Create an empty 1D-histogram with appropriate scale and labels for this variable. ; Definition at line 727 of file RooAbsRealLValue.cxx. ◆ createHistogram() [3/11]. TH1F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const char * ; yAxisLabel, . double ; xlo, . double ; xhi, . Int_t ; nBins . ); const. Create an empty 1D-histogram with appropriate scale and labels for this variable. ; This method uses the default plot range which can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which can be changed with setPlotBins(). The caller takes ownership of the returned object and is responsible for deleting it. ; Definition at line 714 of file RooAbsRealLValue.cxx. ◆ createHistogram() [4/11]. TH2F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; yvar, . const char * ; zAxisLabel, . const RooAbsBinning ** ; bins . ); const. Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ; Definition at line 803 of file RooAbsRealLValue.cxx. ◆ createHistogram() [5/11]. TH2F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; yvar, . const char * ; zAxisLabel = nullptr, . double * ; xlo = nullptr, . double * ; xhi = nullptr, . Int_t * ; nBins = nullptr . ); const. Create",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:71077,Modifiability,variab,variable,71077,"ng & ; bins . ); const. Create an empty 1D-histogram with appropriate scale and labels for this variable. ; Definition at line 727 of file RooAbsRealLValue.cxx. ◆ createHistogram() [3/11]. TH1F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const char * ; yAxisLabel, . double ; xlo, . double ; xhi, . Int_t ; nBins . ); const. Create an empty 1D-histogram with appropriate scale and labels for this variable. ; This method uses the default plot range which can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which can be changed with setPlotBins(). The caller takes ownership of the returned object and is responsible for deleting it. ; Definition at line 714 of file RooAbsRealLValue.cxx. ◆ createHistogram() [4/11]. TH2F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; yvar, . const char * ; zAxisLabel, . const RooAbsBinning ** ; bins . ); const. Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ; Definition at line 803 of file RooAbsRealLValue.cxx. ◆ createHistogram() [5/11]. TH2F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; yvar, . const char * ; zAxisLabel = nullptr, . double * ; xlo = nullptr, . double * ; xhi = nullptr, . Int_t * ; nBins = nullptr . ); const. Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ; This method uses the default plot ranges for x and y which can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which can be changed with setPlotBins(). The caller takes ownership of the returned object and is responsible for deleting it. ; Definition at line 745 of file RooAbsRealLValue.cxx. ◆ createHistogram() [6/11]. TH3F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; yvar, . const RooAbsRealLValue & ; zvar, . const char * ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:71110,Modifiability,variab,variable,71110,"ng & ; bins . ); const. Create an empty 1D-histogram with appropriate scale and labels for this variable. ; Definition at line 727 of file RooAbsRealLValue.cxx. ◆ createHistogram() [3/11]. TH1F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const char * ; yAxisLabel, . double ; xlo, . double ; xhi, . Int_t ; nBins . ); const. Create an empty 1D-histogram with appropriate scale and labels for this variable. ; This method uses the default plot range which can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which can be changed with setPlotBins(). The caller takes ownership of the returned object and is responsible for deleting it. ; Definition at line 714 of file RooAbsRealLValue.cxx. ◆ createHistogram() [4/11]. TH2F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; yvar, . const char * ; zAxisLabel, . const RooAbsBinning ** ; bins . ); const. Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ; Definition at line 803 of file RooAbsRealLValue.cxx. ◆ createHistogram() [5/11]. TH2F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; yvar, . const char * ; zAxisLabel = nullptr, . double * ; xlo = nullptr, . double * ; xhi = nullptr, . Int_t * ; nBins = nullptr . ); const. Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ; This method uses the default plot ranges for x and y which can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which can be changed with setPlotBins(). The caller takes ownership of the returned object and is responsible for deleting it. ; Definition at line 745 of file RooAbsRealLValue.cxx. ◆ createHistogram() [6/11]. TH3F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; yvar, . const RooAbsRealLValue & ; zvar, . const char * ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:71512,Modifiability,variab,variable,71512,"ethod uses the default plot range which can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which can be changed with setPlotBins(). The caller takes ownership of the returned object and is responsible for deleting it. ; Definition at line 714 of file RooAbsRealLValue.cxx. ◆ createHistogram() [4/11]. TH2F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; yvar, . const char * ; zAxisLabel, . const RooAbsBinning ** ; bins . ); const. Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ; Definition at line 803 of file RooAbsRealLValue.cxx. ◆ createHistogram() [5/11]. TH2F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; yvar, . const char * ; zAxisLabel = nullptr, . double * ; xlo = nullptr, . double * ; xhi = nullptr, . Int_t * ; nBins = nullptr . ); const. Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ; This method uses the default plot ranges for x and y which can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which can be changed with setPlotBins(). The caller takes ownership of the returned object and is responsible for deleting it. ; Definition at line 745 of file RooAbsRealLValue.cxx. ◆ createHistogram() [6/11]. TH3F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; yvar, . const RooAbsRealLValue & ; zvar, . const char * ; tAxisLabel, . const RooAbsBinning ** ; bins . ); const. Definition at line 878 of file RooAbsRealLValue.cxx. ◆ createHistogram() [7/11]. TH3F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; yvar, . const RooAbsRealLValue & ; zvar, . const char * ; tAxisLabel, . double * ; xlo = nullptr, . double * ; xhi = nullptr, . Int_t * ; nBins = nullptr . ); const. Create an empty 3D-histogram with ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:71545,Modifiability,variab,variable,71545,"ethod uses the default plot range which can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which can be changed with setPlotBins(). The caller takes ownership of the returned object and is responsible for deleting it. ; Definition at line 714 of file RooAbsRealLValue.cxx. ◆ createHistogram() [4/11]. TH2F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; yvar, . const char * ; zAxisLabel, . const RooAbsBinning ** ; bins . ); const. Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ; Definition at line 803 of file RooAbsRealLValue.cxx. ◆ createHistogram() [5/11]. TH2F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; yvar, . const char * ; zAxisLabel = nullptr, . double * ; xlo = nullptr, . double * ; xhi = nullptr, . Int_t * ; nBins = nullptr . ); const. Create an empty 2D-histogram with appropriate scale and labels for this variable (x) and the specified y variable. ; This method uses the default plot ranges for x and y which can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which can be changed with setPlotBins(). The caller takes ownership of the returned object and is responsible for deleting it. ; Definition at line 745 of file RooAbsRealLValue.cxx. ◆ createHistogram() [6/11]. TH3F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; yvar, . const RooAbsRealLValue & ; zvar, . const char * ; tAxisLabel, . const RooAbsBinning ** ; bins . ); const. Definition at line 878 of file RooAbsRealLValue.cxx. ◆ createHistogram() [7/11]. TH3F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; yvar, . const RooAbsRealLValue & ; zvar, . const char * ; tAxisLabel, . double * ; xlo = nullptr, . double * ; xhi = nullptr, . Int_t * ; nBins = nullptr . ); const. Create an empty 3D-histogram with ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:72535,Modifiability,variab,variable,72535,"(x) and the specified y variable. ; This method uses the default plot ranges for x and y which can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which can be changed with setPlotBins(). The caller takes ownership of the returned object and is responsible for deleting it. ; Definition at line 745 of file RooAbsRealLValue.cxx. ◆ createHistogram() [6/11]. TH3F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; yvar, . const RooAbsRealLValue & ; zvar, . const char * ; tAxisLabel, . const RooAbsBinning ** ; bins . ); const. Definition at line 878 of file RooAbsRealLValue.cxx. ◆ createHistogram() [7/11]. TH3F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; yvar, . const RooAbsRealLValue & ; zvar, . const char * ; tAxisLabel, . double * ; xlo = nullptr, . double * ; xhi = nullptr, . Int_t * ; nBins = nullptr . ); const. Create an empty 3D-histogram with appropriate scale and labels for this variable (x) and the specified y,z variables. ; This method uses the default plot ranges for x,y,z which can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which can be changed with setPlotBins(). The caller takes ownership of the returned object and is responsible for deleting it. ; Definition at line 819 of file RooAbsRealLValue.cxx. ◆ createHistogram() [8/11]. RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. PyROOT; The RooAbsRealLValue::createHistogram() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 534 of file RooAbsRealLValue.cxx. ◆ createHistogram() [9/1",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:72570,Modifiability,variab,variables,72570,"(x) and the specified y variable. ; This method uses the default plot ranges for x and y which can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which can be changed with setPlotBins(). The caller takes ownership of the returned object and is responsible for deleting it. ; Definition at line 745 of file RooAbsRealLValue.cxx. ◆ createHistogram() [6/11]. TH3F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; yvar, . const RooAbsRealLValue & ; zvar, . const char * ; tAxisLabel, . const RooAbsBinning ** ; bins . ); const. Definition at line 878 of file RooAbsRealLValue.cxx. ◆ createHistogram() [7/11]. TH3F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; yvar, . const RooAbsRealLValue & ; zvar, . const char * ; tAxisLabel, . double * ; xlo = nullptr, . double * ; xhi = nullptr, . Int_t * ; nBins = nullptr . ); const. Create an empty 3D-histogram with appropriate scale and labels for this variable (x) and the specified y,z variables. ; This method uses the default plot ranges for x,y,z which can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which can be changed with setPlotBins(). The caller takes ownership of the returned object and is responsible for deleting it. ; Definition at line 819 of file RooAbsRealLValue.cxx. ◆ createHistogram() [8/11]. RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. PyROOT; The RooAbsRealLValue::createHistogram() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 534 of file RooAbsRealLValue.cxx. ◆ createHistogram() [9/1",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:74269,Modifiability,variab,variables,74269,":createHistogram() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 534 of file RooAbsRealLValue.cxx. ◆ createHistogram() [9/11]. TH1 * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const RooLinkedList & ; cmdList . ); const. Create empty 1,2 or 3D histogram Arguments recognized. ; YVar() – RooRealVar defining Y dimension with optional range/binning ZVar() – RooRealVar defining Z dimension with optional range/binning AxisLabel() – Vertical axis label Binning() – Range/Binning specification of X axis ; Definition at line 578 of file RooAbsRealLValue.cxx. ◆ createHistogram() [10/11]. TH1 * RooAbsRealLValue::createHistogram ; (; const char * ; name, . RooArgList & ; vars, . const char * ; tAxisLabel, . const RooAbsBinning ** ; bins . ). static . Create a 1,2, or 3D-histogram with appropriate scale and labels. ; Binning and ranges are taken from the variables themselves and can be changed by calling their setPlotMin/Max() and setPlotBins() methods. A histogram can be filled using RooAbsReal::fillHistogram() or RooTreeData::fillHistogram(). The caller takes ownership of the returned object and is responsible for deleting it. ; Definition at line 923 of file RooAbsRealLValue.cxx. ◆ createHistogram() [11/11]. TH1 * RooAbsRealLValue::createHistogram ; (; const char * ; name, . RooArgList & ; vars, . const char * ; tAxisLabel, . double * ; xlo, . double * ; xhi, . Int_t * ; nBins . ). static . Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ; The dimensions of the arrays xlo,xhi, nBins should match the number of objects in vars. ; Definition at line 897 of file RooAbsRealLValue.cxx. ◆ createIntegral(). RooFit::OwningPtr< RooAbsReal > RooAbsRealLValue::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = n",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:74882,Modifiability,variab,variables,74882," specification of X axis ; Definition at line 578 of file RooAbsRealLValue.cxx. ◆ createHistogram() [10/11]. TH1 * RooAbsRealLValue::createHistogram ; (; const char * ; name, . RooArgList & ; vars, . const char * ; tAxisLabel, . const RooAbsBinning ** ; bins . ). static . Create a 1,2, or 3D-histogram with appropriate scale and labels. ; Binning and ranges are taken from the variables themselves and can be changed by calling their setPlotMin/Max() and setPlotBins() methods. A histogram can be filled using RooAbsReal::fillHistogram() or RooTreeData::fillHistogram(). The caller takes ownership of the returned object and is responsible for deleting it. ; Definition at line 923 of file RooAbsRealLValue.cxx. ◆ createHistogram() [11/11]. TH1 * RooAbsRealLValue::createHistogram ; (; const char * ; name, . RooArgList & ; vars, . const char * ; tAxisLabel, . double * ; xlo, . double * ; xhi, . Int_t * ; nBins . ). static . Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ; The dimensions of the arrays xlo,xhi, nBins should match the number of objects in vars. ; Definition at line 897 of file RooAbsRealLValue.cxx. ◆ createIntegral(). RooFit::OwningPtr< RooAbsReal > RooAbsRealLValue::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. overridevirtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:75675,Modifiability,variab,variables,75675,"Value::createHistogram ; (; const char * ; name, . RooArgList & ; vars, . const char * ; tAxisLabel, . double * ; xlo, . double * ; xhi, . Int_t * ; nBins . ). static . Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ; The dimensions of the arrays xlo,xhi, nBins should match the number of objects in vars. ; Definition at line 897 of file RooAbsRealLValue.cxx. ◆ createIntegral(). RooFit::OwningPtr< RooAbsReal > RooAbsRealLValue::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. overridevirtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 1056 of file RooAbsRealLValue.cxx. ◆ DeclFileName(). static const char * RooAbsRealLValue::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 164 of file RooAbsRealLValue.h. ◆ fitRangeOKForPlotting(). bool RooAbsRealLValue::fitRangeOKForPlotting ; (; ); const. protected . Check if fit range is usable as plot range, i.e. ; it is ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:76036,Modifiability,config,configure,76036,"s in vars. ; Definition at line 897 of file RooAbsRealLValue.cxx. ◆ createIntegral(). RooFit::OwningPtr< RooAbsReal > RooAbsRealLValue::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. overridevirtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 1056 of file RooAbsRealLValue.cxx. ◆ DeclFileName(). static const char * RooAbsRealLValue::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 164 of file RooAbsRealLValue.h. ◆ fitRangeOKForPlotting(). bool RooAbsRealLValue::fitRangeOKForPlotting ; (; ); const. protected . Check if fit range is usable as plot range, i.e. ; it is neither open ended, nor empty ; Definition at line 493 of file RooAbsRealLValue.cxx. ◆ frame() [1/6]. RooPlot * RooAbsRealLValue::frame ; (; ); const. Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ; Use x.frame() as the first argument to a y.plotOn(...) method, for example. The caller is responsible for deleting the returned object.;",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:80873,Modifiability,config,configuration,80873,"o a y.plotOn(...) method, for example. The caller is responsible for deleting the returned object.; The current fit range may not be open ended or empty. ; Definition at line 349 of file RooAbsRealLValue.cxx. ◆ getBin() [1/3]. Int_t RooAbsRealLValue::getBin ; (; const char * ; rangeName = nullptr); const. inlineoverridevirtual . Implements RooAbsLValue.; Definition at line 50 of file RooAbsRealLValue.h. ◆ getBin() [2/3]. virtual Int_t RooAbsRealLValue::getBin ; (; const RooAbsBinning & ; binning); const. inlinevirtual . Definition at line 60 of file RooAbsRealLValue.h. ◆ getBin() [3/3]. Int_t RooAbsRealLValue::getBin ; (; const RooAbsBinning * ; ptr); const. inlineoverridevirtual . Implements RooAbsLValue.; Definition at line 57 of file RooAbsRealLValue.h. ◆ getBinning() [1/2]. virtual const RooAbsBinning & RooAbsRealLValue::getBinning ; (; const char * ; name = nullptr, . bool ; verbose = true, . bool ; createOnTheFly = false . ); const. pure virtual . Retrieve binning configuration with given name or default binning. ; Implemented in RooErrorVar, RooLinearVar, and RooRealVar. ◆ getBinning() [2/2]. virtual RooAbsBinning & RooAbsRealLValue::getBinning ; (; const char * ; name = nullptr, . bool ; verbose = true, . bool ; createOnTheFly = false . ). pure virtual . Retrieve binning configuration with given name or default binning. ; Implemented in RooErrorVar, RooLinearVar, and RooRealVar. ◆ getBinningPtr(). const RooAbsBinning * RooAbsRealLValue::getBinningPtr ; (; const char * ; rangeName); const. inlineoverridevirtual . Implements RooAbsLValue.; Definition at line 56 of file RooAbsRealLValue.h. ◆ getBins(). virtual Int_t RooAbsRealLValue::getBins ; (; const char * ; name = nullptr); const. inlinevirtual . Get number of bins of currently defined range. ; Parameters. nameOptionally, request number of bins for range with given name. . Definition at line 78 of file RooAbsRealLValue.h. ◆ getBinWidth() [1/2]. double RooAbsRealLValue::getBinWidth ; (; Int_t ; i, . const cha",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:81188,Modifiability,config,configuration,81188,"erridevirtual . Implements RooAbsLValue.; Definition at line 50 of file RooAbsRealLValue.h. ◆ getBin() [2/3]. virtual Int_t RooAbsRealLValue::getBin ; (; const RooAbsBinning & ; binning); const. inlinevirtual . Definition at line 60 of file RooAbsRealLValue.h. ◆ getBin() [3/3]. Int_t RooAbsRealLValue::getBin ; (; const RooAbsBinning * ; ptr); const. inlineoverridevirtual . Implements RooAbsLValue.; Definition at line 57 of file RooAbsRealLValue.h. ◆ getBinning() [1/2]. virtual const RooAbsBinning & RooAbsRealLValue::getBinning ; (; const char * ; name = nullptr, . bool ; verbose = true, . bool ; createOnTheFly = false . ); const. pure virtual . Retrieve binning configuration with given name or default binning. ; Implemented in RooErrorVar, RooLinearVar, and RooRealVar. ◆ getBinning() [2/2]. virtual RooAbsBinning & RooAbsRealLValue::getBinning ; (; const char * ; name = nullptr, . bool ; verbose = true, . bool ; createOnTheFly = false . ). pure virtual . Retrieve binning configuration with given name or default binning. ; Implemented in RooErrorVar, RooLinearVar, and RooRealVar. ◆ getBinningPtr(). const RooAbsBinning * RooAbsRealLValue::getBinningPtr ; (; const char * ; rangeName); const. inlineoverridevirtual . Implements RooAbsLValue.; Definition at line 56 of file RooAbsRealLValue.h. ◆ getBins(). virtual Int_t RooAbsRealLValue::getBins ; (; const char * ; name = nullptr); const. inlinevirtual . Get number of bins of currently defined range. ; Parameters. nameOptionally, request number of bins for range with given name. . Definition at line 78 of file RooAbsRealLValue.h. ◆ getBinWidth() [1/2]. double RooAbsRealLValue::getBinWidth ; (; Int_t ; i, . const char * ; rangeName = nullptr . ); const. inlineoverridevirtual . Implements RooAbsLValue.; Definition at line 52 of file RooAbsRealLValue.h. ◆ getBinWidth() [2/2]. virtual double RooAbsRealLValue::getBinWidth ; (; Int_t ; i, . const RooAbsBinning & ; binning . ); const. inlinevirtual . Definition at line 62 of file R",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:82927,Modifiability,variab,variable,82927," ); const. inlineoverridevirtual . Implements RooAbsLValue.; Definition at line 52 of file RooAbsRealLValue.h. ◆ getBinWidth() [2/2]. virtual double RooAbsRealLValue::getBinWidth ; (; Int_t ; i, . const RooAbsBinning & ; binning . ); const. inlinevirtual . Definition at line 62 of file RooAbsRealLValue.h. ◆ getMax(). virtual double RooAbsRealLValue::getMax ; (; const char * ; name = nullptr); const. inlinevirtual . Get maximum of currently defined range. ; Parameters. nameOptionally, request maximum of range with given name. . Definition at line 84 of file RooAbsRealLValue.h. ◆ getMin(). virtual double RooAbsRealLValue::getMin ; (; const char * ; name = nullptr); const. inlinevirtual . Get minimum of currently defined range. ; Parameters. nameOptionally, request minimum of range with given name. . Definition at line 81 of file RooAbsRealLValue.h. ◆ getRange(). std::pair< double, double > RooAbsRealLValue::getRange ; (; const char * ; name = nullptr); const. inline . Get low and high bound of the variable. ; Parameters. nameOptional range name. If not given, the default range will be used. . ReturnsA pair with [lowerBound, upperBound] ; Definition at line 88 of file RooAbsRealLValue.h. ◆ hasBinning(). virtual bool RooAbsRealLValue::hasBinning ; (; const char * ; name); const. pure virtual . Check if binning with given name has been defined. ; Implemented in RooErrorVar, RooLinearVar, and RooRealVar. ◆ hasMax(). bool RooAbsRealLValue::hasMax ; (; const char * ; name = nullptr); const. inline . Check if variable has an upper bound. ; Definition at line 95 of file RooAbsRealLValue.h. ◆ hasMin(). bool RooAbsRealLValue::hasMin ; (; const char * ; name = nullptr); const. inline . Check if variable has a lower bound. ; Definition at line 93 of file RooAbsRealLValue.h. ◆ hasRange(). bool RooAbsRealLValue::hasRange ; (; const char * ; name); const. inlineoverridevirtual . Check if variable has a binning with given name. ; Reimplemented from RooAbsArg.; Definition at line 97 o",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:83442,Modifiability,variab,variable,83442,"finition at line 84 of file RooAbsRealLValue.h. ◆ getMin(). virtual double RooAbsRealLValue::getMin ; (; const char * ; name = nullptr); const. inlinevirtual . Get minimum of currently defined range. ; Parameters. nameOptionally, request minimum of range with given name. . Definition at line 81 of file RooAbsRealLValue.h. ◆ getRange(). std::pair< double, double > RooAbsRealLValue::getRange ; (; const char * ; name = nullptr); const. inline . Get low and high bound of the variable. ; Parameters. nameOptional range name. If not given, the default range will be used. . ReturnsA pair with [lowerBound, upperBound] ; Definition at line 88 of file RooAbsRealLValue.h. ◆ hasBinning(). virtual bool RooAbsRealLValue::hasBinning ; (; const char * ; name); const. pure virtual . Check if binning with given name has been defined. ; Implemented in RooErrorVar, RooLinearVar, and RooRealVar. ◆ hasMax(). bool RooAbsRealLValue::hasMax ; (; const char * ; name = nullptr); const. inline . Check if variable has an upper bound. ; Definition at line 95 of file RooAbsRealLValue.h. ◆ hasMin(). bool RooAbsRealLValue::hasMin ; (; const char * ; name = nullptr); const. inline . Check if variable has a lower bound. ; Definition at line 93 of file RooAbsRealLValue.h. ◆ hasRange(). bool RooAbsRealLValue::hasRange ; (; const char * ; name); const. inlineoverridevirtual . Check if variable has a binning with given name. ; Reimplemented from RooAbsArg.; Definition at line 97 of file RooAbsRealLValue.h. ◆ inRange() [1/3]. bool RooAbsRealLValue::inRange ; (; const char * ; name); const. overridevirtual . Check if current value is inside range with given name. ; Multiple comma-separated ranges can be passed. In this case, it will be checked if the value is in any of these ranges.; Implements the following check to see if the value x is in the range [a, b]: check if [x - eps * x, x + eps * x] overlaps with [a, b], where the parameter eps is defined as: std::max(RooNumber::rangeEpsRel() * std::abs(x), RooN",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:83627,Modifiability,variab,variable,83627," defined range. ; Parameters. nameOptionally, request minimum of range with given name. . Definition at line 81 of file RooAbsRealLValue.h. ◆ getRange(). std::pair< double, double > RooAbsRealLValue::getRange ; (; const char * ; name = nullptr); const. inline . Get low and high bound of the variable. ; Parameters. nameOptional range name. If not given, the default range will be used. . ReturnsA pair with [lowerBound, upperBound] ; Definition at line 88 of file RooAbsRealLValue.h. ◆ hasBinning(). virtual bool RooAbsRealLValue::hasBinning ; (; const char * ; name); const. pure virtual . Check if binning with given name has been defined. ; Implemented in RooErrorVar, RooLinearVar, and RooRealVar. ◆ hasMax(). bool RooAbsRealLValue::hasMax ; (; const char * ; name = nullptr); const. inline . Check if variable has an upper bound. ; Definition at line 95 of file RooAbsRealLValue.h. ◆ hasMin(). bool RooAbsRealLValue::hasMin ; (; const char * ; name = nullptr); const. inline . Check if variable has a lower bound. ; Definition at line 93 of file RooAbsRealLValue.h. ◆ hasRange(). bool RooAbsRealLValue::hasRange ; (; const char * ; name); const. inlineoverridevirtual . Check if variable has a binning with given name. ; Reimplemented from RooAbsArg.; Definition at line 97 of file RooAbsRealLValue.h. ◆ inRange() [1/3]. bool RooAbsRealLValue::inRange ; (; const char * ; name); const. overridevirtual . Check if current value is inside range with given name. ; Multiple comma-separated ranges can be passed. In this case, it will be checked if the value is in any of these ranges.; Implements the following check to see if the value x is in the range [a, b]: check if [x - eps * x, x + eps * x] overlaps with [a, b], where the parameter eps is defined as: std::max(RooNumber::rangeEpsRel() * std::abs(x), RooNumber::rangeEpsAbs()); RooNumber::rangeEpsRelstatic double rangeEpsRel()Get the relative epsilon that is used by range checks in RooFit, e.g., in RooAbsRealLValue::inRange()...Definitio",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:83820,Modifiability,variab,variable,83820,":getRange ; (; const char * ; name = nullptr); const. inline . Get low and high bound of the variable. ; Parameters. nameOptional range name. If not given, the default range will be used. . ReturnsA pair with [lowerBound, upperBound] ; Definition at line 88 of file RooAbsRealLValue.h. ◆ hasBinning(). virtual bool RooAbsRealLValue::hasBinning ; (; const char * ; name); const. pure virtual . Check if binning with given name has been defined. ; Implemented in RooErrorVar, RooLinearVar, and RooRealVar. ◆ hasMax(). bool RooAbsRealLValue::hasMax ; (; const char * ; name = nullptr); const. inline . Check if variable has an upper bound. ; Definition at line 95 of file RooAbsRealLValue.h. ◆ hasMin(). bool RooAbsRealLValue::hasMin ; (; const char * ; name = nullptr); const. inline . Check if variable has a lower bound. ; Definition at line 93 of file RooAbsRealLValue.h. ◆ hasRange(). bool RooAbsRealLValue::hasRange ; (; const char * ; name); const. inlineoverridevirtual . Check if variable has a binning with given name. ; Reimplemented from RooAbsArg.; Definition at line 97 of file RooAbsRealLValue.h. ◆ inRange() [1/3]. bool RooAbsRealLValue::inRange ; (; const char * ; name); const. overridevirtual . Check if current value is inside range with given name. ; Multiple comma-separated ranges can be passed. In this case, it will be checked if the value is in any of these ranges.; Implements the following check to see if the value x is in the range [a, b]: check if [x - eps * x, x + eps * x] overlaps with [a, b], where the parameter eps is defined as: std::max(RooNumber::rangeEpsRel() * std::abs(x), RooNumber::rangeEpsAbs()); RooNumber::rangeEpsRelstatic double rangeEpsRel()Get the relative epsilon that is used by range checks in RooFit, e.g., in RooAbsRealLValue::inRange()...Definition RooNumber.h:34; RooNumber::rangeEpsAbsstatic double rangeEpsAbs()Get the absolute epsilon that is used by range checks in RooFit, e.g., in RooAbsRealLValue::inRange()...Definition RooNumber.h:41; x",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:23999,Performance,cache,cache,23999,"{}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const;  Plot (project) PDF on specified frame. ;  ; virtual RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const;  Internal back-end function of plotOn() with named arguments. ;  ; virtual std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:40079,Performance,optimiz,optimizeCacheMode,40079,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void se",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:40139,Performance,cache,cache,40139,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void se",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:40150,Performance,optimiz,optimization,40150,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void se",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:40219,Performance,optimiz,optimizeCacheMode,40219," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAnd",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:40331,Performance,cache,cache,40331," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAnd",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:40342,Performance,optimiz,optimization,40342," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAnd",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:40463,Performance,cache,cacheList,40463,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructo",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:40570,Performance,cache,cached,40570,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructo",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:40695,Performance,cache,cacheList,40695,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void set",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:40833,Performance,cache,cached,40833,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void set",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:41027,Performance,perform,perform,41027,"eChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirt",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:41049,Performance,optimiz,optimization,41049,"eChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirt",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:41348,Performance,cache,cache,41348,"acheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache ()",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:41436,Performance,cache,cache,41436,"rgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:41571,Performance,cache,caches,41571,"list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependen",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:41647,Performance,cache,cache,41647,". ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverl",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:42123,Performance,cache,cacheUniqueSuffix,42123,"ool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ;",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:42303,Performance,cache,cache,42303,"ool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ;",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:55993,Performance,cache,cache,55993,"ag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  ;  Static Public Member Functions inherited from RooAbsLValue; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy cache of another RooAbsArg to our cache. ;  ; bool fitRangeOKForPlotting () const;  Check if fit range is usable as plot range, i.e. ;  ; virtual void setValFast (double value);  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &a",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:56027,Performance,cache,cache,56027,"ag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  ;  Static Public Member Functions inherited from RooAbsLValue; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy cache of another RooAbsArg to our cache. ;  ; bool fitRangeOKForPlotting () const;  Check if fit range is usable as plot range, i.e. ;  ; virtual void setValFast (double value);  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &a",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:59544,Performance,perform,perform,59544,"bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; virtual RooPlot * plotOn (RooPlot *frame, PlotOpt o) const;  Plotting engine function for internal use. ;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:61591,Performance,optimiz,optimizeDirtyHook,61591,";  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoErr",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:62079,Performance,cache,cached,62079,"id graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:66942,Performance,cache,cache,66942," _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAbsRealLValue.h>. Inheritance diagram for RooAbsRealLValue:. This browser is no",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:67710,Performance,cache,cache,67710,"d name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAbsRealLValue.h>. Inheritance diagram for RooAbsRealLValue:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAbsRealLValue() [1/3]. RooAbsRealLValue::RooAbsRealLValue ; (; ). inline . Definition at line 34 of file RooAbsRealLValue.h. ◆ RooAbsRealLValue() [2/3]. RooAbsRealLValue::RooAbsRealLValue ; (; const char * ; name, . const char * ; title, . const char * ; unit = """" . ). Constructor. ; Definition at line 65 of file RooAbsRealLValue.cxx. ◆ RooAbsRealLValue() [3/3]. RooAbsRealLValue::RooAbsRealLValue ; (; const RooAbsRealLValue & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 75 of file RooAbsRealLValue.cxx. Member Function Documentation. ◆ Class(). static ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:69229,Performance,cache,cache,69229,"ealLValue ; (; const char * ; name, . const char * ; title, . const char * ; unit = """" . ). Constructor. ; Definition at line 65 of file RooAbsRealLValue.cxx. ◆ RooAbsRealLValue() [3/3]. RooAbsRealLValue::RooAbsRealLValue ; (; const RooAbsRealLValue & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 75 of file RooAbsRealLValue.cxx. Member Function Documentation. ◆ Class(). static TClass * RooAbsRealLValue::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsRealLValue::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsRealLValue::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 164 of file RooAbsRealLValue.h. ◆ copyCache(). void RooAbsRealLValue::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy cache of another RooAbsArg to our cache. ; Reimplemented from RooAbsReal.; Reimplemented in RooRealVar.; Definition at line 394 of file RooAbsRealLValue.cxx. ◆ createHistogram() [1/11]. TH1F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const char * ; yAxisLabel . ); const. Create an empty 1D-histogram with appropriate scale and labels for this variable. ; This method uses the default plot range which can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which can be changed with setPlotBins(). The caller takes ownership of the returned object and is responsible for deleting it. ; Definition at line 687 of file RooAbsRealLValue.cxx. ◆ createHistogram() [2/11]. TH1F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const char * ; yAxisLabel, . const RooAbsBinning & ; bins . ); const. Create an empty 1D-histogram with appropriate scale and labels for this variable. ; Definition at line 727 of file RooAbsRealLValue.cxx. ◆ createHistogram() [3/1",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:69263,Performance,cache,cache,69263,"ealLValue ; (; const char * ; name, . const char * ; title, . const char * ; unit = """" . ). Constructor. ; Definition at line 65 of file RooAbsRealLValue.cxx. ◆ RooAbsRealLValue() [3/3]. RooAbsRealLValue::RooAbsRealLValue ; (; const RooAbsRealLValue & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 75 of file RooAbsRealLValue.cxx. Member Function Documentation. ◆ Class(). static TClass * RooAbsRealLValue::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsRealLValue::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsRealLValue::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 164 of file RooAbsRealLValue.h. ◆ copyCache(). void RooAbsRealLValue::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy cache of another RooAbsArg to our cache. ; Reimplemented from RooAbsReal.; Reimplemented in RooRealVar.; Definition at line 394 of file RooAbsRealLValue.cxx. ◆ createHistogram() [1/11]. TH1F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const char * ; yAxisLabel . ); const. Create an empty 1D-histogram with appropriate scale and labels for this variable. ; This method uses the default plot range which can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which can be changed with setPlotBins(). The caller takes ownership of the returned object and is responsible for deleting it. ; Definition at line 687 of file RooAbsRealLValue.cxx. ◆ createHistogram() [2/11]. TH1F * RooAbsRealLValue::createHistogram ; (; const char * ; name, . const char * ; yAxisLabel, . const RooAbsBinning & ; bins . ); const. Create an empty 1D-histogram with appropriate scale and labels for this variable. ; Definition at line 727 of file RooAbsRealLValue.cxx. ◆ createHistogram() [3/1",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:75526,Performance,perform,performed,75526,"sible for deleting it. ; Definition at line 923 of file RooAbsRealLValue.cxx. ◆ createHistogram() [11/11]. TH1 * RooAbsRealLValue::createHistogram ; (; const char * ; name, . RooArgList & ; vars, . const char * ; tAxisLabel, . double * ; xlo, . double * ; xhi, . Int_t * ; nBins . ). static . Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ; The dimensions of the arrays xlo,xhi, nBins should match the number of objects in vars. ; Definition at line 897 of file RooAbsRealLValue.cxx. ◆ createIntegral(). RooFit::OwningPtr< RooAbsReal > RooAbsRealLValue::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. overridevirtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 1056 of file RooAbsRealLValue.cxx. ◆ DeclFileName(). static const char * RooAbsRealLValue::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 164 of file RooAbsRealLValue.h. ◆ fitRangeOKForPlotting(). bool",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:75892,Performance,perform,performed,75892,"nd binning specified in xlo,xhi and nBins. ; The dimensions of the arrays xlo,xhi, nBins should match the number of objects in vars. ; Definition at line 897 of file RooAbsRealLValue.cxx. ◆ createIntegral(). RooFit::OwningPtr< RooAbsReal > RooAbsRealLValue::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. overridevirtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 1056 of file RooAbsRealLValue.cxx. ◆ DeclFileName(). static const char * RooAbsRealLValue::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 164 of file RooAbsRealLValue.h. ◆ fitRangeOKForPlotting(). bool RooAbsRealLValue::fitRangeOKForPlotting ; (; ); const. protected . Check if fit range is usable as plot range, i.e. ; it is neither open ended, nor empty ; Definition at line 493 of file RooAbsRealLValue.cxx. ◆ frame() [1/6]. RooPlot * RooAbsRealLValue::frame ; (; ); const. Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ; Use x.frame() ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:75940,Performance,perform,performed,75940,"nd binning specified in xlo,xhi and nBins. ; The dimensions of the arrays xlo,xhi, nBins should match the number of objects in vars. ; Definition at line 897 of file RooAbsRealLValue.cxx. ◆ createIntegral(). RooFit::OwningPtr< RooAbsReal > RooAbsRealLValue::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. overridevirtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 1056 of file RooAbsRealLValue.cxx. ◆ DeclFileName(). static const char * RooAbsRealLValue::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 164 of file RooAbsRealLValue.h. ◆ fitRangeOKForPlotting(). bool RooAbsRealLValue::fitRangeOKForPlotting ; (; ); const. protected . Check if fit range is usable as plot range, i.e. ; it is neither open ended, nor empty ; Definition at line 493 of file RooAbsRealLValue.cxx. ◆ frame() [1/6]. RooPlot * RooAbsRealLValue::frame ; (; ); const. Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ; Use x.frame() ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:76131,Performance,perform,performed,76131," RooAbsReal > RooAbsRealLValue::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. overridevirtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 1056 of file RooAbsRealLValue.cxx. ◆ DeclFileName(). static const char * RooAbsRealLValue::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 164 of file RooAbsRealLValue.h. ◆ fitRangeOKForPlotting(). bool RooAbsRealLValue::fitRangeOKForPlotting ; (; ); const. protected . Check if fit range is usable as plot range, i.e. ; it is neither open ended, nor empty ; Definition at line 493 of file RooAbsRealLValue.cxx. ◆ frame() [1/6]. RooPlot * RooAbsRealLValue::frame ; (; ); const. Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ; Use x.frame() as the first argument to a y.plotOn(...) method, for example. The caller is responsible for deleting the returned object.; The current fit range may not be open ended or empty. ; Definition at line 374 of file RooAbsRealLValue",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:59560,Safety,sanity check,sanity check,59560,"bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; virtual RooPlot * plotOn (RooPlot *frame, PlotOpt o) const;  Plotting engine function for internal use. ;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:59592,Safety,safe,safe,59592,"bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; virtual RooPlot * plotOn (RooPlot *frame, PlotOpt o) const;  Plotting engine function for internal use. ;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:43825,Security,hash,hash,43825,"ED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:21746,Testability,log,logEvalError,21746,"oArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override;  Equality operator when comparing to ano",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:32601,Testability,test,testArg,32601,"z .dot file visualizing the expression tree headed by this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:32725,Testability,test,testArg,32725,"z .dot file visualizing the expression tree headed by this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:32807,Testability,test,testArg,32807,"hViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:32931,Testability,test,testArg,32931,"hViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:33035,Testability,test,testArg,33035,"ce &ws);  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::ostream &os, const char *indent="""", const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; virtual void printCompactTreeHook (std::ostream &os",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:40597,Testability,test,test,40597,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructo",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:40860,Testability,test,test,40860,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void set",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:53402,Testability,log,logging,53402,"st &vars, const char *tAxisLabel, const RooAbsBinning **bins);  Create a 1,2, or 3D-histogram with appropriate scale and labels. ;  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, double *xlo, double *xhi, Int_t *nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static vo",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:53463,Testability,log,logEvalError,53463,"nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:53624,Testability,log,logging,53624,"nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:53684,Testability,log,logging,53684,"nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:53796,Testability,log,logged,53796,"Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:53959,Testability,log,logged,53959,"();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get st",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:54090,Testability,log,logging,54090,"  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bo",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:64669,Testability,test,testArg,64669,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from tree",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:64716,Testability,test,testArg,64716,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from tree",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:64746,Testability,test,testArg,64746,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from tree",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:64797,Testability,test,testArg,64797,"enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from tree",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:35139,Usability,clear,clear,35139,"ert additional information when printed in the context of a tree structure. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; virtual void printMetaArgs (std::ostream &) const;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashCon",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:35822,Usability,clear,clear,35822,"bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashContext &ctx) const;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooWorkspace * workspace () const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not f",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:36238,Usability,simpl,simple,36238," ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashContext &ctx) const;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooWorkspace * workspace () const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (c",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:52943,Usability,clear,clearEvalErrorLog,52943,"Virtual_b);  ;  Public Member Functions inherited from RooAbsLValue; virtual ~RooAbsLValue ()=default;  ; virtual std::list< std::string > getBinningNames () const =0;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, const RooAbsBinning **bins);  Create a 1,2, or 3D-histogram with appropriate scale and labels. ;  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, double *xlo, double *xhi, Int_t *nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static voi",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:53836,Usability,clear,clearing,53836,"Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:56099,Usability,usab,usable,56099," tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  ;  Static Public Member Functions inherited from RooAbsLValue; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy cache of another RooAbsArg to our cache. ;  ; bool fitRangeOKForPlotting () const;  Check if fit range is usable as plot range, i.e. ;  ; virtual void setValFast (double value);  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recur",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:60807,Usability,clear,clearShapeDirty,60807,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:60841,Usability,clear,clearValueAndShapeDirty,60841,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:60883,Usability,clear,clearValueDirty,60883,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsRealLValue.html:76616,Usability,usab,usable,76616,"cally constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 1056 of file RooAbsRealLValue.cxx. ◆ DeclFileName(). static const char * RooAbsRealLValue::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 164 of file RooAbsRealLValue.h. ◆ fitRangeOKForPlotting(). bool RooAbsRealLValue::fitRangeOKForPlotting ; (; ); const. protected . Check if fit range is usable as plot range, i.e. ; it is neither open ended, nor empty ; Definition at line 493 of file RooAbsRealLValue.cxx. ◆ frame() [1/6]. RooPlot * RooAbsRealLValue::frame ; (; ); const. Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ; Use x.frame() as the first argument to a y.plotOn(...) method, for example. The caller is responsible for deleting the returned object.; The current fit range may not be open ended or empty. ; Definition at line 374 of file RooAbsRealLValue.cxx. ◆ frame() [2/6]. RooAbsRealLValue::frame ; (; const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ; Use x.frame() as the first argument to a ",MatchSource.WIKI,doc/master/classRooAbsRealLValue.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html
https://root.cern/doc/master/classRooAbsStudy.html:4552,Availability,error,error,4552,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:4641,Availability,error,error,4641,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:4796,Availability,error,error,4796,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:5093,Availability,error,error,5093,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:9177,Availability,error,error,9177,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:1090,Deployability,release,releaseDetailData,1090,"rence Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; Friends |; List of all members ; RooAbsStudy Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for RooStudyManager modules. ; Definition at line 33 of file RooAbsStudy.h. Public Member Functions;  RooAbsStudy ()=default;  ;  RooAbsStudy (const char *name, const char *title);  Constructor. ;  ;  RooAbsStudy (const RooAbsStudy &other);  Copy constructor. ;  ;  ~RooAbsStudy () override;  Destructor. ;  ; virtual bool attach (RooWorkspace &);  ; virtual RooAbsStudy * clone (const char *newname="""") const =0;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; RooLinkedList * detailedData ();  ; virtual void dump ();  ; virtual bool execute ();  ; virtual bool finalize ();  ; virtual bool initialize ();  ; TClass * IsA () const override;  ; void releaseDetailData ();  ; void storeDetailedOutput (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; RooDataSet * summaryData ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:16110,Deployability,release,releaseDetailData,16110,"nted in RooGenFitStudy, and RooStats::ToyMCStudy.; Definition at line 45 of file RooAbsStudy.h. ◆ finalize(). virtual bool RooAbsStudy::finalize ; (; void ; ). inlinevirtual . Reimplemented in RooGenFitStudy, and RooStats::ToyMCStudy.; Definition at line 46 of file RooAbsStudy.h. ◆ initialize(). virtual bool RooAbsStudy::initialize ; (; void ; ). inlinevirtual . Reimplemented in RooGenFitStudy, and RooStats::ToyMCStudy.; Definition at line 44 of file RooAbsStudy.h. ◆ IsA(). TClass * RooAbsStudy::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooGenFitStudy, and RooStats::ToyMCStudy.; Definition at line 72 of file RooAbsStudy.h. ◆ registerSummaryOutput(). void RooAbsStudy::registerSummaryOutput ; (; const RooArgSet & ; allVars, . const RooArgSet & ; varsWithError = RooArgSet(), . const RooArgSet & ; varsWithAsymError = RooArgSet() . ). protected . Definition at line 71 of file RooAbsStudy.cxx. ◆ releaseDetailData(). void RooAbsStudy::releaseDetailData ; (; ). inline . Definition at line 52 of file RooAbsStudy.h. ◆ storeDetailedOutput() [1/2]. void RooAbsStudy::storeDetailedOutput ; (; bool ; flag). inline . Definition at line 47 of file RooAbsStudy.h. ◆ storeDetailedOutput() [2/2]. void RooAbsStudy::storeDetailedOutput ; (; std::unique_ptr< TNamed > ; object). protected . Definition at line 99 of file RooAbsStudy.cxx. ◆ storeSummaryOutput(). void RooAbsStudy::storeSummaryOutput ; (; const RooArgSet & ; vars). protected . Definition at line 86 of file RooAbsStudy.cxx. ◆ Streamer(). void RooAbsStudy::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooGenFitStudy, and RooStats::ToyMCStudy. ◆ StreamerNVirtual(). void RooAbsStudy::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 72 of file RooAbsStudy.h. ◆ summaryData(). RooDataSet * RooAbsStudy::summaryData ; (; ",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:16149,Deployability,release,releaseDetailData,16149,"ts::ToyMCStudy.; Definition at line 45 of file RooAbsStudy.h. ◆ finalize(). virtual bool RooAbsStudy::finalize ; (; void ; ). inlinevirtual . Reimplemented in RooGenFitStudy, and RooStats::ToyMCStudy.; Definition at line 46 of file RooAbsStudy.h. ◆ initialize(). virtual bool RooAbsStudy::initialize ; (; void ; ). inlinevirtual . Reimplemented in RooGenFitStudy, and RooStats::ToyMCStudy.; Definition at line 44 of file RooAbsStudy.h. ◆ IsA(). TClass * RooAbsStudy::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooGenFitStudy, and RooStats::ToyMCStudy.; Definition at line 72 of file RooAbsStudy.h. ◆ registerSummaryOutput(). void RooAbsStudy::registerSummaryOutput ; (; const RooArgSet & ; allVars, . const RooArgSet & ; varsWithError = RooArgSet(), . const RooArgSet & ; varsWithAsymError = RooArgSet() . ). protected . Definition at line 71 of file RooAbsStudy.cxx. ◆ releaseDetailData(). void RooAbsStudy::releaseDetailData ; (; ). inline . Definition at line 52 of file RooAbsStudy.h. ◆ storeDetailedOutput() [1/2]. void RooAbsStudy::storeDetailedOutput ; (; bool ; flag). inline . Definition at line 47 of file RooAbsStudy.h. ◆ storeDetailedOutput() [2/2]. void RooAbsStudy::storeDetailedOutput ; (; std::unique_ptr< TNamed > ; object). protected . Definition at line 99 of file RooAbsStudy.cxx. ◆ storeSummaryOutput(). void RooAbsStudy::storeSummaryOutput ; (; const RooArgSet & ; vars). protected . Definition at line 86 of file RooAbsStudy.cxx. ◆ Streamer(). void RooAbsStudy::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooGenFitStudy, and RooStats::ToyMCStudy. ◆ StreamerNVirtual(). void RooAbsStudy::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 72 of file RooAbsStudy.h. ◆ summaryData(). RooDataSet * RooAbsStudy::summaryData ; (; ). inline . Definition at line 49",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:4558,Integrability,message,message,4558,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:5099,Integrability,message,message,5099,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:6089,Integrability,message,message,6089,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:9183,Integrability,message,message,9183,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:9556,Integrability,message,message,9556," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  G",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:1355,Modifiability,inherit,inherited,1355," class for RooStudyManager modules. ; Definition at line 33 of file RooAbsStudy.h. Public Member Functions;  RooAbsStudy ()=default;  ;  RooAbsStudy (const char *name, const char *title);  Constructor. ;  ;  RooAbsStudy (const RooAbsStudy &other);  Copy constructor. ;  ;  ~RooAbsStudy () override;  Destructor. ;  ; virtual bool attach (RooWorkspace &);  ; virtual RooAbsStudy * clone (const char *newname="""") const =0;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; RooLinkedList * detailedData ();  ; virtual void dump ();  ; virtual bool execute ();  ; virtual bool finalize ();  ; virtual bool initialize ();  ; TClass * IsA () const override;  ; void releaseDetailData ();  ; void storeDetailedOutput (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; RooDataSet * summaryData ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""")",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:3095,Modifiability,inherit,inherited,3095,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:4188,Modifiability,inherit,inheritance,4188,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:6187,Modifiability,inherit,inherits,6187,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:6304,Modifiability,inherit,inherits,6304,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:10057,Modifiability,inherit,inherited,10057,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void aggregateSummaryOutput (TList *chunkList);  ; void registerSummaryOutput (const RooArgSet &allVars, const RooArgSet &varsWithError=RooArgSet(), const RooArgSet &varsWithAsymError=RooArgSet());  ; void storeDetailedOutput (std::unique_ptr< TNamed > object);  ; void storeSummaryOutput (const RooArgSet &vars);  ;  Protected Member Functions inherited from TObject; virtual void DoError (i",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:10267,Modifiability,inherit,inherited,10267,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void aggregateSummaryOutput (TList *chunkList);  ; void registerSummaryOutput (const RooArgSet &allVars, const RooArgSet &varsWithError=RooArgSet(), const RooArgSet &varsWithAsymError=RooArgSet());  ; void storeDetailedOutput (std::unique_ptr< TNamed > object);  ; void storeSummaryOutput (const RooArgSet &vars);  ;  Protected Member Functions inherited from TObject; virtual void DoError (i",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:11126,Modifiability,inherit,inherited,11126,"e ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void aggregateSummaryOutput (TList *chunkList);  ; void registerSummaryOutput (const RooArgSet &allVars, const RooArgSet &varsWithError=RooArgSet(), const RooArgSet &varsWithAsymError=RooArgSet());  ; void storeDetailedOutput (std::unique_ptr< TNamed > object);  ; void storeSummaryOutput (const RooArgSet &vars);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Attributes; RooLinkedList * _detailData = nullptr;  ! ;  ; bool _ownDetailData = true;  ; bool _storeDetails = false;  ; RooDataSet * _summaryData = nullptr;  ! ;  . Friends; class RooStudyManager;  ; class RooStudyPackage;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:11588,Modifiability,inherit,inherited,11588," ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void aggregateSummaryOutput (TList *chunkList);  ; void registerSummaryOutput (const RooArgSet &allVars, const RooArgSet &varsWithError=RooArgSet(), const RooArgSet &varsWithAsymError=RooArgSet());  ; void storeDetailedOutput (std::unique_ptr< TNamed > object);  ; void storeSummaryOutput (const RooArgSet &vars);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Attributes; RooLinkedList * _detailData = nullptr;  ! ;  ; bool _ownDetailData = true;  ; bool _storeDetails = false;  ; RooDataSet * _summaryData = nullptr;  ! ;  . Friends; class RooStudyManager;  ; class RooStudyPackage;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooAbsStudy.h>. Inheritance diagram for RooAbsStudy:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAbsStudy() [1/3]. RooAbsStudy::RooAbsStudy ; (; ). default . ◆ R",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:12229,Modifiability,inherit,inherited,12229,"keZombie ();  . Private Attributes; RooLinkedList * _detailData = nullptr;  ! ;  ; bool _ownDetailData = true;  ; bool _storeDetails = false;  ; RooDataSet * _summaryData = nullptr;  ! ;  . Friends; class RooStudyManager;  ; class RooStudyPackage;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooAbsStudy.h>. Inheritance diagram for RooAbsStudy:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAbsStudy() [1/3]. RooAbsStudy::RooAbsStudy ; (; ). default . ◆ RooAbsStudy() [2/3]. RooAbsStudy::RooAbsStudy ; (; const char * ; name, . const char * ; title . ). Constructor. ; Definition at line 41 of file RooAbsStudy.cxx. ◆ RooAbsStudy() [3/3]. RooAbsStudy::RooAbsStudy ; (; const RooAbsStudy & ; other). Copy constructor. ; Definition at line 46 of file RooAbsStudy.cxx. ◆ ~RooAbsStudy(). RooAbsStudy::~RooAbsStudy ; (; ). override . Destructor. ; Definition at line 57 of file RooAbsStudy.cxx. Member Function Documentation. ◆ aggregateSummaryOutput(). void RooAbsStudy::aggregateSummaryOutput ; (; TList * ; chunkList). protected . Definition at line 118 of file RooAbsStudy.cxx. ◆ attach(). virtual ",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:12322,Modifiability,inherit,inherited,12322,"keZombie ();  . Private Attributes; RooLinkedList * _detailData = nullptr;  ! ;  ; bool _ownDetailData = true;  ; bool _storeDetails = false;  ; RooDataSet * _summaryData = nullptr;  ! ;  . Friends; class RooStudyManager;  ; class RooStudyPackage;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooAbsStudy.h>. Inheritance diagram for RooAbsStudy:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAbsStudy() [1/3]. RooAbsStudy::RooAbsStudy ; (; ). default . ◆ RooAbsStudy() [2/3]. RooAbsStudy::RooAbsStudy ; (; const char * ; name, . const char * ; title . ). Constructor. ; Definition at line 41 of file RooAbsStudy.cxx. ◆ RooAbsStudy() [3/3]. RooAbsStudy::RooAbsStudy ; (; const RooAbsStudy & ; other). Copy constructor. ; Definition at line 46 of file RooAbsStudy.cxx. ◆ ~RooAbsStudy(). RooAbsStudy::~RooAbsStudy ; (; ). override . Destructor. ; Definition at line 57 of file RooAbsStudy.cxx. Member Function Documentation. ◆ aggregateSummaryOutput(). void RooAbsStudy::aggregateSummaryOutput ; (; TList * ; chunkList). protected . Definition at line 118 of file RooAbsStudy.cxx. ◆ attach(). virtual ",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAbsStudy.html:2223,Security,hash,hash,2223,"class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; RooDataSet * summaryData ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classRooAbsStudy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html
https://root.cern/doc/master/classRooAddGenContext.html:6261,Availability,error,error,6261,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:6350,Availability,error,error,6350,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:6505,Availability,error,error,6505,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:6802,Availability,error,error,6802,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:10886,Availability,error,error,10886,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual void printAddress (std::ostream &os) const;  Print class name of object. ;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t c",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:14853,Deployability,update,updateThresholds,14853,"acking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions;  RooAddGenContext (const RooAddGenContext &other);  ; void generateEvent (RooArgSet &theEvent, Int_t remaining) override;  Randomly choose one of the component contexts to generate this event, with a probability proportional to its coefficient. ;  ; void initGenerator (const RooArgSet &theEvent) override;  One-time initialization of generator context. ;  ; void updateThresholds ();  Update the cumulative threshold table from the current coefficient values. ;  ;  Protected Member Functions inherited from RooAbsGenContext; virtual RooDataSet * createDataSet (const char *name, const char *title, const RooArgSet &obs);  Create an empty dataset to hold the events that will be generated. ;  ; void resampleData (double &ratio);  Rescale existing output buffer with given ratio. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< double > _coefThresh;  [_nComp] Array of coefficient thresholds ;  ; std::vector< std::unique_ptr< RooAbsGenContext > > _gcList;  List of component generator contexts. ;  ; bool _isModel;  Are we generating from a RooAddPdf or a RooAddModel. ;  ; Int_t _nComp;  Number of PDF components. ;  ; AddCacheElem * _pcache = nullptr;  ! RooAddPdf cache element ;  ; RooAbsPdf * _pdf",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:22337,Deployability,update,updateThresholds,22337,"emented from RooAbsGenContext.; Definition at line 67 of file RooAddGenContext.h. ◆ printMultiline(). void RooAddGenContext::printMultiline ; (; std::ostream & ; os, . Int_t ; content, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Print the details of the context. ; Reimplemented from RooAbsGenContext.; Definition at line 233 of file RooAddGenContext.cxx. ◆ setProtoDataOrder(). void RooAddGenContext::setProtoDataOrder ; (; Int_t * ; lut). overridevirtual . Forward the setProtoDataOrder call to the component generator contexts. ; Reimplemented from RooAbsGenContext.; Definition at line 220 of file RooAddGenContext.cxx. ◆ Streamer(). void RooAddGenContext::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsGenContext. ◆ StreamerNVirtual(). void RooAddGenContext::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 67 of file RooAddGenContext.h. ◆ updateThresholds(). void RooAddGenContext::updateThresholds ; (; ). protected . Update the cumulative threshold table from the current coefficient values. ; Definition at line 189 of file RooAddGenContext.cxx. Member Data Documentation. ◆ _coefThresh. std::vector<double> RooAddGenContext::_coefThresh. protected . [_nComp] Array of coefficient thresholds ; Definition at line 63 of file RooAddGenContext.h. ◆ _gcList. std::vector<std::unique_ptr<RooAbsGenContext> > RooAddGenContext::_gcList. protected . List of component generator contexts. ; Definition at line 61 of file RooAddGenContext.h. ◆ _isModel. bool RooAddGenContext::_isModel. protected . Are we generating from a RooAddPdf or a RooAddModel. ; Definition at line 64 of file RooAddGenContext.h. ◆ _nComp. Int_t RooAddGenContext::_nComp. protected . Number of PDF components. ; Definition at line 62 of file RooAddGenContext.h. ◆ _pcache. AddCacheElem* RooAddGenContext::_pcache = nullptr. protected . ! RooAddPdf cache element ; Definition at li",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:22380,Deployability,update,updateThresholds,22380,"inition at line 67 of file RooAddGenContext.h. ◆ printMultiline(). void RooAddGenContext::printMultiline ; (; std::ostream & ; os, . Int_t ; content, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Print the details of the context. ; Reimplemented from RooAbsGenContext.; Definition at line 233 of file RooAddGenContext.cxx. ◆ setProtoDataOrder(). void RooAddGenContext::setProtoDataOrder ; (; Int_t * ; lut). overridevirtual . Forward the setProtoDataOrder call to the component generator contexts. ; Reimplemented from RooAbsGenContext.; Definition at line 220 of file RooAddGenContext.cxx. ◆ Streamer(). void RooAddGenContext::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsGenContext. ◆ StreamerNVirtual(). void RooAddGenContext::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 67 of file RooAddGenContext.h. ◆ updateThresholds(). void RooAddGenContext::updateThresholds ; (; ). protected . Update the cumulative threshold table from the current coefficient values. ; Definition at line 189 of file RooAddGenContext.cxx. Member Data Documentation. ◆ _coefThresh. std::vector<double> RooAddGenContext::_coefThresh. protected . [_nComp] Array of coefficient thresholds ; Definition at line 63 of file RooAddGenContext.h. ◆ _gcList. std::vector<std::unique_ptr<RooAbsGenContext> > RooAddGenContext::_gcList. protected . List of component generator contexts. ; Definition at line 61 of file RooAddGenContext.h. ◆ _isModel. bool RooAddGenContext::_isModel. protected . Are we generating from a RooAddPdf or a RooAddModel. ; Definition at line 64 of file RooAddGenContext.h. ◆ _nComp. Int_t RooAddGenContext::_nComp. protected . Number of PDF components. ; Definition at line 62 of file RooAddGenContext.h. ◆ _pcache. AddCacheElem* RooAddGenContext::_pcache = nullptr. protected . ! RooAddPdf cache element ; Definition at line 65 of file RooAddGenContext.h. ◆",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:6267,Integrability,message,message,6267,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:6808,Integrability,message,message,6808,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:7798,Integrability,message,message,7798,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:10892,Integrability,message,message,10892,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual void printAddress (std::ostream &os) const;  Print class name of object. ;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t c",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:11265,Integrability,message,message,11265," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual void printAddress (std::ostream &os) const;  Print class name of object. ;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; virtual void printTree (std::ostream &os, TString indent="""") const;  Interface for tree structure printing of object. ;  ; ",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:1181,Modifiability,variab,variables,1181,"mber Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; RooAddGenContext Class ReferenceRooFit » RooFit Core. ; Efficient implementation of the generator context specific for RooAddPdf PDFs. ; The strategy of RooAddGenContext is to defer generation of each component to a dedicated generator context for that component and to randomly choose one of those context to generate an event, with a probability proportional to its associated coefficient. ; Definition at line 32 of file RooAddGenContext.h. Public Member Functions;  RooAddGenContext (const RooAddModel &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ;  RooAddGenContext (const RooAddPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; void attach (const RooArgSet &params) override;  Attach given set of variables to internal p.d.f. clone. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print the details of the context. ;  ; void setProtoDataOrder (Int_t *lut) override;  Forward the setProtoDataOrder call to the component generator contexts. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsGenContext;  RooAbsGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents when printing. ;  ; StyleOption defaultPrintStyle (Option_t *opt) const override;  Define default print style. ;  ; virtual RooDataSet * generate (double nEvents=0",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:1697,Modifiability,inherit,inherited,1697," RooAddGenContext (const RooAddModel &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ;  RooAddGenContext (const RooAddPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; void attach (const RooArgSet &params) override;  Attach given set of variables to internal p.d.f. clone. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print the details of the context. ;  ; void setProtoDataOrder (Int_t *lut) override;  Forward the setProtoDataOrder call to the component generator contexts. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsGenContext;  RooAbsGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents when printing. ;  ; StyleOption defaultPrintStyle (Option_t *opt) const override;  Define default print style. ;  ; virtual RooDataSet * generate (double nEvents=0, bool skipInit=false, bool extendedMode=false);  Generate the specified number of events with nEvents>0 and and return a dataset containing the generated events. ;  ; bool isValid () const;  ; bool isVerbose () const;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printArgs (std::ostream &os) const override;  Print arguments of context, i.e. the observables being generated in this context. ;  ; void printClassName (std::ostream &os) const override;  Print class name of context. ;  ; void printName (st",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:2184,Modifiability,extend,extendedMode,2184,"clone. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print the details of the context. ;  ; void setProtoDataOrder (Int_t *lut) override;  Forward the setProtoDataOrder call to the component generator contexts. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsGenContext;  RooAbsGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents when printing. ;  ; StyleOption defaultPrintStyle (Option_t *opt) const override;  Define default print style. ;  ; virtual RooDataSet * generate (double nEvents=0, bool skipInit=false, bool extendedMode=false);  Generate the specified number of events with nEvents>0 and and return a dataset containing the generated events. ;  ; bool isValid () const;  ; bool isVerbose () const;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printArgs (std::ostream &os) const override;  Print arguments of context, i.e. the observables being generated in this context. ;  ; void printClassName (std::ostream &os) const override;  Print class name of context. ;  ; void printName (std::ostream &os) const override;  Print name of context. ;  ; void printTitle (std::ostream &os) const override;  Print title of context. ;  ; virtual void setExpectedData (bool);  ; void setVerbose (bool verbose=true);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNa",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:3064,Modifiability,inherit,inherited,3064,"Option_t *opt) const override;  Define default print style. ;  ; virtual RooDataSet * generate (double nEvents=0, bool skipInit=false, bool extendedMode=false);  Generate the specified number of events with nEvents>0 and and return a dataset containing the generated events. ;  ; bool isValid () const;  ; bool isVerbose () const;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printArgs (std::ostream &os) const override;  Print arguments of context, i.e. the observables being generated in this context. ;  ; void printClassName (std::ostream &os) const override;  Print class name of context. ;  ; void printName (std::ostream &os) const override;  Print name of context. ;  ; void printTitle (std::ostream &os) const override;  Print title of context. ;  ; virtual void setExpectedData (bool);  ; void setVerbose (bool verbose=true);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:4804,Modifiability,inherit,inherited,4804,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:5897,Modifiability,inherit,inheritance,5897,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:7896,Modifiability,inherit,inherits,7896,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:8013,Modifiability,inherit,inherits,8013,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:11572,Modifiability,inherit,inherited,11572,"g option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual void printAddress (std::ostream &os) const;  Print class name of object. ;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; virtual void printTree (std::ostream &os, TString indent="""") const;  Interface for tree structure printing of object. ;  ; virtual void printValue (std::ostream &os) const;  Interface to print value of object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; template<class Pdf_t > ; static std::unique_ptr< RooAbsGenContext > create ",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:13023,Modifiability,inherit,inherited,13023,"o print value of object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; template<class Pdf_t > ; static std::unique_ptr< RooAbsGenContext > create (const Pdf_t &pdf, const RooArgSet &vars, const RooDataSet *prototype, const RooArgSet *auxProto, bool verbose);  Returns a RooAddGenContext if possible, or, if the RooAddGenContext doesn't support this particular RooAddPdf or RooAddModel because it has negative coefficients, returns a generic RooGenContext. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsGenContext; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldL",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:13243,Modifiability,inherit,inherited,13243,"o print value of object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; template<class Pdf_t > ; static std::unique_ptr< RooAbsGenContext > create (const Pdf_t &pdf, const RooArgSet &vars, const RooDataSet *prototype, const RooArgSet *auxProto, bool verbose);  Returns a RooAddGenContext if possible, or, if the RooAddGenContext doesn't support this particular RooAddPdf or RooAddModel because it has negative coefficients, returns a generic RooGenContext. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsGenContext; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldL",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:13453,Modifiability,inherit,inherited,13453,"o print value of object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; template<class Pdf_t > ; static std::unique_ptr< RooAbsGenContext > create (const Pdf_t &pdf, const RooArgSet &vars, const RooDataSet *prototype, const RooArgSet *auxProto, bool verbose);  Returns a RooAddGenContext if possible, or, if the RooAddGenContext doesn't support this particular RooAddPdf or RooAddModel because it has negative coefficients, returns a generic RooGenContext. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsGenContext; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldL",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:13971,Modifiability,inherit,inherited,13971,"ame ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions;  RooAddGenContext (const RooAddGenContext &other);  ; void generateEvent (RooArgSet &theEvent, Int_t remaining) override;  Randomly choose one of the component contexts to generate this event, with a probability proportional to its coefficient. ;  ; void initGenerator (const RooArgSet &theEvent) override;  One-time initialization of generator context. ;  ; void updateThresholds ();  Update the cumulative threshold table from the current coefficient values. ;  ;  Protected Member Functions inherited from RooAbsGenContext; virtual RooDataSet * createDataSet (const char *name, const char *title, const RooArgSet &obs);  ",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:14983,Modifiability,inherit,inherited,14983," ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions;  RooAddGenContext (const RooAddGenContext &other);  ; void generateEvent (RooArgSet &theEvent, Int_t remaining) override;  Randomly choose one of the component contexts to generate this event, with a probability proportional to its coefficient. ;  ; void initGenerator (const RooArgSet &theEvent) override;  One-time initialization of generator context. ;  ; void updateThresholds ();  Update the cumulative threshold table from the current coefficient values. ;  ;  Protected Member Functions inherited from RooAbsGenContext; virtual RooDataSet * createDataSet (const char *name, const char *title, const RooArgSet &obs);  Create an empty dataset to hold the events that will be generated. ;  ; void resampleData (double &ratio);  Rescale existing output buffer with given ratio. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< double > _coefThresh;  [_nComp] Array of coefficient thresholds ;  ; std::vector< std::unique_ptr< RooAbsGenContext > > _gcList;  List of component generator contexts. ;  ; bool _isModel;  Are we generating from a RooAddPdf or a RooAddModel. ;  ; Int_t _nComp;  Number of PDF components. ;  ; AddCacheElem * _pcache = nullptr;  ! RooAddPdf cache element ;  ; RooAbsPdf * _pdf;  Pointer to cloned p.d.f. ;  ; std::unique_ptr< RooArgSet > _pdfSet;  Set owned all nodes of internal clone of p.d.f. ;  ; std::unique_ptr< RooArgSet > _vars;  ;  Pro",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:15303,Modifiability,inherit,inherited,15303,"reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions;  RooAddGenContext (const RooAddGenContext &other);  ; void generateEvent (RooArgSet &theEvent, Int_t remaining) override;  Randomly choose one of the component contexts to generate this event, with a probability proportional to its coefficient. ;  ; void initGenerator (const RooArgSet &theEvent) override;  One-time initialization of generator context. ;  ; void updateThresholds ();  Update the cumulative threshold table from the current coefficient values. ;  ;  Protected Member Functions inherited from RooAbsGenContext; virtual RooDataSet * createDataSet (const char *name, const char *title, const RooArgSet &obs);  Create an empty dataset to hold the events that will be generated. ;  ; void resampleData (double &ratio);  Rescale existing output buffer with given ratio. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< double > _coefThresh;  [_nComp] Array of coefficient thresholds ;  ; std::vector< std::unique_ptr< RooAbsGenContext > > _gcList;  List of component generator contexts. ;  ; bool _isModel;  Are we generating from a RooAddPdf or a RooAddModel. ;  ; Int_t _nComp;  Number of PDF components. ;  ; AddCacheElem * _pcache = nullptr;  ! RooAddPdf cache element ;  ; RooAbsPdf * _pdf;  Pointer to cloned p.d.f. ;  ; std::unique_ptr< RooArgSet > _pdfSet;  Set owned all nodes of internal clone of p.d.f. ;  ; std::unique_ptr< RooArgSet > _vars;  ;  Protected Attributes inherited from RooAbsGenContext; UInt_t _expectedEvents;  Number of expected events from extended p.d.f. ;  ; RooAbsPdf::ExtendMode _extendMode;  Extended mode capabilities of p.d.f. ;  ; RooDataSet * _genData = nullptr;  ! Data being generated ;  ; bool _isValid;  Is context in v",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:16082,Modifiability,inherit,inherited,16082,"ArgSet &obs);  Create an empty dataset to hold the events that will be generated. ;  ; void resampleData (double &ratio);  Rescale existing output buffer with given ratio. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< double > _coefThresh;  [_nComp] Array of coefficient thresholds ;  ; std::vector< std::unique_ptr< RooAbsGenContext > > _gcList;  List of component generator contexts. ;  ; bool _isModel;  Are we generating from a RooAddPdf or a RooAddModel. ;  ; Int_t _nComp;  Number of PDF components. ;  ; AddCacheElem * _pcache = nullptr;  ! RooAddPdf cache element ;  ; RooAbsPdf * _pdf;  Pointer to cloned p.d.f. ;  ; std::unique_ptr< RooArgSet > _pdfSet;  Set owned all nodes of internal clone of p.d.f. ;  ; std::unique_ptr< RooArgSet > _vars;  ;  Protected Attributes inherited from RooAbsGenContext; UInt_t _expectedEvents;  Number of expected events from extended p.d.f. ;  ; RooAbsPdf::ExtendMode _extendMode;  Extended mode capabilities of p.d.f. ;  ; RooDataSet * _genData = nullptr;  ! Data being generated ;  ; bool _isValid;  Is context in valid state? ;  ; Int_t _nextProtoIndex;  Next prototype event to load according to LUT. ;  ; TString _normRange;  Normalization range of pdf. ;  ; std::vector< Int_t > _protoOrder;  LUT with traversal order of prototype data. ;  ; const RooDataSet * _prototype;  Pointer to prototype dataset. ;  ; RooArgSet _protoVars;  Prototype observables. ;  ; RooArgSet _theEvent;  Pointer to observable event being generated. ;  ; bool _verbose;  Verbose messaging? ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   k",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:16171,Modifiability,extend,extended,16171,"ArgSet &obs);  Create an empty dataset to hold the events that will be generated. ;  ; void resampleData (double &ratio);  Rescale existing output buffer with given ratio. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< double > _coefThresh;  [_nComp] Array of coefficient thresholds ;  ; std::vector< std::unique_ptr< RooAbsGenContext > > _gcList;  List of component generator contexts. ;  ; bool _isModel;  Are we generating from a RooAddPdf or a RooAddModel. ;  ; Int_t _nComp;  Number of PDF components. ;  ; AddCacheElem * _pcache = nullptr;  ! RooAddPdf cache element ;  ; RooAbsPdf * _pdf;  Pointer to cloned p.d.f. ;  ; std::unique_ptr< RooArgSet > _pdfSet;  Set owned all nodes of internal clone of p.d.f. ;  ; std::unique_ptr< RooArgSet > _vars;  ;  Protected Attributes inherited from RooAbsGenContext; UInt_t _expectedEvents;  Number of expected events from extended p.d.f. ;  ; RooAbsPdf::ExtendMode _extendMode;  Extended mode capabilities of p.d.f. ;  ; RooDataSet * _genData = nullptr;  ! Data being generated ;  ; bool _isValid;  Is context in valid state? ;  ; Int_t _nextProtoIndex;  Next prototype event to load according to LUT. ;  ; TString _normRange;  Normalization range of pdf. ;  ; std::vector< Int_t > _protoOrder;  LUT with traversal order of prototype data. ;  ; const RooDataSet * _prototype;  Pointer to prototype dataset. ;  ; RooArgSet _protoVars;  Prototype observables. ;  ; RooArgSet _theEvent;  Pointer to observable event being generated. ;  ; bool _verbose;  Verbose messaging? ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   k",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:16846,Modifiability,inherit,inherited,16846,"llptr;  ! RooAddPdf cache element ;  ; RooAbsPdf * _pdf;  Pointer to cloned p.d.f. ;  ; std::unique_ptr< RooArgSet > _pdfSet;  Set owned all nodes of internal clone of p.d.f. ;  ; std::unique_ptr< RooArgSet > _vars;  ;  Protected Attributes inherited from RooAbsGenContext; UInt_t _expectedEvents;  Number of expected events from extended p.d.f. ;  ; RooAbsPdf::ExtendMode _extendMode;  Extended mode capabilities of p.d.f. ;  ; RooDataSet * _genData = nullptr;  ! Data being generated ;  ; bool _isValid;  Is context in valid state? ;  ; Int_t _nextProtoIndex;  Next prototype event to load according to LUT. ;  ; TString _normRange;  Normalization range of pdf. ;  ; std::vector< Int_t > _protoOrder;  LUT with traversal order of prototype data. ;  ; const RooDataSet * _prototype;  Pointer to prototype dataset. ;  ; RooArgSet _protoVars;  Prototype observables. ;  ; RooArgSet _theEvent;  Pointer to observable event being generated. ;  ; bool _verbose;  Verbose messaging? ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:16950,Modifiability,inherit,inherited,16950,".f. ;  ; std::unique_ptr< RooArgSet > _vars;  ;  Protected Attributes inherited from RooAbsGenContext; UInt_t _expectedEvents;  Number of expected events from extended p.d.f. ;  ; RooAbsPdf::ExtendMode _extendMode;  Extended mode capabilities of p.d.f. ;  ; RooDataSet * _genData = nullptr;  ! Data being generated ;  ; bool _isValid;  Is context in valid state? ;  ; Int_t _nextProtoIndex;  Next prototype event to load according to LUT. ;  ; TString _normRange;  Normalization range of pdf. ;  ; std::vector< Int_t > _protoOrder;  LUT with traversal order of prototype data. ;  ; const RooDataSet * _prototype;  Pointer to prototype dataset. ;  ; RooArgSet _protoVars;  Prototype observables. ;  ; RooArgSet _theEvent;  Pointer to observable event being generated. ;  ; bool _verbose;  Verbose messaging? ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inh",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:17588,Modifiability,inherit,inherited,17588,"et _protoVars;  Prototype observables. ;  ; RooArgSet _theEvent;  Pointer to observable event being generated. ;  ; bool _verbose;  Verbose messaging? ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAddGenContext.h>. Inheritance diagram for RooAddGenContext:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAddGenContext() [1/3]. RooAddGenContext::RooAddGenContext ; (; const RooAddPdf & ; model, . const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; _verbose = false . ). Constructor. ; Definition at line 47 of file RooAddGenContext.cxx. ◆ RooAddGenContext() [2/3]. RooAddGenContext::RooAddGenContext ; (; const RooAddMode",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:17910,Modifiability,inherit,inherited,17910,"um  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAddGenContext.h>. Inheritance diagram for RooAddGenContext:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAddGenContext() [1/3]. RooAddGenContext::RooAddGenContext ; (; const RooAddPdf & ; model, . const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; _verbose = false . ). Constructor. ; Definition at line 47 of file RooAddGenContext.cxx. ◆ RooAddGenContext() [2/3]. RooAddGenContext::RooAddGenContext ; (; const RooAddModel & ; model, . const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; _verbose = false . ). Constructor. ; Definition at line 97 of file RooAddGenContext.cxx. ◆ RooAddGenContext() [3/3]. RooAddGenContext::RooAddGenContext ; (; const RooAddGen",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:18010,Modifiability,inherit,inherited,18010,"um  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAddGenContext.h>. Inheritance diagram for RooAddGenContext:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAddGenContext() [1/3]. RooAddGenContext::RooAddGenContext ; (; const RooAddPdf & ; model, . const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; _verbose = false . ). Constructor. ; Definition at line 47 of file RooAddGenContext.cxx. ◆ RooAddGenContext() [2/3]. RooAddGenContext::RooAddGenContext ; (; const RooAddModel & ; model, . const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; _verbose = false . ). Constructor. ; Definition at line 97 of file RooAddGenContext.cxx. ◆ RooAddGenContext() [3/3]. RooAddGenContext::RooAddGenContext ; (; const RooAddGen",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:19154,Modifiability,variab,variables,19154,"is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAddGenContext() [1/3]. RooAddGenContext::RooAddGenContext ; (; const RooAddPdf & ; model, . const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; _verbose = false . ). Constructor. ; Definition at line 47 of file RooAddGenContext.cxx. ◆ RooAddGenContext() [2/3]. RooAddGenContext::RooAddGenContext ; (; const RooAddModel & ; model, . const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; _verbose = false . ). Constructor. ; Definition at line 97 of file RooAddGenContext.cxx. ◆ RooAddGenContext() [3/3]. RooAddGenContext::RooAddGenContext ; (; const RooAddGenContext & ; other). protected . Member Function Documentation. ◆ attach(). void RooAddGenContext::attach ; (; const RooArgSet & ; params). overridevirtual . Attach given set of variables to internal p.d.f. clone. ; Reimplemented from RooAbsGenContext.; Definition at line 131 of file RooAddGenContext.cxx. ◆ Class(). static TClass * RooAddGenContext::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAddGenContext::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAddGenContext::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 67 of file RooAddGenContext.h. ◆ create(). template<class Pdf_t > . std::unique_ptr< RooAbsGenContext > RooAddGenContext::create ; (; const Pdf_t & ; pdf, . const RooArgSet & ; vars, . const RooDataSet * ; prototype, . const RooArgSet * ; auxProto, . bool ; verbose . ). static . Returns a RooAddGenContext if possible, or, if the RooAddGenContext doesn't support this particular RooAddPdf or RooAddModel because it has negative coefficients, returns a generic RooGenContext. ; Templated function ",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:15861,Performance,cache,cache,15861,"sholds ();  Update the cumulative threshold table from the current coefficient values. ;  ;  Protected Member Functions inherited from RooAbsGenContext; virtual RooDataSet * createDataSet (const char *name, const char *title, const RooArgSet &obs);  Create an empty dataset to hold the events that will be generated. ;  ; void resampleData (double &ratio);  Rescale existing output buffer with given ratio. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< double > _coefThresh;  [_nComp] Array of coefficient thresholds ;  ; std::vector< std::unique_ptr< RooAbsGenContext > > _gcList;  List of component generator contexts. ;  ; bool _isModel;  Are we generating from a RooAddPdf or a RooAddModel. ;  ; Int_t _nComp;  Number of PDF components. ;  ; AddCacheElem * _pcache = nullptr;  ! RooAddPdf cache element ;  ; RooAbsPdf * _pdf;  Pointer to cloned p.d.f. ;  ; std::unique_ptr< RooArgSet > _pdfSet;  Set owned all nodes of internal clone of p.d.f. ;  ; std::unique_ptr< RooArgSet > _vars;  ;  Protected Attributes inherited from RooAbsGenContext; UInt_t _expectedEvents;  Number of expected events from extended p.d.f. ;  ; RooAbsPdf::ExtendMode _extendMode;  Extended mode capabilities of p.d.f. ;  ; RooDataSet * _genData = nullptr;  ! Data being generated ;  ; bool _isValid;  Is context in valid state? ;  ; Int_t _nextProtoIndex;  Next prototype event to load according to LUT. ;  ; TString _normRange;  Normalization range of pdf. ;  ; std::vector< Int_t > _protoOrder;  LUT with traversal order of prototype data. ;  ; const RooDataSet * _prototype;  Pointer to prototype dataset. ;  ; RooArgSet _protoVars;  Prototype observables. ;  ; RooArgSet _theEvent;  Pointer to observable event being generated. ;  ; bool _verbose;  Verbose messaging? ;  ;  Protected Attributes inherited from TNa",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:16428,Performance,load,load,16428,"l, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::vector< double > _coefThresh;  [_nComp] Array of coefficient thresholds ;  ; std::vector< std::unique_ptr< RooAbsGenContext > > _gcList;  List of component generator contexts. ;  ; bool _isModel;  Are we generating from a RooAddPdf or a RooAddModel. ;  ; Int_t _nComp;  Number of PDF components. ;  ; AddCacheElem * _pcache = nullptr;  ! RooAddPdf cache element ;  ; RooAbsPdf * _pdf;  Pointer to cloned p.d.f. ;  ; std::unique_ptr< RooArgSet > _pdfSet;  Set owned all nodes of internal clone of p.d.f. ;  ; std::unique_ptr< RooArgSet > _vars;  ;  Protected Attributes inherited from RooAbsGenContext; UInt_t _expectedEvents;  Number of expected events from extended p.d.f. ;  ; RooAbsPdf::ExtendMode _extendMode;  Extended mode capabilities of p.d.f. ;  ; RooDataSet * _genData = nullptr;  ! Data being generated ;  ; bool _isValid;  Is context in valid state? ;  ; Int_t _nextProtoIndex;  Next prototype event to load according to LUT. ;  ; TString _normRange;  Normalization range of pdf. ;  ; std::vector< Int_t > _protoOrder;  LUT with traversal order of prototype data. ;  ; const RooDataSet * _prototype;  Pointer to prototype dataset. ;  ; RooArgSet _protoVars;  Prototype observables. ;  ; RooArgSet _theEvent;  Pointer to observable event being generated. ;  ; bool _verbose;  Verbose messaging? ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 ))",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:23313,Performance,cache,cache,23313,emented from RooAbsGenContext. ◆ StreamerNVirtual(). void RooAddGenContext::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 67 of file RooAddGenContext.h. ◆ updateThresholds(). void RooAddGenContext::updateThresholds ; (; ). protected . Update the cumulative threshold table from the current coefficient values. ; Definition at line 189 of file RooAddGenContext.cxx. Member Data Documentation. ◆ _coefThresh. std::vector<double> RooAddGenContext::_coefThresh. protected . [_nComp] Array of coefficient thresholds ; Definition at line 63 of file RooAddGenContext.h. ◆ _gcList. std::vector<std::unique_ptr<RooAbsGenContext> > RooAddGenContext::_gcList. protected . List of component generator contexts. ; Definition at line 61 of file RooAddGenContext.h. ◆ _isModel. bool RooAddGenContext::_isModel. protected . Are we generating from a RooAddPdf or a RooAddModel. ; Definition at line 64 of file RooAddGenContext.h. ◆ _nComp. Int_t RooAddGenContext::_nComp. protected . Number of PDF components. ; Definition at line 62 of file RooAddGenContext.h. ◆ _pcache. AddCacheElem* RooAddGenContext::_pcache = nullptr. protected . ! RooAddPdf cache element ; Definition at line 65 of file RooAddGenContext.h. ◆ _pdf. RooAbsPdf* RooAddGenContext::_pdf. protected . Pointer to cloned p.d.f. ; Definition at line 60 of file RooAddGenContext.h. ◆ _pdfSet. std::unique_ptr<RooArgSet> RooAddGenContext::_pdfSet. protected . Set owned all nodes of internal clone of p.d.f. ; Definition at line 59 of file RooAddGenContext.h. ◆ _vars. std::unique_ptr<RooArgSet> RooAddGenContext::_vars. protected . Definition at line 58 of file RooAddGenContext.h. Libraries for RooAddGenContext:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAddGenContext.h; roofit/roofitcore/src/RooAddGenContext.cxx. RooAddGenContext. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:42 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddGenContext.html:3932,Security,hash,hash,3932," (bool);  ; void setVerbose (bool verbose=true);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classRooAddGenContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html
https://root.cern/doc/master/classRooAddition.html:1415,Availability,error,error,1415," sums the product of the terms in the two sets. ; Definition at line 27 of file RooAddition.h. Classes; class  CacheElem;  . Public Member Functions;  RooAddition ();  ;  RooAddition (const char *name, const char *title, const RooArgList &sumSet);  Constructor with a single set consisting of RooAbsReal. ;  ;  RooAddition (const char *name, const char *title, const RooArgList &sumSet1, const RooArgList &sumSet2);  Constructor with two sets of RooAbsReals. ;  ;  RooAddition (const RooAddition &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Calculate integral internally from appropriate integral cache. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; TObject * clone (const char *newname) const override;  ; double defaultErrorLevel () const override;  Return the default error level for MINUIT error analysis If the addition contains one or more RooNLLVars and no RooChi2Vars, return the defaultErrorLevel() of RooNLLVar. ;  ; void doEval (RooFit::EvalContext &) const override;  Compute addition of PDFs in batches. ;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &numVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; const RooArgList & list () const;  ; const RooArgList & list1 () const;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve project",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:1438,Availability,error,error,1438," sums the product of the terms in the two sets. ; Definition at line 27 of file RooAddition.h. Classes; class  CacheElem;  . Public Member Functions;  RooAddition ();  ;  RooAddition (const char *name, const char *title, const RooArgList &sumSet);  Constructor with a single set consisting of RooAbsReal. ;  ;  RooAddition (const char *name, const char *title, const RooArgList &sumSet1, const RooArgList &sumSet2);  Constructor with two sets of RooAbsReals. ;  ;  RooAddition (const RooAddition &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Calculate integral internally from appropriate integral cache. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; TObject * clone (const char *newname) const override;  ; double defaultErrorLevel () const override;  Return the default error level for MINUIT error analysis If the addition contains one or more RooNLLVars and no RooChi2Vars, return the defaultErrorLevel() of RooNLLVar. ;  ; void doEval (RooFit::EvalContext &) const override;  Compute addition of PDFs in batches. ;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &numVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; const RooArgList & list () const;  ; const RooArgList & list1 () const;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve project",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:14790,Availability,error,error,14790,"ine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override; ",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:32763,Availability,mask,mask,32763,"s);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const Ro",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:39020,Availability,error,error,39020,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:39109,Availability,error,error,39109,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:39264,Availability,error,error,39264,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:39561,Availability,error,error,39561,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:43645,Availability,error,error,43645,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption s",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:45362,Availability,error,error,45362,"ectory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the numb",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:45762,Availability,error,error,45762,"const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static vo",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:45984,Availability,error,error,45984,"rtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:46044,Availability,error,error,46044,"rtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:46180,Availability,error,errors,46180,"Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:46343,Availability,error,error,46343,"();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get st",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:46450,Availability,error,error,46450,"  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bo",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:52598,Availability,error,error,52598,"bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:63274,Availability,error,error,63274,"lemented from RooAbsReal.; Definition at line 315 of file RooAddition.cxx. ◆ Class(). static TClass * RooAddition::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAddition::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAddition::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 76 of file RooAddition.h. ◆ clone(). TObject * RooAddition::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 35 of file RooAddition.h. ◆ DeclFileName(). static const char * RooAddition::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 76 of file RooAddition.h. ◆ defaultErrorLevel(). double RooAddition::defaultErrorLevel ; (; ); const. overridevirtual . Return the default error level for MINUIT error analysis If the addition contains one or more RooNLLVars and no RooChi2Vars, return the defaultErrorLevel() of RooNLLVar. ; If the addition contains one ore more RooChi2Vars and no RooNLLVars, return the defaultErrorLevel() of RooChi2Var. If the addition contains neither or both issue a warning message and return a value of 1 ; Reimplemented from RooAbsReal.; Definition at line 198 of file RooAddition.cxx. ◆ doEval(). void RooAddition::doEval ; (; RooFit::EvalContext & ; ctx); const. overridevirtual . Compute addition of PDFs in batches. ; Reimplemented from RooAbsReal.; Definition at line 145 of file RooAddition.cxx. ◆ evaluate(). double RooAddition::evaluate ; (; ); const. overrideprotectedvirtual . Calculate and return current value of self. ; Implements RooAbsReal.; Definition at line 130 of file RooAddition.cxx. ◆ forceAnalyticalInt(). bool RooAddition::forceAnalyticalInt ; (; const RooAbsArg & ; ); const. inlineoverridevirtual . Reimplemented from RooAbsReal.; Definition at line 44 of file RooAddition.h. ◆ getAnaly",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:63297,Availability,error,error,63297,"lemented from RooAbsReal.; Definition at line 315 of file RooAddition.cxx. ◆ Class(). static TClass * RooAddition::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAddition::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAddition::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 76 of file RooAddition.h. ◆ clone(). TObject * RooAddition::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 35 of file RooAddition.h. ◆ DeclFileName(). static const char * RooAddition::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 76 of file RooAddition.h. ◆ defaultErrorLevel(). double RooAddition::defaultErrorLevel ; (; ); const. overridevirtual . Return the default error level for MINUIT error analysis If the addition contains one or more RooNLLVars and no RooChi2Vars, return the defaultErrorLevel() of RooNLLVar. ; If the addition contains one ore more RooChi2Vars and no RooNLLVars, return the defaultErrorLevel() of RooChi2Var. If the addition contains neither or both issue a warning message and return a value of 1 ; Reimplemented from RooAbsReal.; Definition at line 198 of file RooAddition.cxx. ◆ doEval(). void RooAddition::doEval ; (; RooFit::EvalContext & ; ctx); const. overridevirtual . Compute addition of PDFs in batches. ; Reimplemented from RooAbsReal.; Definition at line 145 of file RooAddition.cxx. ◆ evaluate(). double RooAddition::evaluate ; (; ); const. overrideprotectedvirtual . Calculate and return current value of self. ; Implements RooAbsReal.; Definition at line 130 of file RooAddition.cxx. ◆ forceAnalyticalInt(). bool RooAddition::forceAnalyticalInt ; (; const RooAbsArg & ; ); const. inlineoverridevirtual . Reimplemented from RooAbsReal.; Definition at line 44 of file RooAddition.h. ◆ getAnaly",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:8179,Deployability,configurat,configuration,8179,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:8209,Deployability,integrat,integration,8209,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:9140,Deployability,configurat,configuration,9140,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:9170,Deployability,integrat,integration,9170,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:13319,Deployability,integrat,integration,13319,"ficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:13331,Deployability,configurat,configuration,13331,"ficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:13446,Deployability,integrat,integration,13446,"CoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool h",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:13458,Deployability,configurat,configuration,13458,"CoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool h",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:17061,Deployability,integrat,integration,17061,"ct) PDF on specified frame. ;  ; virtual RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const;  Internal back-end function of plotOn() with named arguments. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member F",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:17073,Deployability,configurat,configuration,17073,"ct) PDF on specified frame. ;  ; virtual RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const;  Internal back-end function of plotOn() with named arguments. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member F",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:17194,Deployability,integrat,integrator,17194,"() with named arguments. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:17205,Deployability,configurat,configuration,17205,"() with named arguments. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:17238,Deployability,integrat,integration,17238,"() with named arguments. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:17250,Deployability,configurat,configuration,17250,"() with named arguments. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:17660,Deployability,integrat,integrator,17660,"TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedC",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:17671,Deployability,configurat,configuration,17671,"TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedC",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:17801,Deployability,integrat,integrator,17801,"se) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:17812,Deployability,configurat,configuration,17812,"se) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:29326,Deployability,update,updates,29326,"ode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; RooWorkspace * workspace () const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const RooAbsArg &arg) const;  Check if this is serving values to arg. ;  ; bool isValueServer (const char *name) const;  Check if this is serving values to an object with name name. ;  ; bool isShapeServer (const RooAbsArg &arg) const;  Check if this is serving shape to arg. ;  ; bool isShapeServer (const char *name) const;  Check if this is serving shape to an object with name name. ;  ; void leafNodeServerList (RooAbsColl",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:31377,Deployability,integrat,integrated,31377," *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all leaf nodes of the arg tree, starting with ourself as top node. ;  ; void branchNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all branch nodes of the arg tree starting with ourself as top node. ;  ; void treeNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool doBranch=true, bool doLeaf=true, bool valueOnly=false, bool recurseNonDerived=false) const;  Fill supplied list with nodes of the arg tree, following all server links, starting with ourself as top node. ;  ; virtual bool isFundamental () const;  Is this object a fundamental type that can be added to a dataset? Fundamental-type subclasses override this method to return true. ;  ; virtual bool isLValue () const;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool redirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool isRecursionStep=false);  Replace all direct servers of this object with the new servers in newServerList. ;  ; bool redirectServers (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:45505,Deployability,integrat,integration,45505,"const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging ",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:45517,Deployability,configurat,configuration,45517,"const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging ",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:49370,Deployability,integrat,integrated,49370,"ttachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:49428,Deployability,integrat,integration,49428,"ttachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:55257,Deployability,integrat,integration,55257," RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooObjCacheManager _cacheMgr;  ! The cache manager ;  ; RooArgList _ownedList;  List of owned components. ;  ; RooListProxy _set;  set of terms to be summed ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t ",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:64664,Deployability,integrat,integration,64664,"RooAbsReal.; Definition at line 198 of file RooAddition.cxx. ◆ doEval(). void RooAddition::doEval ; (; RooFit::EvalContext & ; ctx); const. overridevirtual . Compute addition of PDFs in batches. ; Reimplemented from RooAbsReal.; Definition at line 145 of file RooAddition.cxx. ◆ evaluate(). double RooAddition::evaluate ; (; ); const. overrideprotectedvirtual . Calculate and return current value of self. ; Implements RooAbsReal.; Definition at line 130 of file RooAddition.cxx. ◆ forceAnalyticalInt(). bool RooAddition::forceAnalyticalInt ; (; const RooAbsArg & ; ); const. inlineoverridevirtual . Reimplemented from RooAbsReal.; Definition at line 44 of file RooAddition.h. ◆ getAnalyticalIntegral(). Int_t RooAddition::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 262 of file RooAddition.cxx. ◆ IsA(). TClass * RooAddition::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 76 of file RooAddition.h. ◆ isBinnedDistribution(). bool RooAddition::isBinnedDistribution ; (; const RooArgSet & ; ); const. overridevirtual . Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ; Reimplemented from RooAbsReal.; Definition at line 321 of file RooAddition.cxx. ◆ list(). const RooArgList & RooAddition::list ; (; ); const. inline . Definition at line 42 of file RooAddition.h. ◆ list1(). const RooArgList & RooAdditi",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:64760,Deployability,integrat,integrate,64760,"t & ; ctx); const. overridevirtual . Compute addition of PDFs in batches. ; Reimplemented from RooAbsReal.; Definition at line 145 of file RooAddition.cxx. ◆ evaluate(). double RooAddition::evaluate ; (; ); const. overrideprotectedvirtual . Calculate and return current value of self. ; Implements RooAbsReal.; Definition at line 130 of file RooAddition.cxx. ◆ forceAnalyticalInt(). bool RooAddition::forceAnalyticalInt ; (; const RooAbsArg & ; ); const. inlineoverridevirtual . Reimplemented from RooAbsReal.; Definition at line 44 of file RooAddition.h. ◆ getAnalyticalIntegral(). Int_t RooAddition::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 262 of file RooAddition.cxx. ◆ IsA(). TClass * RooAddition::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 76 of file RooAddition.h. ◆ isBinnedDistribution(). bool RooAddition::isBinnedDistribution ; (; const RooArgSet & ; ); const. overridevirtual . Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ; Reimplemented from RooAbsReal.; Definition at line 321 of file RooAddition.cxx. ◆ list(). const RooArgList & RooAddition::list ; (; ); const. inline . Definition at line 42 of file RooAddition.h. ◆ list1(). const RooArgList & RooAddition::list1 ; (; ); const. inline . Definition at line 41 of file RooAddition.h. ◆ plotSamplingHint(). std::list< double > *",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:64832,Deployability,integrat,integration,64832,"t & ; ctx); const. overridevirtual . Compute addition of PDFs in batches. ; Reimplemented from RooAbsReal.; Definition at line 145 of file RooAddition.cxx. ◆ evaluate(). double RooAddition::evaluate ; (; ); const. overrideprotectedvirtual . Calculate and return current value of self. ; Implements RooAbsReal.; Definition at line 130 of file RooAddition.cxx. ◆ forceAnalyticalInt(). bool RooAddition::forceAnalyticalInt ; (; const RooAbsArg & ; ); const. inlineoverridevirtual . Reimplemented from RooAbsReal.; Definition at line 44 of file RooAddition.h. ◆ getAnalyticalIntegral(). Int_t RooAddition::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 262 of file RooAddition.cxx. ◆ IsA(). TClass * RooAddition::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 76 of file RooAddition.h. ◆ isBinnedDistribution(). bool RooAddition::isBinnedDistribution ; (; const RooArgSet & ; ); const. overridevirtual . Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ; Reimplemented from RooAbsReal.; Definition at line 321 of file RooAddition.cxx. ◆ list(). const RooArgList & RooAddition::list ; (; ); const. inline . Definition at line 42 of file RooAddition.h. ◆ list1(). const RooArgList & RooAddition::list1 ; (; ); const. inline . Definition at line 41 of file RooAddition.h. ◆ plotSamplingHint(). std::list< double > *",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:64844,Deployability,configurat,configuration,64844,"t & ; ctx); const. overridevirtual . Compute addition of PDFs in batches. ; Reimplemented from RooAbsReal.; Definition at line 145 of file RooAddition.cxx. ◆ evaluate(). double RooAddition::evaluate ; (; ); const. overrideprotectedvirtual . Calculate and return current value of self. ; Implements RooAbsReal.; Definition at line 130 of file RooAddition.cxx. ◆ forceAnalyticalInt(). bool RooAddition::forceAnalyticalInt ; (; const RooAbsArg & ; ); const. inlineoverridevirtual . Reimplemented from RooAbsReal.; Definition at line 44 of file RooAddition.h. ◆ getAnalyticalIntegral(). Int_t RooAddition::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 262 of file RooAddition.cxx. ◆ IsA(). TClass * RooAddition::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 76 of file RooAddition.h. ◆ isBinnedDistribution(). bool RooAddition::isBinnedDistribution ; (; const RooArgSet & ; ); const. overridevirtual . Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ; Reimplemented from RooAbsReal.; Definition at line 321 of file RooAddition.cxx. ◆ list(). const RooArgList & RooAddition::list ; (; ); const. inline . Definition at line 42 of file RooAddition.h. ◆ list1(). const RooArgList & RooAddition::list1 ; (; ); const. inline . Definition at line 41 of file RooAddition.h. ◆ plotSamplingHint(). std::list< double > *",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:64865,Deployability,integrat,integration,64865,"ion at line 145 of file RooAddition.cxx. ◆ evaluate(). double RooAddition::evaluate ; (; ); const. overrideprotectedvirtual . Calculate and return current value of self. ; Implements RooAbsReal.; Definition at line 130 of file RooAddition.cxx. ◆ forceAnalyticalInt(). bool RooAddition::forceAnalyticalInt ; (; const RooAbsArg & ; ); const. inlineoverridevirtual . Reimplemented from RooAbsReal.; Definition at line 44 of file RooAddition.h. ◆ getAnalyticalIntegral(). Int_t RooAddition::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 262 of file RooAddition.cxx. ◆ IsA(). TClass * RooAddition::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 76 of file RooAddition.h. ◆ isBinnedDistribution(). bool RooAddition::isBinnedDistribution ; (; const RooArgSet & ; ); const. overridevirtual . Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ; Reimplemented from RooAbsReal.; Definition at line 321 of file RooAddition.cxx. ◆ list(). const RooArgList & RooAddition::list ; (; ); const. inline . Definition at line 42 of file RooAddition.h. ◆ list1(). const RooArgList & RooAddition::list1 ; (; ); const. inline . Definition at line 41 of file RooAddition.h. ◆ plotSamplingHint(). std::list< double > * RooAddition::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevi",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:4008,Energy Efficiency,adapt,adaptor,4008,"Real;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:3998,Integrability,interface,interface,3998,"Real;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:8209,Integrability,integrat,integration,8209,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:9170,Integrability,integrat,integration,9170,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:9391,Integrability,depend,dependentVars,9391,"nction over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the present function. ;  ; RooFit::OwningPtr< RooAbsReal > createRunningIntegral (const RooArgSet &iset, const RooArgSet &nset={});  Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ;  ; RooFit::OwningPtr< RooAbsReal > createRunningIntegral (const RooArgSet &iset, const RooCmdArg &",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:13319,Integrability,integrat,integration,13319,"ficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:13446,Integrability,integrat,integration,13446,"CoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool h",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:14719,Integrability,message,message,14719,"ine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override; ",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:14796,Integrability,message,message,14796,"ine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override; ",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:17061,Integrability,integrat,integration,17061,"ct) PDF on specified frame. ;  ; virtual RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const;  Internal back-end function of plotOn() with named arguments. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member F",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:17194,Integrability,integrat,integrator,17194,"() with named arguments. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:17238,Integrability,integrat,integration,17238,"() with named arguments. ;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:17660,Integrability,integrat,integrator,17660,"TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedC",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:17801,Integrability,integrat,integrator,17801,"se) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:19204,Integrability,depend,dependent,19204," ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical ",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:19411,Integrability,depend,dependent,19411," transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the t",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:20511,Integrability,depend,dependsOn,20511,"gSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:20629,Integrability,depend,depend,20629,"gSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:20691,Integrability,depend,dependsOn,20691,"lone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depLis",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:20820,Integrability,depend,depend,20820,"lone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depLis",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:20900,Integrability,depend,dependsOn,20900,"st override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; ",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:21016,Integrability,depend,depend,21016,"st override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; ",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:21088,Integrability,depend,dependsOnValue,21088,"td::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgS",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:21199,Integrability,depend,depends,21199,"td::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgS",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
https://root.cern/doc/master/classRooAddition.html:21268,Integrability,depend,dependsOnValue,21268,"ing results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of ",MatchSource.WIKI,doc/master/classRooAddition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classRooAddition.html
